(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ref$, log, delay, FrameDriver, InputHandler, Timer, TetrisGame, GameState, DomRenderer, CanvasRenderer, ThreeJsRenderer, DebugOutput;
ref$ = require('std'), log = ref$.log, delay = ref$.delay;
FrameDriver = require('./frame-driver').FrameDriver;
InputHandler = require('./input-handler').InputHandler;
Timer = require('./timer').Timer;
TetrisGame = require('./tetris-game').TetrisGame;
GameState = require('./game-state').GameState;
DomRenderer = require('./renderers/dom').DomRenderer;
CanvasRenderer = require('./renderers/canvas').CanvasRenderer;
ThreeJsRenderer = require('./renderers/threejs').ThreeJsRenderer;
DebugOutput = require('./debug-output').DebugOutput;
document.addEventListener('DOMContentLoaded', function(){
  var gameOpts, renderOpts, inputHandler, gameState, tetrisGame, renderers, i$, len$, renderer, debugOutput, testEasing, frameDriver;
  gameOpts = {
    tileWidth: 10,
    tileHeight: 18,
    timeFactor: 10
  };
  renderOpts = {
    z: 20
  };
  inputHandler = new InputHandler;
  gameState = new GameState(gameOpts);
  tetrisGame = new TetrisGame(gameState);
  renderers = [new ThreeJsRenderer(renderOpts, gameState)];
  for (i$ = 0, len$ = renderers.length; i$ < len$; ++i$) {
    renderer = renderers[i$];
    renderer.appendTo(document.body);
  }
  debugOutput = new DebugOutput;
  InputHandler.on(192, function(){
    if (frameDriver.state.running) {
      return frameDriver.stop();
    } else {
      return frameDriver.start();
    }
  });
  testEasing = function(){
    var Ease, i$, ref$, len$, el, easeName, ease, lresult$, cnv, ctx, i, p, results$ = [];
    Ease = require('std').Ease;
    for (i$ = 0, len$ = (ref$ = document.querySelectorAll('canvas')).length; i$ < len$; ++i$) {
      el = ref$[i$];
      el.style.display = 'none';
    }
    for (easeName in Ease) {
      ease = Ease[easeName];
      lresult$ = [];
      cnv = document.createElement('canvas');
      cnv.width = 200;
      cnv.height = 200;
      cnv.style.background = 'white';
      cnv.style.borderLeft = "3px solid black";
      ctx = cnv.getContext('2d');
      document.body.appendChild(cnv);
      ctx.font = "14px monospace";
      ctx.fillText(easeName, 2, 16, 200);
      for (i$ = 0; i$ <= 100; ++i$) {
        i = i$;
        p = i / 100;
        lresult$.push(ctx.fillRect(2 * i, 200 - ease(p, 0, 200), 2, 2));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  frameDriver = new FrameDriver(function(Δt, time, frame){
    var i$, ref$, len$, renderer;
    gameState.Δt = Δt / gameOpts.timeFactor;
    gameState.elapsedTime = time / gameOpts.timeFactor;
    gameState.elapsedFrames = frame;
    gameState.inputState = inputHandler.changesSinceLastFrame();
    Timer.updateAll(Δt / gameOpts.timeFactor);
    gameState = tetrisGame.runFrame(gameState, Δt);
    for (i$ = 0, len$ = (ref$ = renderers).length; i$ < len$; ++i$) {
      renderer = ref$[i$];
      renderer.render(gameState, renderOpts);
    }
    if (debugOutput) {
      return debugOutput.render(gameState);
    }
  });
  return delay(1000, function(){
    return frameDriver.start();
  });
});
},{"./debug-output":7,"./frame-driver":8,"./game-state":9,"./input-handler":10,"./renderers/canvas":14,"./renderers/dom":19,"./renderers/threejs":32,"./tetris-game":40,"./timer":42,"std":36}],2:[function(require,module,exports){
/**
 * @author alteredq / http://alteredqualia.com/
 * @authod mrdoob / http://mrdoob.com/
 * @authod arodic / http://aleksandarrodic.com/
 */

THREE.StereoEffect = function ( renderer ) {

	// API

	this.separation = 3;

	// internals

	var _width, _height;

	var _position = new THREE.Vector3();
	var _quaternion = new THREE.Quaternion();
	var _scale = new THREE.Vector3();

	var _cameraL = new THREE.PerspectiveCamera();
	var _cameraR = new THREE.PerspectiveCamera();

	// initialization

	renderer.autoClear = false;

	this.setSize = function ( width, height ) {

		_width = width / 2;
		_height = height;

		renderer.setSize( width, height );

	};

	this.render = function ( scene, camera ) {

		scene.updateMatrixWorld();

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		camera.matrixWorld.decompose( _position, _quaternion, _scale );

		// left

		_cameraL.fov = camera.fov;
		_cameraL.aspect = 0.5 * camera.aspect;
		_cameraL.near = camera.near;
		_cameraL.far = camera.far;
		_cameraL.updateProjectionMatrix();

		_cameraL.position.copy( _position );
		_cameraL.quaternion.copy( _quaternion );
		_cameraL.translateX( - this.separation );

		// right

		_cameraR.near = camera.near;
		_cameraR.far = camera.far;
		_cameraR.projectionMatrix = _cameraL.projectionMatrix;

		_cameraR.position.copy( _position );
		_cameraR.quaternion.copy( _quaternion );
		_cameraR.translateX( this.separation );

		//

		renderer.setViewport( 0, 0, _width * 2, _height );
		renderer.clear();

		renderer.setViewport( 0, 0, _width, _height );
		renderer.render( scene, _cameraL );

		renderer.setViewport( _width, 0, _width, _height );
		renderer.render( scene, _cameraR );

	};

};

},{}],3:[function(require,module,exports){
/**
 * @author dmarcos / https://github.com/dmarcos
 * @author mrdoob / http://mrdoob.com
 */

THREE.VRControls = function ( object, onError ) {

	var scope = this;

	var vrInputs = [];

	function filterInvalidDevices( devices ) {

		// Exclude Cardboard position sensor if Oculus exists.

		var oculusDevices = devices.filter( function ( device ) {

			return device.deviceName.toLowerCase().indexOf('oculus') !== -1;

		} );

		if ( oculusDevices.length >= 1 ) {

			return devices.filter( function ( device ) {

				return device.deviceName.toLowerCase().indexOf('cardboard') === -1;

			} );

		} else {

			return devices;

		}

	}

	function gotVRDevices( devices ) {

		devices = filterInvalidDevices( devices );

		for ( var i = 0; i < devices.length; i ++ ) {

			if ( devices[ i ] instanceof PositionSensorVRDevice ) {

				vrInputs.push( devices[ i ] );

			}

		}

		if ( onError ) onError( 'HMD not available' );

	}

	if ( navigator.getVRDevices ) {

		navigator.getVRDevices().then( gotVRDevices );

	}

	// the Rift SDK returns the position in meters
	// this scale factor allows the user to define how meters
	// are converted to scene units.

	this.scale = 1;

	this.update = function () {

		for ( var i = 0; i < vrInputs.length; i ++ ) {

			var vrInput = vrInputs[ i ];

			var state = vrInput.getState();

			if ( state.orientation !== null ) {

				object.quaternion.copy( state.orientation );

			}

			if ( state.position !== null ) {

				object.position.copy( state.position ).multiplyScalar( scope.scale );

			}

		}

	};

	this.resetSensor = function () {

		for ( var i = 0; i < vrInputs.length; i ++ ) {

			var vrInput = vrInputs[ i ];

			if ( vrInput.resetSensor !== undefined ) {

				vrInput.resetSensor();

			} else if ( vrInput.zeroSensor !== undefined ) {

				vrInput.zeroSensor();

			}

		}

	};

	this.zeroSensor = function () {

		THREE.warn( 'THREE.VRControls: .zeroSensor() is now .resetSensor().' );
		this.resetSensor();

	};

};


},{}],4:[function(require,module,exports){

/**
 * @author dmarcos / https://github.com/dmarcos
 * @author mrdoob / http://mrdoob.com
 *
 * WebVR Spec: http://mozvr.github.io/webvr-spec/webvr.html
 *
 * Firefox: http://mozvr.com/downloads/
 * Chromium: https://drive.google.com/folderview?id=0BzudLt22BqGRbW9WTHMtOWMzNjQ&usp=sharing#list
 *
 */

THREE.VREffect = function ( renderer, onError ) {

	var vrHMD;
	var eyeTranslationL, eyeFOVL;
	var eyeTranslationR, eyeFOVR;

	function gotVRDevices( devices ) {

		for ( var i = 0; i < devices.length; i ++ ) {

			if ( devices[ i ] instanceof HMDVRDevice ) {

				vrHMD = devices[ i ];

				if ( vrHMD.getEyeParameters !== undefined ) {

					var eyeParamsL = vrHMD.getEyeParameters( 'left' );
					var eyeParamsR = vrHMD.getEyeParameters( 'right' );

					eyeTranslationL = eyeParamsL.eyeTranslation;
					eyeTranslationR = eyeParamsR.eyeTranslation;
					eyeFOVL = eyeParamsL.recommendedFieldOfView;
					eyeFOVR = eyeParamsR.recommendedFieldOfView;

				} else {

					// TODO: This is an older code path and not spec compliant.
					// It should be removed at some point in the near future.
					eyeTranslationL = vrHMD.getEyeTranslation( 'left' );
					eyeTranslationR = vrHMD.getEyeTranslation( 'right' );
					eyeFOVL = vrHMD.getRecommendedEyeFieldOfView( 'left' );
					eyeFOVR = vrHMD.getRecommendedEyeFieldOfView( 'right' );

				}

				break; // We keep the first we encounter

			}

		}

		if ( vrHMD === undefined ) {

			if ( onError ) onError( 'HMD not available' );

		}

	}

	if ( navigator.getVRDevices ) {

		navigator.getVRDevices().then( gotVRDevices );

	}

	//

	this.scale = 1;

	this.setSize = function( width, height ) {

		renderer.setSize( width, height );

	};

	// fullscreen

	var isFullscreen = false;

	var canvas = renderer.domElement;
	var fullscreenchange = canvas.mozRequestFullScreen ? 'mozfullscreenchange' : 'webkitfullscreenchange';

	document.addEventListener( fullscreenchange, function ( event ) {

		isFullscreen = document.mozFullScreenElement || document.webkitFullscreenElement;

	}, false );

	this.setFullScreen = function ( boolean ) {

		if ( vrHMD === undefined ) return;
		if ( isFullscreen === boolean ) return;

		if ( canvas.mozRequestFullScreen ) {

			canvas.mozRequestFullScreen( { vrDisplay: vrHMD } );

		} else if ( canvas.webkitRequestFullscreen ) {

			canvas.webkitRequestFullscreen( { vrDisplay: vrHMD } );

		}

	};

	// render

	var cameraL = new THREE.PerspectiveCamera();
	var cameraR = new THREE.PerspectiveCamera();

	this.render = function ( scene, camera ) {

		if ( vrHMD ) {

			var sceneL, sceneR;

			if ( scene instanceof Array ) {

				sceneL = scene[ 0 ];
				sceneR = scene[ 1 ];

			} else {

				sceneL = scene;
				sceneR = scene;

			}

			var size = renderer.getSize();
			size.width /= 2;

			renderer.enableScissorTest( true );
			renderer.clear();

			if ( camera.parent === undefined ) camera.updateMatrixWorld();

			cameraL.projectionMatrix = fovToProjection( eyeFOVL, true, camera.near, camera.far );
			cameraR.projectionMatrix = fovToProjection( eyeFOVR, true, camera.near, camera.far );

			camera.matrixWorld.decompose( cameraL.position, cameraL.quaternion, cameraL.scale );
			camera.matrixWorld.decompose( cameraR.position, cameraR.quaternion, cameraR.scale );

			cameraL.translateX( eyeTranslationL.x * this.scale );
			cameraR.translateX( eyeTranslationR.x * this.scale );

			// render left eye
			renderer.setViewport( 0, 0, size.width, size.height );
			renderer.setScissor( 0, 0, size.width, size.height );
			renderer.render( sceneL, cameraL );

			// render right eye
			renderer.setViewport( size.width, 0, size.width, size.height );
			renderer.setScissor( size.width, 0, size.width, size.height );
			renderer.render( sceneR, cameraR );

			renderer.enableScissorTest( false );

			return;

		}

		// Regular render mode if not HMD

		if ( scene instanceof Array ) scene = scene[ 0 ];

		renderer.render( scene, camera );

	};

	//

	function fovToNDCScaleOffset( fov ) {

		var pxscale = 2.0 / (fov.leftTan + fov.rightTan);
		var pxoffset = (fov.leftTan - fov.rightTan) * pxscale * 0.5;
		var pyscale = 2.0 / (fov.upTan + fov.downTan);
		var pyoffset = (fov.upTan - fov.downTan) * pyscale * 0.5;
		return { scale: [ pxscale, pyscale ], offset: [ pxoffset, pyoffset ] };

	}

	function fovPortToProjection( fov, rightHanded, zNear, zFar ) {

		rightHanded = rightHanded === undefined ? true : rightHanded;
		zNear = zNear === undefined ? 0.01 : zNear;
		zFar = zFar === undefined ? 10000.0 : zFar;

		var handednessScale = rightHanded ? -1.0 : 1.0;

		// start with an identity matrix
		var mobj = new THREE.Matrix4();
		var m = mobj.elements;

		// and with scale/offset info for normalized device coords
		var scaleAndOffset = fovToNDCScaleOffset(fov);

		// X result, map clip edges to [-w,+w]
		m[0 * 4 + 0] = scaleAndOffset.scale[0];
		m[0 * 4 + 1] = 0.0;
		m[0 * 4 + 2] = scaleAndOffset.offset[0] * handednessScale;
		m[0 * 4 + 3] = 0.0;

		// Y result, map clip edges to [-w,+w]
		// Y offset is negated because this proj matrix transforms from world coords with Y=up,
		// but the NDC scaling has Y=down (thanks D3D?)
		m[1 * 4 + 0] = 0.0;
		m[1 * 4 + 1] = scaleAndOffset.scale[1];
		m[1 * 4 + 2] = -scaleAndOffset.offset[1] * handednessScale;
		m[1 * 4 + 3] = 0.0;

		// Z result (up to the app)
		m[2 * 4 + 0] = 0.0;
		m[2 * 4 + 1] = 0.0;
		m[2 * 4 + 2] = zFar / (zNear - zFar) * -handednessScale;
		m[2 * 4 + 3] = (zFar * zNear) / (zNear - zFar);

		// W result (= Z in)
		m[3 * 4 + 0] = 0.0;
		m[3 * 4 + 1] = 0.0;
		m[3 * 4 + 2] = handednessScale;
		m[3 * 4 + 3] = 0.0;

		mobj.transpose();

		return mobj;
	}

	function fovToProjection( fov, rightHanded, zNear, zFar ) {

		var DEG2RAD = Math.PI / 180.0;

		var fovPort = {
			upTan: Math.tan( fov.upDegrees * DEG2RAD ),
			downTan: Math.tan( fov.downDegrees * DEG2RAD ),
			leftTan: Math.tan( fov.leftDegrees * DEG2RAD ),
			rightTan: Math.tan( fov.rightDegrees * DEG2RAD )
		};

		return fovPortToProjection( fovPort, rightHanded, zNear, zFar );

	}

};

},{}],5:[function(require,module,exports){
(function (global){

/*
 * MozVR Extensions to three.js
 *
 * A browserify wrapper for the VR helpers from MozVR's github repo.
 * https://github.com/MozVR/vr-web-examples/tree/master/threejs-vr-boilerplate
 *
 * The extension files are not module compatible and work by appending to the
 * THREE object. Do use them, we make the THREE object global, and then make
 * it the export value of this module.
 *
 */

global.THREE = require('../three.min.js');

console.groupCollapsed('Loading MozVR Extensions...');
require('./StereoEffect.js');
console.log('StereoEffect - OK');

require('./VRControls.js');
console.log('VRControls - OK');

require('./VREffect.js');
console.log('VREffect - OK');

console.groupEnd();

module.exports = THREE;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../three.min.js":6,"./StereoEffect.js":2,"./VRControls.js":3,"./VREffect.js":4}],6:[function(require,module,exports){
// threejs.org/license
'use strict';var THREE={REVISION:"72dev"};"object"===typeof module&&(module.exports=THREE);void 0===Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});THREE.log=function(){console.log.apply(console,arguments)};THREE.warn=function(){console.warn.apply(console,arguments)};THREE.error=function(){console.error.apply(console,arguments)};THREE.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2};THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;
THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;
THREE.MinEquation=103;THREE.MaxEquation=104;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=300;THREE.CubeReflectionMapping=301;THREE.CubeRefractionMapping=302;
THREE.EquirectangularReflectionMapping=303;THREE.EquirectangularRefractionMapping=304;THREE.SphericalReflectionMapping=305;THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;
THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.HalfFloatType=1025;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGBEFormat=THREE.RGBAFormat;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;THREE.RGBA_S3TC_DXT3_Format=2003;
THREE.RGBA_S3TC_DXT5_Format=2004;THREE.RGB_PVRTC_4BPPV1_Format=2100;THREE.RGB_PVRTC_2BPPV1_Format=2101;THREE.RGBA_PVRTC_4BPPV1_Format=2102;THREE.RGBA_PVRTC_2BPPV1_Format=2103;
THREE.Projector=function(){THREE.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector=function(a,b){THREE.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b)};this.unprojectVector=function(a,b){THREE.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b)};this.pickingRay=function(a,b){THREE.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};
THREE.CanvasRenderer=function(){THREE.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");this.domElement=document.createElement("canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};THREE.Color=function(a){return 3===arguments.length?this.setRGB(arguments[0],arguments[1],arguments[2]):this.set(a)};
THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(a){a instanceof THREE.Color?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(a,b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*
c:.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a};b=.5>=c?c*(1+b):c+b-c*b;c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))return a=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a),this.r=
Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;this.g=
a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);var c=0<b?1/b:1;this.r=Math.pow(a.r,c);this.g=Math.pow(a.g,c);this.b=Math.pow(a.b,c);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=
Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+
(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;
return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a){this.r=a[0];this.g=a[1];this.b=a[2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}};
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1};
THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get w(){return this._w},set w(a){this._w=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},copy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;
this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!1===a instanceof THREE.Euler)throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var c=Math.cos(a._x/2),d=Math.cos(a._y/2),e=Math.cos(a._z/2),f=Math.sin(a._x/2),g=Math.sin(a._y/2),h=Math.sin(a._z/2);"XYZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"YXZ"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e-f*d*h,this._z=
c*d*h-f*g*e,this._w=c*d*e+f*g*h):"ZXY"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e-f*g*h):"ZYX"===a.order?(this._x=f*d*e-c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e+f*g*h):"YZX"===a.order?(this._x=f*d*e+c*g*h,this._y=c*g*e+f*d*h,this._z=c*d*h-f*g*e,this._w=c*d*e-f*g*h):"XZY"===a.order&&(this._x=f*d*e-c*g*h,this._y=c*g*e-f*d*h,this._z=c*d*h+f*g*e,this._w=c*d*e+f*g*h);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,
b){var c=b/2,d=Math.sin(c);this._x=a.x*d;this._y=a.y*d;this._z=a.z*d;this._w=Math.cos(c);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=
.25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;this.normalize();return this}}(),inverse:function(){this.conjugate().normalize();return this},conjugate:function(){this._x*=
-1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},
multiply:function(a,b){return void 0!==b?(THREE.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,k=b._z,l=b._w;this._x=c*l+f*g+d*k-e*h;this._y=d*l+f*h+e*g-c*k;this._z=e*l+f*k+c*h-d*g;this._w=f*l-c*g-d*h-e*k;this.onChangeCallback();return this},multiplyVector3:function(a){THREE.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
return a.applyQuaternion(this)},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;var h=Math.acos(g),k=Math.sqrt(1-g*g);if(.001>Math.abs(k))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;g=Math.sin((1-b)*h)/k;h=
Math.sin(b*h)/k;this._w=f*g+this._w*h;this._x=c*g+this._x*h;this._y=d*g+this._y*h;this._z=e*g+this._z*h;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=
a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}};THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.Vector2.prototype={constructor:THREE.Vector2,set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,
b){if(void 0!==b)return THREE.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},
subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a):this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);
this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector2,b=new THREE.Vector2);a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=
Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},
distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},toArray:function(a,b){void 0===
a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];return this},clone:function(){return new THREE.Vector2(this.x,this.y)}};THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=
a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a;return function(b){!1===b instanceof THREE.Euler&&THREE.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromEuler(b));return this}}(),applyAxisAngle:function(){var a;return function(b,c){void 0===a&&(a=new THREE.Quaternion);this.applyQuaternion(a.setFromAxisAngle(b,
c));return this}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*
c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,l=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-l*-f;this.y=k*a+b*-f+l*-e-h*-g;this.z=l*a+b*-g+h*-f-k*-e;return this},project:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyProjection(a)}}(),
unproject:function(){var a;return function(b){void 0===a&&(a=new THREE.Matrix4);a.multiplyMatrices(b.matrixWorld,a.getInverse(b.projectionMatrix));return this.applyProjection(a)}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=
a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector3,
b=new THREE.Vector3);a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):
Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},
setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},cross:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=
e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){var c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;this.x=d*h-e*g;this.y=e*f-c*h;this.z=c*g-d*f;return this},projectOnVector:function(){var a,b;return function(c){void 0===a&&(a=new THREE.Vector3);a.copy(c).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a;return function(b){void 0===a&&(a=new THREE.Vector3);a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a;return function(b){void 0===
a&&(a=new THREE.Vector3);return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},setEulerFromRotationMatrix:function(a,b){THREE.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},
setEulerFromQuaternion:function(a,b){THREE.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(a){THREE.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){THREE.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,
b){THREE.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(a,b)},setFromMatrixPosition:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setFromMatrixScale:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length();a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;
return this},setFromMatrixColumn:function(a,b){var c=4*a,d=b.elements;this.x=d[c];this.y=d[c+1];this.z=d[c+2];return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=
a.array[b+2];return this},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}};THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;
case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,
b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return THREE.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=
a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>
b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){var b,c,d;a=a.elements;var e=a[0];d=a[4];var f=a[8],g=a[1],h=a[5],k=a[9];c=a[2];b=a[6];var l=a[10];if(.01>Math.abs(d-g)&&.01>Math.abs(f-c)&&.01>Math.abs(k-b)){if(.1>Math.abs(d+g)&&.1>Math.abs(f+c)&&.1>Math.abs(k+b)&&.1>Math.abs(e+h+l-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;h=(h+1)/2;l=(l+1)/2;d=(d+g)/4;f=(f+c)/4;k=(k+b)/4;e>h&&e>l?.01>e?(b=0,d=c=.707106781):(b=
Math.sqrt(e),c=d/b,d=f/b):h>l?.01>h?(b=.707106781,c=0,d=.707106781):(c=Math.sqrt(h),b=d/c,d=k/c):.01>l?(c=b=.707106781,d=0):(d=Math.sqrt(l),b=f/d,c=k/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-k)*(b-k)+(f-c)*(f-c)+(g-d)*(g-d));.001>Math.abs(a)&&(a=1);this.x=(b-k)/a;this.y=(f-c)/a;this.z=(g-d)/a;this.w=Math.acos((e+h+l-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&
(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new THREE.Vector4,b=new THREE.Vector4);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),floor:function(){this.x=
Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);
this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+
Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){this.subVectors(b,a).multiplyScalar(c).add(a);return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},
fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromAttribute:function(a,b,c){void 0===c&&(c=0);b=b*a.itemSize+c;this.x=a.array[b];this.y=a.array[b+1];this.z=a.array[b+2];this.w=a.array[b+3];return this},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}};
THREE.Euler=function(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||THREE.Euler.DefaultOrder};THREE.Euler.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");THREE.Euler.DefaultOrder="XYZ";
THREE.Euler.prototype={constructor:THREE.Euler,_x:0,_y:0,_z:0,_order:THREE.Euler.DefaultOrder,get x(){return this._x},set x(a){this._x=a;this.onChangeCallback()},get y(){return this._y},set y(a){this._y=a;this.onChangeCallback()},get z(){return this._z},set z(a){this._z=a;this.onChangeCallback()},get order(){return this._order},set order(a){this._order=a;this.onChangeCallback()},set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._order=d||this._order;this.onChangeCallback();return this},copy:function(a){this._x=
a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=THREE.Math.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],l=e[9],p=e[2],n=e[6],e=e[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-l,e),this._z=Math.atan2(-f,a)):(this._x=Math.atan2(n,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?(this._y=Math.atan2(g,e),this._z=Math.atan2(h,
k)):(this._y=Math.atan2(-p,a),this._z=0)):"ZXY"===b?(this._x=Math.asin(d(n,-1,1)),.99999>Math.abs(n)?(this._y=Math.atan2(-p,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):"ZYX"===b?(this._y=Math.asin(-d(p,-1,1)),.99999>Math.abs(p)?(this._x=Math.atan2(n,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-l,k),this._y=Math.atan2(-p,a)):(this._x=0,this._y=Math.atan2(g,e))):"XZY"===b?(this._z=
Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(n,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-l,e),this._y=0)):THREE.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a;return function(b,c,d){void 0===a&&(a=new THREE.Matrix4);a.makeRotationFromQuaternion(b);this.setFromRotationMatrix(a,c,d);return this}}(),setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,
b||this._order)},reorder:function(){var a=new THREE.Quaternion;return function(b){a.setFromEuler(this);this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._order;return a},toVector3:function(a){return a?
a.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){},clone:function(){return new THREE.Euler(this._x,this._y,this._z,this._order)}};THREE.Line3=function(a,b){this.start=void 0!==a?a:new THREE.Vector3;this.end=void 0!==b?b:new THREE.Vector3};
THREE.Line3.prototype={constructor:THREE.Line3,set:function(a,b){this.start.copy(a);this.end.copy(b);return this},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},center:function(a){return(a||new THREE.Vector3).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new THREE.Vector3).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(a,
b){var c=b||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);var e=b.dot(b),e=b.dot(a)/e;d&&(e=THREE.Math.clamp(e,0,1));return e}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new THREE.Vector3;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);
this.end.applyMatrix4(a);return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.Box2.prototype={constructor:THREE.Box2,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=
this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);
this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector2).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>
this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&
a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.Box3.prototype={constructor:THREE.Box3,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;return function(b,c){var d=a.copy(c).multiplyScalar(.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),setFromObject:function(){var a=new THREE.Vector3;return function(b){var c=this;b.updateMatrixWorld(!0);
this.makeEmpty();b.traverse(function(b){var e=b.geometry;if(void 0!==e)if(e instanceof THREE.Geometry)for(var f=e.vertices,e=0,g=f.length;e<g;e++)a.copy(f[e]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a);else if(e instanceof THREE.BufferGeometry&&void 0!==e.attributes.position)for(f=e.attributes.position.array,e=0,g=f.length;e<g;e+=3)a.set(f[e],f[e+1],f[e+2]),a.applyMatrix4(b.matrixWorld),c.expandByPoint(a)});return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},
makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(.5)},size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);
this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a,b){return(b||new THREE.Vector3).set((a.x-this.min.x)/(this.max.x-
this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=
new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,
this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);
this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}};THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]);0<arguments.length&&THREE.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")};
THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[3]=b;l[6]=c;l[1]=d;l[4]=e;l[7]=f;l[2]=g;l[5]=h;l[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){THREE.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
multiplyVector3Array:function(a){THREE.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=
a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){var c=a.elements,d=this.elements;d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];
c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");THREE.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];
a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8]]},clone:function(){return(new THREE.Matrix3).fromArray(this.elements)}};
THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);0<arguments.length&&THREE.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")};
THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(a,b,c,d,e,f,g,h,k,l,p,n,m,s,t,r){var v=this.elements;v[0]=a;v[4]=b;v[8]=c;v[12]=d;v[1]=e;v[5]=f;v[9]=g;v[13]=h;v[2]=k;v[6]=l;v[10]=p;v[14]=n;v[3]=m;v[7]=s;v[11]=t;v[15]=r;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){this.elements.set(a.elements);return this},extractPosition:function(a){THREE.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(a)},
copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){var d=this.elements;a.set(d[0],d[1],d[2]);b.set(d[4],d[5],d[6]);c.set(d[8],d[9],d[10]);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1);return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements;b=b.elements;var d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),
f=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*f;c[9]=b[9]*f;c[10]=b[10]*f;return this}}(),makeRotationFromEuler:function(a){!1===a instanceof THREE.Euler&&THREE.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){a=f*h;var k=f*e,
l=c*h,p=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=k+l*d;b[5]=a-p*d;b[9]=-c*g;b[2]=p-a*d;b[6]=l+k*d;b[10]=f*g}else"YXZ"===a.order?(a=g*h,k=g*e,l=d*h,p=d*e,b[0]=a+p*c,b[4]=l*c-k,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=k*c-l,b[6]=p+a*c,b[10]=f*g):"ZXY"===a.order?(a=g*h,k=g*e,l=d*h,p=d*e,b[0]=a-p*c,b[4]=-f*e,b[8]=l+k*c,b[1]=k+l*c,b[5]=f*h,b[9]=p-a*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(a=f*h,k=f*e,l=c*h,p=c*e,b[0]=g*h,b[4]=l*d-k,b[8]=a*d+p,b[1]=g*e,b[5]=p*d+a,b[9]=k*d-l,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===
a.order?(a=f*g,k=f*d,l=c*g,p=c*d,b[0]=g*h,b[4]=p-a*e,b[8]=l*e+k,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=k*e+l,b[10]=a-p*e):"XZY"===a.order&&(a=f*g,k=f*d,l=c*g,p=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=a*e+p,b[5]=f*h,b[9]=k*e-l,b[2]=l*e-k,b[6]=c*h,b[10]=p*e+a);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},setRotationFromQuaternion:function(a){THREE.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(a)},
makeRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,f=a.w,g=c+c,h=d+d,k=e+e;a=c*g;var l=c*h,c=c*k,p=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(p+e);b[4]=l-f;b[8]=c+h;b[1]=l+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+p);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f){var g=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(f,
c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(f,c).normalize());b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(THREE.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,f=c[0],g=c[4],h=c[8],
k=c[12],l=c[1],p=c[5],n=c[9],m=c[13],s=c[2],t=c[6],r=c[10],v=c[14],u=c[3],x=c[7],z=c[11],c=c[15],w=d[0],F=d[4],G=d[8],y=d[12],I=d[1],B=d[5],C=d[9],E=d[13],L=d[2],N=d[6],H=d[10],O=d[14],M=d[3],A=d[7],J=d[11],d=d[15];e[0]=f*w+g*I+h*L+k*M;e[4]=f*F+g*B+h*N+k*A;e[8]=f*G+g*C+h*H+k*J;e[12]=f*y+g*E+h*O+k*d;e[1]=l*w+p*I+n*L+m*M;e[5]=l*F+p*B+n*N+m*A;e[9]=l*G+p*C+n*H+m*J;e[13]=l*y+p*E+n*O+m*d;e[2]=s*w+t*I+r*L+v*M;e[6]=s*F+t*B+r*N+v*A;e[10]=s*G+t*C+r*H+v*J;e[14]=s*y+t*E+r*O+v*d;e[3]=u*w+x*I+z*L+c*M;e[7]=u*F+
x*B+z*N+c*A;e[11]=u*G+x*C+z*H+c*J;e[15]=u*y+x*E+z*O+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=
a;b[15]*=a;return this},multiplyVector3:function(a){THREE.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");return a.applyProjection(this)},multiplyVector4:function(a){THREE.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(a){THREE.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
return this.applyToVector3Array(a)},applyToVector3Array:function(){var a=new THREE.Vector3;return function(b,c,d){void 0===c&&(c=0);void 0===d&&(d=b.length);for(var e=0;e<d;e+=3,c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix4(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){THREE.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){THREE.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
return a.applyMatrix4(this)},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],l=a[2],p=a[6],n=a[10],m=a[14];return a[3]*(+e*h*p-d*k*p-e*g*n+c*k*n+d*g*m-c*h*m)+a[7]*(+b*h*m-b*k*n+e*f*n-d*f*m+d*k*l-e*h*l)+a[11]*(+b*k*p-b*g*m-e*f*p+c*f*m+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*p+b*g*n+d*f*p-c*f*n+c*h*l)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];
a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){THREE.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");var b=
this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],f=d[4],g=d[8],h=d[12],k=d[1],l=d[5],p=d[9],n=d[13],m=d[2],s=d[6],t=d[10],r=d[14],v=d[3],u=d[7],x=d[11],d=d[15];c[0]=p*r*u-n*t*u+n*s*x-l*r*x-p*s*d+l*t*d;c[4]=h*t*u-g*r*u-h*s*x+f*r*x+g*s*d-f*t*d;c[8]=g*n*u-h*p*u+h*l*x-f*n*x-g*l*d+f*p*d;c[12]=h*p*s-g*n*s-h*l*t+f*n*t+g*l*r-f*p*r;c[1]=n*t*v-p*r*v-n*m*x+
k*r*x+p*m*d-k*t*d;c[5]=g*r*v-h*t*v+h*m*x-e*r*x-g*m*d+e*t*d;c[9]=h*p*v-g*n*v-h*k*x+e*n*x+g*k*d-e*p*d;c[13]=g*n*m-h*p*m+h*k*t-e*n*t-g*k*r+e*p*r;c[2]=l*r*v-n*s*v+n*m*u-k*r*u-l*m*d+k*s*d;c[6]=h*s*v-f*r*v-h*m*u+e*r*u+f*m*d-e*s*d;c[10]=f*n*v-h*l*v+h*k*u-e*n*u-f*k*d+e*l*d;c[14]=h*l*m-f*n*m-h*k*s+e*n*s+f*k*r-e*l*r;c[3]=p*s*v-l*t*v-p*m*u+k*t*u+l*m*x-k*s*x;c[7]=f*t*v-g*s*v+g*m*u-e*t*u-f*m*x+e*s*x;c[11]=g*l*v-f*p*v-g*k*u+e*p*u+f*k*x-e*l*x;c[15]=f*p*m-g*l*m+g*k*s-e*p*s-f*k*t+e*l*t;c=e*c[0]+k*c[4]+m*c[8]+v*c[12];
if(0==c){if(b)throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");THREE.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},translate:function(a){THREE.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(a){THREE.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(a){THREE.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(a){THREE.error("THREE.Matrix4: .rotateZ() has been removed.")},
rotateByAxis:function(a,b){THREE.error("THREE.Matrix4: .rotateByAxis() has been removed.")},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,
c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,f=a.x,g=a.y,h=a.z,k=e*f,l=e*g;this.set(k*f+c,k*g-d*h,k*h+d*g,0,k*g+
d*h,l*g+c,l*h-d*f,0,k*h-d*g,l*h+d*f,e*h*h+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new THREE.Vector3,b=new THREE.Matrix4;return function(c,d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];
c.y=f[13];c.z=f[14];b.elements.set(this.elements);c=1/g;var f=1/h,l=1/k;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=l;b.elements[9]*=l;b.elements[10]*=l;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makeFrustum:function(a,b,c,d,e,f){var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(d-c);g[9]=(d+c)/(d-c);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;
g[11]=-1;g[15]=0;return this},makePerspective:function(a,b,c,d){a=c*Math.tan(THREE.Math.degToRad(.5*a));var e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=b-a,k=c-d,l=f-e;g[0]=2/h;g[4]=0;g[8]=0;g[12]=-((b+a)/h);g[1]=0;g[5]=2/k;g[9]=0;g[13]=-((c+d)/k);g[2]=0;g[6]=0;g[10]=-2/l;g[14]=-((f+e)/l);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},fromArray:function(a){this.elements.set(a);return this},toArray:function(){var a=this.elements;return[a[0],
a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]]},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)}};THREE.Ray=function(a,b){this.origin=void 0!==a?a:new THREE.Vector3;this.direction=void 0!==b?b:new THREE.Vector3};
THREE.Ray.prototype={constructor:THREE.Ray,set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new THREE.Vector3).copy(this.direction).multiplyScalar(a).add(this.origin)},recast:function(){var a=new THREE.Vector3;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){var c=b||new THREE.Vector3;c.subVectors(a,this.origin);
var d=c.dot(this.direction);return 0>d?c.copy(this.origin):c.copy(this.direction).multiplyScalar(d).add(this.origin)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){var c=a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceTo(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceTo(b)}}(),distanceSqToSegment:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);
b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),l=c.dot(this.direction),p=-c.dot(b),n=c.lengthSq(),m=Math.abs(1-k*k),s;0<m?(d=k*p-l,e=k*l-p,s=h*m,0<=d?e>=-s?e<=s?(h=1/m,d*=h,e*=h,k=d*(d+k*e+2*l)+e*(k*d+e+2*p)+n):(e=h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+n):(e=-h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+n):e<=-s?(d=Math.max(0,-(-k*h+l)),e=0<d?-h:Math.min(Math.max(-h,-p),h),k=-d*d+e*(e+2*p)+n):e<=s?(d=0,e=Math.min(Math.max(-h,-p),h),k=e*(e+
2*p)+n):(d=Math.max(0,-(k*h+l)),e=0<d?h:Math.min(Math.max(-h,-p),h),k=-d*d+e*(e+2*p)+n)):(e=0<k?-h:h,d=Math.max(0,-(k*e+l)),k=-d*d+e*(e+2*p)+n);f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),isIntersectionSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},intersectSphere:function(){var a=new THREE.Vector3;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d,f=b.radius*b.radius;
if(e>f)return null;f=Math.sqrt(f-e);e=d-f;d+=f;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),isIntersectionPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0==b)return 0==a.distanceToPoint(this.origin)?0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){var c=this.distanceToPlane(a);return null===c?null:this.at(c,b)},
isIntersectionBox:function(){var a=new THREE.Vector3;return function(b){return null!==this.intersectBox(b,a)}}(),intersectBox:function(a,b){var c,d,e,f,g;d=1/this.direction.x;f=1/this.direction.y;g=1/this.direction.z;var h=this.origin;0<=d?(c=(a.min.x-h.x)*d,d*=a.max.x-h.x):(c=(a.max.x-h.x)*d,d*=a.min.x-h.x);0<=f?(e=(a.min.y-h.y)*f,f*=a.max.y-h.y):(e=(a.max.y-h.y)*f,f*=a.min.y-h.y);if(c>f||e>d)return null;if(e>c||c!==c)c=e;if(f<d||d!==d)d=f;0<=g?(e=(a.min.z-h.z)*g,g*=a.max.z-h.z):(e=(a.max.z-h.z)*
g,g*=a.min.z-h.z);if(c>g||e>d)return null;if(e>c||c!==c)c=e;if(g<d||d!==d)d=g;return 0>d?null:this.at(0<=c?c:d,b)},intersectTriangle:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Vector3;return function(e,f,g,h,k){b.subVectors(f,e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));
if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.direction.add(this.origin).applyMatrix4(a);this.origin.applyMatrix4(a);this.direction.sub(this.origin);this.direction.normalize();return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}};THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new THREE.Box3;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).center(d);for(var e=0,f=0,g=b.length;f<g;f++)e=Math.max(e,d.distanceToSquared(b[f]));this.radius=Math.sqrt(e);return this}}(),copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=
this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);
return a},applyMatrix4:function(a){this.center.applyMatrix4(a);this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};
THREE.Frustum=function(a,b,c,d,e,f){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==f?f:new THREE.Plane]};
THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],l=c[7],p=c[8],n=c[9],m=c[10],s=c[11],t=c[12],r=c[13],v=c[14],c=c[15];b[0].setComponents(f-a,l-g,s-p,c-t).normalize();b[1].setComponents(f+
a,l+g,s+p,c+t).normalize();b[2].setComponents(f+d,l+h,s+n,c+r).normalize();b[3].setComponents(f-d,l-h,s-n,c-r).normalize();b[4].setComponents(f-e,l-k,s-m,c-v).normalize();b[5].setComponents(f+e,l+k,s+m,c+v).normalize();return this},intersectsObject:function(){var a=new THREE.Sphere;return function(b){var c=b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere);a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,
c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),
containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.Plane.prototype={constructor:THREE.Plane,set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,
c);return this}}(),copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),f=this.normal.dot(e);if(0==f){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return f=-(b.start.dot(this.normal)+this.constant)/f,0>f||1<f?void 0:d.copy(e).multiplyScalar(f).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Matrix3;return function(d,e){var f=e||c.getNormalMatrix(d),f=a.copy(this.normal).applyMatrix3(f),g=this.coplanarPoint(b);g.applyMatrix4(d);this.setFromNormalAndCoplanarPoint(f,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}};
THREE.Math={generateUUID:function(){var a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),b=Array(36),c=0,d;return function(){for(var e=0;36>e;e++)8==e||13==e||18==e||23==e?b[e]="-":14==e?b[e]="4":(2>=c&&(c=33554432+16777216*Math.random()|0),d=c&15,c>>=4,b[e]=a[19==e?d&3|8:d]);return b.join("")}}(),clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=
b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return Math.floor(this.randFloat(a,b))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(){var a=Math.PI/180;return function(b){return b*a}}(),radToDeg:function(){var a=
180/Math.PI;return function(b){return b*a}}(),isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},nextPowerOfTwo:function(a){a--;a|=a>>1;a|=a>>2;a|=a>>4;a|=a>>8;a|=a>>16;a++;return a}};
THREE.Spline=function(a){function b(a,b,c,d,e,f,g){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*g+(-3*(b-c)-2*a-d)*f+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,f,g,h,k,l,p,n,m;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;f=Math.floor(e);g=e-f;c[0]=0===f?f:f-1;c[1]=f;c[2]=f>this.points.length-2?this.points.length-1:f+1;c[3]=f>this.points.length-3?this.points.length-1:f+
2;l=this.points[c[0]];p=this.points[c[1]];n=this.points[c[2]];m=this.points[c[3]];h=g*g;k=g*h;d.x=b(l.x,p.x,n.x,m.x,g,h,k);d.y=b(l.y,p.y,n.y,m.y,g,h,k);d.z=b(l.z,p.z,n.z,m.z,g,h,k);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,f=new THREE.Vector3,g=new THREE.Vector3,h=[],k=0;h[0]=0;a||(a=100);c=this.points.length*a;f.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),g.copy(d),k+=g.distanceTo(f),f.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(h[b]=k,e=b);h[h.length]=k;return{chunks:h,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,f,g,h=[],k=new THREE.Vector3,m=this.getLength();h.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=m.chunks[b]-m.chunks[b-1];g=Math.ceil(a*c/m.total);e=(b-1)/(this.points.length-1);f=b/(this.points.length-1);for(c=1;c<g-1;c++)d=e+1/g*c*(f-e),d=this.getPoint(d),h.push(k.copy(d).clone());
h.push(k.copy(this.points[b]).clone())}this.points=h}};THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var l=d*k-e*e;h=h||new THREE.Vector3;if(0==l)return h.set(-2,-1,-1);l=1/l;k=(k*f-e*g)*l;d=(d*g-e*f)*l;return h.set(1-k-d,d,k)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||
new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)},
clone:function(){return(new THREE.Triangle).copy(this)}};THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.oldTime=this.startTime=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==self.performance&&void 0!==self.performance.now?self.performance.now():Date.now(),
a=.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}};THREE.EventDispatcher=function(){};
THREE.EventDispatcher.prototype={constructor:THREE.EventDispatcher,apply:function(a){a.addEventListener=THREE.EventDispatcher.prototype.addEventListener;a.hasEventListener=THREE.EventDispatcher.prototype.hasEventListener;a.removeEventListener=THREE.EventDispatcher.prototype.removeEventListener;a.dispatchEvent=THREE.EventDispatcher.prototype.dispatchEvent},addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&
c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)?!0:!1},removeEventListener:function(a,b){if(void 0!==this._listeners){var c=this._listeners[a];if(void 0!==c){var d=c.indexOf(b);-1!==d&&c.splice(d,1)}}},dispatchEvent:function(a){if(void 0!==this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var c=[],d=b.length,e=0;e<d;e++)c[e]=b[e];for(e=0;e<d;e++)c[e].call(this,a)}}}};
(function(a){a.Raycaster=function(b,c,f,g){this.ray=new a.Ray(b,c);this.near=f||0;this.far=g||Infinity;this.params={Sprite:{},Mesh:{},PointCloud:{threshold:1},LOD:{},Line:{}}};var b=function(a,b){return a.distance-b.distance},c=function(a,b,f,g){a.raycast(b,f);if(!0===g){a=a.children;g=0;for(var h=a.length;g<h;g++)c(a[g],b,f,!0)}};a.Raycaster.prototype={constructor:a.Raycaster,precision:1E-4,linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(b,c){c instanceof a.PerspectiveCamera?
(this.ray.origin.setFromMatrixPosition(c.matrixWorld),this.ray.direction.set(b.x,b.y,.5).unproject(c).sub(this.ray.origin).normalize()):c instanceof a.OrthographicCamera?(this.ray.origin.set(b.x,b.y,-1).unproject(c),this.ray.direction.set(0,0,-1).transformDirection(c.matrixWorld)):a.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,e){var f=[];c(a,this,f,e);f.sort(b);return f},intersectObjects:function(d,e){var f=[];if(!1===d instanceof Array)return a.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
f;for(var g=0,h=d.length;g<h;g++)c(d[g],this,f,e);f.sort(b);return f}}})(THREE);
THREE.Object3D=function(){Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Object3D";this.parent=void 0;this.children=[];this.up=THREE.Object3D.DefaultUp.clone();var a=new THREE.Vector3,b=new THREE.Euler,c=new THREE.Quaternion,d=new THREE.Vector3(1,1,1);b.onChange(function(){c.setFromEuler(b,!1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,
value:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d}});this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixAutoUpdate=!0;this.matrixWorldNeedsUpdate=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.userData={}};THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0);
THREE.Object3D.prototype={constructor:THREE.Object3D,get eulerOrder(){THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");return this.rotation.order},set eulerOrder(a){THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");this.rotation.order=a},get useQuaternion(){THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set useQuaternion(a){THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},
applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,!0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new THREE.Quaternion;return function(b,c){a.setFromAxisAngle(b,
c);this.quaternion.multiply(a);return this}}(),rotateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new THREE.Vector3;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));
return this}}(),translate:function(a,b){THREE.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)},translateX:function(){var a=new THREE.Vector3(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new THREE.Vector3(0,1,0);return function(b){return this.translateOnAxis(a,b)}}(),translateZ:function(){var a=new THREE.Vector3(0,0,1);return function(b){return this.translateOnAxis(a,
b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new THREE.Matrix4;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new THREE.Matrix4;return function(b){a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return THREE.error("THREE.Object3D.add: object can't be added as a child of itself.",
a),this;a instanceof THREE.Object3D?(void 0!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):THREE.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this},remove:function(a){if(1<arguments.length)for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);b=this.children.indexOf(a);-1!==b&&(a.parent=void 0,a.dispatchEvent({type:"removed"}),this.children.splice(b,1))},getChildByName:function(a){THREE.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
return this.getObjectByName(a)},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,b);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new THREE.Vector3;this.updateMatrixWorld(!0);return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=
new THREE.Vector3,b=new THREE.Vector3;return function(c){c=c||new THREE.Quaternion;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Euler;this.getWorldQuaternion(a);return b.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new THREE.Vector3,b=new THREE.Quaternion;return function(c){c=c||new THREE.Vector3;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,
b,c);return c}}(),getWorldDirection:function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverseVisible(a)}},traverseAncestors:function(a){this.parent&&(a(this.parent),
this.parent.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},
toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var c=void 0===a,d={},e;c&&(a={geometries:{},materials:{}},e={version:4.4,type:"Object",generator:"Object3D.toJSON"});d.type=this.type;d.uuid=this.uuid;""!==this.name&&(d.name=this.name);"{}"!==JSON.stringify(this.userData)&&(d.userData=this.userData);!0!==this.visible&&(d.visible=this.visible);d.matrix=this.matrix.toArray();if(0<this.children.length){d.children=[];for(var f=0;f<this.children.length;f++)d.children.push(this.children[f].toJSON(a).object)}return c?
{metadata:e,geometries:b(a.geometries),materials:b(a.materials),object:d}:{object:d}},clone:function(a,b){void 0===a&&(a=new THREE.Object3D);void 0===b&&(b=!0);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.quaternion.copy(this.quaternion);a.scale.copy(this.scale);a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.visible=this.visible;
a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;a.userData=JSON.parse(JSON.stringify(this.userData));if(!0===b)for(var c=0;c<this.children.length;c++)a.add(this.children[c].clone());return a}};THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);THREE.Object3DIdCount=0;
THREE.Face3=function(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==f?f:0};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.materialIndex=this.materialIndex;for(var b=0,c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();return a}};
THREE.Face4=function(a,b,c,d,e,f,g){THREE.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new THREE.Face3(a,b,c,e,f,g)};THREE.BufferAttribute=function(a,b){this.array=a;this.itemSize=b;this.needsUpdate=!1};
THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get length(){return this.array.length},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},setX:function(a,b){this.array[a*this.itemSize]=b;return this},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},setXY:function(a,
b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},clone:function(){return new THREE.BufferAttribute(new this.array.constructor(this.array),this.itemSize)}};
THREE.Int8Attribute=function(a,b){THREE.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Uint8Attribute=function(a,b){THREE.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint8ClampedAttribute=function(a,b){THREE.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Int16Attribute=function(a,b){THREE.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint16Attribute=function(a,b){THREE.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Int32Attribute=function(a,b){THREE.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Uint32Attribute=function(a,b){THREE.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.Float32Attribute=function(a,b){THREE.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};
THREE.Float64Attribute=function(a,b){THREE.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");return new THREE.BufferAttribute(a,b)};THREE.DynamicBufferAttribute=function(a,b){THREE.BufferAttribute.call(this,a,b);this.updateRange={offset:0,count:-1}};THREE.DynamicBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype);THREE.DynamicBufferAttribute.prototype.constructor=THREE.DynamicBufferAttribute;
THREE.DynamicBufferAttribute.prototype.clone=function(){return new THREE.DynamicBufferAttribute(new this.array.constructor(this.array),this.itemSize)};THREE.InstancedBufferAttribute=function(a,b,c,d){THREE.DynamicBufferAttribute.call(this,a,b);this.dynamic=d||!1;this.meshPerAttribute=c||1};THREE.InstancedBufferAttribute.prototype=Object.create(THREE.DynamicBufferAttribute.prototype);THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute;
THREE.InstancedBufferAttribute.prototype.clone=function(){return new THREE.InstancedBufferAttribute(new this.array.constructor(this.array),this.itemSize,this.meshPerAttribute,this.dynamic)};THREE.InterleavedBuffer=function(a,b,c){this.array=a;this.stride=b;this.needsUpdate=!1;this.dynamic=c||!1;this.updateRange={offset:0,count:-1}};
THREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return new THREE.InterleavedBuffer(new this.array.constructor(this.array),this.stride,this.dynamic)}};
THREE.InstancedInterleavedBuffer=function(a,b,c,d){THREE.InterleavedBuffer.call(this,a,b,c);this.meshPerAttribute=d||1};THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype);THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer;THREE.InstancedInterleavedBuffer.prototype.clone=function(){return new THREE.InstancedInterleavedBuffer(new this.array.constructor(this.array),this.stride,this.dynamic,this.meshPerAttribute)};
THREE.InterleavedBufferAttribute=function(a,b,c){this.data=a;this.itemSize=b;this.offset=c};
THREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){return this.itemSize*this.data.array.length/this.data.stride},setX:function(a,b){this.data.array[a*this.data.stride+this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+
1]=c;return this},setXYZ:function(a,b,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}};
THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=
this.tangentsNeedUpdate=this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=
this.verticesNeedUpdate=!0},fromBufferGeometry:function(a){for(var b=this,c=a.attributes,d=c.position.array,e=void 0!==c.index?c.index.array:void 0,f=void 0!==c.normal?c.normal.array:void 0,g=void 0!==c.color?c.color.array:void 0,h=void 0!==c.uv?c.uv.array:void 0,k=[],l=[],p=c=0;c<d.length;c+=3,p+=2)b.vertices.push(new THREE.Vector3(d[c],d[c+1],d[c+2])),void 0!==f&&k.push(new THREE.Vector3(f[c],f[c+1],f[c+2])),void 0!==g&&b.colors.push(new THREE.Color(g[c],g[c+1],g[c+2])),void 0!==h&&l.push(new THREE.Vector2(h[p],
h[p+1]));var n=function(a,c,d){var e=void 0!==f?[k[a].clone(),k[c].clone(),k[d].clone()]:[],m=void 0!==g?[b.colors[a].clone(),b.colors[c].clone(),b.colors[d].clone()]:[];b.faces.push(new THREE.Face3(a,c,d,e,m));void 0!==h&&b.faceVertexUvs[0].push([l[a].clone(),l[c].clone(),l[d].clone()])};if(void 0!==e)if(d=a.drawcalls,0<d.length)for(c=0;c<d.length;c++)for(var p=d[c],m=p.start,s=p.count,t=p.index,p=m,m=m+s;p<m;p+=3)n(t+e[p],t+e[p+1],t+e[p+2]);else for(c=0;c<e.length;c+=3)n(e[c],e[c+1],e[c+2]);else for(c=
0;c<d.length/3;c+=3)n(c,c+1,c+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.applyMatrix((new THREE.Matrix4).setPosition(a));return a},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],
g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d;d=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)d[b]=new THREE.Vector3;if(a){var e,f,g,h=new THREE.Vector3,k=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],e=this.vertices[c.a],f=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,f),k.subVectors(e,f),h.cross(k),d[c.a].add(h),d[c.b].add(h),d[c.c].add(h)}else for(a=
0,b=this.faces.length;a<b;a++)c=this.faces[a],d[c.a].add(c.normal),d[c.b].add(c.normal),d[c.c].add(c.normal);b=0;for(c=this.vertices.length;b<c;b++)d[b].normalize();a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],c.vertexNormals[0]=d[c.a].clone(),c.vertexNormals[1]=d[c.b].clone(),c.vertexNormals[2]=d[c.c].clone()},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<d;c++)for(e=this.faces[c],e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=
e.normal.clone(),e.__originalVertexNormals||(e.__originalVertexNormals=[]),a=0,b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone();var f=new THREE.Geometry;f.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];e=this.morphNormals[a].faceNormals;var g=
this.morphNormals[a].vertexNormals,h,k;c=0;for(d=this.faces.length;c<d;c++)h=new THREE.Vector3,k={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},e.push(h),g.push(k)}g=this.morphNormals[a];f.vertices=this.morphTargets[a].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(e.normal),k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])}c=0;for(d=this.faces.length;c<
d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){var a,b,c,d,e,f,g,h,k,l,p,n,m,s,t,r,v,u=[],x=[];c=new THREE.Vector3;var z=new THREE.Vector3,w=new THREE.Vector3,F=new THREE.Vector3,G=new THREE.Vector3;a=0;for(b=this.vertices.length;a<b;a++)u[a]=new THREE.Vector3,x[a]=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)e=this.faces[a],f=this.faceVertexUvs[0][a],d=e.a,v=e.b,e=e.c,g=this.vertices[d],h=this.vertices[v],k=this.vertices[e],
l=f[0],p=f[1],n=f[2],f=h.x-g.x,m=k.x-g.x,s=h.y-g.y,t=k.y-g.y,h=h.z-g.z,g=k.z-g.z,k=p.x-l.x,r=n.x-l.x,p=p.y-l.y,l=n.y-l.y,n=1/(k*l-r*p),c.set((l*f-p*m)*n,(l*s-p*t)*n,(l*h-p*g)*n),z.set((k*m-r*f)*n,(k*t-r*s)*n,(k*g-r*h)*n),u[d].add(c),u[v].add(c),u[e].add(c),x[d].add(z),x[v].add(z),x[e].add(z);z=["a","b","c","d"];a=0;for(b=this.faces.length;a<b;a++)for(e=this.faces[a],c=0;c<Math.min(e.vertexNormals.length,3);c++)G.copy(e.vertexNormals[c]),d=e[z[c]],v=u[d],w.copy(v),w.sub(G.multiplyScalar(G.dot(v))).normalize(),
F.crossVectors(e.vertexNormals[c],v),d=F.dot(x[d]),d=0>d?-1:1,e.vertexTangents[c]=new THREE.Vector4(w.x,w.y,w.z,d);this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(!1===a instanceof THREE.Geometry)THREE.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",a);else{var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,l=this.faceVertexUvs[0];a=a.faceVertexUvs[0];void 0===c&&(c=0);void 0!==b&&(d=(new THREE.Matrix3).getNormalMatrix(b));for(var p=0,n=g.length;p<n;p++){var m=g[p].clone();void 0!==b&&m.applyMatrix4(b);f.push(m)}p=0;for(n=k.length;p<
n;p++){var g=k[p],s,t=g.vertexNormals,r=g.vertexColors,m=new THREE.Face3(g.a+e,g.b+e,g.c+e);m.normal.copy(g.normal);void 0!==d&&m.normal.applyMatrix3(d).normalize();b=0;for(f=t.length;b<f;b++)s=t[b].clone(),void 0!==d&&s.applyMatrix3(d).normalize(),m.vertexNormals.push(s);m.color.copy(g.color);b=0;for(f=r.length;b<f;b++)s=r[b],m.vertexColors.push(s.clone());m.materialIndex=g.materialIndex+c;h.push(m)}p=0;for(n=a.length;p<n;p++)if(c=a[p],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());
l.push(d)}}},mergeMesh:function(a){!1===a instanceof THREE.Mesh?THREE.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a):(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix))},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),f,g;f=0;for(g=this.vertices.length;f<g;f++)d=this.vertices[f],d=Math.round(d.x*e)+"_"+Math.round(d.y*e)+"_"+Math.round(d.z*e),void 0===a[d]?(a[d]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[d]];a=[];f=0;for(g=this.faces.length;f<
g;f++)for(e=this.faces[f],e.a=c[e.a],e.b=c[e.b],e.c=c[e.c],e=[e.a,e.b,e.c],d=0;3>d;d++)if(e[d]==e[(d+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(e=a[f],this.faces.splice(e,1),c=0,g=this.faceVertexUvs.length;c<g;c++)this.faceVertexUvs[c].splice(e,1);f=this.vertices.length-b.length;this.vertices=b;return f},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==l[b])return l[b];l[b]=k.length/3;k.push(a.x,a.y,
a.z);return l[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==n[b])return n[b];n[b]=p.length;p.push(a.getHex());return n[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==s[b])return s[b];s[b]=m.length/2;m.push(a.x,a.y);return s[b]}var e={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};e.type=this.type;e.uuid=this.uuid;""!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&
(e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],l={},p=[],n={},m=[],s={};for(g=0;g<this.faces.length;g++){var t=this.faces[g],r=void 0!==this.faceVertexUvs[0][g],v=0<t.normal.length(),u=0<t.vertexNormals.length,x=1!==t.color.r||1!==t.color.g||1!==t.color.b,z=0<t.vertexColors.length,w=0,w=a(w,0,0),w=a(w,1,!1),w=a(w,2,!1),w=a(w,3,r),w=a(w,4,v),w=a(w,5,u),w=a(w,6,x),w=a(w,7,z);h.push(w);h.push(t.a,t.b,t.c);r&&(r=this.faceVertexUvs[0][g],
h.push(d(r[0]),d(r[1]),d(r[2])));v&&h.push(b(t.normal));u&&(v=t.vertexNormals,h.push(b(v[0]),b(v[1]),b(v[2])));x&&h.push(c(t.color));z&&(t=t.vertexColors,h.push(c(t[0]),c(t[1]),c(t[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<p.length&&(e.data.colors=p);0<m.length&&(e.data.uvs=[m]);e.data.faces=h;return e},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());c=0;
for(d=this.faceVertexUvs.length;c<d;c++){b=this.faceVertexUvs[c];void 0===a.faceVertexUvs[c]&&(a.faceVertexUvs[c]=[]);for(var e=0,f=b.length;e<f;e++){for(var g=b[e],h=[],k=0,l=g.length;k<l;k++)h.push(g[k].clone());a.faceVertexUvs[c].push(h)}}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;
THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="BufferGeometry";this.attributes={};this.attributesKeys=[];this.offsets=this.drawcalls=[];this.boundingSphere=this.boundingBox=null};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,addAttribute:function(a,b,c){!1===b instanceof THREE.BufferAttribute&&!1===b instanceof THREE.InterleavedBufferAttribute?(THREE.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.attributes[a]={array:b,itemSize:c}):(this.attributes[a]=b,this.attributesKeys=Object.keys(this.attributes))},getAttribute:function(a){return this.attributes[a]},addDrawCall:function(a,b,c){this.drawcalls.push({start:a,count:b,
index:void 0!==c?c:0})},applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToVector3Array(b.array),b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new THREE.Matrix3).getNormalMatrix(a).applyToVector3Array(b.array),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere()},center:function(){this.computeBoundingBox();var a=this.boundingBox.center().negate();this.applyMatrix((new THREE.Matrix4).setPosition(a));
return a},fromGeometry:function(a,b){b=b||{vertexColors:THREE.NoColors};var c=a.vertices,d=a.faces,e=a.faceVertexUvs,f=b.vertexColors,g=0<e[0].length,h=3==d[0].vertexNormals.length,k=new Float32Array(9*d.length);this.addAttribute("position",new THREE.BufferAttribute(k,3));var l=new Float32Array(9*d.length);this.addAttribute("normal",new THREE.BufferAttribute(l,3));if(f!==THREE.NoColors){var p=new Float32Array(9*d.length);this.addAttribute("color",new THREE.BufferAttribute(p,3))}if(!0===g){var n=new Float32Array(6*
d.length);this.addAttribute("uv",new THREE.BufferAttribute(n,2))}for(var m=0,s=0,t=0;m<d.length;m++,s+=6,t+=9){var r=d[m],v=c[r.a],u=c[r.b],x=c[r.c];k[t]=v.x;k[t+1]=v.y;k[t+2]=v.z;k[t+3]=u.x;k[t+4]=u.y;k[t+5]=u.z;k[t+6]=x.x;k[t+7]=x.y;k[t+8]=x.z;!0===h?(v=r.vertexNormals[0],u=r.vertexNormals[1],x=r.vertexNormals[2],l[t]=v.x,l[t+1]=v.y,l[t+2]=v.z,l[t+3]=u.x,l[t+4]=u.y,l[t+5]=u.z,l[t+6]=x.x,l[t+7]=x.y,l[t+8]=x.z):(v=r.normal,l[t]=v.x,l[t+1]=v.y,l[t+2]=v.z,l[t+3]=v.x,l[t+4]=v.y,l[t+5]=v.z,l[t+6]=v.x,
l[t+7]=v.y,l[t+8]=v.z);f===THREE.FaceColors?(r=r.color,p[t]=r.r,p[t+1]=r.g,p[t+2]=r.b,p[t+3]=r.r,p[t+4]=r.g,p[t+5]=r.b,p[t+6]=r.r,p[t+7]=r.g,p[t+8]=r.b):f===THREE.VertexColors&&(v=r.vertexColors[0],u=r.vertexColors[1],r=r.vertexColors[2],p[t]=v.r,p[t+1]=v.g,p[t+2]=v.b,p[t+3]=u.r,p[t+4]=u.g,p[t+5]=u.b,p[t+6]=r.r,p[t+7]=r.g,p[t+8]=r.b);!0===g&&(r=e[0][m][0],v=e[0][m][1],u=e[0][m][2],n[s]=r.x,n[s+1]=r.y,n[s+2]=v.x,n[s+3]=v.y,n[s+4]=u.x,n[s+5]=u.y)}this.computeBoundingSphere();return this},computeBoundingBox:function(){var a=
new THREE.Vector3;return function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var b=this.attributes.position.array;if(b){var c=this.boundingBox;c.makeEmpty();for(var d=0,e=b.length;d<e;d+=3)a.set(b[d],b[d+1],b[d+2]),c.expandByPoint(a)}if(void 0===b||0===b.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0);(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&THREE.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.')}}(),
computeBoundingSphere:function(){var a=new THREE.Box3,b=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var c=this.attributes.position.array;if(c){a.makeEmpty();for(var d=this.boundingSphere.center,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),a.expandByPoint(b);a.center(d);for(var g=0,e=0,f=c.length;e<f;e+=3)b.set(c[e],c[e+1],c[e+2]),g=Math.max(g,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(g);isNaN(this.boundingSphere.radius)&&
THREE.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.attributes;if(a.position){var b=a.position.array;if(void 0===a.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(b.length),3));else for(var c=a.normal.array,d=0,e=c.length;d<e;d++)c[d]=0;var c=a.normal.array,f,g,h,k=new THREE.Vector3,l=new THREE.Vector3,
p=new THREE.Vector3,n=new THREE.Vector3,m=new THREE.Vector3;if(a.index)for(var s=a.index.array,t=0<this.offsets.length?this.offsets:[{start:0,count:s.length,index:0}],r=0,v=t.length;r<v;++r){e=t[r].start;f=t[r].count;for(var u=t[r].index,d=e,e=e+f;d<e;d+=3)f=3*(u+s[d]),g=3*(u+s[d+1]),h=3*(u+s[d+2]),k.fromArray(b,f),l.fromArray(b,g),p.fromArray(b,h),n.subVectors(p,l),m.subVectors(k,l),n.cross(m),c[f]+=n.x,c[f+1]+=n.y,c[f+2]+=n.z,c[g]+=n.x,c[g+1]+=n.y,c[g+2]+=n.z,c[h]+=n.x,c[h+1]+=n.y,c[h+2]+=n.z}else for(d=
0,e=b.length;d<e;d+=9)k.fromArray(b,d),l.fromArray(b,d+3),p.fromArray(b,d+6),n.subVectors(p,l),m.subVectors(k,l),n.cross(m),c[d]=n.x,c[d+1]=n.y,c[d+2]=n.z,c[d+3]=n.x,c[d+4]=n.y,c[d+5]=n.z,c[d+6]=n.x,c[d+7]=n.y,c[d+8]=n.z;this.normalizeNormals();a.normal.needsUpdate=!0}},computeTangents:function(){function a(a,b,c){n.fromArray(d,3*a);m.fromArray(d,3*b);s.fromArray(d,3*c);t.fromArray(f,2*a);r.fromArray(f,2*b);v.fromArray(f,2*c);u=m.x-n.x;x=s.x-n.x;z=m.y-n.y;w=s.y-n.y;F=m.z-n.z;G=s.z-n.z;y=r.x-t.x;I=
v.x-t.x;B=r.y-t.y;C=v.y-t.y;E=1/(y*C-I*B);L.set((C*u-B*x)*E,(C*z-B*w)*E,(C*F-B*G)*E);N.set((y*x-I*u)*E,(y*w-I*z)*E,(y*G-I*F)*E);k[a].add(L);k[b].add(L);k[c].add(L);l[a].add(N);l[b].add(N);l[c].add(N)}function b(a){ia.fromArray(e,3*a);Q.copy(ia);aa=k[a];D.copy(aa);D.sub(ia.multiplyScalar(ia.dot(aa))).normalize();X.crossVectors(Q,aa);ca=X.dot(l[a]);P=0>ca?-1:1;h[4*a]=D.x;h[4*a+1]=D.y;h[4*a+2]=D.z;h[4*a+3]=P}if(void 0===this.attributes.index||void 0===this.attributes.position||void 0===this.attributes.normal||
void 0===this.attributes.uv)THREE.warn("THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var c=this.attributes.index.array,d=this.attributes.position.array,e=this.attributes.normal.array,f=this.attributes.uv.array,g=d.length/3;void 0===this.attributes.tangent&&this.addAttribute("tangent",new THREE.BufferAttribute(new Float32Array(4*g),4));for(var h=this.attributes.tangent.array,k=[],l=[],p=0;p<g;p++)k[p]=new THREE.Vector3,
l[p]=new THREE.Vector3;var n=new THREE.Vector3,m=new THREE.Vector3,s=new THREE.Vector3,t=new THREE.Vector2,r=new THREE.Vector2,v=new THREE.Vector2,u,x,z,w,F,G,y,I,B,C,E,L=new THREE.Vector3,N=new THREE.Vector3,H,O,M,A,J;0===this.drawcalls.length&&this.addDrawCall(0,c.length,0);var R=this.drawcalls,p=0;for(O=R.length;p<O;++p){H=R[p].start;M=R[p].count;var K=R[p].index,g=H;for(H+=M;g<H;g+=3)M=K+c[g],A=K+c[g+1],J=K+c[g+2],a(M,A,J)}var D=new THREE.Vector3,X=new THREE.Vector3,ia=new THREE.Vector3,Q=new THREE.Vector3,
P,aa,ca,p=0;for(O=R.length;p<O;++p)for(H=R[p].start,M=R[p].count,K=R[p].index,g=H,H+=M;g<H;g+=3)M=K+c[g],A=K+c[g+1],J=K+c[g+2],b(M),b(A),b(J)}},computeOffsets:function(a){void 0===a&&(a=65535);for(var b=this.attributes.index.array,c=this.attributes.position.array,d=b.length/3,e=new Uint16Array(b.length),f=0,g=0,h=[{start:0,count:0,index:0}],k=h[0],l=0,p=0,n=new Int32Array(6),m=new Int32Array(c.length),s=new Int32Array(c.length),t=0;t<c.length;t++)m[t]=-1,s[t]=-1;for(c=0;c<d;c++){for(var r=p=0;3>r;r++)t=
b[3*c+r],-1==m[t]?(n[2*r]=t,n[2*r+1]=-1,p++):m[t]<k.index?(n[2*r]=t,n[2*r+1]=-1,l++):(n[2*r]=t,n[2*r+1]=m[t]);if(g+p>k.index+a)for(k={start:f,count:0,index:g},h.push(k),p=0;6>p;p+=2)r=n[p+1],-1<r&&r<k.index&&(n[p+1]=-1);for(p=0;6>p;p+=2)t=n[p],r=n[p+1],-1===r&&(r=g++),m[t]=r,s[r]=t,e[f++]=r-k.index,k.count++}this.reorderBuffers(e,s,g);return this.drawcalls=this.offsets=h},merge:function(a,b){if(!1===a instanceof THREE.BufferGeometry)THREE.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",
a);else{void 0===b&&(b=0);var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,f=a.length;e<f;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},reorderBuffers:function(a,b,c){var d={},e;for(e in this.attributes)"index"!=e&&(d[e]=new this.attributes[e].array.constructor(this.attributes[e].itemSize*
c));for(var f=0;f<c;f++){var g=b[f];for(e in this.attributes)if("index"!=e)for(var h=this.attributes[e].array,k=this.attributes[e].itemSize,l=d[e],p=0;p<k;p++)l[f*k+p]=h[g*k+p]}this.attributes.index.array=a;for(e in this.attributes)"index"!=e&&(this.attributes[e].array=d[e],this.attributes[e].numItems=this.attributes[e].itemSize*c)},toJSON:function(){var a={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};a.type=this.type;a.uuid=this.uuid;""!==this.name&&(a.name=this.name);
a.data={};a.data.attributes={};var b=this.attributes,c=this.offsets,d=this.boundingSphere,e;for(e in b){var f=b[e],g=Array.prototype.slice.call(f.array);a.data.attributes[e]={itemSize:f.itemSize,type:f.array.constructor.name,array:g}}0<c.length&&(a.data.offsets=JSON.parse(JSON.stringify(c)));null!==d&&(a.data.boundingSphere={center:d.center.toArray(),radius:d.radius});return a},clone:function(){var a=new THREE.BufferGeometry,b;for(b in this.attributes)a.addAttribute(b,this.attributes[b].clone());
b=0;for(var c=this.offsets.length;b<c;b++){var d=this.offsets[b];a.offsets.push({start:d.start,index:d.index,count:d.count})}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);THREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this);this.type="InstancedBufferGeometry";this.maxInstancedCount=void 0};THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);
THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry;THREE.InstancedBufferGeometry.prototype.addDrawCall=function(a,b,c,d){this.drawcalls.push({start:a,count:b,index:void 0!==c?c:0,instances:d})};
THREE.InstancedBufferGeometry.prototype.clone=function(){var a=new THREE.InstancedBufferGeometry,b;for(b in this.attributes)a.addAttribute(b,this.attributes[b].clone());b=0;for(var c=this.offsets.length;b<c;b++){var d=this.offsets[b];a.offsets.push({start:d.start,index:d.index,count:d.count,instances:d.instances})}return a};THREE.EventDispatcher.prototype.apply(THREE.InstancedBufferGeometry.prototype);
THREE.Camera=function(){THREE.Object3D.call(this);this.type="Camera";this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.constructor=THREE.Camera;THREE.Camera.prototype.getWorldDirection=function(){var a=new THREE.Quaternion;return function(b){b=b||new THREE.Vector3;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}();
THREE.Camera.prototype.lookAt=function(){var a=new THREE.Matrix4;return function(b){a.lookAt(this.position,b,this.up);this.quaternion.setFromRotationMatrix(a)}}();THREE.Camera.prototype.clone=function(a){void 0===a&&(a=new THREE.Camera);THREE.Object3D.prototype.clone.call(this,a);a.matrixWorldInverse.copy(this.matrixWorldInverse);a.projectionMatrix.copy(this.projectionMatrix);return a};
THREE.CubeCamera=function(a,b,c){THREE.Object3D.call(this);this.type="CubeCamera";var d=new THREE.PerspectiveCamera(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new THREE.Vector3(1,0,0));this.add(d);var e=new THREE.PerspectiveCamera(90,1,a,b);e.up.set(0,-1,0);e.lookAt(new THREE.Vector3(-1,0,0));this.add(e);var f=new THREE.PerspectiveCamera(90,1,a,b);f.up.set(0,0,1);f.lookAt(new THREE.Vector3(0,1,0));this.add(f);var g=new THREE.PerspectiveCamera(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new THREE.Vector3(0,-1,0));
this.add(g);var h=new THREE.PerspectiveCamera(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new THREE.Vector3(0,0,1));this.add(h);var k=new THREE.PerspectiveCamera(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new THREE.Vector3(0,0,-1));this.add(k);this.renderTarget=new THREE.WebGLRenderTargetCube(c,c,{format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter});this.updateCubeMap=function(a,b){var c=this.renderTarget,m=c.generateMipmaps;c.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=
1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.generateMipmaps=m;c.activeCubeFace=5;a.render(b,k,c);a.setRenderTarget(null)}};THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype);THREE.CubeCamera.prototype.constructor=THREE.CubeCamera;
THREE.OrthographicCamera=function(a,b,c,d,e,f){THREE.Camera.call(this);this.type="OrthographicCamera";this.zoom=1;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.constructor=THREE.OrthographicCamera;
THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2;this.projectionMatrix.makeOrthographic(c-a,c+a,d+b,d-b,this.near,this.far)};
THREE.OrthographicCamera.prototype.clone=function(){var a=new THREE.OrthographicCamera;THREE.Camera.prototype.clone.call(this,a);a.zoom=this.zoom;a.left=this.left;a.right=this.right;a.top=this.top;a.bottom=this.bottom;a.near=this.near;a.far=this.far;a.projectionMatrix.copy(this.projectionMatrix);return a};
THREE.OrthographicCamera.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.left=this.left;a.object.right=this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;return a};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.type="PerspectiveCamera";this.zoom=1;this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.constructor=THREE.PerspectiveCamera;THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,f){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=f;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){var a=THREE.Math.radToDeg(2*Math.atan(Math.tan(.5*THREE.Math.degToRad(this.fov))/this.zoom));if(this.fullWidth){var b=this.fullWidth/this.fullHeight,a=Math.tan(THREE.Math.degToRad(.5*a))*this.near,c=-a,d=b*c,b=Math.abs(b*a-d),c=Math.abs(a-c);this.projectionMatrix.makeFrustum(d+this.x*b/this.fullWidth,d+(this.x+this.width)*b/this.fullWidth,a-(this.y+this.height)*c/this.fullHeight,a-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(a,
this.aspect,this.near,this.far)};THREE.PerspectiveCamera.prototype.clone=function(){var a=new THREE.PerspectiveCamera;THREE.Camera.prototype.clone.call(this,a);a.zoom=this.zoom;a.fov=this.fov;a.aspect=this.aspect;a.near=this.near;a.far=this.far;a.projectionMatrix.copy(this.projectionMatrix);return a};THREE.PerspectiveCamera.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.aspect=this.aspect;a.object.near=this.near;a.object.far=this.far;return a};
THREE.Light=function(a){THREE.Object3D.call(this);this.type="Light";this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.Light.prototype.constructor=THREE.Light;THREE.Light.prototype.clone=function(a){void 0===a&&(a=new THREE.Light);THREE.Object3D.prototype.clone.call(this,a);a.color.copy(this.color);return a};THREE.AmbientLight=function(a){THREE.Light.call(this,a);this.type="AmbientLight"};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);
THREE.AmbientLight.prototype.constructor=THREE.AmbientLight;THREE.AmbientLight.prototype.clone=function(){var a=new THREE.AmbientLight;THREE.Light.prototype.clone.call(this,a);return a};THREE.AmbientLight.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();return a};
THREE.AreaLight=function(a,b){THREE.Light.call(this,a);this.type="AreaLight";this.normal=new THREE.Vector3(0,-1,0);this.right=new THREE.Vector3(1,0,0);this.intensity=void 0!==b?b:1;this.height=this.width=1;this.constantAttenuation=1.5;this.linearAttenuation=.5;this.quadraticAttenuation=.1};THREE.AreaLight.prototype=Object.create(THREE.Light.prototype);THREE.AreaLight.prototype.constructor=THREE.AreaLight;
THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.type="DirectionalLight";this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;
this.shadowCascadeOffset=new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,.99,.998];this.shadowCascadeFarZ=[.99,.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);THREE.DirectionalLight.prototype.constructor=THREE.DirectionalLight;
THREE.DirectionalLight.prototype.clone=function(){var a=new THREE.DirectionalLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraLeft=this.shadowCameraLeft;a.shadowCameraRight=this.shadowCameraRight;a.shadowCameraTop=this.shadowCameraTop;a.shadowCameraBottom=this.shadowCameraBottom;a.shadowCameraVisible=
this.shadowCameraVisible;a.shadowBias=this.shadowBias;a.shadowDarkness=this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;a.shadowCascade=this.shadowCascade;a.shadowCascadeOffset.copy(this.shadowCascadeOffset);a.shadowCascadeCount=this.shadowCascadeCount;a.shadowCascadeBias=this.shadowCascadeBias.slice(0);a.shadowCascadeWidth=this.shadowCascadeWidth.slice(0);a.shadowCascadeHeight=this.shadowCascadeHeight.slice(0);a.shadowCascadeNearZ=this.shadowCascadeNearZ.slice(0);
a.shadowCascadeFarZ=this.shadowCascadeFarZ.slice(0);return a};THREE.DirectionalLight.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;return a};THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.type="HemisphereLight";this.position.set(0,100,0);this.groundColor=new THREE.Color(b);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);
THREE.HemisphereLight.prototype.constructor=THREE.HemisphereLight;THREE.HemisphereLight.prototype.clone=function(){var a=new THREE.HemisphereLight;THREE.Light.prototype.clone.call(this,a);a.groundColor.copy(this.groundColor);a.intensity=this.intensity;return a};THREE.HemisphereLight.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.groundColor=this.groundColor.getHex();return a};
THREE.PointLight=function(a,b,c,d){THREE.Light.call(this,a);this.type="PointLight";this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight.prototype.constructor=THREE.PointLight;THREE.PointLight.prototype.clone=function(){var a=new THREE.PointLight;THREE.Light.prototype.clone.call(this,a);a.intensity=this.intensity;a.distance=this.distance;a.decay=this.decay;return a};
THREE.PointLight.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;a.object.distance=this.distance;a.object.decay=this.decay;return a};
THREE.SpotLight=function(a,b,c,d,e,f){THREE.Light.call(this,a);this.type="SpotLight";this.position.set(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.exponent=void 0!==e?e:10;this.decay=void 0!==f?f:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=.5;this.shadowMapHeight=this.shadowMapWidth=
512;this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight.prototype.constructor=THREE.SpotLight;
THREE.SpotLight.prototype.clone=function(){var a=new THREE.SpotLight;THREE.Light.prototype.clone.call(this,a);a.target=this.target.clone();a.intensity=this.intensity;a.distance=this.distance;a.angle=this.angle;a.exponent=this.exponent;a.decay=this.decay;a.castShadow=this.castShadow;a.onlyShadow=this.onlyShadow;a.shadowCameraNear=this.shadowCameraNear;a.shadowCameraFar=this.shadowCameraFar;a.shadowCameraFov=this.shadowCameraFov;a.shadowCameraVisible=this.shadowCameraVisible;a.shadowBias=this.shadowBias;
a.shadowDarkness=this.shadowDarkness;a.shadowMapWidth=this.shadowMapWidth;a.shadowMapHeight=this.shadowMapHeight;return a};THREE.SpotLight.prototype.toJSON=function(a){a=THREE.Object3D.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;a.object.distance=this.distance;a.object.angle=this.angle;a.object.exponent=this.exponent;a.object.decay=this.decay;return a};
THREE.Cache={files:{},add:function(a,b){this.files[a]=b},get:function(a){return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}};THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.imageLoader=new THREE.ImageLoader;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/a.total).toFixed(0)+
"%"):b+((a.loaded/1024).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=this.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function d(a,
d,e,g,h,k,r){var v=b+e,u,x=THREE.Loader.Handlers.get(v);null!==x?u=x.load(v):(u=new THREE.Texture,x=f.imageLoader,x.crossOrigin=f.crossOrigin,x.load(v,function(a){if(!1===THREE.Math.isPowerOfTwo(a.width)||!1===THREE.Math.isPowerOfTwo(a.height)){var b=c(a.width),d=c(a.height),e=document.createElement("canvas");e.width=b;e.height=d;e.getContext("2d").drawImage(a,0,0,b,d);u.image=e}else u.image=a;u.needsUpdate=!0}));u.sourceFile=e;g&&(u.repeat.set(g[0],g[1]),1!==g[0]&&(u.wrapS=THREE.RepeatWrapping),
1!==g[1]&&(u.wrapT=THREE.RepeatWrapping));h&&u.offset.set(h[0],h[1]);k&&(e={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==e[k[0]]&&(u.wrapS=e[k[0]]),void 0!==e[k[1]]&&(u.wrapT=e[k[1]]));r&&(u.anisotropy=r);a[d]=u}function e(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var f=this,g="MeshLambertMaterial",h={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?g="MeshPhongMaterial":
"basic"===k&&(g="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(h.blending=THREE[a.blending]);void 0!==a.transparent&&(h.transparent=a.transparent);void 0!==a.opacity&&1>a.opacity&&(h.transparent=!0);void 0!==a.depthTest&&(h.depthTest=a.depthTest);void 0!==a.depthWrite&&(h.depthWrite=a.depthWrite);void 0!==a.visible&&(h.visible=a.visible);void 0!==a.flipSided&&(h.side=THREE.BackSide);void 0!==a.doubleSided&&(h.side=THREE.DoubleSide);void 0!==a.wireframe&&(h.wireframe=a.wireframe);
void 0!==a.vertexColors&&("face"===a.vertexColors?h.vertexColors=THREE.FaceColors:a.vertexColors&&(h.vertexColors=THREE.VertexColors));a.colorDiffuse?h.color=e(a.colorDiffuse):a.DbgColor&&(h.color=a.DbgColor);a.colorSpecular&&(h.specular=e(a.colorSpecular));a.colorEmissive&&(h.emissive=e(a.colorEmissive));void 0!==a.transparency&&(THREE.warn("THREE.Loader: transparency has been renamed to opacity"),a.opacity=a.transparency);void 0!==a.opacity&&(h.opacity=a.opacity);a.specularCoef&&(h.shininess=a.specularCoef);
a.mapDiffuse&&b&&d(h,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&d(h,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapAO&&b&&d(h,"aoMap",a.mapAO,a.mapAORepeat,a.mapAOOffset,a.mapAOWrap,a.mapAOAnisotropy);a.mapBump&&b&&d(h,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&d(h,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,
a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&d(h,"specularMap",a.mapSpecular,a.mapSpecularRepeat,a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapAlpha&&b&&d(h,"alphaMap",a.mapAlpha,a.mapAlphaRepeat,a.mapAlphaOffset,a.mapAlphaWrap,a.mapAlphaAnisotropy);a.mapBumpScale&&(h.bumpScale=a.mapBumpScale);a.mapNormalFactor&&(h.normalScale=new THREE.Vector2(a.mapNormalFactor,a.mapNormalFactor));g=new THREE[g](h);void 0!==a.DbgName&&(g.name=a.DbgName);return g}};
THREE.Loader.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,b)},get:function(a){for(var b=0,c=this.handlers.length;b<c;b+=2){var d=this.handlers[b+1];if(this.handlers[b].test(a))return d}return null}};THREE.XHRLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.XHRLoader.prototype={constructor:THREE.XHRLoader,load:function(a,b,c,d){var e=this,f=THREE.Cache.get(a);void 0!==f?b&&b(f):(f=new XMLHttpRequest,f.open("GET",a,!0),f.addEventListener("load",function(c){THREE.Cache.add(a,this.response);b&&b(this.response);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),void 0!==this.responseType&&(f.responseType=
this.responseType),f.send(null),e.manager.itemStart(a))},setResponseType:function(a){this.responseType=a},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.ImageLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b,c,d){var e=this,f=THREE.Cache.get(a);if(void 0!==f)b(f);else return f=document.createElement("img"),f.addEventListener("load",function(c){THREE.Cache.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1),void 0!==c&&f.addEventListener("progress",function(a){c(a)},!1),void 0!==d&&f.addEventListener("error",function(a){d(a)},!1),void 0!==this.crossOrigin&&(f.crossOrigin=this.crossOrigin),f.src=a,e.manager.itemStart(a),f},setCrossOrigin:function(a){this.crossOrigin=
a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.constructor=THREE.JSONLoader;THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var f=new XMLHttpRequest,g=0;f.onreadystatechange=function(){if(f.readyState===f.DONE)if(200===f.status||0===f.status){if(f.responseText){var h=JSON.parse(f.responseText),k=h.metadata;if(void 0!==k){if("object"===k.type){THREE.error("THREE.JSONLoader: "+b+" should be loaded with THREE.ObjectLoader instead.");return}if("scene"===k.type){THREE.error("THREE.JSONLoader: "+b+" seems to be a Scene. Use THREE.SceneLoader instead.");return}}h=a.parse(h,
d);c(h.geometry,h.materials)}else THREE.error("THREE.JSONLoader: "+b+" seems to be unreachable or the file is empty.");a.onLoadComplete()}else THREE.error("THREE.JSONLoader: Couldn't load "+b+" ("+f.status+")");else f.readyState===f.LOADING?e&&(0===g&&(g=f.getResponseHeader("Content-Length")),e({total:g,loaded:f.responseText.length})):f.readyState===f.HEADERS_RECEIVED&&void 0!==e&&(g=f.getResponseHeader("Content-Length"))};f.open("GET",b,!0);f.withCredentials=this.withCredentials;f.send(null)};
THREE.JSONLoader.prototype.parse=function(a,b){var c=new THREE.Geometry,d=void 0!==a.scale?1/a.scale:1;(function(b){var d,g,h,k,l,p,n,m,s,t,r,v,u,x=a.faces;p=a.vertices;var z=a.normals,w=a.colors,F=0;if(void 0!==a.uvs){for(d=0;d<a.uvs.length;d++)a.uvs[d].length&&F++;for(d=0;d<F;d++)c.faceVertexUvs[d]=[]}k=0;for(l=p.length;k<l;)d=new THREE.Vector3,d.x=p[k++]*b,d.y=p[k++]*b,d.z=p[k++]*b,c.vertices.push(d);k=0;for(l=x.length;k<l;)if(b=x[k++],s=b&1,h=b&2,d=b&8,n=b&16,t=b&32,p=b&64,b&=128,s){s=new THREE.Face3;
s.a=x[k];s.b=x[k+1];s.c=x[k+3];r=new THREE.Face3;r.a=x[k+1];r.b=x[k+2];r.c=x[k+3];k+=4;h&&(h=x[k++],s.materialIndex=h,r.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<F;d++)for(v=a.uvs[d],c.faceVertexUvs[d][h]=[],c.faceVertexUvs[d][h+1]=[],g=0;4>g;g++)m=x[k++],u=v[2*m],m=v[2*m+1],u=new THREE.Vector2(u,m),2!==g&&c.faceVertexUvs[d][h].push(u),0!==g&&c.faceVertexUvs[d][h+1].push(u);n&&(n=3*x[k++],s.normal.set(z[n++],z[n++],z[n]),r.normal.copy(s.normal));if(t)for(d=0;4>d;d++)n=3*x[k++],t=new THREE.Vector3(z[n++],
z[n++],z[n]),2!==d&&s.vertexNormals.push(t),0!==d&&r.vertexNormals.push(t);p&&(p=x[k++],p=w[p],s.color.setHex(p),r.color.setHex(p));if(b)for(d=0;4>d;d++)p=x[k++],p=w[p],2!==d&&s.vertexColors.push(new THREE.Color(p)),0!==d&&r.vertexColors.push(new THREE.Color(p));c.faces.push(s);c.faces.push(r)}else{s=new THREE.Face3;s.a=x[k++];s.b=x[k++];s.c=x[k++];h&&(h=x[k++],s.materialIndex=h);h=c.faces.length;if(d)for(d=0;d<F;d++)for(v=a.uvs[d],c.faceVertexUvs[d][h]=[],g=0;3>g;g++)m=x[k++],u=v[2*m],m=v[2*m+1],
u=new THREE.Vector2(u,m),c.faceVertexUvs[d][h].push(u);n&&(n=3*x[k++],s.normal.set(z[n++],z[n++],z[n]));if(t)for(d=0;3>d;d++)n=3*x[k++],t=new THREE.Vector3(z[n++],z[n++],z[n]),s.vertexNormals.push(t);p&&(p=x[k++],s.color.setHex(w[p]));if(b)for(d=0;3>d;d++)p=x[k++],s.vertexColors.push(new THREE.Color(w[p]));c.faces.push(s)}})(d);(function(){var b=void 0!==a.influencesPerVertex?a.influencesPerVertex:2;if(a.skinWeights)for(var d=0,g=a.skinWeights.length;d<g;d+=b)c.skinWeights.push(new THREE.Vector4(a.skinWeights[d],
1<b?a.skinWeights[d+1]:0,2<b?a.skinWeights[d+2]:0,3<b?a.skinWeights[d+3]:0));if(a.skinIndices)for(d=0,g=a.skinIndices.length;d<g;d+=b)c.skinIndices.push(new THREE.Vector4(a.skinIndices[d],1<b?a.skinIndices[d+1]:0,2<b?a.skinIndices[d+2]:0,3<b?a.skinIndices[d+3]:0));c.bones=a.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&THREE.warn("THREE.JSONLoader: When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+
c.skinIndices.length+"), and skinWeights ("+c.skinWeights.length+") should match.");c.animation=a.animation;c.animations=a.animations})();(function(b){if(void 0!==a.morphTargets){var d,g,h,k,l,p;d=0;for(g=a.morphTargets.length;d<g;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=a.morphTargets[d].name,c.morphTargets[d].vertices=[],l=c.morphTargets[d].vertices,p=a.morphTargets[d].vertices,h=0,k=p.length;h<k;h+=3){var n=new THREE.Vector3;n.x=p[h]*b;n.y=p[h+1]*b;n.z=p[h+2]*b;l.push(n)}}if(void 0!==
a.morphColors)for(d=0,g=a.morphColors.length;d<g;d++)for(c.morphColors[d]={},c.morphColors[d].name=a.morphColors[d].name,c.morphColors[d].colors=[],k=c.morphColors[d].colors,l=a.morphColors[d].colors,b=0,h=l.length;b<h;b+=3)p=new THREE.Color(16755200),p.setRGB(l[b],l[b+1],l[b+2]),k.push(p)})(d);c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials||0===a.materials.length)return{geometry:c};d=this.initMaterials(a.materials,b);this.needsTangents(d)&&c.computeTangents();return{geometry:c,
materials:d}};THREE.LoadingManager=function(a,b,c){var d=this,e=0,f=0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){f++};this.itemEnd=function(a){e++;if(void 0!==d.onProgress)d.onProgress(a,e,f);if(e===f&&void 0!==d.onLoad)d.onLoad()}};THREE.DefaultLoadingManager=new THREE.LoadingManager;THREE.BufferGeometryLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.BufferGeometryLoader.prototype={constructor:THREE.BufferGeometryLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE.BufferGeometry,c=a.data.attributes,d;for(d in c){var e=c[d],f=new self[e.type](e.array);b.addAttribute(d,new THREE.BufferAttribute(f,e.itemSize))}c=a.data.offsets;void 0!==c&&(b.offsets=JSON.parse(JSON.stringify(c)));
a=a.data.boundingSphere;void 0!==a&&(c=new THREE.Vector3,void 0!==a.center&&c.fromArray(a.center),b.boundingSphere=new THREE.Sphere(c,a.radius));return b}};THREE.MaterialLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.MaterialLoader.prototype={constructor:THREE.MaterialLoader,load:function(a,b,c,d){var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a){var b=new THREE[a.type];void 0!==a.color&&b.color.setHex(a.color);void 0!==a.emissive&&b.emissive.setHex(a.emissive);void 0!==a.specular&&b.specular.setHex(a.specular);void 0!==a.shininess&&(b.shininess=a.shininess);
void 0!==a.uniforms&&(b.uniforms=a.uniforms);void 0!==a.vertexShader&&(b.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(b.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(b.vertexColors=a.vertexColors);void 0!==a.shading&&(b.shading=a.shading);void 0!==a.blending&&(b.blending=a.blending);void 0!==a.side&&(b.side=a.side);void 0!==a.opacity&&(b.opacity=a.opacity);void 0!==a.transparent&&(b.transparent=a.transparent);void 0!==a.wireframe&&(b.wireframe=a.wireframe);void 0!==a.alphaTest&&
(b.alphaTest=a.alphaTest);void 0!==a.size&&(b.size=a.size);void 0!==a.sizeAttenuation&&(b.sizeAttenuation=a.sizeAttenuation);if(void 0!==a.materials)for(var c=0,d=a.materials.length;c<d;c++)b.materials.push(this.parse(a.materials[c]));return b}};THREE.ObjectLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.texturePath=""};
THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(a,b,c,d){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var e=this,f=new THREE.XHRLoader(e.manager);f.setCrossOrigin(this.crossOrigin);f.load(a,function(a){e.parse(JSON.parse(a),b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseGeometries(a.geometries),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),
d=this.parseTextures(a.textures,d),d=this.parseMaterials(a.materials,d),e=this.parseObject(a.object,c,d);void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseGeometries:function(a){var b={};if(void 0!==a)for(var c=new THREE.JSONLoader,d=new THREE.BufferGeometryLoader,e=0,f=a.length;e<f;e++){var g,h=a[e];switch(h.type){case "PlaneGeometry":case "PlaneBufferGeometry":g=new THREE[h.type](h.width,h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "CubeGeometry":g=
new THREE.BoxGeometry(h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":g=new THREE.CircleGeometry(h.radius,h.segments);break;case "CylinderGeometry":g=new THREE.CylinderGeometry(h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded);break;case "SphereGeometry":g=new THREE.SphereGeometry(h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "IcosahedronGeometry":g=new THREE.IcosahedronGeometry(h.radius,
h.detail);break;case "TorusGeometry":g=new THREE.TorusGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":g=new THREE.TorusKnotGeometry(h.radius,h.tube,h.radialSegments,h.tubularSegments,h.p,h.q,h.heightScale);break;case "BufferGeometry":g=d.parse(h);break;case "Geometry":g=c.parse(h.data).geometry;break;case "TextGeometry":g=new THREE.TextGeometry(h.text,h.data)}g.uuid=h.uuid;void 0!==h.name&&(g.name=h.name);b[h.uuid]=g}return b},parseMaterials:function(a,
b){var c={};if(void 0!==a)for(var d=function(a){void 0===b[a]&&THREE.warn("THREE.ObjectLoader: Undefined texture",a);return b[a]},e=new THREE.MaterialLoader,f=0,g=a.length;f<g;f++){var h=a[f],k=e.parse(h);k.uuid=h.uuid;void 0!==h.name&&(k.name=h.name);void 0!==h.map&&(k.map=d(h.map));void 0!==h.bumpMap&&(k.bumpMap=d(h.bumpMap),void 0!==h.bumpScale&&(k.bumpScale=h.bumpScale));void 0!==h.alphaMap&&(k.alphaMap=d(h.alphaMap));void 0!==h.envMap&&(k.envMap=d(h.envMap));void 0!==h.normalMap&&(k.normalMap=
d(h.normalMap),void 0!==h.normalScale&&(k.normalScale=new THREE.Vector2(h.normalScale,h.normalScale)));void 0!==h.lightMap&&(k.lightMap=d(h.lightMap),void 0!==h.lightMapIntensity&&(k.lightMapIntensity=h.lightMapIntensity));void 0!==h.aoMap&&(k.aoMap=d(h.aoMap),void 0!==h.aoMapIntensity&&(k.aoMapIntensity=h.aoMapIntensity));void 0!==h.specularMap&&(k.specularMap=d(h.specularMap));c[h.uuid]=k}return c},parseImages:function(a,b){var c=this,d={};if(void 0!==a&&0<a.length){var e=new THREE.LoadingManager(b),
f=new THREE.ImageLoader(e);f.setCrossOrigin(this.crossOrigin);for(var e=function(a){c.manager.itemStart(a);return f.load(a,function(){c.manager.itemEnd(a)})},g=0,h=a.length;g<h;g++){var k=a[g],l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(k.url)?k.url:c.texturePath+k.url;d[k.uuid]=e(l)}}return d},parseTextures:function(a,b){var c={};if(void 0!==a)for(var d=0,e=a.length;d<e;d++){var f=a[d];void 0===f.image&&THREE.warn('THREE.ObjectLoader: No "image" speficied for',f.uuid);void 0===b[f.image]&&THREE.warn("THREE.ObjectLoader: Undefined image",
f.image);var g=new THREE.Texture(b[f.image]);g.needsUpdate=!0;g.uuid=f.uuid;void 0!==f.name&&(g.name=f.name);void 0!==f.repeat&&(g.repeat=new THREE.Vector2(f.repeat[0],f.repeat[1]));void 0!==f.minFilter&&(g.minFilter=THREE[f.minFilter]);void 0!==f.magFilter&&(g.magFilter=THREE[f.magFilter]);void 0!==f.anisotropy&&(g.anisotropy=f.anisotropy);f.wrap instanceof Array&&(g.wrapS=THREE[f.wrap[0]],g.wrapT=THREE[f.wrap[1]]);c[f.uuid]=g}return c},parseObject:function(){var a=new THREE.Matrix4;return function(b,
c,d){var e;e=function(a){void 0===c[a]&&THREE.warn("THREE.ObjectLoader: Undefined geometry",a);return c[a]};var f=function(a){void 0===d[a]&&THREE.warn("THREE.ObjectLoader: Undefined material",a);return d[a]};switch(b.type){case "Scene":e=new THREE.Scene;break;case "PerspectiveCamera":e=new THREE.PerspectiveCamera(b.fov,b.aspect,b.near,b.far);break;case "OrthographicCamera":e=new THREE.OrthographicCamera(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":e=new THREE.AmbientLight(b.color);
break;case "DirectionalLight":e=new THREE.DirectionalLight(b.color,b.intensity);break;case "PointLight":e=new THREE.PointLight(b.color,b.intensity,b.distance,b.decay);break;case "SpotLight":e=new THREE.SpotLight(b.color,b.intensity,b.distance,b.angle,b.exponent,b.decay);break;case "HemisphereLight":e=new THREE.HemisphereLight(b.color,b.groundColor,b.intensity);break;case "Mesh":e=new THREE.Mesh(e(b.geometry),f(b.material));break;case "Line":e=new THREE.Line(e(b.geometry),f(b.material),b.mode);break;
case "PointCloud":e=new THREE.PointCloud(e(b.geometry),f(b.material));break;case "Sprite":e=new THREE.Sprite(f(b.material));break;case "Group":e=new THREE.Group;break;default:e=new THREE.Object3D}e.uuid=b.uuid;void 0!==b.name&&(e.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(e.position,e.quaternion,e.scale)):(void 0!==b.position&&e.position.fromArray(b.position),void 0!==b.rotation&&e.rotation.fromArray(b.rotation),void 0!==b.scale&&e.scale.fromArray(b.scale));void 0!==b.castShadow&&
(e.castShadow=b.castShadow);void 0!==b.receiveShadow&&(e.receiveShadow=b.receiveShadow);void 0!==b.visible&&(e.visible=b.visible);void 0!==b.userData&&(e.userData=b.userData);if(void 0!==b.children)for(var g in b.children)e.add(this.parseObject(b.children[g],c,d));return e}}()};THREE.TextureLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager};
THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a,b,c,d){var e=new THREE.ImageLoader(this.manager);e.setCrossOrigin(this.crossOrigin);e.load(a,function(a){a=new THREE.Texture(a);a.needsUpdate=!0;void 0!==b&&b(a)},c,d)},setCrossOrigin:function(a){this.crossOrigin=a}};THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(){this._parser=null};
THREE.BinaryTextureLoader.prototype={constructor:THREE.BinaryTextureLoader,load:function(a,b,c,d){var e=this,f=new THREE.DataTexture,g=new THREE.XHRLoader;g.setResponseType("arraybuffer");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:THREE.ClampToEdgeWrapping,f.wrapT=void 0!==a.wrapT?a.wrapT:THREE.ClampToEdgeWrapping,f.magFilter=void 0!==a.magFilter?a.magFilter:
THREE.LinearFilter,f.minFilter=void 0!==a.minFilter?a.minFilter:THREE.LinearMipMapLinearFilter,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}};THREE.CompressedTextureLoader=function(){this._parser=null};
THREE.CompressedTextureLoader.prototype={constructor:THREE.CompressedTextureLoader,load:function(a,b,c){var d=this,e=[],f=new THREE.CompressedTexture;f.image=e;var g=new THREE.XHRLoader;g.setResponseType("arraybuffer");if(a instanceof Array){var h=0;c=function(c){g.load(a[c],function(a){a=d._parser(a,!0);e[c]={width:a.width,height:a.height,format:a.format,mipmaps:a.mipmaps};h+=1;6===h&&(1==a.mipmapCount&&(f.minFilter=THREE.LinearFilter),f.format=a.format,f.needsUpdate=!0,b&&b(f))})};for(var k=0,l=
a.length;k<l;++k)c(k)}else g.load(a,function(a){a=d._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,g=0;g<c;g++){e[g]={mipmaps:[]};for(var h=0;h<a.mipmapCount;h++)e[g].mipmaps.push(a.mipmaps[g*a.mipmapCount+h]),e[g].format=a.format,e[g].width=a.width,e[g].height=a.height}else f.image.width=a.width,f.image.height=a.height,f.mipmaps=a.mipmaps;1===a.mipmapCount&&(f.minFilter=THREE.LinearFilter);f.format=a.format;f.needsUpdate=!0;b&&b(f)});return f}};
THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++});this.uuid=THREE.Math.generateUUID();this.name="";this.type="Material";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null;this.colorWrite=this.depthWrite=this.depthTest=!0;this.polygonOffset=
!1;this.overdraw=this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this._needsUpdate=this.visible=!0};
THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)THREE.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]="overdraw"==b?Number(c):c}}},toJSON:function(){var a={metadata:{version:4.4,
type:"Material",generator:"Material.toJSON"}};a.type=this.type;a.uuid=this.uuid;""!==this.name&&(a.name=this.name);1>this.opacity&&(a.opacity=this.opacity);!1!==this.transparent&&(a.transparent=this.transparent);!1!==this.wireframe&&(a.wireframe=this.wireframe);return a},clone:function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=
this.blendEquation;a.blendSrcAlpha=this.blendSrcAlpha;a.blendDstAlpha=this.blendDstAlpha;a.blendEquationAlpha=this.blendEquationAlpha;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;a.visible=this.visible;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};
THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.type="LineBasicMaterial";this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial;
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.type="LineDashedMaterial";this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial;
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.type="MeshBasicMaterial";this.color=new THREE.Color(16777215);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial;
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;
a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshBasicMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.color=this.color.getHex();this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);this.side!==THREE.FrontSide&&(a.side=this.side);return a};
THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.type="MeshLambertMaterial";this.color=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.alphaMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial;
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=
this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshLambertMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.color=this.color.getHex();a.emissive=this.emissive.getHex();this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors);this.shading!==THREE.SmoothShading&&(a.shading=this.shading);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);this.side!==THREE.FrontSide&&(a.side=this.side);return a};
THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.type="MeshPhongMaterial";this.color=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.wrapAround=this.metal=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.alphaMap=this.specularMap=
null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial;
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.lightMapIntensity=this.lightMapIntensity;a.aoMap=this.aoMap;a.aoMapIntensity=this.aoMapIntensity;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;
a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);a.specularMap=this.specularMap;a.alphaMap=this.alphaMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};
THREE.MeshPhongMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.color=this.color.getHex();a.emissive=this.emissive.getHex();a.specular=this.specular.getHex();a.shininess=this.shininess;this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors);this.shading!==THREE.SmoothShading&&(a.shading=this.shading);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);this.side!==THREE.FrontSide&&(a.side=this.side);return a};
THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.type="MeshDepthMaterial";this.wireframe=this.morphTargets=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial;
THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.MeshDepthMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshDepthMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);this.side!==THREE.FrontSide&&(a.side=this.side);return a};
THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.type="MeshNormalMaterial";this.wireframe=!1;this.wireframeLinewidth=1;this.morphTargets=!1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial;
THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);this.side!==THREE.FrontSide&&(a.side=this.side);return a};
THREE.MeshFaceMaterial=function(a){this.uuid=THREE.Math.generateUUID();this.type="MeshFaceMaterial";this.materials=a instanceof Array?a:[]};
THREE.MeshFaceMaterial.prototype={constructor:THREE.MeshFaceMaterial,toJSON:function(){var a=THREE.Material.prototype.toJSON.call(this);a.materials=[];for(var b=0,c=this.materials.length;b<c;b++)a.materials.push(this.materials[b].toJSON());return a},clone:function(){for(var a=new THREE.MeshFaceMaterial,b=0;b<this.materials.length;b++)a.materials.push(this.materials[b].clone());return a}};
THREE.PointCloudMaterial=function(a){THREE.Material.call(this);this.type="PointCloudMaterial";this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=THREE.NoColors;this.fog=!0;this.setValues(a)};THREE.PointCloudMaterial.prototype=Object.create(THREE.Material.prototype);THREE.PointCloudMaterial.prototype.constructor=THREE.PointCloudMaterial;
THREE.PointCloudMaterial.prototype.clone=function(){var a=new THREE.PointCloudMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};
THREE.PointCloudMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.color=this.color.getHex();this.vertexColors!==THREE.NoColors&&(a.vertexColors=this.vertexColors);this.blending!==THREE.NormalBlending&&(a.blending=this.blending);return a};THREE.ParticleBasicMaterial=function(a){THREE.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ParticleSystemMaterial=function(a){THREE.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.");return new THREE.PointCloudMaterial(a)};
THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.attributes=null;this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.shading=THREE.SmoothShading;this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=
this.morphTargets=this.skinning=!1;this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial;
THREE.ShaderMaterial.prototype.clone=function(a){void 0===a&&(a=new THREE.ShaderMaterial);THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.ShaderMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.uniforms=this.uniforms;a.vertexShader=this.vertexShader;a.fragmentShader=this.fragmentShader;return a};THREE.RawShaderMaterial=function(a){THREE.ShaderMaterial.call(this,a);this.type="RawShaderMaterial"};THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial;
THREE.RawShaderMaterial.prototype.clone=function(){var a=new THREE.RawShaderMaterial;THREE.ShaderMaterial.prototype.clone.call(this,a);return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.type="SpriteMaterial";this.color=new THREE.Color(16777215);this.map=null;this.rotation=0;this.fog=!1;this.setValues(a)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial;
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.rotation=this.rotation;a.fog=this.fog;return a};THREE.SpriteMaterial.prototype.toJSON=function(){var a=THREE.Material.prototype.toJSON.call(this);a.color=this.color.getHex();return a};
THREE.Texture=function(a,b,c,d,e,f,g,h,k){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++});this.uuid=THREE.Math.generateUUID();this.sourceFile=this.name="";this.image=void 0!==a?a:THREE.Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:THREE.Texture.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==f?f:THREE.LinearMipMapLinearFilter;
this.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:THREE.RGBAFormat;this.type=void 0!==h?h:THREE.UnsignedByteType;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this._needsUpdate=!1;this.onUpdate=null};THREE.Texture.DEFAULT_IMAGE=void 0;THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping;
THREE.Texture.prototype={constructor:THREE.Texture,get needsUpdate(){return this._needsUpdate},set needsUpdate(a){!0===a&&this.update();this._needsUpdate=a},clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=
this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=this.unpackAlignment;return a},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);THREE.TextureIdCount=0;THREE.CubeTexture=function(a,b,c,d,e,f,g,h,k){b=void 0!==b?b:THREE.CubeReflectionMapping;THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.images=a};
THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CubeTexture.prototype.constructor=THREE.CubeTexture;THREE.CubeTexture.clone=function(a){void 0===a&&(a=new THREE.CubeTexture);THREE.Texture.prototype.clone.call(this,a);a.images=this.images;return a};THREE.CompressedTexture=function(a,b,c,d,e,f,g,h,k,l,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,p);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture;THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,f,g,h,k,l,p){THREE.Texture.call(this,null,f,g,h,k,l,d,e,p);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.constructor=THREE.DataTexture;
THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.VideoTexture=function(a,b,c,d,e,f,g,h,k){THREE.Texture.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var l=this,p=function(){requestAnimationFrame(p);a.readyState===a.HAVE_ENOUGH_DATA&&(l.needsUpdate=!0)};p()};THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype);THREE.VideoTexture.prototype.constructor=THREE.VideoTexture;
THREE.Group=function(){THREE.Object3D.call(this);this.type="Group"};THREE.Group.prototype=Object.create(THREE.Object3D.prototype);THREE.Group.prototype.constructor=THREE.Group;THREE.PointCloud=function(a,b){THREE.Object3D.call(this);this.type="PointCloud";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.PointCloudMaterial({color:16777215*Math.random()})};THREE.PointCloud.prototype=Object.create(THREE.Object3D.prototype);THREE.PointCloud.prototype.constructor=THREE.PointCloud;
THREE.PointCloud.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray;return function(c,d){var e=this,f=e.geometry,g=c.params.PointCloud.threshold;a.getInverse(this.matrixWorld);b.copy(c.ray).applyMatrix4(a);if(null===f.boundingBox||!1!==b.isIntersectionBox(f.boundingBox)){var h=g/((this.scale.x+this.scale.y+this.scale.z)/3),k=new THREE.Vector3,g=function(a,f){var g=b.distanceToPoint(a);if(g<h){var k=b.closestPointToPoint(a);k.applyMatrix4(e.matrixWorld);var m=c.ray.origin.distanceTo(k);
d.push({distance:m,distanceToRay:g,point:k.clone(),index:f,face:null,object:e})}};if(f instanceof THREE.BufferGeometry){var l=f.attributes,p=l.position.array;if(void 0!==l.index){var l=l.index.array,n=f.offsets;0===n.length&&(n=[{start:0,count:l.length,index:0}]);for(var m=0,s=n.length;m<s;++m)for(var t=n[m].start,r=n[m].index,f=t,t=t+n[m].count;f<t;f++){var v=r+l[f];k.fromArray(p,3*v);g(k,v)}}else for(l=p.length/3,f=0;f<l;f++)k.set(p[3*f],p[3*f+1],p[3*f+2]),g(k,f)}else for(k=this.geometry.vertices,
f=0;f<k.length;f++)g(k[f],f)}}}();THREE.PointCloud.prototype.clone=function(a){void 0===a&&(a=new THREE.PointCloud(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.PointCloud.prototype.toJSON=function(a){var b=THREE.Object3D.prototype.toJSON.call(this,a);void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON());void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON());b.object.geometry=this.geometry.uuid;b.object.material=this.material.uuid;return b};
THREE.ParticleSystem=function(a,b){THREE.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud.");return new THREE.PointCloud(a,b)};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.type="Line";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.mode=void 0!==c?c:THREE.LineStrip};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.constructor=THREE.Line;
THREE.Line.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==d.ray.isIntersectionSphere(c)){a.getInverse(this.matrixWorld);b.copy(d.ray).applyMatrix4(a);var h=new THREE.Vector3,k=new THREE.Vector3,l=new THREE.Vector3,p=new THREE.Vector3,n=this.mode===THREE.LineStrip?1:2;if(g instanceof
THREE.BufferGeometry){var m=g.attributes;if(void 0!==m.index){var s=m.index.array,m=m.position.array,t=g.offsets;0===t.length&&(t=[{start:0,count:s.length,index:0}]);for(var r=0;r<t.length;r++)for(var v=t[r].start,u=t[r].count,x=t[r].index,g=v;g<v+u-1;g+=n){var z=x+s[g+1];h.fromArray(m,3*(x+s[g]));k.fromArray(m,3*z);z=b.distanceSqToSegment(h,k,p,l);z>f||(z=b.origin.distanceTo(p),z<d.near||z>d.far||e.push({distance:z,point:l.clone().applyMatrix4(this.matrixWorld),index:g,offsetIndex:r,face:null,faceIndex:null,
object:this}))}}else for(m=m.position.array,g=0;g<m.length/3-1;g+=n)h.fromArray(m,3*g),k.fromArray(m,3*g+3),z=b.distanceSqToSegment(h,k,p,l),z>f||(z=b.origin.distanceTo(p),z<d.near||z>d.far||e.push({distance:z,point:l.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g instanceof THREE.Geometry)for(h=g.vertices,k=h.length,g=0;g<k-1;g+=n)z=b.distanceSqToSegment(h[g],h[g+1],p,l),z>f||(z=b.origin.distanceTo(p),z<d.near||z>d.far||e.push({distance:z,point:l.clone().applyMatrix4(this.matrixWorld),
index:g,face:null,faceIndex:null,object:this}))}}}();THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.mode));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Line.prototype.toJSON=function(a){var b=THREE.Object3D.prototype.toJSON.call(this,a);b.object.mode=this.mode;void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON());void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON());b.object.geometry=this.geometry.uuid;b.object.material=this.material.uuid;return b};
THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.type="Mesh";this.geometry=void 0!==a?a:new THREE.Geometry;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random()});this.updateMorphTargets()};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);THREE.Mesh.prototype.constructor=THREE.Mesh;
THREE.Mesh.prototype.updateMorphTargets=function(){if(void 0!==this.geometry.morphTargets&&0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];THREE.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};
THREE.Mesh.prototype.raycast=function(){var a=new THREE.Matrix4,b=new THREE.Ray,c=new THREE.Sphere,d=new THREE.Vector3,e=new THREE.Vector3,f=new THREE.Vector3;return function(g,h){var k=this.geometry;null===k.boundingSphere&&k.computeBoundingSphere();c.copy(k.boundingSphere);c.applyMatrix4(this.matrixWorld);if(!1!==g.ray.isIntersectionSphere(c)&&(a.getInverse(this.matrixWorld),b.copy(g.ray).applyMatrix4(a),null===k.boundingBox||!1!==b.isIntersectionBox(k.boundingBox)))if(k instanceof THREE.BufferGeometry){var l=
this.material;if(void 0!==l){var p=k.attributes,n,m,s=g.precision;if(void 0!==p.index){var t=p.index.array,r=p.position.array,v=k.offsets;0===v.length&&(v=[{start:0,count:t.length,index:0}]);for(var u=0,x=v.length;u<x;++u)for(var p=v[u].start,z=v[u].index,k=p,w=p+v[u].count;k<w;k+=3){p=z+t[k];n=z+t[k+1];m=z+t[k+2];d.fromArray(r,3*p);e.fromArray(r,3*n);f.fromArray(r,3*m);var F=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==THREE.DoubleSide);if(null!==F){F.applyMatrix4(this.matrixWorld);
var G=g.ray.origin.distanceTo(F);G<s||G<g.near||G>g.far||h.push({distance:G,point:F,face:new THREE.Face3(p,n,m,THREE.Triangle.normal(d,e,f)),faceIndex:null,object:this})}}}else for(r=p.position.array,t=k=0,w=r.length;k<w;k+=3,t+=9)p=k,n=k+1,m=k+2,d.fromArray(r,t),e.fromArray(r,t+3),f.fromArray(r,t+6),F=l.side===THREE.BackSide?b.intersectTriangle(f,e,d,!0):b.intersectTriangle(d,e,f,l.side!==THREE.DoubleSide),null!==F&&(F.applyMatrix4(this.matrixWorld),G=g.ray.origin.distanceTo(F),G<s||G<g.near||G>
g.far||h.push({distance:G,point:F,face:new THREE.Face3(p,n,m,THREE.Triangle.normal(d,e,f)),faceIndex:null,object:this}))}}else if(k instanceof THREE.Geometry)for(t=this.material instanceof THREE.MeshFaceMaterial,r=!0===t?this.material.materials:null,s=g.precision,v=k.vertices,u=0,x=k.faces.length;u<x;u++)if(z=k.faces[u],l=!0===t?r[z.materialIndex]:this.material,void 0!==l){p=v[z.a];n=v[z.b];m=v[z.c];if(!0===l.morphTargets){F=k.morphTargets;G=this.morphTargetInfluences;d.set(0,0,0);e.set(0,0,0);f.set(0,
0,0);for(var w=0,y=F.length;w<y;w++){var I=G[w];if(0!==I){var B=F[w].vertices;d.x+=(B[z.a].x-p.x)*I;d.y+=(B[z.a].y-p.y)*I;d.z+=(B[z.a].z-p.z)*I;e.x+=(B[z.b].x-n.x)*I;e.y+=(B[z.b].y-n.y)*I;e.z+=(B[z.b].z-n.z)*I;f.x+=(B[z.c].x-m.x)*I;f.y+=(B[z.c].y-m.y)*I;f.z+=(B[z.c].z-m.z)*I}}d.add(p);e.add(n);f.add(m);p=d;n=e;m=f}F=l.side===THREE.BackSide?b.intersectTriangle(m,n,p,!0):b.intersectTriangle(p,n,m,l.side!==THREE.DoubleSide);null!==F&&(F.applyMatrix4(this.matrixWorld),G=g.ray.origin.distanceTo(F),G<s||
G<g.near||G>g.far||h.push({distance:G,point:F,face:z,faceIndex:u,object:this}))}}}();THREE.Mesh.prototype.clone=function(a,b){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a,b);return a};
THREE.Mesh.prototype.toJSON=function(a){var b=THREE.Object3D.prototype.toJSON.call(this,a);void 0===a.geometries[this.geometry.uuid]&&(a.geometries[this.geometry.uuid]=this.geometry.toJSON());void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON());b.object.geometry=this.geometry.uuid;b.object.material=this.material.uuid;return b};THREE.Bone=function(a){THREE.Object3D.call(this);this.type="Bone";this.skin=a};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.constructor=THREE.Bone;
THREE.Skeleton=function(a,b,c){this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;a=a||[];this.bones=a.slice(0);this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<this.bones.length?64:64<this.bones.length?32:16<this.bones.length?16:8,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),
this.boneTexture.minFilter=THREE.NearestFilter,this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(THREE.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[],b=0,a=this.bones.length;b<a;b++)this.boneInverses.push(new THREE.Matrix4)};
THREE.Skeleton.prototype.calculateInverses=function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new THREE.Matrix4;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}};
THREE.Skeleton.prototype.pose=function(){for(var a,b=0,c=this.bones.length;b<c;b++)(a=this.bones[b])&&a.matrixWorld.getInverse(this.boneInverses[b]);b=0;for(c=this.bones.length;b<c;b++)if(a=this.bones[b])a.parent?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)};
THREE.Skeleton.prototype.update=function(){var a=new THREE.Matrix4;return function(){for(var b=0,c=this.bones.length;b<c;b++)a.multiplyMatrices(this.bones[b]?this.bones[b].matrixWorld:this.identityMatrix,this.boneInverses[b]),a.flattenToArrayOffset(this.boneMatrices,16*b);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}();
THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new THREE.Matrix4;this.bindMatrixInverse=new THREE.Matrix4;a=[];if(this.geometry&&void 0!==this.geometry.bones){for(var d,e,f,g,h=0,k=this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],e=d.pos,f=d.rotq,g=d.scl,b=new THREE.Bone(this),a.push(b),b.name=d.name,b.position.set(e[0],e[1],e[2]),b.quaternion.set(f[0],f[1],f[2],f[3]),void 0!==g?b.scale.set(g[0],g[1],g[2]):b.scale.set(1,
1,1);h=0;for(k=this.geometry.bones.length;h<k;++h)d=this.geometry.bones[h],-1!==d.parent?a[d.parent].add(a[h]):this.add(a[h])}this.normalizeSkinWeights();this.updateMatrixWorld(!0);this.bind(new THREE.Skeleton(a,void 0,c))};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.constructor=THREE.SkinnedMesh;THREE.SkinnedMesh.prototype.bind=function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)};
THREE.SkinnedMesh.prototype.pose=function(){this.skeleton.pose()};THREE.SkinnedMesh.prototype.normalizeSkinWeights=function(){if(this.geometry instanceof THREE.Geometry)for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):THREE.warn("THREE.SkinnedMesh unreckognized bindMode: "+this.bindMode)};
THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.type="MorphAnimMesh";this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.constructor=THREE.MorphAnimMesh;THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)_?(\d+)/,e=0,f=a.morphTargets.length;e<f;e++){var g=a.morphTargets[e].name.match(d);if(g&&1<g.length){g=g[1];c[g]||(c[g]={start:Infinity,end:-Infinity});var h=c[g];e<h.start&&(h.start=e);e>h.end&&(h.end=e);b||(b=g)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=(c.end-c.start)/b*1E3,this.time=0):THREE.warn("THREE.MorphAnimMesh: animation["+a+"] undefined in .playAnimation()")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.interpolateTargets=function(a,b,c){for(var d=this.morphTargetInfluences,e=0,f=d.length;e<f;e++)d[e]=0;-1<a&&(d[a]=1-c);-1<b&&(d[b]=c)};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.objects=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.constructor=THREE.LOD;THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=0;c<this.objects.length&&!(b<this.objects[c].distance);c++);this.objects.splice(c,0,{distance:b,object:a});this.add(a)};THREE.LOD.prototype.getObjectForDistance=function(a){for(var b=1,c=this.objects.length;b<c&&!(a<this.objects[b].distance);b++);return this.objects[b-1].object};
THREE.LOD.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}();
THREE.LOD.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c){if(1<this.objects.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);this.objects[0].object.visible=!0;for(var d=1,e=this.objects.length;d<e;d++)if(c>=this.objects[d].distance)this.objects[d-1].object.visible=!1,this.objects[d].object.visible=!0;else break;for(;d<e;d++)this.objects[d].object.visible=!1}}}();
THREE.LOD.prototype.clone=function(a){void 0===a&&(a=new THREE.LOD);THREE.Object3D.prototype.clone.call(this,a);for(var b=0,c=this.objects.length;b<c;b++){var d=this.objects[b].object.clone();d.visible=0===b;a.addLevel(d,this.objects[b].distance)}return a};
THREE.Sprite=function(){var a=new Uint16Array([0,1,2,0,2,3]),b=new Float32Array([-.5,-.5,0,.5,-.5,0,.5,.5,0,-.5,.5,0]),c=new Float32Array([0,0,1,0,1,1,0,1]),d=new THREE.BufferGeometry;d.addAttribute("index",new THREE.BufferAttribute(a,1));d.addAttribute("position",new THREE.BufferAttribute(b,3));d.addAttribute("uv",new THREE.BufferAttribute(c,2));return function(a){THREE.Object3D.call(this);this.type="Sprite";this.geometry=d;this.material=void 0!==a?a:new THREE.SpriteMaterial}}();
THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.constructor=THREE.Sprite;THREE.Sprite.prototype.raycast=function(){var a=new THREE.Vector3;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.distanceToPoint(a);d>this.scale.x||c.push({distance:d,point:this.position,face:null,object:this})}}();THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};
THREE.Sprite.prototype.toJSON=function(a){var b=THREE.Object3D.prototype.toJSON.call(this,a);void 0===a.materials[this.material.uuid]&&(a.materials[this.material.uuid]=this.material.toJSON());b.object.material=this.material.uuid;return b};THREE.Particle=THREE.Sprite;THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.constructor=THREE.LensFlare;THREE.LensFlare.prototype.add=function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:f,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=c.x*Math.PI*.25,c.rotation+=.25*(c.wantedRotation-c.rotation)};THREE.Scene=function(){THREE.Object3D.call(this);this.type="Scene";this.overrideMaterial=this.fog=null;this.autoUpdate=!0};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.constructor=THREE.Scene;THREE.Scene.prototype.clone=function(a){void 0===a&&(a=new THREE.Scene);THREE.Object3D.prototype.clone.call(this,a);null!==this.fog&&(a.fog=this.fog.clone());null!==this.overrideMaterial&&(a.overrideMaterial=this.overrideMaterial.clone());a.autoUpdate=this.autoUpdate;a.matrixAutoUpdate=this.matrixAutoUpdate;return a};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};
THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={};THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";
THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\n\n\toutgoingLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif";THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif";THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif";THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\n\n\tvColor.xyz = inputToLinear( color.xyz );\n\n#endif";THREE.ShaderChunk.common="#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\nfloat square( in float a ) { return a*a; }\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( in float a ) { return a; }\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\n\treturn point - distance * planeNormal;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\n\t}\n\treturn 1.0;\n}\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n#ifdef GAMMA_OUTPUT\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\n";
THREE.ShaderChunk.default_vertex="#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";THREE.ShaderChunk.defaultnormal_vertex="#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";
THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.envmap_pars_fragment="#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";THREE.ShaderChunk.envmap_pars_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";
THREE.ShaderChunk.envmap_vertex="#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = transformDirection( objectNormal, modelMatrix );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\n\t\tfogFactor = whiteCompliment( fogFactor );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\n\n\toutgoingLight += diffuseColor.xyz * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n#endif";THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif";
THREE.ShaderChunk.lights_lambert_pars_vertex="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n";
THREE.ShaderChunk.lights_lambert_vertex="vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * attenuation;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * attenuation;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * attenuation * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * attenuation * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront += ambientLightColor;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack += ambientLightColor;\n\n#endif\n";
THREE.ShaderChunk.lights_phong_fragment="#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += pointLightColor[ i ] * pointDiffuseWeight * attenuation;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * attenuation * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\ttotalDiffuseLight += spotLightColor[ i ] * spotDiffuseWeight * attenuation * spotEffect;\n\n\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\ttotalSpecularLight += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * attenuation * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalDiffuseLight += hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\n#ifdef METAL\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) * specular + totalSpecularLight + emissive;\n\n#else\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) + totalSpecularLight + emissive;\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_fragment="uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n";THREE.ShaderChunk.lights_phong_vertex="#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif";THREE.ShaderChunk.linear_to_gamma_fragment="\n\toutgoingLight = linearToOutput( outgoingLight );\n";THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif";THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif";THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";
THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\n\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n\n#endif\n";THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif";
THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif";
THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t// Per-Pixel Tangent Space Normal Mapping\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.shadowmap_fragment="#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t// NOTE: I am unsure if this is correct in linear space.  -bhouston, Dec 29, 2014\n\tshadowColor = inputToLinear( shadowColor );\n\n\toutgoingLight = outgoingLight * shadowColor;\n\n#endif\n";
THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif";
THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";
THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.specularmap_fragment="float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif";
THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n#endif";THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = uv2;\n\n#endif";THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif";THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";
THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n";
THREE.UniformsUtils={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];b[c][d]=e instanceof THREE.Color||e instanceof THREE.Vector2||e instanceof THREE.Vector3||e instanceof THREE.Vector4||e instanceof THREE.Matrix3||e instanceof THREE.Matrix4||e instanceof THREE.Texture?e.clone():e instanceof Array?e.slice():e}}return b}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},lightMapIntensity:{type:"f",value:1},aoMap:{type:"t",value:null},aoMapIntensity:{type:"f",value:1},specularMap:{type:"t",value:null},alphaMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",
value:.98},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},
hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},pointLightDecay:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",
value:[]},spotLightDecay:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",value:1},scale:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",
value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.uv_vertex,
THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.skinbase_vertex,"\t#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"\t#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.uv2_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.aomap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.aomap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,
THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,
THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.uv2_pars_fragment,
THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.aomap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,
THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t\telse\n\t\t\toutgoingLight += diffuseColor.rgb * vLightBack + emissive;\n\t#else\n\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t#endif",THREE.ShaderChunk.aomap_fragment,THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",value:new THREE.Color(1118481)},
shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,
"\tvViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.uv_pars_fragment,THREE.ShaderChunk.uv2_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.alphamap_pars_fragment,THREE.ShaderChunk.aomap_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphamap_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.aomap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.logdepthbuf_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( psColor, opacity );",
THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.alphatest_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),
vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",
THREE.ShaderChunk.common,THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,THREE.ShaderChunk.color_fragment,"\toutgoingLight = diffuseColor.rgb;",THREE.ShaderChunk.fog_fragment,"\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}"].join("\n")},
depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",value:1}},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float mNear;\nuniform float mFar;\nuniform float opacity;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,
"void main() {",THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}"].join("\n")},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:["varying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,
"void main() {\n\tvNormal = normalize( normalMatrix * normal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vNormal;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},cube:{uniforms:{tCube:{type:"t",value:null},
tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,
"void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",THREE.ShaderChunk.logdepthbuf_fragment,"}"].join("\n")},equirect:{uniforms:{tEquirect:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:["varying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\nsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );",THREE.ShaderChunk.logdepthbuf_fragment,
"}"].join("\n")},depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragmentShader:[THREE.ShaderChunk.common,THREE.ShaderChunk.logdepthbuf_pars_fragment,"vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {",
THREE.ShaderChunk.logdepthbuf_fragment,"\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}"].join("\n")}};
THREE.WebGLRenderer=function(a){function b(a,b,c,d){var e;if(c instanceof THREE.InstancedBufferGeometry&&(e=Z.get("ANGLE_instanced_arrays"),null===e)){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}var f=c.attributes,g=b.attributes;b=b.attributesKeys;for(var h=0,k=b.length;h<k;h++){var m=b[h],l=g[m];if(0<=l){var p=f[m];if(void 0!==p)if(m=p.itemSize,U.enableAttribute(l),p instanceof
THREE.InterleavedBufferAttribute){var n=p.data,u=n.stride,s=p.offset;q.bindBuffer(q.ARRAY_BUFFER,p.data.buffer);q.vertexAttribPointer(l,m,q.FLOAT,!1,u*n.array.BYTES_PER_ELEMENT,(d*u+s)*n.array.BYTES_PER_ELEMENT);if(n instanceof THREE.InstancedInterleavedBuffer){if(null===e){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferAttribute but hardware does not support extension ANGLE_instanced_arrays.");return}e.vertexAttribDivisorANGLE(l,n.meshPerAttribute);void 0===c.maxInstancedCount&&
(c.maxInstancedCount=n.array.length/n.stride*n.meshPerAttribute)}}else{if(q.bindBuffer(q.ARRAY_BUFFER,p.buffer),q.vertexAttribPointer(l,m,q.FLOAT,!1,0,d*m*4),p instanceof THREE.InstancedBufferAttribute){if(null===e){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferAttribute but hardware does not support extension ANGLE_instanced_arrays.");return}e.vertexAttribDivisorANGLE(l,p.meshPerAttribute);void 0===c.maxInstancedCount&&(c.maxInstancedCount=p.array.length/p.itemSize*
p.meshPerAttribute)}}else void 0!==a.defaultAttributeValues&&(2===a.defaultAttributeValues[m].length?q.vertexAttrib2fv(l,a.defaultAttributeValues[m]):3===a.defaultAttributeValues[m].length&&q.vertexAttrib3fv(l,a.defaultAttributeValues[m]))}}U.disableUnusedAttributes()}function c(a,b){return a.object.renderOrder!==b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function d(a,b){return a.object.renderOrder!==
b.object.renderOrder?a.object.renderOrder-b.object.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function e(a,b){return b[0]-a[0]}function f(a){if(!1!==a.visible){if(!(a instanceof THREE.Scene||a instanceof THREE.Group))if(na.init(a),a instanceof THREE.Light)K.push(a);else if(a instanceof THREE.Sprite)ia.push(a);else if(a instanceof THREE.LensFlare)Q.push(a);else{var b=na.objects[a.id];if(b&&(!1===a.frustumCulled||!0===Oa.intersectsObject(a)))for(var c=0,d=b.length;c<d;c++){var e=b[c],g=e,h=g.object,k=
g.buffer,m=h.geometry,h=h.material;h instanceof THREE.MeshFaceMaterial?(h=h.materials[m instanceof THREE.BufferGeometry?0:k.materialIndex],g.material=h,h.transparent?X.push(g):D.push(g)):h&&(g.material=h,h.transparent?X.push(g):D.push(g));e.render=!0;!0===P.sortObjects&&(oa.setFromMatrixPosition(a.matrixWorld),oa.applyProjection(Ha),e.z=oa.z)}}c=0;for(d=a.children.length;c<d;c++)f(a.children[c])}}function g(a,b,c,d,e){for(var f,g=0,h=a.length;g<h;g++){f=a[g];var k=f.object,m=f.buffer;s(k,b);if(e)f=
e;else{f=f.material;if(!f)continue;l(f)}P.setMaterialFaces(f);m instanceof THREE.BufferGeometry?P.renderBufferDirect(b,c,d,f,m,k):P.renderBuffer(b,c,d,f,m,k)}}function h(a,b,c,d,e,f){for(var g,h=0,k=a.length;h<k;h++){g=a[h];var m=g.object;if(m.visible){if(f)g=f;else{g=g[b];if(!g)continue;l(g)}P.renderImmediateObject(c,d,e,g,m)}}}function k(a){var b=a.object.material;b.transparent?(a.transparent=b,a.opaque=null):(a.opaque=b,a.transparent=null)}function l(a){!0===a.transparent?U.setBlending(a.blending,
a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha):U.setBlending(THREE.NoBlending);U.setDepthTest(a.depthTest);U.setDepthWrite(a.depthWrite);U.setColorWrite(a.colorWrite);U.setPolygonOffset(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits)}function p(a,b,c,d,e){var f,g,h,k;pa=0;if(d.needsUpdate){d.program&&Fb(d);d.addEventListener("dispose",Gb);var l=Tb[d.type];if(l){var p=THREE.ShaderLib[l];d.__webglShader={uniforms:THREE.UniformsUtils.clone(p.uniforms),
vertexShader:p.vertexShader,fragmentShader:p.fragmentShader}}else d.__webglShader={uniforms:d.uniforms,vertexShader:d.vertexShader,fragmentShader:d.fragmentShader};for(var u=0,s=0,x=0,z=0,y=0,G=b.length;y<G;y++){var B=b[y];B.onlyShadow||!1===B.visible||(B instanceof THREE.DirectionalLight&&u++,B instanceof THREE.PointLight&&s++,B instanceof THREE.SpotLight&&x++,B instanceof THREE.HemisphereLight&&z++)}f=u;g=s;h=x;k=z;for(var I,E=0,D=0,J=b.length;D<J;D++){var L=b[D];L.castShadow&&(L instanceof THREE.SpotLight&&
E++,L instanceof THREE.DirectionalLight&&!L.shadowCascade&&E++)}I=E;var K;if(eb&&e&&e.skeleton&&e.skeleton.useVertexTexture)K=1024;else{var M=q.getParameter(q.MAX_VERTEX_UNIFORM_VECTORS),H=Math.floor((M-20)/4);void 0!==e&&e instanceof THREE.SkinnedMesh&&(H=Math.min(e.skeleton.bones.length,H),H<e.skeleton.bones.length&&THREE.warn("WebGLRenderer: too many bones - "+e.skeleton.bones.length+", this GPU supports just "+H+" (try OpenGL instead of ANGLE)"));K=H}var N={precision:C,supportsVertexTextures:fb,
map:!!d.map,envMap:!!d.envMap,envMapMode:d.envMap&&d.envMap.mapping,lightMap:!!d.lightMap,aoMap:!!d.aoMap,bumpMap:!!d.bumpMap,normalMap:!!d.normalMap,specularMap:!!d.specularMap,alphaMap:!!d.alphaMap,combine:d.combine,vertexColors:d.vertexColors,fog:c,useFog:d.fog,fogExp:c instanceof THREE.FogExp2,flatShading:d.shading===THREE.FlatShading,sizeAttenuation:d.sizeAttenuation,logarithmicDepthBuffer:A,skinning:d.skinning,maxBones:K,useVertexTexture:eb&&e&&e.skeleton&&e.skeleton.useVertexTexture,morphTargets:d.morphTargets,
morphNormals:d.morphNormals,maxMorphTargets:P.maxMorphTargets,maxMorphNormals:P.maxMorphNormals,maxDirLights:f,maxPointLights:g,maxSpotLights:h,maxHemiLights:k,maxShadows:I,shadowMapEnabled:ma.enabled&&e.receiveShadow&&0<I,shadowMapType:ma.type,shadowMapDebug:ma.debug,shadowMapCascade:ma.cascade,alphaTest:d.alphaTest,metal:d.metal,wrapAround:d.wrapAround,doubleSided:d.side===THREE.DoubleSide,flipSided:d.side===THREE.BackSide},O=[];l?O.push(l):(O.push(d.fragmentShader),O.push(d.vertexShader));if(void 0!==
d.defines)for(var R in d.defines)O.push(R),O.push(d.defines[R]);for(R in N)O.push(R),O.push(N[R]);for(var Q=O.join(),qa,U=0,xa=aa.length;U<xa;U++){var X=aa[U];if(X.code===Q){qa=X;qa.usedTimes++;break}}void 0===qa&&(qa=new THREE.WebGLProgram(P,Q,d,N),aa.push(qa),P.info.memory.programs=aa.length);d.program=qa;var Z=qa.attributes;if(d.morphTargets){d.numSupportedMorphTargets=0;for(var va,wa="morphTarget",la=0;la<P.maxMorphTargets;la++)va=wa+la,0<=Z[va]&&d.numSupportedMorphTargets++}if(d.morphNormals)for(d.numSupportedMorphNormals=
0,wa="morphNormal",la=0;la<P.maxMorphNormals;la++)va=wa+la,0<=Z[va]&&d.numSupportedMorphNormals++;d.uniformsList=[];for(var ya in d.__webglShader.uniforms){var ia=d.program.uniforms[ya];ia&&d.uniformsList.push([d.__webglShader.uniforms[ya],ia])}d.needsUpdate=!1}d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(P.maxMorphTargets));var za=!1,na=!1,Aa=!1,Ta=d.program,ea=Ta.uniforms,S=d.__webglShader.uniforms;Ta.id!==ca&&(q.useProgram(Ta.program),ca=Ta.id,
Aa=na=za=!0);d.id!==Da&&(-1===Da&&(Aa=!0),Da=d.id,na=!0);if(za||a!==V)q.uniformMatrix4fv(ea.projectionMatrix,!1,a.projectionMatrix.elements),A&&q.uniform1f(ea.logDepthBufFC,2/(Math.log(a.far+1)/Math.LN2)),a!==V&&(V=a),(d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==ea.cameraPosition&&(oa.setFromMatrixPosition(a.matrixWorld),q.uniform3f(ea.cameraPosition,oa.x,oa.y,oa.z)),(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof
THREE.MeshBasicMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==ea.viewMatrix&&q.uniformMatrix4fv(ea.viewMatrix,!1,a.matrixWorldInverse.elements);if(d.skinning)if(e.bindMatrix&&null!==ea.bindMatrix&&q.uniformMatrix4fv(ea.bindMatrix,!1,e.bindMatrix.elements),e.bindMatrixInverse&&null!==ea.bindMatrixInverse&&q.uniformMatrix4fv(ea.bindMatrixInverse,!1,e.bindMatrixInverse.elements),eb&&e.skeleton&&e.skeleton.useVertexTexture){if(null!==ea.boneTexture){var Oa=m();q.uniform1i(ea.boneTexture,
Oa);P.setTexture(e.skeleton.boneTexture,Oa)}null!==ea.boneTextureWidth&&q.uniform1i(ea.boneTextureWidth,e.skeleton.boneTextureWidth);null!==ea.boneTextureHeight&&q.uniform1i(ea.boneTextureHeight,e.skeleton.boneTextureHeight)}else e.skeleton&&e.skeleton.boneMatrices&&null!==ea.boneGlobalMatrices&&q.uniformMatrix4fv(ea.boneGlobalMatrices,!1,e.skeleton.boneMatrices);if(na){c&&d.fog&&(S.fogColor.value=c.color,c instanceof THREE.Fog?(S.fogNear.value=c.near,S.fogFar.value=c.far):c instanceof THREE.FogExp2&&
(S.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if($a){var Aa=!0,da,sa,ba,Ha=0,Na=0,gb=0,Ia,Ya,Za,Pa,hb,fa=Hb,ib=fa.directional.colors,jb=fa.directional.positions,kb=fa.point.colors,lb=fa.point.positions,cb=fa.point.distances,db=fa.point.decays,mb=fa.spot.colors,nb=fa.spot.positions,Ab=fa.spot.distances,ob=fa.spot.directions,Bb=fa.spot.anglesCos,Cb=fa.spot.exponents,Db=fa.spot.decays,pb=fa.hemi.skyColors,qb=fa.hemi.groundColors,
rb=fa.hemi.positions,Ua=0,Ja=0,Ba=0,Qa=0,sb=0,tb=0,ub=0,ab=0,Va=0,Wa=0,Ea=0,Ra=0;da=0;for(sa=b.length;da<sa;da++)ba=b[da],ba.onlyShadow||(Ia=ba.color,Pa=ba.intensity,hb=ba.distance,ba instanceof THREE.AmbientLight?ba.visible&&(Ha+=Ia.r,Na+=Ia.g,gb+=Ia.b):ba instanceof THREE.DirectionalLight?(sb+=1,ba.visible&&(ha.setFromMatrixPosition(ba.matrixWorld),oa.setFromMatrixPosition(ba.target.matrixWorld),ha.sub(oa),ha.normalize(),Va=3*Ua,jb[Va+0]=ha.x,jb[Va+1]=ha.y,jb[Va+2]=ha.z,t(ib,Va,Ia,Pa),Ua+=1)):ba instanceof
THREE.PointLight?(tb+=1,ba.visible&&(Wa=3*Ja,t(kb,Wa,Ia,Pa),oa.setFromMatrixPosition(ba.matrixWorld),lb[Wa+0]=oa.x,lb[Wa+1]=oa.y,lb[Wa+2]=oa.z,cb[Ja]=hb,db[Ja]=0===ba.distance?0:ba.decay,Ja+=1)):ba instanceof THREE.SpotLight?(ub+=1,ba.visible&&(Ea=3*Ba,t(mb,Ea,Ia,Pa),ha.setFromMatrixPosition(ba.matrixWorld),nb[Ea+0]=ha.x,nb[Ea+1]=ha.y,nb[Ea+2]=ha.z,Ab[Ba]=hb,oa.setFromMatrixPosition(ba.target.matrixWorld),ha.sub(oa),ha.normalize(),ob[Ea+0]=ha.x,ob[Ea+1]=ha.y,ob[Ea+2]=ha.z,Bb[Ba]=Math.cos(ba.angle),
Cb[Ba]=ba.exponent,Db[Ba]=0===ba.distance?0:ba.decay,Ba+=1)):ba instanceof THREE.HemisphereLight&&(ab+=1,ba.visible&&(ha.setFromMatrixPosition(ba.matrixWorld),ha.normalize(),Ra=3*Qa,rb[Ra+0]=ha.x,rb[Ra+1]=ha.y,rb[Ra+2]=ha.z,Ya=ba.color,Za=ba.groundColor,t(pb,Ra,Ya,Pa),t(qb,Ra,Za,Pa),Qa+=1)));da=3*Ua;for(sa=Math.max(ib.length,3*sb);da<sa;da++)ib[da]=0;da=3*Ja;for(sa=Math.max(kb.length,3*tb);da<sa;da++)kb[da]=0;da=3*Ba;for(sa=Math.max(mb.length,3*ub);da<sa;da++)mb[da]=0;da=3*Qa;for(sa=Math.max(pb.length,
3*ab);da<sa;da++)pb[da]=0;da=3*Qa;for(sa=Math.max(qb.length,3*ab);da<sa;da++)qb[da]=0;fa.directional.length=Ua;fa.point.length=Ja;fa.spot.length=Ba;fa.hemi.length=Qa;fa.ambient[0]=Ha;fa.ambient[1]=Na;fa.ambient[2]=gb;$a=!1}if(Aa){var ka=Hb;S.ambientLightColor.value=ka.ambient;S.directionalLightColor.value=ka.directional.colors;S.directionalLightDirection.value=ka.directional.positions;S.pointLightColor.value=ka.point.colors;S.pointLightPosition.value=ka.point.positions;S.pointLightDistance.value=
ka.point.distances;S.pointLightDecay.value=ka.point.decays;S.spotLightColor.value=ka.spot.colors;S.spotLightPosition.value=ka.spot.positions;S.spotLightDistance.value=ka.spot.distances;S.spotLightDirection.value=ka.spot.directions;S.spotLightAngleCos.value=ka.spot.anglesCos;S.spotLightExponent.value=ka.spot.exponents;S.spotLightDecay.value=ka.spot.decays;S.hemisphereLightSkyColor.value=ka.hemi.skyColors;S.hemisphereLightGroundColor.value=ka.hemi.groundColors;S.hemisphereLightDirection.value=ka.hemi.positions;
n(S,!0)}else n(S,!1)}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){S.opacity.value=d.opacity;S.diffuse.value=d.color;S.map.value=d.map;S.lightMap.value=d.lightMap;S.lightMapIntensity.value=d.lightMapIntensity;S.aoMap.value=d.aoMap;S.aoMapIntensity.value=d.aoMapIntensity;S.specularMap.value=d.specularMap;S.alphaMap.value=d.alphaMap;d.bumpMap&&(S.bumpMap.value=d.bumpMap,S.bumpScale.value=d.bumpScale);d.normalMap&&(S.normalMap.value=
d.normalMap,S.normalScale.value.copy(d.normalScale));var Fa;d.map?Fa=d.map:d.specularMap?Fa=d.specularMap:d.normalMap?Fa=d.normalMap:d.bumpMap?Fa=d.bumpMap:d.alphaMap&&(Fa=d.alphaMap);if(void 0!==Fa){var Ib=Fa.offset,Jb=Fa.repeat;S.offsetRepeat.value.set(Ib.x,Ib.y,Jb.x,Jb.y)}S.envMap.value=d.envMap;S.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;S.reflectivity.value=d.reflectivity;S.refractionRatio.value=d.refractionRatio}if(d instanceof THREE.LineBasicMaterial)S.diffuse.value=
d.color,S.opacity.value=d.opacity;else if(d instanceof THREE.LineDashedMaterial)S.diffuse.value=d.color,S.opacity.value=d.opacity,S.dashSize.value=d.dashSize,S.totalSize.value=d.dashSize+d.gapSize,S.scale.value=d.scale;else if(d instanceof THREE.PointCloudMaterial){if(S.psColor.value=d.color,S.opacity.value=d.opacity,S.size.value=d.size,S.scale.value=F.height/2,S.map.value=d.map,null!==d.map){var Kb=d.map.offset,Lb=d.map.repeat;S.offsetRepeat.value.set(Kb.x,Kb.y,Lb.x,Lb.y)}}else d instanceof THREE.MeshPhongMaterial?
(S.shininess.value=d.shininess,S.emissive.value=d.emissive,S.specular.value=d.specular,d.wrapAround&&S.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(S.emissive.value=d.emissive,d.wrapAround&&S.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(S.mNear.value=a.near,S.mFar.value=a.far,S.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(S.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&S.shadowMatrix)for(var Sa=0,vb=0,Eb=b.length;vb<
Eb;vb++){var Ca=b[vb];Ca.castShadow&&(Ca instanceof THREE.SpotLight||Ca instanceof THREE.DirectionalLight&&!Ca.shadowCascade)&&(S.shadowMap.value[Sa]=Ca.shadowMap,S.shadowMapSize.value[Sa]=Ca.shadowMapSize,S.shadowMatrix.value[Sa]=Ca.shadowMatrix,S.shadowDarkness.value[Sa]=Ca.shadowDarkness,S.shadowBias.value[Sa]=Ca.shadowBias,Sa++)}for(var wb=d.uniformsList,ta,Ka,ua,bb=0,Ub=wb.length;bb<Ub;bb++){var Y=wb[bb][0];if(!1!==Y.needsUpdate){var Mb=Y.type,T=Y.value,$=wb[bb][1];switch(Mb){case "1i":q.uniform1i($,
T);break;case "1f":q.uniform1f($,T);break;case "2f":q.uniform2f($,T[0],T[1]);break;case "3f":q.uniform3f($,T[0],T[1],T[2]);break;case "4f":q.uniform4f($,T[0],T[1],T[2],T[3]);break;case "1iv":q.uniform1iv($,T);break;case "3iv":q.uniform3iv($,T);break;case "1fv":q.uniform1fv($,T);break;case "2fv":q.uniform2fv($,T);break;case "3fv":q.uniform3fv($,T);break;case "4fv":q.uniform4fv($,T);break;case "Matrix3fv":q.uniformMatrix3fv($,!1,T);break;case "Matrix4fv":q.uniformMatrix4fv($,!1,T);break;case "i":q.uniform1i($,
T);break;case "f":q.uniform1f($,T);break;case "v2":q.uniform2f($,T.x,T.y);break;case "v3":q.uniform3f($,T.x,T.y,T.z);break;case "v4":q.uniform4f($,T.x,T.y,T.z,T.w);break;case "c":q.uniform3f($,T.r,T.g,T.b);break;case "iv1":q.uniform1iv($,T);break;case "iv":q.uniform3iv($,T);break;case "fv1":q.uniform1fv($,T);break;case "fv":q.uniform3fv($,T);break;case "v2v":void 0===Y._array&&(Y._array=new Float32Array(2*T.length));for(var W=0,ra=T.length;W<ra;W++)ua=2*W,Y._array[ua+0]=T[W].x,Y._array[ua+1]=T[W].y;
q.uniform2fv($,Y._array);break;case "v3v":void 0===Y._array&&(Y._array=new Float32Array(3*T.length));W=0;for(ra=T.length;W<ra;W++)ua=3*W,Y._array[ua+0]=T[W].x,Y._array[ua+1]=T[W].y,Y._array[ua+2]=T[W].z;q.uniform3fv($,Y._array);break;case "v4v":void 0===Y._array&&(Y._array=new Float32Array(4*T.length));W=0;for(ra=T.length;W<ra;W++)ua=4*W,Y._array[ua+0]=T[W].x,Y._array[ua+1]=T[W].y,Y._array[ua+2]=T[W].z,Y._array[ua+3]=T[W].w;q.uniform4fv($,Y._array);break;case "m3":q.uniformMatrix3fv($,!1,T.elements);
break;case "m3v":void 0===Y._array&&(Y._array=new Float32Array(9*T.length));W=0;for(ra=T.length;W<ra;W++)T[W].flattenToArrayOffset(Y._array,9*W);q.uniformMatrix3fv($,!1,Y._array);break;case "m4":q.uniformMatrix4fv($,!1,T.elements);break;case "m4v":void 0===Y._array&&(Y._array=new Float32Array(16*T.length));W=0;for(ra=T.length;W<ra;W++)T[W].flattenToArrayOffset(Y._array,16*W);q.uniformMatrix4fv($,!1,Y._array);break;case "t":ta=T;Ka=m();q.uniform1i($,Ka);if(!ta)continue;if(ta instanceof THREE.CubeTexture||
ta.image instanceof Array&&6===ta.image.length){var ga=ta,Nb=Ka;if(6===ga.image.length)if(ga.needsUpdate){ga.image.__webglTextureCube||(ga.addEventListener("dispose",xb),ga.image.__webglTextureCube=q.createTexture(),P.info.memory.textures++);q.activeTexture(q.TEXTURE0+Nb);q.bindTexture(q.TEXTURE_CUBE_MAP,ga.image.__webglTextureCube);q.pixelStorei(q.UNPACK_FLIP_Y_WEBGL,ga.flipY);for(var Ob=ga instanceof THREE.CompressedTexture,yb=ga.image[0]instanceof THREE.DataTexture,La=[],ja=0;6>ja;ja++)La[ja]=
!P.autoScaleCubemaps||Ob||yb?yb?ga.image[ja].image:ga.image[ja]:v(ga.image[ja],Vb);var Pb=La[0],Qb=THREE.Math.isPowerOfTwo(Pb.width)&&THREE.Math.isPowerOfTwo(Pb.height),Ga=w(ga.format),zb=w(ga.type);r(q.TEXTURE_CUBE_MAP,ga,Qb);for(ja=0;6>ja;ja++)if(Ob)for(var Ma,Rb=La[ja].mipmaps,Xa=0,Wb=Rb.length;Xa<Wb;Xa++)Ma=Rb[Xa],ga.format!==THREE.RGBAFormat&&ga.format!==THREE.RGBFormat?-1<Sb().indexOf(Ga)?q.compressedTexImage2D(q.TEXTURE_CUBE_MAP_POSITIVE_X+ja,Xa,Ga,Ma.width,Ma.height,0,Ma.data):THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()"):
q.texImage2D(q.TEXTURE_CUBE_MAP_POSITIVE_X+ja,Xa,Ga,Ma.width,Ma.height,0,Ga,zb,Ma.data);else yb?q.texImage2D(q.TEXTURE_CUBE_MAP_POSITIVE_X+ja,0,Ga,La[ja].width,La[ja].height,0,Ga,zb,La[ja].data):q.texImage2D(q.TEXTURE_CUBE_MAP_POSITIVE_X+ja,0,Ga,Ga,zb,La[ja]);ga.generateMipmaps&&Qb&&q.generateMipmap(q.TEXTURE_CUBE_MAP);ga.needsUpdate=!1;if(ga.onUpdate)ga.onUpdate(ga)}else q.activeTexture(q.TEXTURE0+Nb),q.bindTexture(q.TEXTURE_CUBE_MAP,ga.image.__webglTextureCube)}else if(ta instanceof THREE.WebGLRenderTargetCube){var Xb=
ta;q.activeTexture(q.TEXTURE0+Ka);q.bindTexture(q.TEXTURE_CUBE_MAP,Xb.__webglTexture)}else P.setTexture(ta,Ka);break;case "tv":void 0===Y._array&&(Y._array=[]);W=0;for(ra=Y.value.length;W<ra;W++)Y._array[W]=m();q.uniform1iv($,Y._array);W=0;for(ra=Y.value.length;W<ra;W++)ta=Y.value[W],Ka=Y._array[W],ta&&P.setTexture(ta,Ka);break;default:THREE.warn("THREE.WebGLRenderer: Unknown uniform type: "+Mb)}}}}q.uniformMatrix4fv(ea.modelViewMatrix,!1,e._modelViewMatrix.elements);ea.normalMatrix&&q.uniformMatrix3fv(ea.normalMatrix,
!1,e._normalMatrix.elements);null!==ea.modelMatrix&&q.uniformMatrix4fv(ea.modelMatrix,!1,e.matrixWorld.elements);return Ta}function n(a,b){a.ambientLightColor.needsUpdate=b;a.directionalLightColor.needsUpdate=b;a.directionalLightDirection.needsUpdate=b;a.pointLightColor.needsUpdate=b;a.pointLightPosition.needsUpdate=b;a.pointLightDistance.needsUpdate=b;a.pointLightDecay.needsUpdate=b;a.spotLightColor.needsUpdate=b;a.spotLightPosition.needsUpdate=b;a.spotLightDistance.needsUpdate=b;a.spotLightDirection.needsUpdate=
b;a.spotLightAngleCos.needsUpdate=b;a.spotLightExponent.needsUpdate=b;a.spotLightDecay.needsUpdate=b;a.hemisphereLightSkyColor.needsUpdate=b;a.hemisphereLightGroundColor.needsUpdate=b;a.hemisphereLightDirection.needsUpdate=b}function m(){var a=pa;a>=Ya&&THREE.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+Ya);pa+=1;return a}function s(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getNormalMatrix(a._modelViewMatrix)}
function t(a,b,c,d){a[b+0]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function r(a,b,c){c?(q.texParameteri(a,q.TEXTURE_WRAP_S,w(b.wrapS)),q.texParameteri(a,q.TEXTURE_WRAP_T,w(b.wrapT)),q.texParameteri(a,q.TEXTURE_MAG_FILTER,w(b.magFilter)),q.texParameteri(a,q.TEXTURE_MIN_FILTER,w(b.minFilter))):(q.texParameteri(a,q.TEXTURE_WRAP_S,q.CLAMP_TO_EDGE),q.texParameteri(a,q.TEXTURE_WRAP_T,q.CLAMP_TO_EDGE),b.wrapS===THREE.ClampToEdgeWrapping&&b.wrapT===THREE.ClampToEdgeWrapping||THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping. ( "+
b.sourceFile+" )"),q.texParameteri(a,q.TEXTURE_MAG_FILTER,z(b.magFilter)),q.texParameteri(a,q.TEXTURE_MIN_FILTER,z(b.minFilter)),b.minFilter!==THREE.NearestFilter&&b.minFilter!==THREE.LinearFilter&&THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter. ( "+b.sourceFile+" )"));(c=Z.get("EXT_texture_filter_anisotropic"))&&b.type!==THREE.FloatType&&b.type!==THREE.HalfFloatType&&(1<b.anisotropy||b.__currentAnisotropy)&&
(q.texParameterf(a,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,P.getMaxAnisotropy())),b.__currentAnisotropy=b.anisotropy)}function v(a,b){if(a.width>b||a.height>b){var c=b/Math.max(a.width,a.height),d=document.createElement("canvas");d.width=Math.floor(a.width*c);d.height=Math.floor(a.height*c);d.getContext("2d").drawImage(a,0,0,a.width,a.height,0,0,d.width,d.height);THREE.warn("THREE.WebGLRenderer: image is too big ("+a.width+"x"+a.height+"). Resized to "+d.width+"x"+d.height,a);return d}return a}
function u(a,b){q.bindRenderbuffer(q.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(q.renderbufferStorage(q.RENDERBUFFER,q.DEPTH_COMPONENT16,b.width,b.height),q.framebufferRenderbuffer(q.FRAMEBUFFER,q.DEPTH_ATTACHMENT,q.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(q.renderbufferStorage(q.RENDERBUFFER,q.DEPTH_STENCIL,b.width,b.height),q.framebufferRenderbuffer(q.FRAMEBUFFER,q.DEPTH_STENCIL_ATTACHMENT,q.RENDERBUFFER,a)):q.renderbufferStorage(q.RENDERBUFFER,q.RGBA4,b.width,b.height)}function x(a){a instanceof
THREE.WebGLRenderTargetCube?(q.bindTexture(q.TEXTURE_CUBE_MAP,a.__webglTexture),q.generateMipmap(q.TEXTURE_CUBE_MAP),q.bindTexture(q.TEXTURE_CUBE_MAP,null)):(q.bindTexture(q.TEXTURE_2D,a.__webglTexture),q.generateMipmap(q.TEXTURE_2D),q.bindTexture(q.TEXTURE_2D,null))}function z(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?q.NEAREST:q.LINEAR}function w(a){var b;if(a===THREE.RepeatWrapping)return q.REPEAT;if(a===THREE.ClampToEdgeWrapping)return q.CLAMP_TO_EDGE;
if(a===THREE.MirroredRepeatWrapping)return q.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return q.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return q.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return q.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return q.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return q.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return q.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return q.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return q.UNSIGNED_SHORT_4_4_4_4;
if(a===THREE.UnsignedShort5551Type)return q.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return q.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return q.BYTE;if(a===THREE.ShortType)return q.SHORT;if(a===THREE.UnsignedShortType)return q.UNSIGNED_SHORT;if(a===THREE.IntType)return q.INT;if(a===THREE.UnsignedIntType)return q.UNSIGNED_INT;if(a===THREE.FloatType)return q.FLOAT;b=Z.get("OES_texture_half_float");if(null!==b&&a===THREE.HalfFloatType)return b.HALF_FLOAT_OES;if(a===THREE.AlphaFormat)return q.ALPHA;
if(a===THREE.RGBFormat)return q.RGB;if(a===THREE.RGBAFormat)return q.RGBA;if(a===THREE.LuminanceFormat)return q.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return q.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return q.FUNC_ADD;if(a===THREE.SubtractEquation)return q.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return q.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return q.ZERO;if(a===THREE.OneFactor)return q.ONE;if(a===THREE.SrcColorFactor)return q.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return q.ONE_MINUS_SRC_COLOR;
if(a===THREE.SrcAlphaFactor)return q.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return q.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return q.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return q.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return q.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return q.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return q.SRC_ALPHA_SATURATE;b=Z.get("WEBGL_compressed_texture_s3tc");if(null!==b){if(a===THREE.RGB_S3TC_DXT1_Format)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;
if(a===THREE.RGBA_S3TC_DXT1_Format)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}b=Z.get("WEBGL_compressed_texture_pvrtc");if(null!==b){if(a===THREE.RGB_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(a===THREE.RGB_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(a===THREE.RGBA_PVRTC_4BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
if(a===THREE.RGBA_PVRTC_2BPPV1_Format)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}b=Z.get("EXT_blend_minmax");if(null!==b){if(a===THREE.MinEquation)return b.MIN_EXT;if(a===THREE.MaxEquation)return b.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);a=a||{};var F=void 0!==a.canvas?a.canvas:document.createElement("canvas"),G=void 0!==a.context?a.context:null,y=F.width,I=F.height,B=1,C=void 0!==a.precision?a.precision:"highp",E=void 0!==a.alpha?a.alpha:!1,L=void 0!==a.depth?a.depth:!0,
N=void 0!==a.stencil?a.stencil:!0,H=void 0!==a.antialias?a.antialias:!1,O=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,M=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,A=void 0!==a.logarithmicDepthBuffer?a.logarithmicDepthBuffer:!1,J=new THREE.Color(0),R=0,K=[],D=[],X=[],ia=[],Q=[];this.domElement=F;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.gammaFactor=2;this.gammaOutput=this.gammaInput=!1;this.maxMorphTargets=
8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var P=this,aa=[],ca=null,qa=null,Da=-1,xa="",V=null,pa=0,ya=0,va=0,wa=F.width,la=F.height,za=0,Aa=0,Oa=new THREE.Frustum,Ha=new THREE.Matrix4,oa=new THREE.Vector3,ha=new THREE.Vector3,$a=!0,Hb={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[],decays:[]},spot:{length:0,colors:[],positions:[],
distances:[],directions:[],anglesCos:[],exponents:[],decays:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},q;try{a={alpha:E,depth:L,stencil:N,antialias:H,premultipliedAlpha:O,preserveDrawingBuffer:M};q=G||F.getContext("webgl",a)||F.getContext("experimental-webgl",a);if(null===q){if(null!==F.getContext("webgl"))throw"Error creating WebGL context with your selected attributes.";throw"Error creating WebGL context.";}F.addEventListener("webglcontextlost",function(a){a.preventDefault();
Za();cb();na.objects={}},!1)}catch(Ab){THREE.error("THREE.WebGLRenderer: "+Ab)}var U=new THREE.WebGLState(q,w);void 0===q.getShaderPrecisionFormat&&(q.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});var Z=new THREE.WebGLExtensions(q),na=new THREE.WebGLObjects(q,this.info,Z,function(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material});Z.get("OES_texture_float");Z.get("OES_texture_float_linear");Z.get("OES_texture_half_float");
Z.get("OES_texture_half_float_linear");Z.get("OES_standard_derivatives");Z.get("ANGLE_instanced_arrays");A&&Z.get("EXT_frag_depth");var Na=function(a,b,c,d){!0===O&&(a*=d,b*=d,c*=d);q.clearColor(a,b,c,d)},cb=function(){q.clearColor(0,0,0,1);q.clearDepth(1);q.clearStencil(0);q.enable(q.DEPTH_TEST);q.depthFunc(q.LEQUAL);q.frontFace(q.CCW);q.cullFace(q.BACK);q.enable(q.CULL_FACE);q.enable(q.BLEND);q.blendEquation(q.FUNC_ADD);q.blendFunc(q.SRC_ALPHA,q.ONE_MINUS_SRC_ALPHA);q.viewport(ya,va,wa,la);Na(J.r,
J.g,J.b,R)},Za=function(){V=ca=null;xa="";Da=-1;$a=!0;U.reset()};cb();this.context=q;this.extensions=Z;this.state=U;var ma=new THREE.WebGLShadowMap(this,K,na);this.shadowMap=ma;var Ya=q.getParameter(q.MAX_TEXTURE_IMAGE_UNITS),G=q.getParameter(q.MAX_VERTEX_TEXTURE_IMAGE_UNITS),Bb=q.getParameter(q.MAX_TEXTURE_SIZE),Vb=q.getParameter(q.MAX_CUBE_MAP_TEXTURE_SIZE),fb=0<G,eb=fb&&Z.get("OES_texture_float"),Cb=Z.get("ANGLE_instanced_arrays"),E=q.getShaderPrecisionFormat(q.VERTEX_SHADER,q.HIGH_FLOAT),G=q.getShaderPrecisionFormat(q.VERTEX_SHADER,
q.MEDIUM_FLOAT),L=q.getShaderPrecisionFormat(q.FRAGMENT_SHADER,q.HIGH_FLOAT);a=q.getShaderPrecisionFormat(q.FRAGMENT_SHADER,q.MEDIUM_FLOAT);var Sb=function(){var a;return function(){if(void 0!==a)return a;a=[];if(Z.get("WEBGL_compressed_texture_pvrtc")||Z.get("WEBGL_compressed_texture_s3tc"))for(var b=q.getParameter(q.COMPRESSED_TEXTURE_FORMATS),c=0;c<b.length;c++)a.push(b[c]);return a}}(),E=0<E.precision&&0<L.precision,G=0<G.precision&&0<a.precision;"highp"!==C||E||(G?(C="mediump",THREE.warn("THREE.WebGLRenderer: highp not supported, using mediump.")):
(C="lowp",THREE.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp.")));"mediump"!==C||G||(C="lowp",THREE.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));var Db=new THREE.SpritePlugin(this,ia),Eb=new THREE.LensFlarePlugin(this,Q);this.getContext=function(){return q};this.forceContextLoss=function(){Z.get("WEBGL_lose_context").loseContext()};this.supportsVertexTextures=function(){return fb};this.supportsInstancedArrays=function(){return Cb};this.supportsFloatTextures=
function(){return Z.get("OES_texture_float")};this.supportsHalfFloatTextures=function(){return Z.get("OES_texture_half_float")};this.supportsStandardDerivatives=function(){return Z.get("OES_standard_derivatives")};this.supportsCompressedTextureS3TC=function(){return Z.get("WEBGL_compressed_texture_s3tc")};this.supportsCompressedTexturePVRTC=function(){return Z.get("WEBGL_compressed_texture_pvrtc")};this.supportsBlendMinMax=function(){return Z.get("EXT_blend_minmax")};this.getMaxAnisotropy=function(){var a;
return function(){if(void 0!==a)return a;var b=Z.get("EXT_texture_filter_anisotropic");return a=null!==b?q.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}}();this.getPrecision=function(){return C};this.getPixelRatio=function(){return B};this.setPixelRatio=function(a){B=a};this.getSize=function(){return{width:y,height:I}};this.setSize=function(a,b,c){y=a;I=b;F.width=a*B;F.height=b*B;!1!==c&&(F.style.width=a+"px",F.style.height=b+"px");this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){ya=
a*B;va=b*B;wa=c*B;la=d*B;q.viewport(ya,va,wa,la)};this.setScissor=function(a,b,c,d){q.scissor(a*B,b*B,c*B,d*B)};this.enableScissorTest=function(a){a?q.enable(q.SCISSOR_TEST):q.disable(q.SCISSOR_TEST)};this.getClearColor=function(){return J};this.setClearColor=function(a,b){J.set(a);R=void 0!==b?b:1;Na(J.r,J.g,J.b,R)};this.getClearAlpha=function(){return R};this.setClearAlpha=function(a){R=a;Na(J.r,J.g,J.b,R)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=q.COLOR_BUFFER_BIT;if(void 0===b||
b)d|=q.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=q.STENCIL_BUFFER_BIT;q.clear(d)};this.clearColor=function(){q.clear(q.COLOR_BUFFER_BIT)};this.clearDepth=function(){q.clear(q.DEPTH_BUFFER_BIT)};this.clearStencil=function(){q.clear(q.STENCIL_BUFFER_BIT)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.resetGLState=Za;var xb=function(a){a=a.target;a.removeEventListener("dispose",xb);a.image&&a.image.__webglTextureCube?(q.deleteTexture(a.image.__webglTextureCube),delete a.image.__webglTextureCube):
void 0!==a.__webglInit&&(q.deleteTexture(a.__webglTexture),delete a.__webglTexture,delete a.__webglInit);P.info.memory.textures--},db=function(a){a=a.target;a.removeEventListener("dispose",db);if(a&&void 0!==a.__webglTexture){q.deleteTexture(a.__webglTexture);delete a.__webglTexture;if(a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)q.deleteFramebuffer(a.__webglFramebuffer[b]),q.deleteRenderbuffer(a.__webglRenderbuffer[b]);else q.deleteFramebuffer(a.__webglFramebuffer),q.deleteRenderbuffer(a.__webglRenderbuffer);
delete a.__webglFramebuffer;delete a.__webglRenderbuffer}P.info.memory.textures--},Gb=function(a){a=a.target;a.removeEventListener("dispose",Gb);Fb(a)},Fb=function(a){var b=a.program.program;if(void 0!==b){a.program=void 0;var c,d,e=!1;a=0;for(c=aa.length;a<c;a++)if(d=aa[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=aa.length;a<c;a++)d=aa[a],d.program!==b&&e.push(d);aa=e;q.deleteProgram(b);P.info.memory.programs--}}};this.renderBufferImmediate=function(a,
b,c){U.initAttributes();a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=q.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=q.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=q.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=q.createBuffer());a.hasPositions&&(q.bindBuffer(q.ARRAY_BUFFER,a.__webglVertexBuffer),q.bufferData(q.ARRAY_BUFFER,a.positionArray,q.DYNAMIC_DRAW),U.enableAttribute(b.attributes.position),q.vertexAttribPointer(b.attributes.position,
3,q.FLOAT,!1,0,0));if(a.hasNormals){q.bindBuffer(q.ARRAY_BUFFER,a.__webglNormalBuffer);if(!1===c instanceof THREE.MeshPhongMaterial&&c.shading===THREE.FlatShading){var d,e,f,g,h,k,m,l,p,n,u,s=3*a.count;for(u=0;u<s;u+=9)n=a.normalArray,d=n[u],e=n[u+1],f=n[u+2],g=n[u+3],k=n[u+4],l=n[u+5],h=n[u+6],m=n[u+7],p=n[u+8],d=(d+g+h)/3,e=(e+k+m)/3,f=(f+l+p)/3,n[u]=d,n[u+1]=e,n[u+2]=f,n[u+3]=d,n[u+4]=e,n[u+5]=f,n[u+6]=d,n[u+7]=e,n[u+8]=f}q.bufferData(q.ARRAY_BUFFER,a.normalArray,q.DYNAMIC_DRAW);U.enableAttribute(b.attributes.normal);
q.vertexAttribPointer(b.attributes.normal,3,q.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(q.bindBuffer(q.ARRAY_BUFFER,a.__webglUvBuffer),q.bufferData(q.ARRAY_BUFFER,a.uvArray,q.DYNAMIC_DRAW),U.enableAttribute(b.attributes.uv),q.vertexAttribPointer(b.attributes.uv,2,q.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(q.bindBuffer(q.ARRAY_BUFFER,a.__webglColorBuffer),q.bufferData(q.ARRAY_BUFFER,a.colorArray,q.DYNAMIC_DRAW),U.enableAttribute(b.attributes.color),q.vertexAttribPointer(b.attributes.color,
3,q.FLOAT,!1,0,0));U.disableUnusedAttributes();q.drawArrays(q.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,c,d,e,f,g){if(!1!==e.visible)if(na.update(g),a=p(a,c,d,e,g),c=!1,d="direct_"+f.id+"_"+a.id+"_"+(e.wireframe?1:0),d!==xa&&(xa=d,c=!0),c&&U.initAttributes(),g instanceof THREE.Mesh){g=!0===e.wireframe?q.LINES:q.TRIANGLES;var h=f.attributes.index;if(h){var k,m;h.array instanceof Uint32Array&&Z.get("OES_element_index_uint")?(k=q.UNSIGNED_INT,m=4):(k=q.UNSIGNED_SHORT,m=2);d=
f.offsets;if(0===d.length){c&&(b(e,a,f,0),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer));if(f instanceof THREE.InstancedBufferGeometry&&0<f.maxInstancedCount){var l=Z.get("ANGLE_instanced_arrays");if(null===l){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}l.drawElementsInstancedANGLE(g,h.array.length,k,0,f.maxInstancedCount)}else q.drawElements(g,h.array.length,k,0);P.info.render.calls++;
P.info.render.vertices+=h.array.length;P.info.render.faces+=h.array.length/3}else{c=!0;for(var n=0,u=d.length;n<u;n++){l=d[n].index;c&&(b(e,a,f,l),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer));if(f instanceof THREE.InstancedBufferGeometry&&0<d[n].instances){l=Z.get("ANGLE_instanced_arrays");if(null===l){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");break}l.drawElementsInstancedANGLE(g,
d[n].count,k,d[n].start*m,d[n].count,k,d[n].instances)}else q.drawElements(g,d[n].count,k,d[n].start*m);P.info.render.calls++;P.info.render.vertices+=d[n].count;P.info.render.faces+=d[n].count/3}}}else{c&&b(e,a,f,0);e=f.attributes.position;if(f instanceof THREE.InstancedBufferGeometry&&0<f.maxInstancedCount){l=Z.get("ANGLE_instanced_arrays");if(null===l){THREE.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
return}e instanceof THREE.InterleavedBufferAttribute?l.drawArraysInstancedANGLE(g,0,e.data.array.length/e.data.stride,f.maxInstancedCount):l.drawArraysInstancedANGLE(g,0,e.array.length/e.itemSize,f.maxInstancedCount)}else e instanceof THREE.InterleavedBufferAttribute?q.drawArrays(g,0,e.data.array.length/e.data.stride):q.drawArrays(g,0,e.array.length/e.itemSize);P.info.render.calls++;P.info.render.vertices+=e.array.length/e.itemSize;P.info.render.faces+=e.array.length/(3*e.itemSize)}}else if(g instanceof
THREE.PointCloud)if(g=q.POINTS,h=f.attributes.index)if(h.array instanceof Uint32Array&&Z.get("OES_element_index_uint")?(k=q.UNSIGNED_INT,m=4):(k=q.UNSIGNED_SHORT,m=2),d=f.offsets,0===d.length)c&&(b(e,a,f,0),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer)),q.drawElements(g,h.array.length,k,0),P.info.render.calls++,P.info.render.points+=h.array.length;else for(1<d.length&&(c=!0),n=0,u=d.length;n<u;n++)l=d[n].index,c&&(b(e,a,f,l),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer)),q.drawElements(g,d[n].count,
k,d[n].start*m),P.info.render.calls++,P.info.render.points+=d[n].count;else if(c&&b(e,a,f,0),e=f.attributes.position,d=f.offsets,0===d.length)q.drawArrays(g,0,e.array.length/3),P.info.render.calls++,P.info.render.points+=e.array.length/3;else for(n=0,u=d.length;n<u;n++)q.drawArrays(g,d[n].index,d[n].count),P.info.render.calls++,P.info.render.points+=d[n].count;else if(g instanceof THREE.Line)if(g=g.mode===THREE.LineStrip?q.LINE_STRIP:q.LINES,U.setLineWidth(e.linewidth*B),h=f.attributes.index)if(h.array instanceof
Uint32Array?(k=q.UNSIGNED_INT,m=4):(k=q.UNSIGNED_SHORT,m=2),d=f.offsets,0===d.length)c&&(b(e,a,f,0),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer)),q.drawElements(g,h.array.length,k,0),P.info.render.calls++,P.info.render.vertices+=h.array.length;else for(1<d.length&&(c=!0),n=0,u=d.length;n<u;n++)l=d[n].index,c&&(b(e,a,f,l),q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,h.buffer)),q.drawElements(g,d[n].count,k,d[n].start*m),P.info.render.calls++,P.info.render.vertices+=d[n].count;else if(c&&b(e,a,f,0),e=f.attributes.position,
d=f.offsets,0===d.length)q.drawArrays(g,0,e.array.length/3),P.info.render.calls++,P.info.render.vertices+=e.array.length/3;else for(n=0,u=d.length;n<u;n++)q.drawArrays(g,d[n].index,d[n].count),P.info.render.calls++,P.info.render.vertices+=d[n].count};this.renderBuffer=function(a,b,c,d,f,g){if(!1!==d.visible){na.update(g);c=p(a,b,c,d,g);b=c.attributes;a=!1;c=f.id+"_"+c.id+"_"+(d.wireframe?1:0);c!==xa&&(xa=c,a=!0);a&&U.initAttributes();if(!d.morphTargets&&0<=b.position)a&&(q.bindBuffer(q.ARRAY_BUFFER,
f.__webglVertexBuffer),U.enableAttribute(b.position),q.vertexAttribPointer(b.position,3,q.FLOAT,!1,0,0));else if(g.morphTargetBase){c=d.program.attributes;-1!==g.morphTargetBase&&0<=c.position?(q.bindBuffer(q.ARRAY_BUFFER,f.__webglMorphTargetsBuffers[g.morphTargetBase]),U.enableAttribute(c.position),q.vertexAttribPointer(c.position,3,q.FLOAT,!1,0,0)):0<=c.position&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglVertexBuffer),U.enableAttribute(c.position),q.vertexAttribPointer(c.position,3,q.FLOAT,!1,0,0));
if(g.morphTargetForcedOrder.length)for(var h=0,k=g.morphTargetForcedOrder,m=g.morphTargetInfluences,l;h<d.numSupportedMorphTargets&&h<k.length;)l=c["morphTarget"+h],0<=l&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglMorphTargetsBuffers[k[h]]),U.enableAttribute(l),q.vertexAttribPointer(l,3,q.FLOAT,!1,0,0)),l=c["morphNormal"+h],0<=l&&d.morphNormals&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglMorphNormalsBuffers[k[h]]),U.enableAttribute(l),q.vertexAttribPointer(l,3,q.FLOAT,!1,0,0)),g.__webglMorphTargetInfluences[h]=
m[k[h]],h++;else{k=[];m=g.morphTargetInfluences;h=g.geometry.morphTargets;m.length>h.length&&(THREE.warn("THREE.WebGLRenderer: Influences array is bigger than morphTargets array."),m.length=h.length);h=0;for(l=m.length;h<l;h++)k.push([m[h],h]);k.length>d.numSupportedMorphTargets?(k.sort(e),k.length=d.numSupportedMorphTargets):k.length>d.numSupportedMorphNormals?k.sort(e):0===k.length&&k.push([0,0]);for(var h=0,n=d.numSupportedMorphTargets;h<n;h++)if(k[h]){var u=k[h][1];l=c["morphTarget"+h];0<=l&&
(q.bindBuffer(q.ARRAY_BUFFER,f.__webglMorphTargetsBuffers[u]),U.enableAttribute(l),q.vertexAttribPointer(l,3,q.FLOAT,!1,0,0));l=c["morphNormal"+h];0<=l&&d.morphNormals&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglMorphNormalsBuffers[u]),U.enableAttribute(l),q.vertexAttribPointer(l,3,q.FLOAT,!1,0,0));g.__webglMorphTargetInfluences[h]=m[u]}else g.__webglMorphTargetInfluences[h]=0}null!==d.program.uniforms.morphTargetInfluences&&q.uniform1fv(d.program.uniforms.morphTargetInfluences,g.__webglMorphTargetInfluences)}if(a){if(f.__webglCustomAttributesList)for(c=
0,m=f.__webglCustomAttributesList.length;c<m;c++)k=f.__webglCustomAttributesList[c],0<=b[k.buffer.belongsToAttribute]&&(q.bindBuffer(q.ARRAY_BUFFER,k.buffer),U.enableAttribute(b[k.buffer.belongsToAttribute]),q.vertexAttribPointer(b[k.buffer.belongsToAttribute],k.size,q.FLOAT,!1,0,0));0<=b.color&&(0<g.geometry.colors.length||0<g.geometry.faces.length?(q.bindBuffer(q.ARRAY_BUFFER,f.__webglColorBuffer),U.enableAttribute(b.color),q.vertexAttribPointer(b.color,3,q.FLOAT,!1,0,0)):void 0!==d.defaultAttributeValues&&
q.vertexAttrib3fv(b.color,d.defaultAttributeValues.color));0<=b.normal&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglNormalBuffer),U.enableAttribute(b.normal),q.vertexAttribPointer(b.normal,3,q.FLOAT,!1,0,0));0<=b.tangent&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglTangentBuffer),U.enableAttribute(b.tangent),q.vertexAttribPointer(b.tangent,4,q.FLOAT,!1,0,0));0<=b.uv&&(g.geometry.faceVertexUvs[0]?(q.bindBuffer(q.ARRAY_BUFFER,f.__webglUVBuffer),U.enableAttribute(b.uv),q.vertexAttribPointer(b.uv,2,q.FLOAT,!1,0,
0)):void 0!==d.defaultAttributeValues&&q.vertexAttrib2fv(b.uv,d.defaultAttributeValues.uv));0<=b.uv2&&(g.geometry.faceVertexUvs[1]?(q.bindBuffer(q.ARRAY_BUFFER,f.__webglUV2Buffer),U.enableAttribute(b.uv2),q.vertexAttribPointer(b.uv2,2,q.FLOAT,!1,0,0)):void 0!==d.defaultAttributeValues&&q.vertexAttrib2fv(b.uv2,d.defaultAttributeValues.uv2));d.skinning&&0<=b.skinIndex&&0<=b.skinWeight&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglSkinIndicesBuffer),U.enableAttribute(b.skinIndex),q.vertexAttribPointer(b.skinIndex,
4,q.FLOAT,!1,0,0),q.bindBuffer(q.ARRAY_BUFFER,f.__webglSkinWeightsBuffer),U.enableAttribute(b.skinWeight),q.vertexAttribPointer(b.skinWeight,4,q.FLOAT,!1,0,0));0<=b.lineDistance&&(q.bindBuffer(q.ARRAY_BUFFER,f.__webglLineDistanceBuffer),U.enableAttribute(b.lineDistance),q.vertexAttribPointer(b.lineDistance,1,q.FLOAT,!1,0,0))}U.disableUnusedAttributes();g instanceof THREE.Mesh?(g=f.__typeArray===Uint32Array?q.UNSIGNED_INT:q.UNSIGNED_SHORT,d.wireframe?(U.setLineWidth(d.wireframeLinewidth*B),a&&q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,
f.__webglLineBuffer),q.drawElements(q.LINES,f.__webglLineCount,g,0)):(a&&q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,f.__webglFaceBuffer),q.drawElements(q.TRIANGLES,f.__webglFaceCount,g,0)),P.info.render.calls++,P.info.render.vertices+=f.__webglFaceCount,P.info.render.faces+=f.__webglFaceCount/3):g instanceof THREE.Line?(g=g.mode===THREE.LineStrip?q.LINE_STRIP:q.LINES,U.setLineWidth(d.linewidth*B),q.drawArrays(g,0,f.__webglLineCount),P.info.render.calls++):g instanceof THREE.PointCloud&&(q.drawArrays(q.POINTS,
0,f.__webglParticleCount),P.info.render.calls++,P.info.render.points+=f.__webglParticleCount)}};this.render=function(a,b,e,m){if(!1===b instanceof THREE.Camera)THREE.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var p=a.fog;xa="";Da=-1;V=null;$a=!0;!0===a.autoUpdate&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();a.traverse(function(a){a instanceof THREE.SkinnedMesh&&a.skeleton.update()});b.matrixWorldInverse.getInverse(b.matrixWorld);Ha.multiplyMatrices(b.projectionMatrix,
b.matrixWorldInverse);Oa.setFromMatrix(Ha);K.length=0;D.length=0;X.length=0;ia.length=0;Q.length=0;f(a);!0===P.sortObjects&&(D.sort(c),X.sort(d));ma.render(a,b);P.info.render.calls=0;P.info.render.vertices=0;P.info.render.faces=0;P.info.render.points=0;this.setRenderTarget(e);(this.autoClear||m)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);m=0;for(var n=na.objectsImmediate.length;m<n;m++){var q=na.objectsImmediate[m],u=q.object;u.visible&&(s(u,b),k(q))}a.overrideMaterial?
(m=a.overrideMaterial,l(m),g(D,b,K,p,m),g(X,b,K,p,m),h(na.objectsImmediate,"",b,K,p,m)):(U.setBlending(THREE.NoBlending),g(D,b,K,p,null),h(na.objectsImmediate,"opaque",b,K,p,null),g(X,b,K,p,null),h(na.objectsImmediate,"transparent",b,K,p,null));Db.render(a,b);Eb.render(a,b,za,Aa);e&&e.generateMipmaps&&e.minFilter!==THREE.NearestFilter&&e.minFilter!==THREE.LinearFilter&&x(e);U.setDepthTest(!0);U.setDepthWrite(!0);U.setColorWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var f=p(a,b,c,d,
e);xa="";P.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(f,q,Oa):e.render(function(a){P.renderBufferImmediate(a,f,d)})};var Tb={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointCloudMaterial:"particle_basic"};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?q.disable(q.CULL_FACE):(b===THREE.FrontFaceDirectionCW?q.frontFace(q.CW):
q.frontFace(q.CCW),a===THREE.CullFaceBack?q.cullFace(q.BACK):a===THREE.CullFaceFront?q.cullFace(q.FRONT):q.cullFace(q.FRONT_AND_BACK),q.enable(q.CULL_FACE))};this.setMaterialFaces=function(a){U.setDoubleSided(a.side===THREE.DoubleSide);U.setFlipSided(a.side===THREE.BackSide)};this.uploadTexture=function(a,b){void 0===a.__webglInit&&(a.__webglInit=!0,a.addEventListener("dispose",xb),a.__webglTexture=q.createTexture(),P.info.memory.textures++);q.activeTexture(q.TEXTURE0+b);q.bindTexture(q.TEXTURE_2D,
a.__webglTexture);q.pixelStorei(q.UNPACK_FLIP_Y_WEBGL,a.flipY);q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);q.pixelStorei(q.UNPACK_ALIGNMENT,a.unpackAlignment);a.image=v(a.image,Bb);var c=a.image,d=THREE.Math.isPowerOfTwo(c.width)&&THREE.Math.isPowerOfTwo(c.height),e=w(a.format),f=w(a.type);r(q.TEXTURE_2D,a,d);var g=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<g.length&&d){for(var h=0,k=g.length;h<k;h++)c=g[h],q.texImage2D(q.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data);
a.generateMipmaps=!1}else q.texImage2D(q.TEXTURE_2D,0,e,c.width,c.height,0,e,f,c.data);else if(a instanceof THREE.CompressedTexture)for(h=0,k=g.length;h<k;h++)c=g[h],a.format!==THREE.RGBAFormat&&a.format!==THREE.RGBFormat?-1<Sb().indexOf(e)?q.compressedTexImage2D(q.TEXTURE_2D,h,e,c.width,c.height,0,c.data):THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):q.texImage2D(q.TEXTURE_2D,h,e,c.width,c.height,0,e,f,c.data);else if(0<g.length&&d){h=
0;for(k=g.length;h<k;h++)c=g[h],q.texImage2D(q.TEXTURE_2D,h,e,e,f,c);a.generateMipmaps=!1}else q.texImage2D(q.TEXTURE_2D,0,e,e,f,a.image);a.generateMipmaps&&d&&q.generateMipmap(q.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate(a)};this.setTexture=function(a,b){!0===a.needsUpdate?!1===a.image.complete?THREE.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",a):P.uploadTexture(a,b):(q.activeTexture(q.TEXTURE0+b),q.bindTexture(q.TEXTURE_2D,a.__webglTexture))};this.setRenderTarget=
function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&void 0===a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",db);a.__webglTexture=q.createTexture();P.info.memory.textures++;var c=THREE.Math.isPowerOfTwo(a.width)&&THREE.Math.isPowerOfTwo(a.height),d=w(a.format),e=w(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];q.bindTexture(q.TEXTURE_CUBE_MAP,a.__webglTexture);r(q.TEXTURE_CUBE_MAP,
a,c);for(var f=0;6>f;f++){a.__webglFramebuffer[f]=q.createFramebuffer();a.__webglRenderbuffer[f]=q.createRenderbuffer();q.texImage2D(q.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,d,a.width,a.height,0,d,e,null);var g=a,h=q.TEXTURE_CUBE_MAP_POSITIVE_X+f;q.bindFramebuffer(q.FRAMEBUFFER,a.__webglFramebuffer[f]);q.framebufferTexture2D(q.FRAMEBUFFER,q.COLOR_ATTACHMENT0,h,g.__webglTexture,0);u(a.__webglRenderbuffer[f],a)}a.generateMipmaps&&c&&q.generateMipmap(q.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=q.createFramebuffer(),
a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:q.createRenderbuffer(),q.bindTexture(q.TEXTURE_2D,a.__webglTexture),r(q.TEXTURE_2D,a,c),q.texImage2D(q.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=q.TEXTURE_2D,q.bindFramebuffer(q.FRAMEBUFFER,a.__webglFramebuffer),q.framebufferTexture2D(q.FRAMEBUFFER,q.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?q.framebufferRenderbuffer(q.FRAMEBUFFER,q.DEPTH_ATTACHMENT,q.RENDERBUFFER,a.__webglRenderbuffer):
a.depthBuffer&&a.stencilBuffer&&q.framebufferRenderbuffer(q.FRAMEBUFFER,q.DEPTH_STENCIL_ATTACHMENT,q.RENDERBUFFER,a.__webglRenderbuffer):u(a.__webglRenderbuffer,a),a.generateMipmaps&&c&&q.generateMipmap(q.TEXTURE_2D);b?q.bindTexture(q.TEXTURE_CUBE_MAP,null):q.bindTexture(q.TEXTURE_2D,null);q.bindRenderbuffer(q.RENDERBUFFER,null);q.bindFramebuffer(q.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=wa,a=la,d=ya,e=va);b!==qa&&
(q.bindFramebuffer(q.FRAMEBUFFER,b),q.viewport(d,e,c,a),qa=b);za=c;Aa=a};this.readRenderTargetPixels=function(a,b,c,d,e,f){if(!(a instanceof THREE.WebGLRenderTarget))THREE.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");else if(a.__webglFramebuffer)if(a.format!==THREE.RGBAFormat)THREE.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA format. readPixels can read only RGBA format.");else{var g=!1;a.__webglFramebuffer!==qa&&
(q.bindFramebuffer(q.FRAMEBUFFER,a.__webglFramebuffer),g=!0);q.checkFramebufferStatus(q.FRAMEBUFFER)===q.FRAMEBUFFER_COMPLETE?q.readPixels(b,c,d,e,q.RGBA,q.UNSIGNED_BYTE,f):THREE.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");g&&q.bindFramebuffer(q.FRAMEBUFFER,qa)}};this.initMaterial=function(){THREE.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};this.addPrePlugin=function(){THREE.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};
this.addPostPlugin=function(){THREE.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};this.updateShadowMap=function(){THREE.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};Object.defineProperties(this,{shadowMapEnabled:{get:function(){return ma.enabled},set:function(a){THREE.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");ma.enabled=a}},shadowMapType:{get:function(){return ma.type},set:function(a){THREE.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
ma.type=a}},shadowMapCullFace:{get:function(){return ma.cullFace},set:function(a){THREE.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");ma.cullFace=a}},shadowMapDebug:{get:function(){return ma.debug},set:function(a){THREE.warn("THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.");ma.debug=a}},shadowMapCascade:{get:function(){return ma.cascade},set:function(a){THREE.warn("THREE.WebGLRenderer: .shadowMapCascade is now .shadowMap.cascade.");ma.cascade=a}}})};
THREE.WebGLRenderTarget=function(a,b,c){this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.format=void 0!==c.format?c.format:
THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=void 0!==c.shareDepthFrom?c.shareDepthFrom:null};
THREE.WebGLRenderTarget.prototype={constructor:THREE.WebGLRenderTarget,setSize:function(a,b){this.width=a;this.height=b},clone:function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;
a.shareDepthFrom=this.shareDepthFrom;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube;
THREE.WebGLBuffers=function(a,b,c,d){function e(b){var c=b.geometry;b=b.material;var d=c.vertices.length;if(b.attributes){void 0===c.__webglCustomAttributesList&&(c.__webglCustomAttributesList=[]);for(var e in b.attributes){var l=b.attributes[e];if(!l.__webglInitialized||l.createUniqueBuffers){l.__webglInitialized=!0;var p=1;"v2"===l.type?p=2:"v3"===l.type?p=3:"v4"===l.type?p=4:"c"===l.type&&(p=3);l.size=p;l.array=new Float32Array(d*p);l.buffer=a.createBuffer();l.buffer.belongsToAttribute=e;l.needsUpdate=
!0}c.__webglCustomAttributesList.push(l)}}}this.initPointCloudBuffers=function(c,d){if(void 0===c.__webglVertexBuffer){c.__webglVertexBuffer=a.createBuffer();c.__webglColorBuffer=a.createBuffer();b.memory.geometries++;var h=c.vertices.length;c.__vertexArray=new Float32Array(3*h);c.__colorArray=new Float32Array(3*h);c.__webglParticleCount=h;e(d);c.verticesNeedUpdate=!0;c.colorsNeedUpdate=!0}};this.initLineBuffers=function(c,d){if(void 0===c.__webglVertexBuffer){c.__webglVertexBuffer=a.createBuffer();
c.__webglColorBuffer=a.createBuffer();c.__webglLineDistanceBuffer=a.createBuffer();b.memory.geometries++;var h=c.vertices.length;c.__vertexArray=new Float32Array(3*h);c.__colorArray=new Float32Array(3*h);c.__lineDistanceArray=new Float32Array(1*h);c.__webglLineCount=h;e(d);c.verticesNeedUpdate=!0;c.colorsNeedUpdate=!0;c.lineDistancesNeedUpdate=!0}};this.initMeshBuffers=function(e,g){e.__webglVertexBuffer=a.createBuffer();e.__webglNormalBuffer=a.createBuffer();e.__webglTangentBuffer=a.createBuffer();
e.__webglColorBuffer=a.createBuffer();e.__webglUVBuffer=a.createBuffer();e.__webglUV2Buffer=a.createBuffer();e.__webglSkinIndicesBuffer=a.createBuffer();e.__webglSkinWeightsBuffer=a.createBuffer();e.__webglFaceBuffer=a.createBuffer();e.__webglLineBuffer=a.createBuffer();var h=e.numMorphTargets;if(h){e.__webglMorphTargetsBuffers=[];for(var k=0,l=h;k<l;k++)e.__webglMorphTargetsBuffers.push(a.createBuffer())}var p=e.numMorphNormals;if(p)for(e.__webglMorphNormalsBuffers=[],k=0,l=p;k<l;k++)e.__webglMorphNormalsBuffers.push(a.createBuffer());
b.memory.geometries++;var k=g.geometry,n=e.faces3,m=3*n.length,s=1*n.length,t=3*n.length,n=d(g,e);e.__vertexArray=new Float32Array(3*m);e.__normalArray=new Float32Array(3*m);e.__colorArray=new Float32Array(3*m);e.__uvArray=new Float32Array(2*m);1<k.faceVertexUvs.length&&(e.__uv2Array=new Float32Array(2*m));k.hasTangents&&(e.__tangentArray=new Float32Array(4*m));g.geometry.skinWeights.length&&g.geometry.skinIndices.length&&(e.__skinIndexArray=new Float32Array(4*m),e.__skinWeightArray=new Float32Array(4*
m));k=null!==c.get("OES_element_index_uint")&&21845<s?Uint32Array:Uint16Array;e.__typeArray=k;e.__faceArray=new k(3*s);e.__lineArray=new k(2*t);if(h)for(e.__morphTargetsArrays=[],k=0,l=h;k<l;k++)e.__morphTargetsArrays.push(new Float32Array(3*m));if(p)for(e.__morphNormalsArrays=[],k=0,l=p;k<l;k++)e.__morphNormalsArrays.push(new Float32Array(3*m));e.__webglFaceCount=3*s;e.__webglLineCount=2*t;if(n.attributes){void 0===e.__webglCustomAttributesList&&(e.__webglCustomAttributesList=[]);for(var r in n.attributes){var h=
n.attributes[r],p={},v;for(v in h)p[v]=h[v];if(!p.__webglInitialized||p.createUniqueBuffers)p.__webglInitialized=!0,s=1,"v2"===p.type?s=2:"v3"===p.type?s=3:"v4"===p.type?s=4:"c"===p.type&&(s=3),p.size=s,p.array=new Float32Array(m*s),p.buffer=a.createBuffer(),p.buffer.belongsToAttribute=r,h.needsUpdate=!0,p.__original=h;e.__webglCustomAttributesList.push(p)}}e.__inittedArrays=!0};this.setPointCloudBuffers=function(b,c,d){var e,l,p=b.vertices,n=p.length,m=b.colors,s=m.length,t=b.__vertexArray,r=b.__colorArray,
v=b.colorsNeedUpdate,u=b.__webglCustomAttributesList;if(b.verticesNeedUpdate){for(e=0;e<n;e++)l=p[e],d=3*e,t[d]=l.x,t[d+1]=l.y,t[d+2]=l.z;a.bindBuffer(a.ARRAY_BUFFER,b.__webglVertexBuffer);a.bufferData(a.ARRAY_BUFFER,t,c)}if(v){for(e=0;e<s;e++)l=m[e],d=3*e,r[d]=l.r,r[d+1]=l.g,r[d+2]=l.b;a.bindBuffer(a.ARRAY_BUFFER,b.__webglColorBuffer);a.bufferData(a.ARRAY_BUFFER,r,c)}if(u)for(b=0,m=u.length;b<m;b++){l=u[b];if(l.needsUpdate&&(void 0===l.boundTo||"vertices"===l.boundTo))if(r=l.value.length,d=0,1===
l.size)for(s=0;s<r;s++)l.array[s]=l.value[s];else if(2===l.size)for(s=0;s<r;s++)e=l.value[s],l.array[d]=e.x,l.array[d+1]=e.y,d+=2;else if(3===l.size)if("c"===l.type)for(s=0;s<r;s++)e=l.value[s],l.array[d]=e.r,l.array[d+1]=e.g,l.array[d+2]=e.b,d+=3;else for(s=0;s<r;s++)e=l.value[s],l.array[d]=e.x,l.array[d+1]=e.y,l.array[d+2]=e.z,d+=3;else if(4===l.size)for(s=0;s<r;s++)e=l.value[s],l.array[d]=e.x,l.array[d+1]=e.y,l.array[d+2]=e.z,l.array[d+3]=e.w,d+=4;a.bindBuffer(a.ARRAY_BUFFER,l.buffer);a.bufferData(a.ARRAY_BUFFER,
l.array,c);l.needsUpdate=!1}};this.setLineBuffers=function(b,c){var d,e,l,p=b.vertices,n=b.colors,m=b.lineDistances,s=p.length,t=n.length,r=m.length,v=b.__vertexArray,u=b.__colorArray,x=b.__lineDistanceArray,z=b.colorsNeedUpdate,w=b.lineDistancesNeedUpdate,F=b.__webglCustomAttributesList;if(b.verticesNeedUpdate){for(d=0;d<s;d++)l=p[d],e=3*d,v[e]=l.x,v[e+1]=l.y,v[e+2]=l.z;a.bindBuffer(a.ARRAY_BUFFER,b.__webglVertexBuffer);a.bufferData(a.ARRAY_BUFFER,v,c)}if(z){for(d=0;d<t;d++)l=n[d],e=3*d,u[e]=l.r,
u[e+1]=l.g,u[e+2]=l.b;a.bindBuffer(a.ARRAY_BUFFER,b.__webglColorBuffer);a.bufferData(a.ARRAY_BUFFER,u,c)}if(w){for(e=0;e<r;e++)x[e]=m[e];a.bindBuffer(a.ARRAY_BUFFER,b.__webglLineDistanceBuffer);a.bufferData(a.ARRAY_BUFFER,x,c)}if(F)for(m=0,r=F.length;m<r;m++)if(u=F[m],u.needsUpdate&&(void 0===u.boundTo||"vertices"===u.boundTo)){e=0;n=u.value.length;if(1===u.size)for(x=0;x<n;x++)u.array[x]=u.value[x];else if(2===u.size)for(x=0;x<n;x++)t=u.value[x],u.array[e]=t.x,u.array[e+1]=t.y,e+=2;else if(3===u.size)if("c"===
u.type)for(x=0;x<n;x++)t=u.value[x],u.array[e]=t.r,u.array[e+1]=t.g,u.array[e+2]=t.b,e+=3;else for(x=0;x<n;x++)t=u.value[x],u.array[e]=t.x,u.array[e+1]=t.y,u.array[e+2]=t.z,e+=3;else if(4===u.size)for(x=0;x<n;x++)t=u.value[x],u.array[e]=t.x,u.array[e+1]=t.y,u.array[e+2]=t.z,u.array[e+3]=t.w,e+=4;a.bindBuffer(a.ARRAY_BUFFER,u.buffer);a.bufferData(a.ARRAY_BUFFER,u.array,c);u.needsUpdate=!1}};this.setMeshBuffers=function(b,c,d,e,l){if(b.__inittedArrays){var p=!1===l instanceof THREE.MeshPhongMaterial&&
l.shading===THREE.FlatShading,n,m,s,t,r,v,u,x,z,w,F,G,y,I,B,C,E,L,N,H,O,M,A=x=N=C=0,J=0,R=B=E=0,K=r=F=0,D=0,K=b.__vertexArray;L=b.__uvArray;var D=b.__uv2Array,X=b.__normalArray;s=b.__tangentArray;u=b.__colorArray;G=b.__skinIndexArray;y=b.__skinWeightArray;I=b.__morphTargetsArrays;var ia=b.__morphNormalsArrays,Q=b.__webglCustomAttributesList,P=b.__faceArray,aa=b.__lineArray,ca=c.geometry,qa=ca.elementsNeedUpdate,Da=ca.uvsNeedUpdate;t=ca.normalsNeedUpdate;var xa=ca.tangentsNeedUpdate;v=ca.colorsNeedUpdate;
H=ca.morphTargetsNeedUpdate;M=ca.vertices;var V=b.faces3,pa=ca.faces,ya=ca.faceVertexUvs[0],va=ca.faceVertexUvs[1],wa=ca.skinIndices,la=ca.skinWeights,za=ca.morphTargets,Aa=ca.morphNormals;if(ca.verticesNeedUpdate){c=0;for(n=V.length;c<n;c++)m=pa[V[c]],z=M[m.a],w=M[m.b],m=M[m.c],K[N]=z.x,K[N+1]=z.y,K[N+2]=z.z,K[N+3]=w.x,K[N+4]=w.y,K[N+5]=w.z,K[N+6]=m.x,K[N+7]=m.y,K[N+8]=m.z,N+=9;a.bindBuffer(a.ARRAY_BUFFER,b.__webglVertexBuffer);a.bufferData(a.ARRAY_BUFFER,K,d)}if(H)for(N=0,H=za.length;N<H;N++){c=
K=0;for(n=V.length;c<n;c++)M=V[c],m=pa[M],z=za[N].vertices[m.a],w=za[N].vertices[m.b],m=za[N].vertices[m.c],O=I[N],O[K]=z.x,O[K+1]=z.y,O[K+2]=z.z,O[K+3]=w.x,O[K+4]=w.y,O[K+5]=w.z,O[K+6]=m.x,O[K+7]=m.y,O[K+8]=m.z,l.morphNormals&&(p?w=z=m=Aa[N].faceNormals[M]:(w=Aa[N].vertexNormals[M],m=w.a,z=w.b,w=w.c),M=ia[N],M[K]=m.x,M[K+1]=m.y,M[K+2]=m.z,M[K+3]=z.x,M[K+4]=z.y,M[K+5]=z.z,M[K+6]=w.x,M[K+7]=w.y,M[K+8]=w.z),K+=9;a.bindBuffer(a.ARRAY_BUFFER,b.__webglMorphTargetsBuffers[N]);a.bufferData(a.ARRAY_BUFFER,
I[N],d);l.morphNormals&&(a.bindBuffer(a.ARRAY_BUFFER,b.__webglMorphNormalsBuffers[N]),a.bufferData(a.ARRAY_BUFFER,ia[N],d))}if(la.length){c=0;for(n=V.length;c<n;c++)m=pa[V[c]],z=la[m.a],w=la[m.b],I=la[m.c],y[r]=z.x,y[r+1]=z.y,y[r+2]=z.z,y[r+3]=z.w,y[r+4]=w.x,y[r+5]=w.y,y[r+6]=w.z,y[r+7]=w.w,y[r+8]=I.x,y[r+9]=I.y,y[r+10]=I.z,y[r+11]=I.w,z=wa[m.a],w=wa[m.b],m=wa[m.c],G[r]=z.x,G[r+1]=z.y,G[r+2]=z.z,G[r+3]=z.w,G[r+4]=w.x,G[r+5]=w.y,G[r+6]=w.z,G[r+7]=w.w,G[r+8]=m.x,G[r+9]=m.y,G[r+10]=m.z,G[r+11]=m.w,r+=
12;0<r&&(a.bindBuffer(a.ARRAY_BUFFER,b.__webglSkinIndicesBuffer),a.bufferData(a.ARRAY_BUFFER,G,d),a.bindBuffer(a.ARRAY_BUFFER,b.__webglSkinWeightsBuffer),a.bufferData(a.ARRAY_BUFFER,y,d))}if(v){c=0;for(n=V.length;c<n;c++)m=pa[V[c]],r=m.vertexColors,v=m.color,3===r.length&&l.vertexColors===THREE.VertexColors?(G=r[0],y=r[1],r=r[2]):r=y=G=v,u[F]=G.r,u[F+1]=G.g,u[F+2]=G.b,u[F+3]=y.r,u[F+4]=y.g,u[F+5]=y.b,u[F+6]=r.r,u[F+7]=r.g,u[F+8]=r.b,F+=9;0<F&&(a.bindBuffer(a.ARRAY_BUFFER,b.__webglColorBuffer),a.bufferData(a.ARRAY_BUFFER,
u,d))}if(xa&&ca.hasTangents){c=0;for(n=V.length;c<n;c++)m=pa[V[c]],u=m.vertexTangents,l=u[0],F=u[1],u=u[2],s[B]=l.x,s[B+1]=l.y,s[B+2]=l.z,s[B+3]=l.w,s[B+4]=F.x,s[B+5]=F.y,s[B+6]=F.z,s[B+7]=F.w,s[B+8]=u.x,s[B+9]=u.y,s[B+10]=u.z,s[B+11]=u.w,B+=12;a.bindBuffer(a.ARRAY_BUFFER,b.__webglTangentBuffer);a.bufferData(a.ARRAY_BUFFER,s,d)}if(t){c=0;for(n=V.length;c<n;c++)if(m=pa[V[c]],s=m.vertexNormals,t=m.normal,3===s.length&&!1===p)for(B=0;3>B;B++)t=s[B],X[E]=t.x,X[E+1]=t.y,X[E+2]=t.z,E+=3;else for(B=0;3>
B;B++)X[E]=t.x,X[E+1]=t.y,X[E+2]=t.z,E+=3;a.bindBuffer(a.ARRAY_BUFFER,b.__webglNormalBuffer);a.bufferData(a.ARRAY_BUFFER,X,d)}if(Da&&ya){c=0;for(n=V.length;c<n;c++)if(p=V[c],p=ya[p],void 0!==p)for(B=0;3>B;B++)E=p[B],L[x]=E.x,L[x+1]=E.y,x+=2;0<x&&(a.bindBuffer(a.ARRAY_BUFFER,b.__webglUVBuffer),a.bufferData(a.ARRAY_BUFFER,L,d))}if(Da&&va){c=0;for(n=V.length;c<n;c++)if(p=V[c],x=va[p],void 0!==x)for(B=0;3>B;B++)L=x[B],D[A]=L.x,D[A+1]=L.y,A+=2;0<A&&(a.bindBuffer(a.ARRAY_BUFFER,b.__webglUV2Buffer),a.bufferData(a.ARRAY_BUFFER,
D,d))}if(qa){c=0;for(n=V.length;c<n;c++)P[J]=C,P[J+1]=C+1,P[J+2]=C+2,J+=3,aa[R]=C,aa[R+1]=C+1,aa[R+2]=C,aa[R+3]=C+2,aa[R+4]=C+1,aa[R+5]=C+2,R+=6,C+=3;a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,b.__webglFaceBuffer);a.bufferData(a.ELEMENT_ARRAY_BUFFER,P,d);a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,b.__webglLineBuffer);a.bufferData(a.ELEMENT_ARRAY_BUFFER,aa,d)}if(Q)for(B=0,C=Q.length;B<C;B++)if(A=Q[B],A.__original.needsUpdate){D=0;if(1===A.size)if(void 0===A.boundTo||"vertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=
pa[V[c]],A.array[D]=A.value[m.a],A.array[D+1]=A.value[m.b],A.array[D+2]=A.value[m.c],D+=3;else{if("faces"===A.boundTo)for(c=0,n=V.length;c<n;c++)R=A.value[V[c]],A.array[D]=R,A.array[D+1]=R,A.array[D+2]=R,D+=3}else if(2===A.size)if(void 0===A.boundTo||"vertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=pa[V[c]],z=A.value[m.a],w=A.value[m.b],m=A.value[m.c],A.array[D]=z.x,A.array[D+1]=z.y,A.array[D+2]=w.x,A.array[D+3]=w.y,A.array[D+4]=m.x,A.array[D+5]=m.y,D+=6;else{if("faces"===A.boundTo)for(c=0,n=V.length;c<
n;c++)m=w=z=R=A.value[V[c]],A.array[D]=z.x,A.array[D+1]=z.y,A.array[D+2]=w.x,A.array[D+3]=w.y,A.array[D+4]=m.x,A.array[D+5]=m.y,D+=6}else if(3===A.size)if(J="c"===A.type?["r","g","b"]:["x","y","z"],void 0===A.boundTo||"vertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=pa[V[c]],z=A.value[m.a],w=A.value[m.b],m=A.value[m.c],A.array[D]=z[J[0]],A.array[D+1]=z[J[1]],A.array[D+2]=z[J[2]],A.array[D+3]=w[J[0]],A.array[D+4]=w[J[1]],A.array[D+5]=w[J[2]],A.array[D+6]=m[J[0]],A.array[D+7]=m[J[1]],A.array[D+8]=
m[J[2]],D+=9;else if("faces"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=w=z=R=A.value[V[c]],A.array[D]=z[J[0]],A.array[D+1]=z[J[1]],A.array[D+2]=z[J[2]],A.array[D+3]=w[J[0]],A.array[D+4]=w[J[1]],A.array[D+5]=w[J[2]],A.array[D+6]=m[J[0]],A.array[D+7]=m[J[1]],A.array[D+8]=m[J[2]],D+=9;else{if("faceVertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)R=A.value[V[c]],z=R[0],w=R[1],m=R[2],A.array[D]=z[J[0]],A.array[D+1]=z[J[1]],A.array[D+2]=z[J[2]],A.array[D+3]=w[J[0]],A.array[D+4]=w[J[1]],A.array[D+5]=w[J[2]],
A.array[D+6]=m[J[0]],A.array[D+7]=m[J[1]],A.array[D+8]=m[J[2]],D+=9}else if(4===A.size)if(void 0===A.boundTo||"vertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=pa[V[c]],z=A.value[m.a],w=A.value[m.b],m=A.value[m.c],A.array[D]=z.x,A.array[D+1]=z.y,A.array[D+2]=z.z,A.array[D+3]=z.w,A.array[D+4]=w.x,A.array[D+5]=w.y,A.array[D+6]=w.z,A.array[D+7]=w.w,A.array[D+8]=m.x,A.array[D+9]=m.y,A.array[D+10]=m.z,A.array[D+11]=m.w,D+=12;else if("faces"===A.boundTo)for(c=0,n=V.length;c<n;c++)m=w=z=R=A.value[V[c]],
A.array[D]=z.x,A.array[D+1]=z.y,A.array[D+2]=z.z,A.array[D+3]=z.w,A.array[D+4]=w.x,A.array[D+5]=w.y,A.array[D+6]=w.z,A.array[D+7]=w.w,A.array[D+8]=m.x,A.array[D+9]=m.y,A.array[D+10]=m.z,A.array[D+11]=m.w,D+=12;else if("faceVertices"===A.boundTo)for(c=0,n=V.length;c<n;c++)R=A.value[V[c]],z=R[0],w=R[1],m=R[2],A.array[D]=z.x,A.array[D+1]=z.y,A.array[D+2]=z.z,A.array[D+3]=z.w,A.array[D+4]=w.x,A.array[D+5]=w.y,A.array[D+6]=w.z,A.array[D+7]=w.w,A.array[D+8]=m.x,A.array[D+9]=m.y,A.array[D+10]=m.z,A.array[D+
11]=m.w,D+=12;a.bindBuffer(a.ARRAY_BUFFER,A.buffer);a.bufferData(a.ARRAY_BUFFER,A.array,d)}e&&(delete b.__inittedArrays,delete b.__colorArray,delete b.__normalArray,delete b.__tangentArray,delete b.__uvArray,delete b.__uv2Array,delete b.__faceArray,delete b.__vertexArray,delete b.__lineArray,delete b.__skinIndexArray,delete b.__skinWeightArray)}};this.delete=function(c){for(var d="__webglVertexBuffer __webglNormalBuffer __webglTangentBuffer __webglColorBuffer __webglUVBuffer __webglUV2Buffer __webglSkinIndicesBuffer __webglSkinWeightsBuffer __webglFaceBuffer __webglLineBuffer __webglLineDistanceBuffer".split(" "),
e=0,k=d.length;e<k;e++){var l=d[e];void 0!==c[l]&&(a.deleteBuffer(c[l]),delete c[l])}if(void 0!==c.__webglCustomAttributesList){for(l in c.__webglCustomAttributesList)a.deleteBuffer(c.__webglCustomAttributesList[l].buffer);delete c.__webglCustomAttributesList}b.memory.geometries--}};
THREE.WebGLExtensions=function(a){var b={};this.get=function(c){if(void 0!==b[c])return b[c];var d;switch(c){case "EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
break;case "WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:d=a.getExtension(c)}null===d&&THREE.warn("THREE.WebGLRenderer: "+c+" extension not supported.");return b[c]=d}};
THREE.WebGLObjects=function(a,b,c,d){function e(a,b){var d=a.material,e=!1;if(void 0===t[b.id]||!0===b.groupsNeedUpdate){delete n[a.id];for(var e=b.id,d=d instanceof THREE.MeshFaceMaterial,g=c.get("OES_element_index_uint")?4294967296:65535,h,m={},k=b.morphTargets.length,l=b.morphNormals.length,s,C={},E=[],L=0,N=b.faces.length;L<N;L++){h=b.faces[L];var H=d?h.materialIndex:0;H in m||(m[H]={hash:H,counter:0});h=m[H].hash+"_"+m[H].counter;h in C||(s={id:r++,faces3:[],materialIndex:H,vertices:0,numMorphTargets:k,
numMorphNormals:l},C[h]=s,E.push(s));C[h].vertices+3>g&&(m[H].counter+=1,h=m[H].hash+"_"+m[H].counter,h in C||(s={id:r++,faces3:[],materialIndex:H,vertices:0,numMorphTargets:k,numMorphNormals:l},C[h]=s,E.push(s)));C[h].faces3.push(L);C[h].vertices+=3}t[e]=E;b.groupsNeedUpdate=!1}d=t[b.id];g=0;for(m=d.length;g<m;g++)k=d[g],void 0===k.__webglVertexBuffer?(p.initMeshBuffers(k,a),b.verticesNeedUpdate=!0,b.morphTargetsNeedUpdate=!0,b.elementsNeedUpdate=!0,b.uvsNeedUpdate=!0,b.normalsNeedUpdate=!0,b.tangentsNeedUpdate=
!0,e=b.colorsNeedUpdate=!0):e=!1,(e||void 0===a.__webglActive)&&f(n,k,a);a.__webglActive=!0}function f(a,b,c){var d=c.id;a[d]=a[d]||[];a[d].push({id:d,buffer:b,object:c,material:null,z:0})}function g(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function h(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function k(a){a.target.traverse(function(a){a.removeEventListener("remove",k);if(a instanceof THREE.Mesh||a instanceof THREE.PointCloud||a instanceof THREE.Line)delete n[a.id];
else if(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)for(var b=m,c=b.length-1;0<=c;c--)b[c].object===a&&b.splice(c,1);delete a.__webglInit;delete a._modelViewMatrix;delete a._normalMatrix;delete a.__webglActive})}function l(c){c=c.target;c.removeEventListener("dispose",l);delete s[c.id];if(c instanceof THREE.BufferGeometry){for(var d in c.attributes){var e=c.attributes[d];void 0!==e.buffer&&(a.deleteBuffer(e.buffer),delete e.buffer)}b.memory.geometries--}else if(d=t[c.id],void 0!==
d){for(var e=0,f=d.length;e<f;e++){var g=d[e];if(void 0!==g.numMorphTargets){for(var h=0,m=g.numMorphTargets;h<m;h++)a.deleteBuffer(g.__webglMorphTargetsBuffers[h]);delete g.__webglMorphTargetsBuffers}if(void 0!==g.numMorphNormals){h=0;for(m=g.numMorphNormals;h<m;h++)a.deleteBuffer(g.__webglMorphNormalsBuffers[h]);delete g.__webglMorphNormalsBuffers}p.delete(g)}delete t[c.id]}else p.delete(c)}var p=new THREE.WebGLBuffers(a,b,c,d),n={},m=[],s={},t={},r=0;this.objects=n;this.objectsImmediate=m;this.init=
function(a){void 0===a.__webglInit&&(a.__webglInit=!0,a._modelViewMatrix=new THREE.Matrix4,a._normalMatrix=new THREE.Matrix3,a.addEventListener("removed",k));var c=a.geometry;void 0!==c&&void 0===s[c.id]&&(s[c.id]=c,c.addEventListener("dispose",l),c instanceof THREE.BufferGeometry?b.memory.geometries++:a instanceof THREE.Mesh?e(a,c):a instanceof THREE.Line?p.initLineBuffers(c,a):a instanceof THREE.PointCloud&&p.initPointCloudBuffers(c,a));if(void 0===a.__webglActive)if(a.__webglActive=!0,a instanceof
THREE.Mesh)if(c instanceof THREE.BufferGeometry)f(n,c,a);else{if(c instanceof THREE.Geometry)for(var c=t[c.id],d=0,g=c.length;d<g;d++)f(n,c[d],a)}else a instanceof THREE.Line||a instanceof THREE.PointCloud?f(n,c,a):(a instanceof THREE.ImmediateRenderObject||a.immediateRenderCallback)&&m.push({id:null,object:a,opaque:null,transparent:null,z:0})};this.update=function(b){var c=b.geometry;if(c instanceof THREE.BufferGeometry){b=c.attributes;for(var c=c.attributesKeys,f=0,m=c.length;f<m;f++){var k=c[f],
l=b[k],k="index"===k?a.ELEMENT_ARRAY_BUFFER:a.ARRAY_BUFFER,l=l instanceof THREE.InterleavedBufferAttribute?l.data:l;if(void 0===l.buffer){l.buffer=a.createBuffer();a.bindBuffer(k,l.buffer);var n=a.STATIC_DRAW;if(l instanceof THREE.DynamicBufferAttribute||l instanceof THREE.InstancedBufferAttribute&&!0===l.dynamic||l instanceof THREE.InterleavedBuffer&&!0===l.dynamic)n=a.DYNAMIC_DRAW;a.bufferData(k,l.array,n);l.needsUpdate=!1}else!0===l.needsUpdate&&(a.bindBuffer(k,l.buffer),void 0===l.updateRange||
-1===l.updateRange.count?a.bufferSubData(k,0,l.array):0===l.updateRange.count?THREE.error("THREE.WebGLRenderer.updateObject: using updateRange for THREE.DynamicBufferAttribute and marked as needsUpdate but count is 0, ensure you are using set methods or updating manually."):(a.bufferSubData(k,l.updateRange.offset*l.array.BYTES_PER_ELEMENT,l.array.subarray(l.updateRange.offset,l.updateRange.offset+l.updateRange.count)),l.updateRange.count=0),l.needsUpdate=!1)}}else if(b instanceof THREE.Mesh){!0===
c.groupsNeedUpdate&&e(b,c);m=t[c.id];f=0;for(k=m.length;f<k;f++){var l=m[f],n=d(b,l),s=n.attributes&&g(n);(c.verticesNeedUpdate||c.morphTargetsNeedUpdate||c.elementsNeedUpdate||c.uvsNeedUpdate||c.normalsNeedUpdate||c.colorsNeedUpdate||c.tangentsNeedUpdate||s)&&p.setMeshBuffers(l,b,a.DYNAMIC_DRAW,!c.dynamic,n)}c.verticesNeedUpdate=!1;c.morphTargetsNeedUpdate=!1;c.elementsNeedUpdate=!1;c.uvsNeedUpdate=!1;c.normalsNeedUpdate=!1;c.colorsNeedUpdate=!1;c.tangentsNeedUpdate=!1;n.attributes&&h(n)}else b instanceof
THREE.Line?(n=d(b,c),s=n.attributes&&g(n),(c.verticesNeedUpdate||c.colorsNeedUpdate||c.lineDistancesNeedUpdate||s)&&p.setLineBuffers(c,a.DYNAMIC_DRAW),c.verticesNeedUpdate=!1,c.colorsNeedUpdate=!1,c.lineDistancesNeedUpdate=!1,n.attributes&&h(n)):b instanceof THREE.PointCloud&&(n=d(b,c),s=n.attributes&&g(n),(c.verticesNeedUpdate||c.colorsNeedUpdate||s)&&p.setPointCloudBuffers(c,a.DYNAMIC_DRAW,b),c.verticesNeedUpdate=!1,c.colorsNeedUpdate=!1,n.attributes&&h(n))}};
THREE.WebGLProgram=function(){var a=0;return function(b,c,d,e){var f=b.context,g=d.defines,h=d.__webglShader.uniforms,k=d.attributes,l=d.__webglShader.vertexShader,p=d.__webglShader.fragmentShader,n=d.index0AttributeName;void 0===n&&!0===e.morphTargets&&(n="position");var m="SHADOWMAP_TYPE_BASIC";e.shadowMapType===THREE.PCFShadowMap?m="SHADOWMAP_TYPE_PCF":e.shadowMapType===THREE.PCFSoftShadowMap&&(m="SHADOWMAP_TYPE_PCF_SOFT");var s="ENVMAP_TYPE_CUBE",t="ENVMAP_MODE_REFLECTION",r="ENVMAP_BLENDING_MULTIPLY";
if(e.envMap){switch(d.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:s="ENVMAP_TYPE_CUBE";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:s="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:s="ENVMAP_TYPE_SPHERE"}switch(d.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:t="ENVMAP_MODE_REFRACTION"}switch(d.combine){case THREE.MultiplyOperation:r="ENVMAP_BLENDING_MULTIPLY";
break;case THREE.MixOperation:r="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:r="ENVMAP_BLENDING_ADD"}}var v=0<b.gammaFactor?b.gammaFactor:1,u,x;u=[];for(var z in g)x=g[z],!1!==x&&(x="#define "+z+" "+x,u.push(x));u=u.join("\n");g=f.createProgram();d instanceof THREE.RawShaderMaterial?b=d="":(d=["precision "+e.precision+" float;","precision "+e.precision+" int;",u,e.supportsVertexTextures?"#define VERTEX_TEXTURES":"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":
"","#define GAMMA_FACTOR "+v,"#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,"#define MAX_BONES "+e.maxBones,e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+t:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?
"#define USE_SPECULARMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals?"#define USE_MORPHNORMALS":"",e.wrapAround?"#define WRAP_AROUND":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+
m:"",e.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n"].join("\n"),
b=["precision "+e.precision+" float;","precision "+e.precision+" int;",e.bumpMap||e.normalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",u,"#define MAX_DIR_LIGHTS "+e.maxDirLights,"#define MAX_POINT_LIGHTS "+e.maxPointLights,"#define MAX_SPOT_LIGHTS "+e.maxSpotLights,"#define MAX_HEMI_LIGHTS "+e.maxHemiLights,"#define MAX_SHADOWS "+e.maxShadows,e.alphaTest?"#define ALPHATEST "+e.alphaTest:"",b.gammaInput?"#define GAMMA_INPUT":"",b.gammaOutput?"#define GAMMA_OUTPUT":"","#define GAMMA_FACTOR "+
v,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+s:"",e.envMap?"#define "+t:"",e.envMap?"#define "+r:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.vertexColors?"#define USE_COLOR":"",e.flatShading?"#define FLAT_SHADED":
"",e.metal?"#define METAL":"",e.wrapAround?"#define WRAP_AROUND":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+m:"",e.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",e.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n"));l=new THREE.WebGLShader(f,f.VERTEX_SHADER,d+l);p=new THREE.WebGLShader(f,
f.FRAGMENT_SHADER,b+p);f.attachShader(g,l);f.attachShader(g,p);void 0!==n&&f.bindAttribLocation(g,0,n);f.linkProgram(g);n=f.getProgramInfoLog(g);b=f.getShaderInfoLog(l);m=f.getShaderInfoLog(p);!1===f.getProgramParameter(g,f.LINK_STATUS)&&THREE.error("THREE.WebGLProgram: shader error: ",f.getError(),"gl.VALIDATE_STATUS",f.getProgramParameter(g,f.VALIDATE_STATUS),"gl.getProgramInfoLog",n,b,m);""!==n&&THREE.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",n);f.deleteShader(l);f.deleteShader(p);n="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" ");
e.useVertexTexture?(n.push("boneTexture"),n.push("boneTextureWidth"),n.push("boneTextureHeight")):n.push("boneGlobalMatrices");e.logarithmicDepthBuffer&&n.push("logDepthBufFC");for(var w in h)n.push(w);h=n;w={};n=0;for(b=h.length;n<b;n++)m=h[n],w[m]=f.getUniformLocation(g,m);this.uniforms=w;n="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(h=0;h<e.maxMorphTargets;h++)n.push("morphTarget"+h);for(h=0;h<e.maxMorphNormals;h++)n.push("morphNormal"+h);for(var F in k)n.push(F);
e=n;k={};F=0;for(h=e.length;F<h;F++)w=e[F],k[w]=f.getAttribLocation(g,w);this.attributes=k;this.attributesKeys=Object.keys(this.attributes);this.id=a++;this.code=c;this.usedTimes=1;this.program=g;this.vertexShader=l;this.fragmentShader=p;return this}}();
THREE.WebGLShader=function(){var a=function(a){a=a.split("\n");for(var c=0;c<a.length;c++)a[c]=c+1+": "+a[c];return a.join("\n")};return function(b,c,d){var e=b.createShader(c);b.shaderSource(e,d);b.compileShader(e);!1===b.getShaderParameter(e,b.COMPILE_STATUS)&&THREE.error("THREE.WebGLShader: Shader couldn't compile.");""!==b.getShaderInfoLog(e)&&THREE.warn("THREE.WebGLShader: gl.getShaderInfoLog()",c===b.VERTEX_SHADER?"vertex":"fragment",b.getShaderInfoLog(e),a(d));return e}}();
THREE.WebGLShadowMap=function(a,b,c){function d(a,b,c){if(b.visible){var e=l[b.id];if(e&&b.castShadow&&(!1===b.frustumCulled||!0===f.intersectsObject(b)))for(var g=0,h=e.length;g<h;g++){var k=e[g];b._modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,b.matrixWorld);m.push(k)}g=0;for(h=b.children.length;g<h;g++)d(a,b.children[g],c)}}var e=a.context,f=new THREE.Frustum,g=new THREE.Matrix4,h=new THREE.Vector3,k=new THREE.Vector3,l=c.objects,p=c.objectsImmediate,n=new THREE.Vector3,m=[];c=THREE.ShaderLib.depthRGBA;
var s=THREE.UniformsUtils.clone(c.uniforms),t=new THREE.ShaderMaterial({uniforms:s,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader}),r=new THREE.ShaderMaterial({uniforms:s,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,morphTargets:!0}),v=new THREE.ShaderMaterial({uniforms:s,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,skinning:!0}),u=new THREE.ShaderMaterial({uniforms:s,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,morphTargets:!0,skinning:!0});
t._shadowPass=!0;r._shadowPass=!0;v._shadowPass=!0;u._shadowPass=!0;var x=this;this.enabled=!1;this.type=THREE.PCFShadowMap;this.cullFace=THREE.CullFaceFront;this.cascade=this.debug=!1;this.render=function(c,l){if(!1!==x.enabled){var s,G,y,I,B,C,E,L,N=[];I=0;e.clearColor(1,1,1,1);e.disable(e.BLEND);e.enable(e.CULL_FACE);e.frontFace(e.CCW);x.cullFace===THREE.CullFaceFront?e.cullFace(e.FRONT):e.cullFace(e.BACK);a.state.setDepthTest(!0);s=0;for(G=b.length;s<G;s++)if(y=b[s],y.castShadow)if(y instanceof
THREE.DirectionalLight&&y.shadowCascade)for(B=0;B<y.shadowCascadeCount;B++){var H;if(y.shadowCascadeArray[B])H=y.shadowCascadeArray[B];else{E=y;var O=B;H=new THREE.DirectionalLight;H.isVirtual=!0;H.onlyShadow=!0;H.castShadow=!0;H.shadowCameraNear=E.shadowCameraNear;H.shadowCameraFar=E.shadowCameraFar;H.shadowCameraLeft=E.shadowCameraLeft;H.shadowCameraRight=E.shadowCameraRight;H.shadowCameraBottom=E.shadowCameraBottom;H.shadowCameraTop=E.shadowCameraTop;H.shadowCameraVisible=E.shadowCameraVisible;
H.shadowDarkness=E.shadowDarkness;H.shadowBias=E.shadowCascadeBias[O];H.shadowMapWidth=E.shadowCascadeWidth[O];H.shadowMapHeight=E.shadowCascadeHeight[O];H.pointsWorld=[];H.pointsFrustum=[];L=H.pointsWorld;C=H.pointsFrustum;for(var M=0;8>M;M++)L[M]=new THREE.Vector3,C[M]=new THREE.Vector3;L=E.shadowCascadeNearZ[O];E=E.shadowCascadeFarZ[O];C[0].set(-1,-1,L);C[1].set(1,-1,L);C[2].set(-1,1,L);C[3].set(1,1,L);C[4].set(-1,-1,E);C[5].set(1,-1,E);C[6].set(-1,1,E);C[7].set(1,1,E);H.originalCamera=l;C=new THREE.Gyroscope;
C.position.copy(y.shadowCascadeOffset);C.add(H);C.add(H.target);l.add(C);y.shadowCascadeArray[B]=H}O=y;L=B;E=O.shadowCascadeArray[L];E.position.copy(O.position);E.target.position.copy(O.target.position);E.lookAt(E.target);E.shadowCameraVisible=O.shadowCameraVisible;E.shadowDarkness=O.shadowDarkness;E.shadowBias=O.shadowCascadeBias[L];C=O.shadowCascadeNearZ[L];O=O.shadowCascadeFarZ[L];E=E.pointsFrustum;E[0].z=C;E[1].z=C;E[2].z=C;E[3].z=C;E[4].z=O;E[5].z=O;E[6].z=O;E[7].z=O;N[I]=H;I++}else N[I]=y,I++;
s=0;for(G=N.length;s<G;s++){y=N[s];y.shadowMap||(B=THREE.LinearFilter,x.type===THREE.PCFSoftShadowMap&&(B=THREE.NearestFilter),y.shadowMap=new THREE.WebGLRenderTarget(y.shadowMapWidth,y.shadowMapHeight,{minFilter:B,magFilter:B,format:THREE.RGBAFormat}),y.shadowMapSize=new THREE.Vector2(y.shadowMapWidth,y.shadowMapHeight),y.shadowMatrix=new THREE.Matrix4);if(!y.shadowCamera){if(y instanceof THREE.SpotLight)y.shadowCamera=new THREE.PerspectiveCamera(y.shadowCameraFov,y.shadowMapWidth/y.shadowMapHeight,
y.shadowCameraNear,y.shadowCameraFar);else if(y instanceof THREE.DirectionalLight)y.shadowCamera=new THREE.OrthographicCamera(y.shadowCameraLeft,y.shadowCameraRight,y.shadowCameraTop,y.shadowCameraBottom,y.shadowCameraNear,y.shadowCameraFar);else{THREE.error("THREE.ShadowMapPlugin: Unsupported light type for shadow",y);continue}c.add(y.shadowCamera);!0===c.autoUpdate&&c.updateMatrixWorld()}y.shadowCameraVisible&&!y.cameraHelper&&(y.cameraHelper=new THREE.CameraHelper(y.shadowCamera),c.add(y.cameraHelper));
if(y.isVirtual&&H.originalCamera==l){B=l;I=y.shadowCamera;C=y.pointsFrustum;E=y.pointsWorld;h.set(Infinity,Infinity,Infinity);k.set(-Infinity,-Infinity,-Infinity);for(O=0;8>O;O++)L=E[O],L.copy(C[O]),L.unproject(B),L.applyMatrix4(I.matrixWorldInverse),L.x<h.x&&(h.x=L.x),L.x>k.x&&(k.x=L.x),L.y<h.y&&(h.y=L.y),L.y>k.y&&(k.y=L.y),L.z<h.z&&(h.z=L.z),L.z>k.z&&(k.z=L.z);I.left=h.x;I.right=k.x;I.top=k.y;I.bottom=h.y;I.updateProjectionMatrix()}I=y.shadowMap;C=y.shadowMatrix;B=y.shadowCamera;B.position.setFromMatrixPosition(y.matrixWorld);
n.setFromMatrixPosition(y.target.matrixWorld);B.lookAt(n);B.updateMatrixWorld();B.matrixWorldInverse.getInverse(B.matrixWorld);y.cameraHelper&&(y.cameraHelper.visible=y.shadowCameraVisible);y.shadowCameraVisible&&y.cameraHelper.update();C.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);C.multiply(B.projectionMatrix);C.multiply(B.matrixWorldInverse);g.multiplyMatrices(B.projectionMatrix,B.matrixWorldInverse);f.setFromMatrix(g);a.setRenderTarget(I);a.clear();m.length=0;d(c,c,B);y=0;for(I=m.length;y<I;y++)E=
m[y],C=E.object,E=E.buffer,O=C.material instanceof THREE.MeshFaceMaterial?C.material.materials[0]:C.material,L=void 0!==C.geometry.morphTargets&&0<C.geometry.morphTargets.length&&O.morphTargets,M=C instanceof THREE.SkinnedMesh&&O.skinning,L=C.customDepthMaterial?C.customDepthMaterial:M?L?u:v:L?r:t,a.setMaterialFaces(O),E instanceof THREE.BufferGeometry?a.renderBufferDirect(B,b,null,L,E,C):a.renderBuffer(B,b,null,L,E,C);y=0;for(I=p.length;y<I;y++)E=p[y],C=E.object,C.visible&&C.castShadow&&(C._modelViewMatrix.multiplyMatrices(B.matrixWorldInverse,
C.matrixWorld),a.renderImmediateObject(B,b,null,t,C))}s=a.getClearColor();G=a.getClearAlpha();e.clearColor(s.r,s.g,s.b,G);e.enable(e.BLEND);x.cullFace===THREE.CullFaceFront&&e.cullFace(e.BACK);a.resetGLState()}}};
THREE.WebGLState=function(a,b){var c=new Uint8Array(16),d=new Uint8Array(16),e=null,f=null,g=null,h=null,k=null,l=null,p=null,n=null,m=null,s=null,t=null,r=null,v=null,u=null,x=null,z=null;this.initAttributes=function(){for(var a=0,b=c.length;a<b;a++)c[a]=0};this.enableAttribute=function(b){c[b]=1;0===d[b]&&(a.enableVertexAttribArray(b),d[b]=1)};this.disableUnusedAttributes=function(){for(var b=0,e=d.length;b<e;b++)d[b]!==c[b]&&(a.disableVertexAttribArray(b),d[b]=0)};this.setBlending=function(c,d,
m,n,s,r,t){c!==e&&(c===THREE.NoBlending?a.disable(a.BLEND):c===THREE.AdditiveBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE)):c===THREE.SubtractiveBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR)):c===THREE.MultiplyBlending?(a.enable(a.BLEND),a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.SRC_COLOR)):c===THREE.CustomBlending?a.enable(a.BLEND):(a.enable(a.BLEND),a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),
a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)),e=c);if(c===THREE.CustomBlending){s=s||d;r=r||m;t=t||n;if(d!==f||s!==k)a.blendEquationSeparate(b(d),b(s)),f=d,k=s;if(m!==g||n!==h||r!==l||t!==p)a.blendFuncSeparate(b(m),b(n),b(r),b(t)),g=m,h=n,l=r,p=t}else p=l=k=h=g=f=null};this.setDepthTest=function(b){n!==b&&(b?a.enable(a.DEPTH_TEST):a.disable(a.DEPTH_TEST),n=b)};this.setDepthWrite=function(b){m!==b&&(a.depthMask(b),m=b)};this.setColorWrite=function(b){s!==b&&(a.colorMask(b,
b,b,b),s=b)};this.setDoubleSided=function(b){t!==b&&(b?a.disable(a.CULL_FACE):a.enable(a.CULL_FACE),t=b)};this.setFlipSided=function(b){r!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),r=b)};this.setLineWidth=function(b){b!==v&&(a.lineWidth(b),v=b)};this.setPolygonOffset=function(b,c,d){u!==b&&(b?a.enable(a.POLYGON_OFFSET_FILL):a.disable(a.POLYGON_OFFSET_FILL),u=b);!b||x===c&&z===d||(a.polygonOffset(c,d),x=c,z=d)};this.reset=function(){for(var a=0;a<d.length;a++)d[a]=0;r=t=s=m=n=e=null}};
THREE.LensFlarePlugin=function(a,b){var c,d,e,f,g,h,k,l,p,n,m=a.context,s,t,r,v,u,x;this.render=function(z,w,F,G){if(0!==b.length){z=new THREE.Vector3;var y=G/F,I=.5*F,B=.5*G,C=16/G,E=new THREE.Vector2(C*y,C),L=new THREE.Vector3(1,1,0),N=new THREE.Vector2(1,1);if(void 0===r){var C=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),H=new Uint16Array([0,1,2,0,2,3]);s=m.createBuffer();t=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,s);m.bufferData(m.ARRAY_BUFFER,C,m.STATIC_DRAW);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,
t);m.bufferData(m.ELEMENT_ARRAY_BUFFER,H,m.STATIC_DRAW);u=m.createTexture();x=m.createTexture();m.bindTexture(m.TEXTURE_2D,u);m.texImage2D(m.TEXTURE_2D,0,m.RGB,16,16,0,m.RGB,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);m.bindTexture(m.TEXTURE_2D,x);m.texImage2D(m.TEXTURE_2D,0,
m.RGBA,16,16,0,m.RGBA,m.UNSIGNED_BYTE,null);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.CLAMP_TO_EDGE);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.NEAREST);m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.NEAREST);var C=(v=0<m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS))?{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},
H=m.createProgram(),O=m.createShader(m.FRAGMENT_SHADER),M=m.createShader(m.VERTEX_SHADER),A="precision "+a.getPrecision()+" float;\n";m.shaderSource(O,A+C.fragmentShader);m.shaderSource(M,A+C.vertexShader);m.compileShader(O);m.compileShader(M);m.attachShader(H,O);m.attachShader(H,M);m.linkProgram(H);r=H;p=m.getAttribLocation(r,"position");n=m.getAttribLocation(r,"uv");c=m.getUniformLocation(r,"renderType");d=m.getUniformLocation(r,"map");e=m.getUniformLocation(r,"occlusionMap");f=m.getUniformLocation(r,
"opacity");g=m.getUniformLocation(r,"color");h=m.getUniformLocation(r,"scale");k=m.getUniformLocation(r,"rotation");l=m.getUniformLocation(r,"screenPosition")}m.useProgram(r);m.enableVertexAttribArray(p);m.enableVertexAttribArray(n);m.uniform1i(e,0);m.uniform1i(d,1);m.bindBuffer(m.ARRAY_BUFFER,s);m.vertexAttribPointer(p,2,m.FLOAT,!1,16,0);m.vertexAttribPointer(n,2,m.FLOAT,!1,16,8);m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,t);m.disable(m.CULL_FACE);m.depthMask(!1);H=0;for(O=b.length;H<O;H++)if(C=16/G,E.set(C*
y,C),M=b[H],z.set(M.matrixWorld.elements[12],M.matrixWorld.elements[13],M.matrixWorld.elements[14]),z.applyMatrix4(w.matrixWorldInverse),z.applyProjection(w.projectionMatrix),L.copy(z),N.x=L.x*I+I,N.y=L.y*B+B,v||0<N.x&&N.x<F&&0<N.y&&N.y<G){m.activeTexture(m.TEXTURE1);m.bindTexture(m.TEXTURE_2D,u);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGB,N.x-8,N.y-8,16,16,0);m.uniform1i(c,0);m.uniform2f(h,E.x,E.y);m.uniform3f(l,L.x,L.y,L.z);m.disable(m.BLEND);m.enable(m.DEPTH_TEST);m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,
0);m.activeTexture(m.TEXTURE0);m.bindTexture(m.TEXTURE_2D,x);m.copyTexImage2D(m.TEXTURE_2D,0,m.RGBA,N.x-8,N.y-8,16,16,0);m.uniform1i(c,1);m.disable(m.DEPTH_TEST);m.activeTexture(m.TEXTURE1);m.bindTexture(m.TEXTURE_2D,u);m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0);M.positionScreen.copy(L);M.customUpdateCallback?M.customUpdateCallback(M):M.updateLensFlares();m.uniform1i(c,2);m.enable(m.BLEND);for(var A=0,J=M.lensFlares.length;A<J;A++){var R=M.lensFlares[A];.001<R.opacity&&.001<R.scale&&(L.x=R.x,
L.y=R.y,L.z=R.z,C=R.size*R.scale/G,E.x=C*y,E.y=C,m.uniform3f(l,L.x,L.y,L.z),m.uniform2f(h,E.x,E.y),m.uniform1f(k,R.rotation),m.uniform1f(f,R.opacity),m.uniform3f(g,R.color.r,R.color.g,R.color.b),a.state.setBlending(R.blending,R.blendEquation,R.blendSrc,R.blendDst),a.setTexture(R.texture,1),m.drawElements(m.TRIANGLES,6,m.UNSIGNED_SHORT,0))}}m.enable(m.CULL_FACE);m.enable(m.DEPTH_TEST);m.depthMask(!0);a.resetGLState()}}};
THREE.SpritePlugin=function(a,b){var c,d,e,f,g,h,k,l,p,n,m,s,t,r,v,u,x;function z(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var w=a.context,F,G,y,I,B=new THREE.Vector3,C=new THREE.Quaternion,E=new THREE.Vector3;this.render=function(L,N){if(0!==b.length){if(void 0===y){var H=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),O=new Uint16Array([0,1,2,0,2,3]);F=w.createBuffer();G=w.createBuffer();w.bindBuffer(w.ARRAY_BUFFER,F);w.bufferData(w.ARRAY_BUFFER,H,w.STATIC_DRAW);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,
G);w.bufferData(w.ELEMENT_ARRAY_BUFFER,O,w.STATIC_DRAW);var H=w.createProgram(),O=w.createShader(w.VERTEX_SHADER),M=w.createShader(w.FRAGMENT_SHADER);w.shaderSource(O,["precision "+a.getPrecision()+" float;","uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}"].join("\n"));
w.shaderSource(M,["precision "+a.getPrecision()+" float;","uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"].join("\n"));
w.compileShader(O);w.compileShader(M);w.attachShader(H,O);w.attachShader(H,M);w.linkProgram(H);y=H;u=w.getAttribLocation(y,"position");x=w.getAttribLocation(y,"uv");c=w.getUniformLocation(y,"uvOffset");d=w.getUniformLocation(y,"uvScale");e=w.getUniformLocation(y,"rotation");f=w.getUniformLocation(y,"scale");g=w.getUniformLocation(y,"color");h=w.getUniformLocation(y,"map");k=w.getUniformLocation(y,"opacity");l=w.getUniformLocation(y,"modelViewMatrix");p=w.getUniformLocation(y,"projectionMatrix");n=
w.getUniformLocation(y,"fogType");m=w.getUniformLocation(y,"fogDensity");s=w.getUniformLocation(y,"fogNear");t=w.getUniformLocation(y,"fogFar");r=w.getUniformLocation(y,"fogColor");v=w.getUniformLocation(y,"alphaTest");H=document.createElement("canvas");H.width=8;H.height=8;O=H.getContext("2d");O.fillStyle="white";O.fillRect(0,0,8,8);I=new THREE.Texture(H);I.needsUpdate=!0}w.useProgram(y);w.enableVertexAttribArray(u);w.enableVertexAttribArray(x);w.disable(w.CULL_FACE);w.enable(w.BLEND);w.bindBuffer(w.ARRAY_BUFFER,
F);w.vertexAttribPointer(u,2,w.FLOAT,!1,16,0);w.vertexAttribPointer(x,2,w.FLOAT,!1,16,8);w.bindBuffer(w.ELEMENT_ARRAY_BUFFER,G);w.uniformMatrix4fv(p,!1,N.projectionMatrix.elements);w.activeTexture(w.TEXTURE0);w.uniform1i(h,0);O=H=0;(M=L.fog)?(w.uniform3f(r,M.color.r,M.color.g,M.color.b),M instanceof THREE.Fog?(w.uniform1f(s,M.near),w.uniform1f(t,M.far),w.uniform1i(n,1),O=H=1):M instanceof THREE.FogExp2&&(w.uniform1f(m,M.density),w.uniform1i(n,2),O=H=2)):(w.uniform1i(n,0),O=H=0);for(var M=0,A=b.length;M<
A;M++){var J=b[M];J._modelViewMatrix.multiplyMatrices(N.matrixWorldInverse,J.matrixWorld);J.z=-J._modelViewMatrix.elements[14]}b.sort(z);for(var R=[],M=0,A=b.length;M<A;M++){var J=b[M],K=J.material;w.uniform1f(v,K.alphaTest);w.uniformMatrix4fv(l,!1,J._modelViewMatrix.elements);J.matrixWorld.decompose(B,C,E);R[0]=E.x;R[1]=E.y;J=0;L.fog&&K.fog&&(J=O);H!==J&&(w.uniform1i(n,J),H=J);null!==K.map?(w.uniform2f(c,K.map.offset.x,K.map.offset.y),w.uniform2f(d,K.map.repeat.x,K.map.repeat.y)):(w.uniform2f(c,
0,0),w.uniform2f(d,1,1));w.uniform1f(k,K.opacity);w.uniform3f(g,K.color.r,K.color.g,K.color.b);w.uniform1f(e,K.rotation);w.uniform2fv(f,R);a.state.setBlending(K.blending,K.blendEquation,K.blendSrc,K.blendDst);a.state.setDepthTest(K.depthTest);a.state.setDepthWrite(K.depthWrite);K.map&&K.map.image&&K.map.image.width?a.setTexture(K.map,0):a.setTexture(I,0);w.drawElements(w.TRIANGLES,6,w.UNSIGNED_SHORT,0)}w.enable(w.CULL_FACE);a.resetGLState()}}};
THREE.GeometryUtils={merge:function(a,b,c){THREE.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var d;b instanceof THREE.Mesh&&(b.matrixAutoUpdate&&b.updateMatrix(),d=b.matrix,b=b.geometry);a.merge(b,d,c)},center:function(a){THREE.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};
THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.Texture(void 0,b);e.load(a,function(a){f.image=a;f.needsUpdate=!0;c&&c(f)},void 0,function(a){d&&d(a)});f.sourceFile=a;return f},loadTextureCube:function(a,b,c,d){var e=new THREE.ImageLoader;e.crossOrigin=this.crossOrigin;var f=new THREE.CubeTexture([],b);f.flipY=!1;var g=0;b=function(b){e.load(a[b],function(a){f.images[b]=a;g+=1;6===g&&(f.needsUpdate=!0,c&&
c(f))},void 0,d)};for(var h=0,k=a.length;h<k;++h)b(h);return f},loadCompressedTexture:function(){THREE.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){THREE.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},getNormalMap:function(a,b){var c=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return[a[0]/b,a[1]/b,a[2]/b]};b|=1;var d=a.width,e=a.height,f=document.createElement("canvas");
f.width=d;f.height=e;var g=f.getContext("2d");g.drawImage(a,0,0);for(var h=g.getImageData(0,0,d,e).data,k=g.createImageData(d,e),l=k.data,p=0;p<d;p++)for(var n=0;n<e;n++){var m=0>n-1?0:n-1,s=n+1>e-1?e-1:n+1,t=0>p-1?0:p-1,r=p+1>d-1?d-1:p+1,v=[],u=[0,0,h[4*(n*d+p)]/255*b];v.push([-1,0,h[4*(n*d+t)]/255*b]);v.push([-1,-1,h[4*(m*d+t)]/255*b]);v.push([0,-1,h[4*(m*d+p)]/255*b]);v.push([1,-1,h[4*(m*d+r)]/255*b]);v.push([1,0,h[4*(n*d+r)]/255*b]);v.push([1,1,h[4*(s*d+r)]/255*b]);v.push([0,1,h[4*(s*d+p)]/255*
b]);v.push([-1,1,h[4*(s*d+t)]/255*b]);m=[];t=v.length;for(s=0;s<t;s++){var r=v[s],x=v[(s+1)%t],r=[r[0]-u[0],r[1]-u[1],r[2]-u[2]],x=[x[0]-u[0],x[1]-u[1],x[2]-u[2]];m.push(c([r[1]*x[2]-r[2]*x[1],r[2]*x[0]-r[0]*x[2],r[0]*x[1]-r[1]*x[0]]))}v=[0,0,0];for(s=0;s<m.length;s++)v[0]+=m[s][0],v[1]+=m[s][1],v[2]+=m[s][2];v[0]/=m.length;v[1]/=m.length;v[2]/=m.length;u=4*(n*d+p);l[u]=(v[0]+1)/2*255|0;l[u+1]=(v[1]+1)/2*255|0;l[u+2]=255*v[2]|0;l[u+3]=255}g.putImageData(k,0,0);return f},generateDataTexture:function(a,
b,c){var d=a*b,e=new Uint8Array(3*d),f=Math.floor(255*c.r),g=Math.floor(255*c.g);c=Math.floor(255*c.b);for(var h=0;h<d;h++)e[3*h]=f,e[3*h+1]=g,e[3*h+2]=c;a=new THREE.DataTexture(e,a,b,THREE.RGBFormat);a.needsUpdate=!0;return a}};
THREE.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new THREE.Object3D,d=0,e=b.length;d<e;d++)c.add(new THREE.Mesh(a,b[d]));return c},detach:function(a,b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){var d=new THREE.Matrix4;d.getInverse(c.matrixWorld);a.applyMatrix(d);b.remove(a);c.add(a)}};
THREE.FontUtils={faces:{},face:"helvetiker",weight:"normal",style:"normal",size:150,divisions:10,getFace:function(){try{return this.faces[this.face][this.weight][this.style]}catch(a){throw"The font "+this.face+" with "+this.weight+" weight and "+this.style+" style is missing.";}},loadFace:function(a){var b=a.familyName.toLowerCase();this.faces[b]=this.faces[b]||{};this.faces[b][a.cssFontWeight]=this.faces[b][a.cssFontWeight]||{};this.faces[b][a.cssFontWeight][a.cssFontStyle]=a;return this.faces[b][a.cssFontWeight][a.cssFontStyle]=
a},drawText:function(a){var b=this.getFace(),c=this.size/b.resolution,d=0,e=String(a).split(""),f=e.length,g=[];for(a=0;a<f;a++){var h=new THREE.Path,h=this.extractGlyphPoints(e[a],b,c,d,h),d=d+h.offset;g.push(h.path)}return{paths:g,offset:d/2}},extractGlyphPoints:function(a,b,c,d,e){var f=[],g,h,k,l,p,n,m,s,t,r,v,u=b.glyphs[a]||b.glyphs["?"];if(u){if(u.o)for(b=u._cachedOutline||(u._cachedOutline=u.o.split(" ")),l=b.length,a=0;a<l;)switch(k=b[a++],k){case "m":k=b[a++]*c+d;p=b[a++]*c;e.moveTo(k,p);
break;case "l":k=b[a++]*c+d;p=b[a++]*c;e.lineTo(k,p);break;case "q":k=b[a++]*c+d;p=b[a++]*c;s=b[a++]*c+d;t=b[a++]*c;e.quadraticCurveTo(s,t,k,p);if(g=f[f.length-1])for(n=g.x,m=g.y,g=1,h=this.divisions;g<=h;g++){var x=g/h;THREE.Shape.Utils.b2(x,n,s,k);THREE.Shape.Utils.b2(x,m,t,p)}break;case "b":if(k=b[a++]*c+d,p=b[a++]*c,s=b[a++]*c+d,t=b[a++]*c,r=b[a++]*c+d,v=b[a++]*c,e.bezierCurveTo(s,t,r,v,k,p),g=f[f.length-1])for(n=g.x,m=g.y,g=1,h=this.divisions;g<=h;g++)x=g/h,THREE.Shape.Utils.b3(x,n,s,r,k),THREE.Shape.Utils.b3(x,
m,t,v,p)}return{offset:u.ha*c,path:e}}}};
THREE.FontUtils.generateShapes=function(a,b){b=b||{};var c=void 0!==b.curveSegments?b.curveSegments:4,d=void 0!==b.font?b.font:"helvetiker",e=void 0!==b.weight?b.weight:"normal",f=void 0!==b.style?b.style:"normal";THREE.FontUtils.size=void 0!==b.size?b.size:100;THREE.FontUtils.divisions=c;THREE.FontUtils.face=d;THREE.FontUtils.weight=e;THREE.FontUtils.style=f;c=THREE.FontUtils.drawText(a).paths;d=[];e=0;for(f=c.length;e<f;e++)Array.prototype.push.apply(d,c[e].toShapes());return d};
(function(a){var b=function(a){for(var b=a.length,e=0,f=b-1,g=0;g<b;f=g++)e+=a[f].x*a[g].y-a[g].x*a[f].y;return.5*e};a.Triangulate=function(a,d){var e=a.length;if(3>e)return null;var f=[],g=[],h=[],k,l,p;if(0<b(a))for(l=0;l<e;l++)g[l]=l;else for(l=0;l<e;l++)g[l]=e-1-l;var n=2*e;for(l=e-1;2<e;){if(0>=n--){THREE.warn("THREE.FontUtils: Warning, unable to triangulate polygon! in Triangulate.process()");break}k=l;e<=k&&(k=0);l=k+1;e<=l&&(l=0);p=l+1;e<=p&&(p=0);var m;a:{var s=m=void 0,t=void 0,r=void 0,
v=void 0,u=void 0,x=void 0,z=void 0,w=void 0,s=a[g[k]].x,t=a[g[k]].y,r=a[g[l]].x,v=a[g[l]].y,u=a[g[p]].x,x=a[g[p]].y;if(1E-10>(r-s)*(x-t)-(v-t)*(u-s))m=!1;else{var F=void 0,G=void 0,y=void 0,I=void 0,B=void 0,C=void 0,E=void 0,L=void 0,N=void 0,H=void 0,N=L=E=w=z=void 0,F=u-r,G=x-v,y=s-u,I=t-x,B=r-s,C=v-t;for(m=0;m<e;m++)if(z=a[g[m]].x,w=a[g[m]].y,!(z===s&&w===t||z===r&&w===v||z===u&&w===x)&&(E=z-s,L=w-t,N=z-r,H=w-v,z-=u,w-=x,N=F*H-G*N,E=B*L-C*E,L=y*w-I*z,-1E-10<=N&&-1E-10<=L&&-1E-10<=E)){m=!1;break a}m=
!0}}if(m){f.push([a[g[k]],a[g[l]],a[g[p]]]);h.push([g[k],g[l],g[p]]);k=l;for(p=l+1;p<e;k++,p++)g[k]=g[p];e--;n=2*e}}return d?h:f};a.Triangulate.area=b;return a})(THREE.FontUtils);self._typeface_js={faces:THREE.FontUtils.faces,loadFace:THREE.FontUtils.loadFace};THREE.typeface_js=self._typeface_js;
THREE.Audio=function(a){THREE.Object3D.call(this);this.type="Audio";this.context=a.context;this.source=this.context.createBufferSource();this.source.onended=this.onEnded.bind(this);this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.panner=this.context.createPanner();this.panner.connect(this.gain);this.autoplay=!1;this.startTime=0;this.isPlaying=!1};THREE.Audio.prototype=Object.create(THREE.Object3D.prototype);THREE.Audio.prototype.constructor=THREE.Audio;
THREE.Audio.prototype.load=function(a){var b=this,c=new XMLHttpRequest;c.open("GET",a,!0);c.responseType="arraybuffer";c.onload=function(a){b.context.decodeAudioData(this.response,function(a){b.source.buffer=a;b.autoplay&&b.play()})};c.send();return this};
THREE.Audio.prototype.play=function(){if(!0===this.isPlaying)THREE.warn("THREE.Audio: Audio is already playing.");else{var a=this.context.createBufferSource();a.buffer=this.source.buffer;a.loop=this.source.loop;a.onended=this.source.onended;a.connect(this.panner);a.start(0,this.startTime);this.isPlaying=!0;this.source=a}};THREE.Audio.prototype.pause=function(){this.source.stop();this.startTime=this.context.currentTime};THREE.Audio.prototype.stop=function(){this.source.stop();this.startTime=0};
THREE.Audio.prototype.onEnded=function(){this.isPlaying=!1};THREE.Audio.prototype.setLoop=function(a){this.source.loop=a};THREE.Audio.prototype.setRefDistance=function(a){this.panner.refDistance=a};THREE.Audio.prototype.setRolloffFactor=function(a){this.panner.rolloffFactor=a};THREE.Audio.prototype.setVolume=function(a){this.gain.gain.value=a};
THREE.Audio.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3;return function(b){THREE.Object3D.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}();THREE.AudioListener=function(){THREE.Object3D.call(this);this.type="AudioListener";this.context=new (window.AudioContext||window.webkitAudioContext)};THREE.AudioListener.prototype=Object.create(THREE.Object3D.prototype);THREE.AudioListener.prototype.constructor=THREE.AudioListener;
THREE.AudioListener.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3;return function(e){THREE.Object3D.prototype.updateMatrixWorld.call(this,e);e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,b,c);d.set(0,0,-1).applyQuaternion(b);e.setPosition(a.x,a.y,a.z);e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z)}}();THREE.Curve=function(){};
THREE.Curve.prototype.getPoint=function(a){THREE.warn("THREE.Curve: Warning, getPoint() not implemented!");return null};THREE.Curve.prototype.getPointAt=function(a){a=this.getUtoTmapping(a);return this.getPoint(a)};THREE.Curve.prototype.getPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPoint(b/a));return c};THREE.Curve.prototype.getSpacedPoints=function(a){a||(a=5);var b,c=[];for(b=0;b<=a;b++)c.push(this.getPointAt(b/a));return c};
THREE.Curve.prototype.getLength=function(){var a=this.getLengths();return a[a.length-1]};THREE.Curve.prototype.getLengths=function(a){a||(a=this.__arcLengthDivisions?this.__arcLengthDivisions:200);if(this.cacheArcLengths&&this.cacheArcLengths.length==a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c,d=this.getPoint(0),e,f=0;b.push(0);for(e=1;e<=a;e++)c=this.getPoint(e/a),f+=c.distanceTo(d),b.push(f),d=c;return this.cacheArcLengths=b};
THREE.Curve.prototype.updateArcLengths=function(){this.needsUpdate=!0;this.getLengths()};THREE.Curve.prototype.getUtoTmapping=function(a,b){var c=this.getLengths(),d=0,e=c.length,f;f=b?b:a*c[e-1];for(var g=0,h=e-1,k;g<=h;)if(d=Math.floor(g+(h-g)/2),k=c[d]-f,0>k)g=d+1;else if(0<k)h=d-1;else{h=d;break}d=h;if(c[d]==f)return d/(e-1);g=c[d];return c=(d+(f-g)/(c[d+1]-g))/(e-1)};THREE.Curve.prototype.getTangent=function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()};
THREE.Curve.prototype.getTangentAt=function(a){a=this.getUtoTmapping(a);return this.getTangent(a)};
THREE.Curve.Utils={tangentQuadraticBezier:function(a,b,c,d){return 2*(1-a)*(c-b)+2*a*(d-c)},tangentCubicBezier:function(a,b,c,d,e){return-3*b*(1-a)*(1-a)+3*c*(1-a)*(1-a)-6*a*c*(1-a)+6*a*d*(1-a)-3*a*a*d+3*a*a*e},tangentSpline:function(a,b,c,d,e){return 6*a*a-6*a+(3*a*a-4*a+1)+(-6*a*a+6*a)+(3*a*a-2*a)},interpolate:function(a,b,c,d,e){a=.5*(c-a);d=.5*(d-b);var f=e*e;return(2*b-2*c+a+d)*e*f+(-3*b+3*c-2*a-d)*f+a*e+b}};
THREE.Curve.create=function(a,b){a.prototype=Object.create(THREE.Curve.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};THREE.CurvePath=function(){this.curves=[];this.bends=[];this.autoClose=!1};THREE.CurvePath.prototype=Object.create(THREE.Curve.prototype);THREE.CurvePath.prototype.constructor=THREE.CurvePath;THREE.CurvePath.prototype.add=function(a){this.curves.push(a)};THREE.CurvePath.prototype.checkConnection=function(){};
THREE.CurvePath.prototype.closePath=function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new THREE.LineCurve(b,a))};THREE.CurvePath.prototype.getPoint=function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],b=1-b/a.getLength(),a.getPointAt(b);a++}return null};THREE.CurvePath.prototype.getLength=function(){var a=this.getCurveLengths();return a[a.length-1]};
THREE.CurvePath.prototype.getCurveLengths=function(){if(this.cacheLengths&&this.cacheLengths.length==this.curves.length)return this.cacheLengths;var a=[],b=0,c,d=this.curves.length;for(c=0;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a};
THREE.CurvePath.prototype.getBoundingBox=function(){var a=this.getPoints(),b,c,d,e,f,g;b=c=Number.NEGATIVE_INFINITY;e=f=Number.POSITIVE_INFINITY;var h,k,l,p,n=a[0]instanceof THREE.Vector3;p=n?new THREE.Vector3:new THREE.Vector2;k=0;for(l=a.length;k<l;k++)h=a[k],h.x>b?b=h.x:h.x<e&&(e=h.x),h.y>c?c=h.y:h.y<f&&(f=h.y),n&&(h.z>d?d=h.z:h.z<g&&(g=h.z)),p.add(h);a={minX:e,minY:f,maxX:b,maxY:c};n&&(a.maxZ=d,a.minZ=g);return a};
THREE.CurvePath.prototype.createPointsGeometry=function(a){a=this.getPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createSpacedPointsGeometry=function(a){a=this.getSpacedPoints(a,!0);return this.createGeometry(a)};THREE.CurvePath.prototype.createGeometry=function(a){for(var b=new THREE.Geometry,c=0;c<a.length;c++)b.vertices.push(new THREE.Vector3(a[c].x,a[c].y,a[c].z||0));return b};THREE.CurvePath.prototype.addWrapPath=function(a){this.bends.push(a)};
THREE.CurvePath.prototype.getTransformedPoints=function(a,b){var c=this.getPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};THREE.CurvePath.prototype.getTransformedSpacedPoints=function(a,b){var c=this.getSpacedPoints(a),d,e;b||(b=this.bends);d=0;for(e=b.length;d<e;d++)c=this.getWrapPoints(c,b[d]);return c};
THREE.CurvePath.prototype.getWrapPoints=function(a,b){var c=this.getBoundingBox(),d,e,f,g,h,k;d=0;for(e=a.length;d<e;d++)f=a[d],g=f.x,h=f.y,k=g/c.maxX,k=b.getUtoTmapping(k,g),g=b.getPoint(k),k=b.getTangent(k),k.set(-k.y,k.x).multiplyScalar(h),f.x=g.x+k.x,f.y=g.y+k.y;return a};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);THREE.Gyroscope.prototype.constructor=THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld=function(){var a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3,d=new THREE.Vector3,e=new THREE.Quaternion,f=new THREE.Vector3;return function(g){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||g)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(d,e,f),this.matrix.decompose(a,b,c),this.matrixWorld.compose(d,b,f)):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=
!1,g=!0;for(var h=0,k=this.children.length;h<k;h++)this.children[h].updateMatrixWorld(g)}}();THREE.Path=function(a){THREE.CurvePath.call(this);this.actions=[];a&&this.fromPoints(a)};THREE.Path.prototype=Object.create(THREE.CurvePath.prototype);THREE.Path.prototype.constructor=THREE.Path;THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"};
THREE.Path.prototype.fromPoints=function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)};THREE.Path.prototype.moveTo=function(a,b){var c=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:c})};
THREE.Path.prototype.lineTo=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.actions[this.actions.length-1].args,d=new THREE.LineCurve(new THREE.Vector2(d[d.length-2],d[d.length-1]),new THREE.Vector2(a,b));this.curves.push(d);this.actions.push({action:THREE.PathActions.LINE_TO,args:c})};
THREE.Path.prototype.quadraticCurveTo=function(a,b,c,d){var e=Array.prototype.slice.call(arguments),f=this.actions[this.actions.length-1].args,f=new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length-2],f[f.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d));this.curves.push(f);this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:e})};
THREE.Path.prototype.bezierCurveTo=function(a,b,c,d,e,f){var g=Array.prototype.slice.call(arguments),h=this.actions[this.actions.length-1].args,h=new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length-2],h[h.length-1]),new THREE.Vector2(a,b),new THREE.Vector2(c,d),new THREE.Vector2(e,f));this.curves.push(h);this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:g})};
THREE.Path.prototype.splineThru=function(a){var b=Array.prototype.slice.call(arguments),c=this.actions[this.actions.length-1].args,c=[new THREE.Vector2(c[c.length-2],c[c.length-1])];Array.prototype.push.apply(c,a);c=new THREE.SplineCurve(c);this.curves.push(c);this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:b})};THREE.Path.prototype.arc=function(a,b,c,d,e,f){var g=this.actions[this.actions.length-1].args;this.absarc(a+g[g.length-2],b+g[g.length-1],c,d,e,f)};
THREE.Path.prototype.absarc=function(a,b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)};THREE.Path.prototype.ellipse=function(a,b,c,d,e,f,g){var h=this.actions[this.actions.length-1].args;this.absellipse(a+h[h.length-2],b+h[h.length-1],c,d,e,f,g)};THREE.Path.prototype.absellipse=function(a,b,c,d,e,f,g){var h=Array.prototype.slice.call(arguments),k=new THREE.EllipseCurve(a,b,c,d,e,f,g);this.curves.push(k);k=k.getPoint(1);h.push(k.x);h.push(k.y);this.actions.push({action:THREE.PathActions.ELLIPSE,args:h})};
THREE.Path.prototype.getSpacedPoints=function(a,b){a||(a=40);for(var c=[],d=0;d<a;d++)c.push(this.getPoint(d/a));return c};
THREE.Path.prototype.getPoints=function(a,b){if(this.useSpacedPoints)return THREE.log("tata"),this.getSpacedPoints(a,b);a=a||12;var c=[],d,e,f,g,h,k,l,p,n,m,s,t,r;d=0;for(e=this.actions.length;d<e;d++)switch(f=this.actions[d],g=f.action,f=f.args,g){case THREE.PathActions.MOVE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.LINE_TO:c.push(new THREE.Vector2(f[0],f[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:h=f[2];k=f[3];n=f[0];m=f[1];0<c.length?(g=c[c.length-1],s=g.x,
t=g.y):(g=this.actions[d-1].args,s=g[g.length-2],t=g[g.length-1]);for(f=1;f<=a;f++)r=f/a,g=THREE.Shape.Utils.b2(r,s,n,h),r=THREE.Shape.Utils.b2(r,t,m,k),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.BEZIER_CURVE_TO:h=f[4];k=f[5];n=f[0];m=f[1];l=f[2];p=f[3];0<c.length?(g=c[c.length-1],s=g.x,t=g.y):(g=this.actions[d-1].args,s=g[g.length-2],t=g[g.length-1]);for(f=1;f<=a;f++)r=f/a,g=THREE.Shape.Utils.b3(r,s,n,l,h),r=THREE.Shape.Utils.b3(r,t,m,p,k),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.CSPLINE_THRU:g=
this.actions[d-1].args;r=[new THREE.Vector2(g[g.length-2],g[g.length-1])];g=a*f[0].length;r=r.concat(f[0]);r=new THREE.SplineCurve(r);for(f=1;f<=g;f++)c.push(r.getPointAt(f/g));break;case THREE.PathActions.ARC:h=f[0];k=f[1];m=f[2];l=f[3];g=f[4];n=!!f[5];s=g-l;t=2*a;for(f=1;f<=t;f++)r=f/t,n||(r=1-r),r=l+r*s,g=h+m*Math.cos(r),r=k+m*Math.sin(r),c.push(new THREE.Vector2(g,r));break;case THREE.PathActions.ELLIPSE:for(h=f[0],k=f[1],m=f[2],p=f[3],l=f[4],g=f[5],n=!!f[6],s=g-l,t=2*a,f=1;f<=t;f++)r=f/t,n||
(r=1-r),r=l+r*s,g=h+m*Math.cos(r),r=k+p*Math.sin(r),c.push(new THREE.Vector2(g,r))}d=c[c.length-1];1E-10>Math.abs(d.x-c[0].x)&&1E-10>Math.abs(d.y-c[0].y)&&c.splice(c.length-1,1);b&&c.push(c[0]);return c};
THREE.Path.prototype.toShapes=function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c],f=new THREE.Shape;f.actions=e.actions;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],m=h.x-g.x,k=h.y-g.y;if(1E-10<Math.abs(k)){if(0>k&&(g=b[f],m=-m,h=b[e],k=-k),!(a.y<g.y||a.y>h.y))if(a.y==g.y){if(a.x==g.x)return!0}else{e=k*(a.x-g.x)-m*(a.y-g.y);if(0==e)return!0;0>e||(d=!d)}}else if(a.y==g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=
h.x))return!0}return d}var e=function(a){var b,c,d,e,f=[],g=new THREE.Path;b=0;for(c=a.length;b<c;b++)d=a[b],e=d.args,d=d.action,d==THREE.PathActions.MOVE_TO&&0!=g.actions.length&&(f.push(g),g=new THREE.Path),g[d].apply(g,e);0!=g.actions.length&&f.push(g);return f}(this.actions);if(0==e.length)return[];if(!0===b)return c(e);var f,g,h,k=[];if(1==e.length)return g=e[0],h=new THREE.Shape,h.actions=g.actions,h.curves=g.curves,k.push(h),k;var l=!THREE.Shape.Utils.isClockWise(e[0].getPoints()),l=a?!l:l;
h=[];var p=[],n=[],m=0,s;p[m]=void 0;n[m]=[];var t,r;t=0;for(r=e.length;t<r;t++)g=e[t],s=g.getPoints(),f=THREE.Shape.Utils.isClockWise(s),(f=a?!f:f)?(!l&&p[m]&&m++,p[m]={s:new THREE.Shape,p:s},p[m].s.actions=g.actions,p[m].s.curves=g.curves,l&&m++,n[m]=[]):n[m].push({h:g,p:s[0]});if(!p[0])return c(e);if(1<p.length){t=!1;r=[];g=0;for(e=p.length;g<e;g++)h[g]=[];g=0;for(e=p.length;g<e;g++)for(f=n[g],l=0;l<f.length;l++){m=f[l];s=!0;for(var v=0;v<p.length;v++)d(m.p,p[v].p)&&(g!=v&&r.push({froms:g,tos:v,
hole:l}),s?(s=!1,h[v].push(m)):t=!0);s&&h[g].push(m)}0<r.length&&(t||(n=h))}t=0;for(r=p.length;t<r;t++)for(h=p[t].s,k.push(h),g=n[t],e=0,f=g.length;e<f;e++)h.holes.push(g[e].h);return k};THREE.Shape=function(){THREE.Path.apply(this,arguments);this.holes=[]};THREE.Shape.prototype=Object.create(THREE.Path.prototype);THREE.Shape.prototype.constructor=THREE.Shape;THREE.Shape.prototype.extrude=function(a){return new THREE.ExtrudeGeometry(this,a)};
THREE.Shape.prototype.makeGeometry=function(a){return new THREE.ShapeGeometry(this,a)};THREE.Shape.prototype.getPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedPoints(a,this.bends);return d};THREE.Shape.prototype.getSpacedPointsHoles=function(a){var b,c=this.holes.length,d=[];for(b=0;b<c;b++)d[b]=this.holes[b].getTransformedSpacedPoints(a,this.bends);return d};
THREE.Shape.prototype.extractAllPoints=function(a){return{shape:this.getTransformedPoints(a),holes:this.getPointsHoles(a)}};THREE.Shape.prototype.extractPoints=function(a){return this.useSpacedPoints?this.extractAllSpacedPoints(a):this.extractAllPoints(a)};THREE.Shape.prototype.extractAllSpacedPoints=function(a){return{shape:this.getTransformedSpacedPoints(a),holes:this.getSpacedPointsHoles(a)}};
THREE.Shape.Utils={triangulateShape:function(a,b){function c(a,b,c){return a.x!=b.x?a.x<b.x?a.x<=c.x&&c.x<=b.x:b.x<=c.x&&c.x<=a.x:a.y<b.y?a.y<=c.y&&c.y<=b.y:b.y<=c.y&&c.y<=a.y}function d(a,b,d,e,f){var g=b.x-a.x,h=b.y-a.y,k=e.x-d.x,l=e.y-d.y,p=a.x-d.x,n=a.y-d.y,y=h*k-g*l,I=h*p-g*n;if(1E-10<Math.abs(y)){if(0<y){if(0>I||I>y)return[];k=l*p-k*n;if(0>k||k>y)return[]}else{if(0<I||I<y)return[];k=l*p-k*n;if(0<k||k<y)return[]}if(0==k)return!f||0!=I&&I!=y?[a]:[];if(k==y)return!f||0!=I&&I!=y?[b]:[];if(0==I)return[d];
if(I==y)return[e];f=k/y;return[{x:a.x+f*g,y:a.y+f*h}]}if(0!=I||l*p!=k*n)return[];h=0==g&&0==h;k=0==k&&0==l;if(h&&k)return a.x!=d.x||a.y!=d.y?[]:[a];if(h)return c(d,e,a)?[a]:[];if(k)return c(a,b,d)?[d]:[];0!=g?(a.x<b.x?(g=a,k=a.x,h=b,a=b.x):(g=b,k=b.x,h=a,a=a.x),d.x<e.x?(b=d,y=d.x,l=e,d=e.x):(b=e,y=e.x,l=d,d=d.x)):(a.y<b.y?(g=a,k=a.y,h=b,a=b.y):(g=b,k=b.y,h=a,a=a.y),d.y<e.y?(b=d,y=d.y,l=e,d=e.y):(b=e,y=e.y,l=d,d=d.y));return k<=y?a<y?[]:a==y?f?[]:[b]:a<=d?[b,h]:[b,l]:k>d?[]:k==d?f?[]:[g]:a<=d?[g,h]:
[g,l]}function e(a,b,c,d){var e=b.x-a.x,f=b.y-a.y;b=c.x-a.x;c=c.y-a.y;var g=d.x-a.x;d=d.y-a.y;a=e*c-f*b;e=e*d-f*g;return 1E-10<Math.abs(a)?(b=g*c-d*b,0<a?0<=e&&0<=b:0<=e||0<=b):0<e}var f,g,h,k,l,p={};h=a.concat();f=0;for(g=b.length;f<g;f++)Array.prototype.push.apply(h,b[f]);f=0;for(g=h.length;f<g;f++)l=h[f].x+":"+h[f].y,void 0!==p[l]&&THREE.warn("THREE.Shape: Duplicate point",l),p[l]=f;f=function(a,b){function c(a,b){var d=h.length-1,f=a-1;0>f&&(f=d);var g=a+1;g>d&&(g=0);d=e(h[a],h[f],h[g],k[b]);
if(!d)return!1;d=k.length-1;f=b-1;0>f&&(f=d);g=b+1;g>d&&(g=0);return(d=e(k[b],k[f],k[g],h[a]))?!0:!1}function f(a,b){var c,e;for(c=0;c<h.length;c++)if(e=c+1,e%=h.length,e=d(a,b,h[c],h[e],!0),0<e.length)return!0;return!1}function g(a,c){var e,f,h,k;for(e=0;e<l.length;e++)for(f=b[l[e]],h=0;h<f.length;h++)if(k=h+1,k%=f.length,k=d(a,c,f[h],f[k],!0),0<k.length)return!0;return!1}var h=a.concat(),k,l=[],p,n,G,y,I,B=[],C,E,L,N=0;for(p=b.length;N<p;N++)l.push(N);C=0;for(var H=2*l.length;0<l.length;){H--;if(0>
H){THREE.log("Infinite Loop! Holes left:"+l.length+", Probably Hole outside Shape!");break}for(n=C;n<h.length;n++){G=h[n];p=-1;for(N=0;N<l.length;N++)if(y=l[N],I=G.x+":"+G.y+":"+y,void 0===B[I]){k=b[y];for(E=0;E<k.length;E++)if(y=k[E],c(n,E)&&!f(G,y)&&!g(G,y)){p=E;l.splice(N,1);C=h.slice(0,n+1);y=h.slice(n);E=k.slice(p);L=k.slice(0,p+1);h=C.concat(E).concat(L).concat(y);C=n;break}if(0<=p)break;B[I]=!0}if(0<=p)break}}return h}(a,b);var n=THREE.FontUtils.Triangulate(f,!1);f=0;for(g=n.length;f<g;f++)for(k=
n[f],h=0;3>h;h++)l=k[h].x+":"+k[h].y,l=p[l],void 0!==l&&(k[h]=l);return n.concat()},isClockWise:function(a){return 0>THREE.FontUtils.Triangulate.area(a)},b2p0:function(a,b){var c=1-a;return c*c*b},b2p1:function(a,b){return 2*(1-a)*a*b},b2p2:function(a,b){return a*a*b},b2:function(a,b,c,d){return this.b2p0(a,b)+this.b2p1(a,c)+this.b2p2(a,d)},b3p0:function(a,b){var c=1-a;return c*c*c*b},b3p1:function(a,b){var c=1-a;return 3*c*c*a*b},b3p2:function(a,b){return 3*(1-a)*a*a*b},b3p3:function(a,b){return a*
a*a*b},b3:function(a,b,c,d,e){return this.b3p0(a,b)+this.b3p1(a,c)+this.b3p2(a,d)+this.b3p3(a,e)}};THREE.LineCurve=function(a,b){this.v1=a;this.v2=b};THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.LineCurve.prototype.constructor=THREE.LineCurve;THREE.LineCurve.prototype.getPoint=function(a){var b=this.v2.clone().sub(this.v1);b.multiplyScalar(a).add(this.v1);return b};THREE.LineCurve.prototype.getPointAt=function(a){return this.getPoint(a)};
THREE.LineCurve.prototype.getTangent=function(a){return this.v2.clone().sub(this.v1).normalize()};THREE.QuadraticBezierCurve=function(a,b,c){this.v0=a;this.v1=b;this.v2=c};THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint=function(a){var b=new THREE.Vector2;b.x=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);return b};THREE.QuadraticBezierCurve.prototype.getTangent=function(a){var b=new THREE.Vector2;b.x=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Curve.Utils.tangentQuadraticBezier(a,this.v0.y,this.v1.y,this.v2.y);return b.normalize()};
THREE.CubicBezierCurve=function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d};THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype);THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve;THREE.CubicBezierCurve.prototype.getPoint=function(a){var b;b=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);return new THREE.Vector2(b,a)};
THREE.CubicBezierCurve.prototype.getTangent=function(a){var b;b=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);a=THREE.Curve.Utils.tangentCubicBezier(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b=new THREE.Vector2(b,a);b.normalize();return b};THREE.SplineCurve=function(a){this.points=void 0==a?[]:a};THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype);THREE.SplineCurve.prototype.constructor=THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint=function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=new THREE.Vector2;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);return c};THREE.EllipseCurve=function(a,b,c,d,e,f,g){this.aX=a;this.aY=b;this.xRadius=c;this.yRadius=d;this.aStartAngle=e;this.aEndAngle=f;this.aClockwise=g};
THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype);THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve;THREE.EllipseCurve.prototype.getPoint=function(a){var b=this.aEndAngle-this.aStartAngle;0>b&&(b+=2*Math.PI);b>2*Math.PI&&(b-=2*Math.PI);a=!0===this.aClockwise?this.aEndAngle+(1-a)*(2*Math.PI-b):this.aStartAngle+a*b;b=new THREE.Vector2;b.x=this.aX+this.xRadius*Math.cos(a);b.y=this.aY+this.yRadius*Math.sin(a);return b};
THREE.ArcCurve=function(a,b,c,d,e,f){THREE.EllipseCurve.call(this,a,b,c,c,d,e,f)};THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype);THREE.ArcCurve.prototype.constructor=THREE.ArcCurve;THREE.LineCurve3=THREE.Curve.create(function(a,b){this.v1=a;this.v2=b},function(a){var b=new THREE.Vector3;b.subVectors(this.v2,this.v1);b.multiplyScalar(a);b.add(this.v1);return b});
THREE.QuadraticBezierCurve3=THREE.Curve.create(function(a,b,c){this.v0=a;this.v1=b;this.v2=c},function(a){var b=new THREE.Vector3;b.x=THREE.Shape.Utils.b2(a,this.v0.x,this.v1.x,this.v2.x);b.y=THREE.Shape.Utils.b2(a,this.v0.y,this.v1.y,this.v2.y);b.z=THREE.Shape.Utils.b2(a,this.v0.z,this.v1.z,this.v2.z);return b});
THREE.CubicBezierCurve3=THREE.Curve.create(function(a,b,c,d){this.v0=a;this.v1=b;this.v2=c;this.v3=d},function(a){var b=new THREE.Vector3;b.x=THREE.Shape.Utils.b3(a,this.v0.x,this.v1.x,this.v2.x,this.v3.x);b.y=THREE.Shape.Utils.b3(a,this.v0.y,this.v1.y,this.v2.y,this.v3.y);b.z=THREE.Shape.Utils.b3(a,this.v0.z,this.v1.z,this.v2.z,this.v3.z);return b});
THREE.SplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-1;var c=Math.floor(a);a-=c;var d=b[0==c?c:c-1],e=b[c],f=b[c>b.length-2?b.length-1:c+1],b=b[c>b.length-3?b.length-1:c+2],c=new THREE.Vector3;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);c.z=THREE.Curve.Utils.interpolate(d.z,e.z,f.z,b.z,a);return c});
THREE.ClosedSplineCurve3=THREE.Curve.create(function(a){this.points=void 0==a?[]:a},function(a){var b=this.points;a*=b.length-0;var c=Math.floor(a);a-=c;var c=c+(0<c?0:(Math.floor(Math.abs(c)/b.length)+1)*b.length),d=b[(c-1)%b.length],e=b[c%b.length],f=b[(c+1)%b.length],b=b[(c+2)%b.length],c=new THREE.Vector3;c.x=THREE.Curve.Utils.interpolate(d.x,e.x,f.x,b.x,a);c.y=THREE.Curve.Utils.interpolate(d.y,e.y,f.y,b.y,a);c.z=THREE.Curve.Utils.interpolate(d.z,e.z,f.z,b.z,a);return c});
THREE.AnimationHandler={LINEAR:0,CATMULLROM:1,CATMULLROM_FORWARD:2,add:function(){THREE.warn("THREE.AnimationHandler.add() has been deprecated.")},get:function(){THREE.warn("THREE.AnimationHandler.get() has been deprecated.")},remove:function(){THREE.warn("THREE.AnimationHandler.remove() has been deprecated.")},animations:[],init:function(a){if(!0===a.initialized)return a;for(var b=0;b<a.hierarchy.length;b++){for(var c=0;c<a.hierarchy[b].keys.length;c++)if(0>a.hierarchy[b].keys[c].time&&(a.hierarchy[b].keys[c].time=
0),void 0!==a.hierarchy[b].keys[c].rot&&!(a.hierarchy[b].keys[c].rot instanceof THREE.Quaternion)){var d=a.hierarchy[b].keys[c].rot;a.hierarchy[b].keys[c].rot=(new THREE.Quaternion).fromArray(d)}if(a.hierarchy[b].keys.length&&void 0!==a.hierarchy[b].keys[0].morphTargets){d={};for(c=0;c<a.hierarchy[b].keys.length;c++)for(var e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++){var f=a.hierarchy[b].keys[c].morphTargets[e];d[f]=-1}a.hierarchy[b].usedMorphTargets=d;for(c=0;c<a.hierarchy[b].keys.length;c++){var g=
{};for(f in d){for(e=0;e<a.hierarchy[b].keys[c].morphTargets.length;e++)if(a.hierarchy[b].keys[c].morphTargets[e]===f){g[f]=a.hierarchy[b].keys[c].morphTargetsInfluences[e];break}e===a.hierarchy[b].keys[c].morphTargets.length&&(g[f]=0)}a.hierarchy[b].keys[c].morphTargetsInfluences=g}}for(c=1;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].time===a.hierarchy[b].keys[c-1].time&&(a.hierarchy[b].keys.splice(c,1),c--);for(c=0;c<a.hierarchy[b].keys.length;c++)a.hierarchy[b].keys[c].index=c}a.initialized=
!0;return a},parse:function(a){var b=function(a,c){c.push(a);for(var d=0;d<a.children.length;d++)b(a.children[d],c)},c=[];if(a instanceof THREE.SkinnedMesh)for(var d=0;d<a.skeleton.bones.length;d++)c.push(a.skeleton.bones[d]);else b(a,c);return c},play:function(a){-1===this.animations.indexOf(a)&&this.animations.push(a)},stop:function(a){a=this.animations.indexOf(a);-1!==a&&this.animations.splice(a,1)},update:function(a){for(var b=0;b<this.animations.length;b++)this.animations[b].resetBlendWeights();
for(b=0;b<this.animations.length;b++)this.animations[b].update(a)}};THREE.Animation=function(a,b){this.root=a;this.data=THREE.AnimationHandler.init(b);this.hierarchy=THREE.AnimationHandler.parse(a);this.currentTime=0;this.timeScale=1;this.isPlaying=!1;this.loop=!0;this.weight=0;this.interpolationType=THREE.AnimationHandler.LINEAR};
THREE.Animation.prototype={constructor:THREE.Animation,keyTypes:["pos","rot","scl"],play:function(a,b){this.currentTime=void 0!==a?a:0;this.weight=void 0!==b?b:1;this.isPlaying=!0;this.reset();THREE.AnimationHandler.play(this)},stop:function(){this.isPlaying=!1;THREE.AnimationHandler.stop(this)},reset:function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a];void 0===c.animationCache&&(c.animationCache={animations:{},blending:{positionWeight:0,quaternionWeight:0,scaleWeight:0}});
var d=this.data.name,e=c.animationCache.animations,f=e[d];void 0===f&&(f={prevKey:{pos:0,rot:0,scl:0},nextKey:{pos:0,rot:0,scl:0},originalMatrix:c.matrix},e[d]=f);for(c=0;3>c;c++){for(var d=this.keyTypes[c],e=this.data.hierarchy[a].keys[0],g=this.getNextKeyWith(d,a,1);g.time<this.currentTime&&g.index>e.index;)e=g,g=this.getNextKeyWith(d,a,g.index+1);f.prevKey[d]=e;f.nextKey[d]=g}}},resetBlendWeights:function(){for(var a=0,b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a].animationCache;void 0!==
c&&(c=c.blending,c.positionWeight=0,c.quaternionWeight=0,c.scaleWeight=0)}},update:function(){var a=[],b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Quaternion,e=function(a,b){var c=[],d=[],e,n,m,s,t,r;e=(a.length-1)*b;n=Math.floor(e);e-=n;c[0]=0===n?n:n-1;c[1]=n;c[2]=n>a.length-2?n:n+1;c[3]=n>a.length-3?n:n+2;n=a[c[0]];s=a[c[1]];t=a[c[2]];r=a[c[3]];c=e*e;m=e*c;d[0]=f(n[0],s[0],t[0],r[0],e,c,m);d[1]=f(n[1],s[1],t[1],r[1],e,c,m);d[2]=f(n[2],s[2],t[2],r[2],e,c,m);return d},f=function(a,b,c,d,
e,f,m){a=.5*(c-a);d=.5*(d-b);return(2*(b-c)+a+d)*m+(-3*(b-c)-2*a-d)*f+a*e+b};return function(f){if(!1!==this.isPlaying&&(this.currentTime+=f*this.timeScale,0!==this.weight)){f=this.data.length;if(this.currentTime>f||0>this.currentTime)this.loop?(this.currentTime%=f,0>this.currentTime&&(this.currentTime+=f),this.reset()):this.stop();f=0;for(var h=this.hierarchy.length;f<h;f++)for(var k=this.hierarchy[f],l=k.animationCache.animations[this.data.name],p=k.animationCache.blending,n=0;3>n;n++){var m=this.keyTypes[n],
s=l.prevKey[m],t=l.nextKey[m];if(0<this.timeScale&&t.time<=this.currentTime||0>this.timeScale&&s.time>=this.currentTime){s=this.data.hierarchy[f].keys[0];for(t=this.getNextKeyWith(m,f,1);t.time<this.currentTime&&t.index>s.index;)s=t,t=this.getNextKeyWith(m,f,t.index+1);l.prevKey[m]=s;l.nextKey[m]=t}var r=(this.currentTime-s.time)/(t.time-s.time),v=s[m],u=t[m];0>r&&(r=0);1<r&&(r=1);if("pos"===m)if(this.interpolationType===THREE.AnimationHandler.LINEAR)c.x=v[0]+(u[0]-v[0])*r,c.y=v[1]+(u[1]-v[1])*r,
c.z=v[2]+(u[2]-v[2])*r,s=this.weight/(this.weight+p.positionWeight),k.position.lerp(c,s),p.positionWeight+=this.weight;else{if(this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD)a[0]=this.getPrevKeyWith("pos",f,s.index-1).pos,a[1]=v,a[2]=u,a[3]=this.getNextKeyWith("pos",f,t.index+1).pos,r=.33*r+.33,t=e(a,r),s=this.weight/(this.weight+p.positionWeight),p.positionWeight+=this.weight,m=k.position,m.x+=(t[0]-m.x)*s,m.y+=(t[1]-
m.y)*s,m.z+=(t[2]-m.z)*s,this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD&&(r=e(a,1.01*r),b.set(r[0],r[1],r[2]),b.sub(m),b.y=0,b.normalize(),r=Math.atan2(b.x,b.z),k.rotation.set(0,r,0))}else"rot"===m?(THREE.Quaternion.slerp(v,u,d,r),0===p.quaternionWeight?(k.quaternion.copy(d),p.quaternionWeight=this.weight):(s=this.weight/(this.weight+p.quaternionWeight),THREE.Quaternion.slerp(k.quaternion,d,k.quaternion,s),p.quaternionWeight+=this.weight)):"scl"===m&&(c.x=v[0]+(u[0]-v[0])*r,c.y=
v[1]+(u[1]-v[1])*r,c.z=v[2]+(u[2]-v[2])*r,s=this.weight/(this.weight+p.scaleWeight),k.scale.lerp(c,s),p.scaleWeight+=this.weight)}return!0}}}(),getNextKeyWith:function(a,b,c){var d=this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?c<d.length-1?c:d.length-1:c%d.length;c<d.length;c++)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[0]},getPrevKeyWith:function(a,b,c){var d=
this.data.hierarchy[b].keys;for(c=this.interpolationType===THREE.AnimationHandler.CATMULLROM||this.interpolationType===THREE.AnimationHandler.CATMULLROM_FORWARD?0<c?c:0:0<=c?c:c+d.length;0<=c;c--)if(void 0!==d[c][a])return d[c];return this.data.hierarchy[b].keys[d.length-1]}};
THREE.KeyFrameAnimation=function(a){this.root=a.node;this.data=THREE.AnimationHandler.init(a);this.hierarchy=THREE.AnimationHandler.parse(this.root);this.currentTime=0;this.timeScale=.001;this.isPlaying=!1;this.loop=this.isPaused=!0;a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.data.hierarchy[a].sids,d=this.hierarchy[a];if(this.data.hierarchy[a].keys.length&&c){for(var e=0;e<c.length;e++){var f=c[e],g=this.getNextKeyWith(f,a,0);g&&g.apply(f)}d.matrixAutoUpdate=!1;this.data.hierarchy[a].node.updateMatrix();
d.matrixWorldNeedsUpdate=!0}}};
THREE.KeyFrameAnimation.prototype={constructor:THREE.KeyFrameAnimation,play:function(a){this.currentTime=void 0!==a?a:0;if(!1===this.isPlaying){this.isPlaying=!0;var b=this.hierarchy.length,c,d;for(a=0;a<b;a++)c=this.hierarchy[a],d=this.data.hierarchy[a],void 0===d.animationCache&&(d.animationCache={},d.animationCache.prevKey=null,d.animationCache.nextKey=null,d.animationCache.originalMatrix=c.matrix),c=this.data.hierarchy[a].keys,c.length&&(d.animationCache.prevKey=c[0],d.animationCache.nextKey=
c[1],this.startTime=Math.min(c[0].time,this.startTime),this.endTime=Math.max(c[c.length-1].time,this.endTime));this.update(0)}this.isPaused=!1;THREE.AnimationHandler.play(this)},stop:function(){this.isPaused=this.isPlaying=!1;THREE.AnimationHandler.stop(this);for(var a=0;a<this.data.hierarchy.length;a++){var b=this.hierarchy[a],c=this.data.hierarchy[a];if(void 0!==c.animationCache){var d=c.animationCache.originalMatrix;d.copy(b.matrix);b.matrix=d;delete c.animationCache}}},update:function(a){if(!1!==
this.isPlaying){this.currentTime+=a*this.timeScale;a=this.data.length;!0===this.loop&&this.currentTime>a&&(this.currentTime%=a);this.currentTime=Math.min(this.currentTime,a);a=0;for(var b=this.hierarchy.length;a<b;a++){var c=this.hierarchy[a],d=this.data.hierarchy[a],e=d.keys,d=d.animationCache;if(e.length){var f=d.prevKey,g=d.nextKey;if(g.time<=this.currentTime){for(;g.time<this.currentTime&&g.index>f.index;)f=g,g=e[f.index+1];d.prevKey=f;d.nextKey=g}g.time>=this.currentTime?f.interpolate(g,this.currentTime):
f.interpolate(g,g.time);this.data.hierarchy[a].node.updateMatrix();c.matrixWorldNeedsUpdate=!0}}}},getNextKeyWith:function(a,b,c){b=this.data.hierarchy[b].keys;for(c%=b.length;c<b.length;c++)if(b[c].hasTarget(a))return b[c];return b[0]},getPrevKeyWith:function(a,b,c){b=this.data.hierarchy[b].keys;for(c=0<=c?c:c+b.length;0<=c;c--)if(b[c].hasTarget(a))return b[c];return b[b.length-1]}};
THREE.MorphAnimation=function(a){this.mesh=a;this.frames=a.morphTargetInfluences.length;this.currentTime=0;this.duration=1E3;this.loop=!0;this.currentFrame=this.lastFrame=0;this.isPlaying=!1};
THREE.MorphAnimation.prototype={constructor:THREE.MorphAnimation,play:function(){this.isPlaying=!0},pause:function(){this.isPlaying=!1},update:function(a){if(!1!==this.isPlaying){this.currentTime+=a;!0===this.loop&&this.currentTime>this.duration&&(this.currentTime%=this.duration);this.currentTime=Math.min(this.currentTime,this.duration);a=this.duration/this.frames;var b=Math.floor(this.currentTime/a),c=this.mesh.morphTargetInfluences;b!=this.currentFrame&&(c[this.lastFrame]=0,c[this.currentFrame]=
1,c[b]=0,this.lastFrame=this.currentFrame,this.currentFrame=b);c[b]=this.currentTime%a/a;c[this.lastFrame]=1-c[b]}}};
THREE.BoxGeometry=function(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,r){var v,u=h.widthSegments,x=h.heightSegments,z=e/2,w=f/2,F=h.vertices.length;if("x"===a&&"y"===b||"y"===a&&"x"===b)v="z";else if("x"===a&&"z"===b||"z"===a&&"x"===b)v="y",x=h.depthSegments;else if("z"===a&&"y"===b||"y"===a&&"z"===b)v="x",u=h.depthSegments;var G=u+1,y=x+1,I=e/u,B=f/x,C=new THREE.Vector3;C[v]=0<g?1:-1;for(e=0;e<y;e++)for(f=0;f<G;f++){var E=new THREE.Vector3;E[a]=(f*I-z)*c;E[b]=(e*B-w)*d;E[v]=g;h.vertices.push(E)}for(e=
0;e<x;e++)for(f=0;f<u;f++)w=f+G*e,a=f+G*(e+1),b=f+1+G*(e+1),c=f+1+G*e,d=new THREE.Vector2(f/u,1-e/x),g=new THREE.Vector2(f/u,1-(e+1)/x),v=new THREE.Vector2((f+1)/u,1-(e+1)/x),z=new THREE.Vector2((f+1)/u,1-e/x),w=new THREE.Face3(w+F,a+F,c+F),w.normal.copy(C),w.vertexNormals.push(C.clone(),C.clone(),C.clone()),w.materialIndex=r,h.faces.push(w),h.faceVertexUvs[0].push([d,g,z]),w=new THREE.Face3(a+F,b+F,c+F),w.normal.copy(C),w.vertexNormals.push(C.clone(),C.clone(),C.clone()),w.materialIndex=r,h.faces.push(w),
h.faceVertexUvs[0].push([g.clone(),v,z.clone()])}THREE.Geometry.call(this);this.type="BoxGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.widthSegments=d||1;this.heightSegments=e||1;this.depthSegments=f||1;var h=this;d=a/2;e=b/2;f=c/2;g("z","y",-1,-1,c,b,d,0);g("z","y",1,-1,c,b,-d,1);g("x","z",1,1,a,c,e,2);g("x","z",1,-1,a,c,-e,3);g("x","y",1,-1,a,b,f,4);g("x","y",-1,-1,a,b,-f,5);this.mergeVertices()};THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry;THREE.CubeGeometry=THREE.BoxGeometry;
THREE.CircleGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type="CircleGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||50;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e,f=[];e=new THREE.Vector3;var g=new THREE.Vector2(.5,.5);this.vertices.push(e);f.push(g);for(e=0;e<=b;e++){var h=new THREE.Vector3,k=c+e/b*d;h.x=a*Math.cos(k);h.y=a*Math.sin(k);this.vertices.push(h);f.push(new THREE.Vector2((h.x/a+1)/2,(h.y/a+1)/2))}c=new THREE.Vector3(0,
0,1);for(e=1;e<=b;e++)this.faces.push(new THREE.Face3(e,e+1,0,[c.clone(),c.clone(),c.clone()])),this.faceVertexUvs[0].push([f[e].clone(),f[e+1].clone(),g.clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,a)};THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry;
THREE.CylinderGeometry=function(a,b,c,d,e,f,g,h){THREE.Geometry.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};a=void 0!==a?a:20;b=void 0!==b?b:20;c=void 0!==c?c:100;d=d||8;e=e||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var k=c/2,l,p,n=[],m=[];for(p=0;p<=e;p++){var s=[],t=[],r=p/e,v=r*(b-a)+a;for(l=0;l<=d;l++){var u=l/d,x=new THREE.Vector3;x.x=v*Math.sin(u*h+
g);x.y=-r*c+k;x.z=v*Math.cos(u*h+g);this.vertices.push(x);s.push(this.vertices.length-1);t.push(new THREE.Vector2(u,1-r))}n.push(s);m.push(t)}c=(b-a)/c;for(l=0;l<d;l++)for(0!==a?(g=this.vertices[n[0][l]].clone(),h=this.vertices[n[0][l+1]].clone()):(g=this.vertices[n[1][l]].clone(),h=this.vertices[n[1][l+1]].clone()),g.setY(Math.sqrt(g.x*g.x+g.z*g.z)*c).normalize(),h.setY(Math.sqrt(h.x*h.x+h.z*h.z)*c).normalize(),p=0;p<e;p++){var s=n[p][l],t=n[p+1][l],r=n[p+1][l+1],v=n[p][l+1],u=g.clone(),x=g.clone(),
z=h.clone(),w=h.clone(),F=m[p][l].clone(),G=m[p+1][l].clone(),y=m[p+1][l+1].clone(),I=m[p][l+1].clone();this.faces.push(new THREE.Face3(s,t,v,[u,x,w]));this.faceVertexUvs[0].push([F,G,I]);this.faces.push(new THREE.Face3(t,r,v,[x.clone(),z,w.clone()]));this.faceVertexUvs[0].push([G.clone(),y,I.clone()])}if(!1===f&&0<a)for(this.vertices.push(new THREE.Vector3(0,k,0)),l=0;l<d;l++)s=n[0][l],t=n[0][l+1],r=this.vertices.length-1,u=new THREE.Vector3(0,1,0),x=new THREE.Vector3(0,1,0),z=new THREE.Vector3(0,
1,0),F=m[0][l].clone(),G=m[0][l+1].clone(),y=new THREE.Vector2(G.x,0),this.faces.push(new THREE.Face3(s,t,r,[u,x,z])),this.faceVertexUvs[0].push([F,G,y]);if(!1===f&&0<b)for(this.vertices.push(new THREE.Vector3(0,-k,0)),l=0;l<d;l++)s=n[e][l+1],t=n[e][l],r=this.vertices.length-1,u=new THREE.Vector3(0,-1,0),x=new THREE.Vector3(0,-1,0),z=new THREE.Vector3(0,-1,0),F=m[e][l+1].clone(),G=m[e][l].clone(),y=new THREE.Vector2(G.x,1),this.faces.push(new THREE.Face3(s,t,r,[u,x,z])),this.faceVertexUvs[0].push([F,
G,y]);this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry;
THREE.EdgesGeometry=function(a,b){THREE.BufferGeometry.call(this);var c=Math.cos(THREE.Math.degToRad(void 0!==b?b:1)),d=[0,0],e={},f=function(a,b){return a-b},g=["a","b","c"],h;a instanceof THREE.BufferGeometry?(h=new THREE.Geometry,h.fromBufferGeometry(a)):h=a.clone();h.mergeVertices();h.computeFaceNormals();var k=h.vertices;h=h.faces;for(var l=0,p=0,n=h.length;p<n;p++)for(var m=h[p],s=0;3>s;s++){d[0]=m[g[s]];d[1]=m[g[(s+1)%3]];d.sort(f);var t=d.toString();void 0===e[t]?(e[t]={vert1:d[0],vert2:d[1],
face1:p,face2:void 0},l++):e[t].face2=p}d=new Float32Array(6*l);f=0;for(t in e)if(g=e[t],void 0===g.face2||h[g.face1].normal.dot(h[g.face2].normal)<=c)l=k[g.vert1],d[f++]=l.x,d[f++]=l.y,d[f++]=l.z,l=k[g.vert2],d[f++]=l.x,d[f++]=l.y,d[f++]=l.z;this.addAttribute("position",new THREE.BufferAttribute(d,3))};THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry;
THREE.ExtrudeGeometry=function(a,b){"undefined"!==typeof a&&(THREE.Geometry.call(this),this.type="ExtrudeGeometry",a=a instanceof Array?a:[a],this.addShapeList(a,b),this.computeFaceNormals())};THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry;THREE.ExtrudeGeometry.prototype.addShapeList=function(a,b){for(var c=a.length,d=0;d<c;d++)this.addShape(a[d],b)};
THREE.ExtrudeGeometry.prototype.addShape=function(a,b){function c(a,b,c){b||THREE.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=1,d=a.x-b.x,e=a.y-b.y,f=c.x-a.x,g=c.y-a.y,h=d*d+e*e;if(1E-10<Math.abs(d*g-e*f)){var k=Math.sqrt(h),l=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;f=((c.x-g/l-h)*g-(c.y+f/l-b)*f)/(d*g-e*f);c=h+d*f-a.x;a=b+e*f-a.y;d=c*c+a*a;if(2>=d)return new THREE.Vector2(c,a);d=Math.sqrt(d/2)}else a=!1,1E-10<d?1E-10<f&&(a=!0):
-1E-10>d?-1E-10>f&&(a=!0):Math.sign(e)==Math.sign(g)&&(a=!0),a?(c=-e,a=d,d=Math.sqrt(h)):(c=d,a=e,d=Math.sqrt(h/2));return new THREE.Vector2(c/d,a/d)}function e(a,b){var c,d;for(Q=a.length;0<=--Q;){c=Q;d=Q-1;0>d&&(d=a.length-1);for(var e=0,f=s+2*p,e=0;e<f;e++){var g=D*e,h=D*(e+1),k=b+c+g,g=b+d+g,l=b+d+h,h=b+c+h,k=k+L,g=g+L,l=l+L,h=h+L;E.faces.push(new THREE.Face3(k,g,h,null,null,x));E.faces.push(new THREE.Face3(g,l,h,null,null,x));k=z.generateSideWallUV(E,k,g,l,h);E.faceVertexUvs[0].push([k[0],k[1],
k[3]]);E.faceVertexUvs[0].push([k[1],k[2],k[3]])}}}function f(a,b,c){E.vertices.push(new THREE.Vector3(a,b,c))}function g(a,b,c){a+=L;b+=L;c+=L;E.faces.push(new THREE.Face3(a,b,c,null,null,u));a=z.generateTopUV(E,a,b,c);E.faceVertexUvs[0].push(a)}var h=void 0!==b.amount?b.amount:100,k=void 0!==b.bevelThickness?b.bevelThickness:6,l=void 0!==b.bevelSize?b.bevelSize:k-2,p=void 0!==b.bevelSegments?b.bevelSegments:3,n=void 0!==b.bevelEnabled?b.bevelEnabled:!0,m=void 0!==b.curveSegments?b.curveSegments:
12,s=void 0!==b.steps?b.steps:1,t=b.extrudePath,r,v=!1,u=b.material,x=b.extrudeMaterial,z=void 0!==b.UVGenerator?b.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator,w,F,G,y;t&&(r=t.getSpacedPoints(s),v=!0,n=!1,w=void 0!==b.frames?b.frames:new THREE.TubeGeometry.FrenetFrames(t,s,!1),F=new THREE.Vector3,G=new THREE.Vector3,y=new THREE.Vector3);n||(l=k=p=0);var I,B,C,E=this,L=this.vertices.length,t=a.extractPoints(m),m=t.shape,N=t.holes;if(t=!THREE.Shape.Utils.isClockWise(m)){m=m.reverse();B=0;for(C=
N.length;B<C;B++)I=N[B],THREE.Shape.Utils.isClockWise(I)&&(N[B]=I.reverse());t=!1}var H=THREE.Shape.Utils.triangulateShape(m,N),O=m;B=0;for(C=N.length;B<C;B++)I=N[B],m=m.concat(I);var M,A,J,R,K,D=m.length,X,ia=H.length,t=[],Q=0;J=O.length;M=J-1;for(A=Q+1;Q<J;Q++,M++,A++)M===J&&(M=0),A===J&&(A=0),t[Q]=d(O[Q],O[M],O[A]);var P=[],aa,ca=t.concat();B=0;for(C=N.length;B<C;B++){I=N[B];aa=[];Q=0;J=I.length;M=J-1;for(A=Q+1;Q<J;Q++,M++,A++)M===J&&(M=0),A===J&&(A=0),aa[Q]=d(I[Q],I[M],I[A]);P.push(aa);ca=ca.concat(aa)}for(M=
0;M<p;M++){J=M/p;R=k*(1-J);A=l*Math.sin(J*Math.PI/2);Q=0;for(J=O.length;Q<J;Q++)K=c(O[Q],t[Q],A),f(K.x,K.y,-R);B=0;for(C=N.length;B<C;B++)for(I=N[B],aa=P[B],Q=0,J=I.length;Q<J;Q++)K=c(I[Q],aa[Q],A),f(K.x,K.y,-R)}A=l;for(Q=0;Q<D;Q++)K=n?c(m[Q],ca[Q],A):m[Q],v?(G.copy(w.normals[0]).multiplyScalar(K.x),F.copy(w.binormals[0]).multiplyScalar(K.y),y.copy(r[0]).add(G).add(F),f(y.x,y.y,y.z)):f(K.x,K.y,0);for(J=1;J<=s;J++)for(Q=0;Q<D;Q++)K=n?c(m[Q],ca[Q],A):m[Q],v?(G.copy(w.normals[J]).multiplyScalar(K.x),
F.copy(w.binormals[J]).multiplyScalar(K.y),y.copy(r[J]).add(G).add(F),f(y.x,y.y,y.z)):f(K.x,K.y,h/s*J);for(M=p-1;0<=M;M--){J=M/p;R=k*(1-J);A=l*Math.sin(J*Math.PI/2);Q=0;for(J=O.length;Q<J;Q++)K=c(O[Q],t[Q],A),f(K.x,K.y,h+R);B=0;for(C=N.length;B<C;B++)for(I=N[B],aa=P[B],Q=0,J=I.length;Q<J;Q++)K=c(I[Q],aa[Q],A),v?f(K.x,K.y+r[s-1].y,r[s-1].x+R):f(K.x,K.y,h+R)}(function(){if(n){var a;a=0*D;for(Q=0;Q<ia;Q++)X=H[Q],g(X[2]+a,X[1]+a,X[0]+a);a=s+2*p;a*=D;for(Q=0;Q<ia;Q++)X=H[Q],g(X[0]+a,X[1]+a,X[2]+a)}else{for(Q=
0;Q<ia;Q++)X=H[Q],g(X[2],X[1],X[0]);for(Q=0;Q<ia;Q++)X=H[Q],g(X[0]+D*s,X[1]+D*s,X[2]+D*s)}})();(function(){var a=0;e(O,a);a+=O.length;B=0;for(C=N.length;B<C;B++)I=N[B],e(I,a),a+=I.length})()};
THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(a,b,c,d){a=a.vertices;b=a[b];c=a[c];d=a[d];return[new THREE.Vector2(b.x,b.y),new THREE.Vector2(c.x,c.y),new THREE.Vector2(d.x,d.y)]},generateSideWallUV:function(a,b,c,d,e){a=a.vertices;b=a[b];c=a[c];d=a[d];e=a[e];return.01>Math.abs(b.y-c.y)?[new THREE.Vector2(b.x,1-b.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(d.x,1-d.z),new THREE.Vector2(e.x,1-e.z)]:[new THREE.Vector2(b.y,1-b.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(d.y,
1-d.z),new THREE.Vector2(e.y,1-e.z)]}};THREE.ShapeGeometry=function(a,b){THREE.Geometry.call(this);this.type="ShapeGeometry";!1===a instanceof Array&&(a=[a]);this.addShapeList(a,b);this.computeFaceNormals()};THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry;THREE.ShapeGeometry.prototype.addShapeList=function(a,b){for(var c=0,d=a.length;c<d;c++)this.addShape(a[c],b);return this};
THREE.ShapeGeometry.prototype.addShape=function(a,b){void 0===b&&(b={});var c=b.material,d=void 0===b.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:b.UVGenerator,e,f,g,h=this.vertices.length;e=a.extractPoints(void 0!==b.curveSegments?b.curveSegments:12);var k=e.shape,l=e.holes;if(!THREE.Shape.Utils.isClockWise(k))for(k=k.reverse(),e=0,f=l.length;e<f;e++)g=l[e],THREE.Shape.Utils.isClockWise(g)&&(l[e]=g.reverse());var p=THREE.Shape.Utils.triangulateShape(k,l);e=0;for(f=l.length;e<f;e++)g=l[e],
k=k.concat(g);l=k.length;f=p.length;for(e=0;e<l;e++)g=k[e],this.vertices.push(new THREE.Vector3(g.x,g.y,0));for(e=0;e<f;e++)l=p[e],k=l[0]+h,g=l[1]+h,l=l[2]+h,this.faces.push(new THREE.Face3(k,g,l,null,null,c)),this.faceVertexUvs[0].push(d.generateTopUV(this,k,g,l))};
THREE.LatheGeometry=function(a,b,c,d){THREE.Geometry.call(this);this.type="LatheGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=b||12;c=c||0;d=d||2*Math.PI;for(var e=1/(a.length-1),f=1/b,g=0,h=b;g<=h;g++)for(var k=c+g*f*d,l=Math.cos(k),p=Math.sin(k),k=0,n=a.length;k<n;k++){var m=a[k],s=new THREE.Vector3;s.x=l*m.x-p*m.y;s.y=p*m.x+l*m.y;s.z=m.z;this.vertices.push(s)}c=a.length;g=0;for(h=b;g<h;g++)for(k=0,n=a.length-1;k<n;k++){b=p=k+c*g;d=p+c;var l=p+1+c,p=p+1,m=g*f,s=k*e,t=
m+f,r=s+e;this.faces.push(new THREE.Face3(b,d,p));this.faceVertexUvs[0].push([new THREE.Vector2(m,s),new THREE.Vector2(t,s),new THREE.Vector2(m,r)]);this.faces.push(new THREE.Face3(d,l,p));this.faceVertexUvs[0].push([new THREE.Vector2(t,s),new THREE.Vector2(t,r),new THREE.Vector2(m,r)])}this.mergeVertices();this.computeFaceNormals();this.computeVertexNormals()};THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry;
THREE.PlaneGeometry=function(a,b,c,d){THREE.log("THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.");THREE.Geometry.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a,b,c,d))};THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry;
THREE.PlaneBufferGeometry=function(a,b,c,d){THREE.BufferGeometry.call(this);this.type="PlaneBufferGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};var e=a/2,f=b/2;c=c||1;d=d||1;var g=c+1,h=d+1,k=a/c,l=b/d;b=new Float32Array(g*h*3);a=new Float32Array(g*h*3);for(var p=new Float32Array(g*h*2),n=0,m=0,s=0;s<h;s++)for(var t=s*l-f,r=0;r<g;r++)b[n]=r*k-e,b[n+1]=-t,a[n+2]=1,p[m]=r/c,p[m+1]=1-s/d,n+=3,m+=2;n=0;e=new (65535<b.length/3?Uint32Array:Uint16Array)(c*d*6);for(s=0;s<d;s++)for(r=
0;r<c;r++)f=r+g*(s+1),h=r+1+g*(s+1),k=r+1+g*s,e[n]=r+g*s,e[n+1]=f,e[n+2]=k,e[n+3]=f,e[n+4]=h,e[n+5]=k,n+=6;this.addAttribute("index",new THREE.BufferAttribute(e,1));this.addAttribute("position",new THREE.BufferAttribute(b,3));this.addAttribute("normal",new THREE.BufferAttribute(a,3));this.addAttribute("uv",new THREE.BufferAttribute(p,2))};THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry;
THREE.RingGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type="RingGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||0;b=b||50;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):8;var g,h=[],k=a,l=(b-a)/d;for(a=0;a<d+1;a++){for(g=0;g<c+1;g++){var p=new THREE.Vector3,n=e+g/c*f;p.x=k*Math.cos(n);p.y=k*Math.sin(n);this.vertices.push(p);h.push(new THREE.Vector2((p.x/b+1)/2,
(p.y/b+1)/2))}k+=l}b=new THREE.Vector3(0,0,1);for(a=0;a<d;a++)for(e=a*(c+1),g=0;g<c;g++)f=n=g+e,l=n+c+1,p=n+c+2,this.faces.push(new THREE.Face3(f,l,p,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[p].clone()]),f=n,l=n+c+2,p=n+1,this.faces.push(new THREE.Face3(f,l,p,[b.clone(),b.clone(),b.clone()])),this.faceVertexUvs[0].push([h[f].clone(),h[l].clone(),h[p].clone()]);this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,k)};
THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.RingGeometry.prototype.constructor=THREE.RingGeometry;
THREE.SphereGeometry=function(a,b,c,d,e,f,g){THREE.Geometry.call(this);this.type="SphereGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||50;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h,k,l=[],p=[];for(k=0;k<=c;k++){var n=[],m=[];for(h=0;h<=b;h++){var s=h/b,t=k/c,r=new THREE.Vector3;r.x=-a*Math.cos(d+s*e)*Math.sin(f+t*g);
r.y=a*Math.cos(f+t*g);r.z=a*Math.sin(d+s*e)*Math.sin(f+t*g);this.vertices.push(r);n.push(this.vertices.length-1);m.push(new THREE.Vector2(s,1-t))}l.push(n);p.push(m)}for(k=0;k<c;k++)for(h=0;h<b;h++){d=l[k][h+1];e=l[k][h];f=l[k+1][h];g=l[k+1][h+1];var n=this.vertices[d].clone().normalize(),m=this.vertices[e].clone().normalize(),s=this.vertices[f].clone().normalize(),t=this.vertices[g].clone().normalize(),r=p[k][h+1].clone(),v=p[k][h].clone(),u=p[k+1][h].clone(),x=p[k+1][h+1].clone();Math.abs(this.vertices[d].y)===
a?(r.x=(r.x+v.x)/2,this.faces.push(new THREE.Face3(d,f,g,[n,s,t])),this.faceVertexUvs[0].push([r,u,x])):Math.abs(this.vertices[f].y)===a?(u.x=(u.x+x.x)/2,this.faces.push(new THREE.Face3(d,e,f,[n,m,s])),this.faceVertexUvs[0].push([r,v,u])):(this.faces.push(new THREE.Face3(d,e,g,[n,m,t])),this.faceVertexUvs[0].push([r,v,x]),this.faces.push(new THREE.Face3(e,f,g,[m.clone(),s,t.clone()])),this.faceVertexUvs[0].push([v.clone(),u,x.clone()]))}this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,
a)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry;THREE.TextGeometry=function(a,b){b=b||{};var c=THREE.FontUtils.generateShapes(a,b);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);THREE.ExtrudeGeometry.call(this,c,b);this.type="TextGeometry"};THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TextGeometry.prototype.constructor=THREE.TextGeometry;
THREE.TorusGeometry=function(a,b,c,d,e){THREE.Geometry.call(this);this.type="TorusGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||100;b=b||40;c=c||8;d=d||6;e=e||2*Math.PI;for(var f=new THREE.Vector3,g=[],h=[],k=0;k<=c;k++)for(var l=0;l<=d;l++){var p=l/d*e,n=k/c*Math.PI*2;f.x=a*Math.cos(p);f.y=a*Math.sin(p);var m=new THREE.Vector3;m.x=(a+b*Math.cos(n))*Math.cos(p);m.y=(a+b*Math.cos(n))*Math.sin(p);m.z=b*Math.sin(n);this.vertices.push(m);g.push(new THREE.Vector2(l/
d,k/c));h.push(m.clone().sub(f).normalize())}for(k=1;k<=c;k++)for(l=1;l<=d;l++)a=(d+1)*k+l-1,b=(d+1)*(k-1)+l-1,e=(d+1)*(k-1)+l,f=(d+1)*k+l,p=new THREE.Face3(a,b,f,[h[a].clone(),h[b].clone(),h[f].clone()]),this.faces.push(p),this.faceVertexUvs[0].push([g[a].clone(),g[b].clone(),g[f].clone()]),p=new THREE.Face3(b,e,f,[h[b].clone(),h[e].clone(),h[f].clone()]),this.faces.push(p),this.faceVertexUvs[0].push([g[b].clone(),g[e].clone(),g[f].clone()]);this.computeFaceNormals()};
THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry;
THREE.TorusKnotGeometry=function(a,b,c,d,e,f,g){function h(a,b,c,d,e){var f=Math.cos(a),g=Math.sin(a);a*=b/c;b=Math.cos(a);f*=d*(2+b)*.5;g=d*(2+b)*g*.5;d=e*d*Math.sin(a)*.5;return new THREE.Vector3(f,g,d)}THREE.Geometry.call(this);this.type="TorusKnotGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,p:e,q:f,heightScale:g};a=a||100;b=b||40;c=c||64;d=d||8;e=e||2;f=f||3;g=g||1;for(var k=Array(c),l=new THREE.Vector3,p=new THREE.Vector3,n=new THREE.Vector3,m=0;m<c;++m){k[m]=
Array(d);var s=m/c*2*e*Math.PI,t=h(s,f,e,a,g),s=h(s+.01,f,e,a,g);l.subVectors(s,t);p.addVectors(s,t);n.crossVectors(l,p);p.crossVectors(n,l);n.normalize();p.normalize();for(s=0;s<d;++s){var r=s/d*2*Math.PI,v=-b*Math.cos(r),r=b*Math.sin(r),u=new THREE.Vector3;u.x=t.x+v*p.x+r*n.x;u.y=t.y+v*p.y+r*n.y;u.z=t.z+v*p.z+r*n.z;k[m][s]=this.vertices.push(u)-1}}for(m=0;m<c;++m)for(s=0;s<d;++s)e=(m+1)%c,f=(s+1)%d,a=k[m][s],b=k[e][s],e=k[e][f],f=k[m][f],g=new THREE.Vector2(m/c,s/d),l=new THREE.Vector2((m+1)/c,
s/d),p=new THREE.Vector2((m+1)/c,(s+1)/d),n=new THREE.Vector2(m/c,(s+1)/d),this.faces.push(new THREE.Face3(a,b,f)),this.faceVertexUvs[0].push([g,l,n]),this.faces.push(new THREE.Face3(b,e,f)),this.faceVertexUvs[0].push([l.clone(),p,n.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry;
THREE.TubeGeometry=function(a,b,c,d,e,f){THREE.Geometry.call(this);this.type="TubeGeometry";this.parameters={path:a,segments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;f=f||THREE.TubeGeometry.NoTaper;var g=[],h,k,l=b+1,p,n,m,s,t,r=new THREE.Vector3,v,u,x;v=new THREE.TubeGeometry.FrenetFrames(a,b,e);u=v.normals;x=v.binormals;this.tangents=v.tangents;this.normals=u;this.binormals=x;for(v=0;v<l;v++)for(g[v]=[],p=v/(l-1),t=a.getPointAt(p),h=u[v],k=x[v],m=c*f(p),p=0;p<d;p++)n=
p/d*2*Math.PI,s=-m*Math.cos(n),n=m*Math.sin(n),r.copy(t),r.x+=s*h.x+n*k.x,r.y+=s*h.y+n*k.y,r.z+=s*h.z+n*k.z,g[v][p]=this.vertices.push(new THREE.Vector3(r.x,r.y,r.z))-1;for(v=0;v<b;v++)for(p=0;p<d;p++)f=e?(v+1)%b:v+1,l=(p+1)%d,a=g[v][p],c=g[f][p],f=g[f][l],l=g[v][l],r=new THREE.Vector2(v/b,p/d),u=new THREE.Vector2((v+1)/b,p/d),x=new THREE.Vector2((v+1)/b,(p+1)/d),h=new THREE.Vector2(v/b,(p+1)/d),this.faces.push(new THREE.Face3(a,c,l)),this.faceVertexUvs[0].push([r,u,h]),this.faces.push(new THREE.Face3(c,
f,l)),this.faceVertexUvs[0].push([u.clone(),x,h.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry;THREE.TubeGeometry.NoTaper=function(a){return 1};THREE.TubeGeometry.SinusoidalTaper=function(a){return Math.sin(Math.PI*a)};
THREE.TubeGeometry.FrenetFrames=function(a,b,c){var d=new THREE.Vector3,e=[],f=[],g=[],h=new THREE.Vector3,k=new THREE.Matrix4;b+=1;var l,p,n;this.tangents=e;this.normals=f;this.binormals=g;for(l=0;l<b;l++)p=l/(b-1),e[l]=a.getTangentAt(p),e[l].normalize();f[0]=new THREE.Vector3;g[0]=new THREE.Vector3;a=Number.MAX_VALUE;l=Math.abs(e[0].x);p=Math.abs(e[0].y);n=Math.abs(e[0].z);l<=a&&(a=l,d.set(1,0,0));p<=a&&(a=p,d.set(0,1,0));n<=a&&d.set(0,0,1);h.crossVectors(e[0],d).normalize();f[0].crossVectors(e[0],
h);g[0].crossVectors(e[0],f[0]);for(l=1;l<b;l++)f[l]=f[l-1].clone(),g[l]=g[l-1].clone(),h.crossVectors(e[l-1],e[l]),1E-4<h.length()&&(h.normalize(),d=Math.acos(THREE.Math.clamp(e[l-1].dot(e[l]),-1,1)),f[l].applyMatrix4(k.makeRotationAxis(h,d))),g[l].crossVectors(e[l],f[l]);if(c)for(d=Math.acos(THREE.Math.clamp(f[0].dot(f[b-1]),-1,1)),d/=b-1,0<e[0].dot(h.crossVectors(f[0],f[b-1]))&&(d=-d),l=1;l<b;l++)f[l].applyMatrix4(k.makeRotationAxis(e[l],d*l)),g[l].crossVectors(e[l],f[l])};
THREE.PolyhedronGeometry=function(a,b,c,d){function e(a){var b=a.normalize().clone();b.index=k.vertices.push(b)-1;var c=Math.atan2(a.z,-a.x)/2/Math.PI+.5;a=Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5;b.uv=new THREE.Vector2(c,1-a);return b}function f(a,b,c){var d=new THREE.Face3(a.index,b.index,c.index,[a.clone(),b.clone(),c.clone()]);k.faces.push(d);v.copy(a).add(b).add(c).divideScalar(3);d=Math.atan2(v.z,-v.x);k.faceVertexUvs[0].push([h(a.uv,a,d),h(b.uv,b,d),h(c.uv,c,d)])}function g(a,
b){for(var c=Math.pow(2,b),d=e(k.vertices[a.a]),g=e(k.vertices[a.b]),h=e(k.vertices[a.c]),l=[],m=0;m<=c;m++){l[m]=[];for(var n=e(d.clone().lerp(h,m/c)),p=e(g.clone().lerp(h,m/c)),s=c-m,r=0;r<=s;r++)l[m][r]=0==r&&m==c?n:e(n.clone().lerp(p,r/s))}for(m=0;m<c;m++)for(r=0;r<2*(c-m)-1;r++)d=Math.floor(r/2),0==r%2?f(l[m][d+1],l[m+1][d],l[m][d]):f(l[m][d+1],l[m+1][d+1],l[m+1][d])}function h(a,b,c){0>c&&1===a.x&&(a=new THREE.Vector2(a.x-1,a.y));0===b.x&&0===b.z&&(a=new THREE.Vector2(c/2/Math.PI+.5,a.y));return a.clone()}
THREE.Geometry.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;for(var k=this,l=0,p=a.length;l<p;l+=3)e(new THREE.Vector3(a[l],a[l+1],a[l+2]));a=this.vertices;for(var n=[],m=l=0,p=b.length;l<p;l+=3,m++){var s=a[b[l]],t=a[b[l+1]],r=a[b[l+2]];n[m]=new THREE.Face3(s.index,t.index,r.index,[s.clone(),t.clone(),r.clone()])}for(var v=new THREE.Vector3,l=0,p=n.length;l<p;l++)g(n[l],d);l=0;for(p=this.faceVertexUvs[0].length;l<p;l++)b=this.faceVertexUvs[0][l],
d=b[0].x,a=b[1].x,n=b[2].x,m=Math.max(d,Math.max(a,n)),s=Math.min(d,Math.min(a,n)),.9<m&&.1>s&&(.2>d&&(b[0].x+=1),.2>a&&(b[1].x+=1),.2>n&&(b[2].x+=1));l=0;for(p=this.vertices.length;l<p;l++)this.vertices[l].multiplyScalar(c);this.mergeVertices();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,c)};THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry;
THREE.DodecahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};var c=(1+Math.sqrt(5))/2,d=1/c;THREE.PolyhedronGeometry.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,
11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,b)};THREE.DodecahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry;
THREE.IcosahedronGeometry=function(a,b){var c=(1+Math.sqrt(5))/2;THREE.PolyhedronGeometry.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type="IcosahedronGeometry";this.parameters={radius:a,detail:b}};THREE.IcosahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry;THREE.OctahedronGeometry=function(a,b){this.parameters={radius:a,detail:b};THREE.PolyhedronGeometry.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type="OctahedronGeometry";this.parameters={radius:a,detail:b}};THREE.OctahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry;
THREE.TetrahedronGeometry=function(a,b){THREE.PolyhedronGeometry.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type="TetrahedronGeometry";this.parameters={radius:a,detail:b}};THREE.TetrahedronGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry;
THREE.ParametricGeometry=function(a,b,c){THREE.Geometry.call(this);this.type="ParametricGeometry";this.parameters={func:a,slices:b,stacks:c};var d=this.vertices,e=this.faces,f=this.faceVertexUvs[0],g,h,k,l,p=b+1;for(g=0;g<=c;g++)for(l=g/c,h=0;h<=b;h++)k=h/b,k=a(k,l),d.push(k);var n,m,s,t;for(g=0;g<c;g++)for(h=0;h<b;h++)a=g*p+h,d=g*p+h+1,l=(g+1)*p+h+1,k=(g+1)*p+h,n=new THREE.Vector2(h/b,g/c),m=new THREE.Vector2((h+1)/b,g/c),s=new THREE.Vector2((h+1)/b,(g+1)/c),t=new THREE.Vector2(h/b,(g+1)/c),e.push(new THREE.Face3(a,
d,k)),f.push([n,m,t]),e.push(new THREE.Face3(d,l,k)),f.push([m.clone(),s,t.clone()]);this.computeFaceNormals();this.computeVertexNormals()};THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry;
THREE.WireframeGeometry=function(a){THREE.BufferGeometry.call(this);var b=[0,0],c={},d=function(a,b){return a-b},e=["a","b","c"];if(a instanceof THREE.Geometry){var f=a.vertices,g=a.faces,h=0,k=new Uint32Array(6*g.length);a=0;for(var l=g.length;a<l;a++)for(var p=g[a],n=0;3>n;n++){b[0]=p[e[n]];b[1]=p[e[(n+1)%3]];b.sort(d);var m=b.toString();void 0===c[m]&&(k[2*h]=b[0],k[2*h+1]=b[1],c[m]=!0,h++)}b=new Float32Array(6*h);a=0;for(l=h;a<l;a++)for(n=0;2>n;n++)h=f[k[2*a+n]],e=6*a+3*n,b[e+0]=h.x,b[e+1]=h.y,
b[e+2]=h.z;this.addAttribute("position",new THREE.BufferAttribute(b,3))}else if(a instanceof THREE.BufferGeometry){if(void 0!==a.attributes.index){f=a.attributes.position.array;l=a.attributes.index.array;g=a.drawcalls;h=0;0===g.length&&(g=[{count:l.length,index:0,start:0}]);for(var k=new Uint32Array(2*l.length),p=0,s=g.length;p<s;++p){n=g[p].start;m=g[p].count;e=g[p].index;a=n;for(var t=n+m;a<t;a+=3)for(n=0;3>n;n++)b[0]=e+l[a+n],b[1]=e+l[a+(n+1)%3],b.sort(d),m=b.toString(),void 0===c[m]&&(k[2*h]=
b[0],k[2*h+1]=b[1],c[m]=!0,h++)}b=new Float32Array(6*h);a=0;for(l=h;a<l;a++)for(n=0;2>n;n++)e=6*a+3*n,h=3*k[2*a+n],b[e+0]=f[h],b[e+1]=f[h+1],b[e+2]=f[h+2]}else for(f=a.attributes.position.array,h=f.length/3,k=h/3,b=new Float32Array(6*h),a=0,l=k;a<l;a++)for(n=0;3>n;n++)e=18*a+6*n,k=9*a+3*n,b[e+0]=f[k],b[e+1]=f[k+1],b[e+2]=f[k+2],h=9*a+(n+1)%3*3,b[e+3]=f[h],b[e+4]=f[h+1],b[e+5]=f[h+2];this.addAttribute("position",new THREE.BufferAttribute(b,3))}};THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);
THREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry;THREE.AxisHelper=function(a){a=a||1;var b=new Float32Array([0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a]),c=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]);a=new THREE.BufferGeometry;a.addAttribute("position",new THREE.BufferAttribute(b,3));a.addAttribute("color",new THREE.BufferAttribute(c,3));b=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.Line.call(this,a,b,THREE.LinePieces)};
THREE.AxisHelper.prototype=Object.create(THREE.Line.prototype);THREE.AxisHelper.prototype.constructor=THREE.AxisHelper;
THREE.ArrowHelper=function(){var a=new THREE.Geometry;a.vertices.push(new THREE.Vector3(0,0,0),new THREE.Vector3(0,1,0));var b=new THREE.CylinderGeometry(0,.5,1,5,1);b.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0));return function(c,d,e,f,g,h){THREE.Object3D.call(this);void 0===f&&(f=16776960);void 0===e&&(e=1);void 0===g&&(g=.2*e);void 0===h&&(h=.2*g);this.position.copy(d);this.line=new THREE.Line(a,new THREE.LineBasicMaterial({color:f}));this.line.matrixAutoUpdate=!1;this.add(this.line);
this.cone=new THREE.Mesh(b,new THREE.MeshBasicMaterial({color:f}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(c);this.setLength(e,g,h)}}();THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper;
THREE.ArrowHelper.prototype.setDirection=function(){var a=new THREE.Vector3,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();THREE.ArrowHelper.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,a-b,1);this.line.updateMatrix();this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};
THREE.ArrowHelper.prototype.setColor=function(a){this.line.material.color.set(a);this.cone.material.color.set(a)};THREE.BoxHelper=function(a){var b=new THREE.BufferGeometry;b.addAttribute("position",new THREE.BufferAttribute(new Float32Array(72),3));THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:16776960}),THREE.LinePieces);void 0!==a&&this.update(a)};THREE.BoxHelper.prototype=Object.create(THREE.Line.prototype);THREE.BoxHelper.prototype.constructor=THREE.BoxHelper;
THREE.BoxHelper.prototype.update=function(a){var b=a.geometry;null===b.boundingBox&&b.computeBoundingBox();var c=b.boundingBox.min,b=b.boundingBox.max,d=this.geometry.attributes.position.array;d[0]=b.x;d[1]=b.y;d[2]=b.z;d[3]=c.x;d[4]=b.y;d[5]=b.z;d[6]=c.x;d[7]=b.y;d[8]=b.z;d[9]=c.x;d[10]=c.y;d[11]=b.z;d[12]=c.x;d[13]=c.y;d[14]=b.z;d[15]=b.x;d[16]=c.y;d[17]=b.z;d[18]=b.x;d[19]=c.y;d[20]=b.z;d[21]=b.x;d[22]=b.y;d[23]=b.z;d[24]=b.x;d[25]=b.y;d[26]=c.z;d[27]=c.x;d[28]=b.y;d[29]=c.z;d[30]=c.x;d[31]=b.y;
d[32]=c.z;d[33]=c.x;d[34]=c.y;d[35]=c.z;d[36]=c.x;d[37]=c.y;d[38]=c.z;d[39]=b.x;d[40]=c.y;d[41]=c.z;d[42]=b.x;d[43]=c.y;d[44]=c.z;d[45]=b.x;d[46]=b.y;d[47]=c.z;d[48]=b.x;d[49]=b.y;d[50]=b.z;d[51]=b.x;d[52]=b.y;d[53]=c.z;d[54]=c.x;d[55]=b.y;d[56]=b.z;d[57]=c.x;d[58]=b.y;d[59]=c.z;d[60]=c.x;d[61]=c.y;d[62]=b.z;d[63]=c.x;d[64]=c.y;d[65]=c.z;d[66]=b.x;d[67]=c.y;d[68]=b.z;d[69]=b.x;d[70]=c.y;d[71]=c.z;this.geometry.attributes.position.needsUpdate=!0;this.geometry.computeBoundingSphere();this.matrix=a.matrixWorld;
this.matrixAutoUpdate=!1};THREE.BoundingBoxHelper=function(a,b){var c=void 0!==b?b:8947848;this.object=a;this.box=new THREE.Box3;THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:c,wireframe:!0}))};THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper;THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object);this.box.size(this.scale);this.box.center(this.position)};
THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.vertices.push(new THREE.Vector3);d.colors.push(new THREE.Color(b));void 0===f[a]&&(f[a]=[]);f[a].push(d.vertices.length-1)}var d=new THREE.Geometry,e=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),f={};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);
b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1","cf2",3355443);b("cf3","cf4",3355443);THREE.Line.call(this,d,e,THREE.LinePieces);this.camera=a;this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=f;this.update()};
THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);THREE.CameraHelper.prototype.constructor=THREE.CameraHelper;
THREE.CameraHelper.prototype.update=function(){var a,b,c=new THREE.Vector3,d=new THREE.Camera,e=function(e,g,h,k){c.set(g,h,k).unproject(d);e=b[e];if(void 0!==e)for(g=0,h=e.length;g<h;g++)a.vertices[e[g]].copy(c)};return function(){a=this.geometry;b=this.pointMap;d.projectionMatrix.copy(this.camera.projectionMatrix);e("c",0,0,-1);e("t",0,0,1);e("n1",-1,-1,-1);e("n2",1,-1,-1);e("n3",-1,1,-1);e("n4",1,1,-1);e("f1",-1,-1,1);e("f2",1,-1,1);e("f3",-1,1,1);e("f4",1,1,1);e("u1",.7,1.1,-1);e("u2",-.7,1.1,
-1);e("u3",0,2,-1);e("cf1",-1,0,1);e("cf2",1,0,1);e("cf3",0,-1,1);e("cf4",0,1,1);e("cn1",-1,0,-1);e("cn2",1,0,-1);e("cn3",0,-1,-1);e("cn4",0,1,-1);a.verticesNeedUpdate=!0}}();
THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;b=b||1;var c=new THREE.Geometry;c.vertices.push(new THREE.Vector3(-b,b,0),new THREE.Vector3(b,b,0),new THREE.Vector3(b,-b,0),new THREE.Vector3(-b,-b,0),new THREE.Vector3(-b,b,0));var d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.lightPlane=new THREE.Line(c,d);this.add(this.lightPlane);
c=new THREE.Geometry;c.vertices.push(new THREE.Vector3,new THREE.Vector3);d=new THREE.LineBasicMaterial({fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine=new THREE.Line(c,d);this.add(this.targetLine);this.update()};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper;
THREE.DirectionalLightHelper.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()};
THREE.DirectionalLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);this.targetLine.geometry.vertices[1].copy(c);this.targetLine.geometry.verticesNeedUpdate=!0;this.targetLine.material.color.copy(this.lightPlane.material.color)}}();
THREE.EdgesHelper=function(a,b,c){b=void 0!==b?b:16777215;THREE.Line.call(this,new THREE.EdgesGeometry(a.geometry,c),new THREE.LineBasicMaterial({color:b}),THREE.LinePieces);this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.EdgesHelper.prototype=Object.create(THREE.Line.prototype);THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper;
THREE.FaceNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=new THREE.Geometry;c=0;for(var e=this.object.geometry.faces.length;c<e;c++)b.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,b,new THREE.LineBasicMaterial({color:a,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.FaceNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper;
THREE.FaceNormalsHelper.prototype.update=function(){var a=this.geometry.vertices,b=this.object,c=b.geometry.vertices,d=b.geometry.faces,e=b.matrixWorld;b.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(e);for(var f=b=0,g=d.length;b<g;b++,f+=2){var h=d[b];a[f].copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(e);a[f+1].copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(a[f])}this.geometry.verticesNeedUpdate=!0;return this};
THREE.GridHelper=function(a,b){var c=new THREE.Geometry,d=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.color1=new THREE.Color(4473924);this.color2=new THREE.Color(8947848);for(var e=-a;e<=a;e+=b){c.vertices.push(new THREE.Vector3(-a,0,e),new THREE.Vector3(a,0,e),new THREE.Vector3(e,0,-a),new THREE.Vector3(e,0,a));var f=0===e?this.color1:this.color2;c.colors.push(f,f,f,f)}THREE.Line.call(this,c,d,THREE.LinePieces)};THREE.GridHelper.prototype=Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.constructor=THREE.GridHelper;THREE.GridHelper.prototype.setColors=function(a,b){this.color1.set(a);this.color2.set(b);this.geometry.colorsNeedUpdate=!0};
THREE.HemisphereLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.colors=[new THREE.Color,new THREE.Color];var c=new THREE.SphereGeometry(b,4,2);c.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));for(var d=0;8>d;d++)c.faces[d].color=this.colors[4>d?0:1];d=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(c,d);this.add(this.lightSphere);
this.update()};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper;THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose();this.lightSphere.material.dispose()};
THREE.HemisphereLightHelper.prototype.update=function(){var a=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());this.lightSphere.geometry.colorsNeedUpdate=!0}}();
THREE.PointLightHelper=function(a,b){this.light=a;this.light.updateMatrixWorld();var c=new THREE.SphereGeometry(b,4,2),d=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});d.color.copy(this.light.color).multiplyScalar(this.light.intensity);THREE.Mesh.call(this,c,d);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1};THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype);THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper;
THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)};
THREE.SkeletonHelper=function(a){this.bones=this.getBoneList(a);for(var b=new THREE.Geometry,c=0;c<this.bones.length;c++)this.bones[c].parent instanceof THREE.Bone&&(b.vertices.push(new THREE.Vector3),b.vertices.push(new THREE.Vector3),b.colors.push(new THREE.Color(0,0,1)),b.colors.push(new THREE.Color(0,1,0)));c=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.Line.call(this,b,c,THREE.LinePieces);this.root=a;this.matrix=a.matrixWorld;
this.matrixAutoUpdate=!1;this.update()};THREE.SkeletonHelper.prototype=Object.create(THREE.Line.prototype);THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper;THREE.SkeletonHelper.prototype.getBoneList=function(a){var b=[];a instanceof THREE.Bone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,this.getBoneList(a.children[c]));return b};
THREE.SkeletonHelper.prototype.update=function(){for(var a=this.geometry,b=(new THREE.Matrix4).getInverse(this.root.matrixWorld),c=new THREE.Matrix4,d=0,e=0;e<this.bones.length;e++){var f=this.bones[e];f.parent instanceof THREE.Bone&&(c.multiplyMatrices(b,f.matrixWorld),a.vertices[d].setFromMatrixPosition(c),c.multiplyMatrices(b,f.parent.matrixWorld),a.vertices[d+1].setFromMatrixPosition(c),d+=2)}a.verticesNeedUpdate=!0;a.computeBoundingSphere()};
THREE.SpotLightHelper=function(a){THREE.Object3D.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;a=new THREE.CylinderGeometry(0,1,1,8,1,!0);a.applyMatrix((new THREE.Matrix4).makeTranslation(0,-.5,0));a.applyMatrix((new THREE.Matrix4).makeRotationX(-Math.PI/2));var b=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});this.cone=new THREE.Mesh(a,b);this.add(this.cone);this.update()};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper;THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};
THREE.SpotLightHelper.prototype.update=function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){var c=this.light.distance?this.light.distance:1E4,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}();
THREE.VertexNormalsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:16711680;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexNormals.length;g<h;g++)c.vertices.push(new THREE.Vector3,new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.normalMatrix=new THREE.Matrix3;this.update()};THREE.VertexNormalsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper;
THREE.VertexNormalsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);this.normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var p=f[k],n=0,m=p.vertexNormals.length;n<m;n++){var s=p.vertexNormals[n];d[h].copy(e[p[a[n]]]).applyMatrix4(g);b.copy(s).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
b.add(d[h]);h+=1;d[h].copy(b);h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();
THREE.VertexTangentsHelper=function(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;b=void 0!==c?c:255;d=void 0!==d?d:1;c=new THREE.Geometry;a=a.geometry.faces;for(var e=0,f=a.length;e<f;e++)for(var g=0,h=a[e].vertexTangents.length;g<h;g++)c.vertices.push(new THREE.Vector3),c.vertices.push(new THREE.Vector3);THREE.Line.call(this,c,new THREE.LineBasicMaterial({color:b,linewidth:d}),THREE.LinePieces);this.matrixAutoUpdate=!1;this.update()};THREE.VertexTangentsHelper.prototype=Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.constructor=THREE.VertexTangentsHelper;
THREE.VertexTangentsHelper.prototype.update=function(a){var b=new THREE.Vector3;return function(a){a=["a","b","c","d"];this.object.updateMatrixWorld(!0);for(var d=this.geometry.vertices,e=this.object.geometry.vertices,f=this.object.geometry.faces,g=this.object.matrixWorld,h=0,k=0,l=f.length;k<l;k++)for(var p=f[k],n=0,m=p.vertexTangents.length;n<m;n++){var s=p.vertexTangents[n];d[h].copy(e[p[a[n]]]).applyMatrix4(g);b.copy(s).transformDirection(g).multiplyScalar(this.size);b.add(d[h]);h+=1;d[h].copy(b);
h+=1}this.geometry.verticesNeedUpdate=!0;return this}}();THREE.WireframeHelper=function(a,b){var c=void 0!==b?b:16777215;THREE.Line.call(this,new THREE.WireframeGeometry(a.geometry),new THREE.LineBasicMaterial({color:c}),THREE.LinePieces);this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1};THREE.WireframeHelper.prototype=Object.create(THREE.Line.prototype);THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper;
THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(a){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject;THREE.MorphBlendMesh=function(a,b){THREE.Mesh.call(this,a,b);this.animationsMap={};this.animationsList=[];var c=this.geometry.morphTargets.length;this.createAnimation("__default",0,c-1,c/1);this.setAnimationWeight("__default",1)};
THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh;THREE.MorphBlendMesh.prototype.createAnimation=function(a,b,c,d){b={startFrame:b,endFrame:c,length:c-b+1,fps:d,duration:(c-b)/d,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[a]=b;this.animationsList.push(b)};
THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(a){for(var b=/([a-z]+)_?(\d+)/,c,d={},e=this.geometry,f=0,g=e.morphTargets.length;f<g;f++){var h=e.morphTargets[f].name.match(b);if(h&&1<h.length){var k=h[1];d[k]||(d[k]={start:Infinity,end:-Infinity});h=d[k];f<h.start&&(h.start=f);f>h.end&&(h.end=f);c||(c=k)}}for(k in d)h=d[k],this.createAnimation(k,h.start,h.end,a);this.firstAnimation=c};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(a){if(a=this.animationsMap[a])a.direction=1,a.directionBackwards=!1};THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(a){if(a=this.animationsMap[a])a.direction=-1,a.directionBackwards=!0};THREE.MorphBlendMesh.prototype.setAnimationFPS=function(a,b){var c=this.animationsMap[a];c&&(c.fps=b,c.duration=(c.end-c.start)/c.fps)};
THREE.MorphBlendMesh.prototype.setAnimationDuration=function(a,b){var c=this.animationsMap[a];c&&(c.duration=b,c.fps=(c.end-c.start)/c.duration)};THREE.MorphBlendMesh.prototype.setAnimationWeight=function(a,b){var c=this.animationsMap[a];c&&(c.weight=b)};THREE.MorphBlendMesh.prototype.setAnimationTime=function(a,b){var c=this.animationsMap[a];c&&(c.time=b)};THREE.MorphBlendMesh.prototype.getAnimationTime=function(a){var b=0;if(a=this.animationsMap[a])b=a.time;return b};
THREE.MorphBlendMesh.prototype.getAnimationDuration=function(a){var b=-1;if(a=this.animationsMap[a])b=a.duration;return b};THREE.MorphBlendMesh.prototype.playAnimation=function(a){var b=this.animationsMap[a];b?(b.time=0,b.active=!0):THREE.warn("THREE.MorphBlendMesh: animation["+a+"] undefined in .playAnimation()")};THREE.MorphBlendMesh.prototype.stopAnimation=function(a){if(a=this.animationsMap[a])a.active=!1};
THREE.MorphBlendMesh.prototype.update=function(a){for(var b=0,c=this.animationsList.length;b<c;b++){var d=this.animationsList[b];if(d.active){var e=d.duration/d.length;d.time+=d.direction*a;if(d.mirroredLoop){if(d.time>d.duration||0>d.time)d.direction*=-1,d.time>d.duration&&(d.time=d.duration,d.directionBackwards=!0),0>d.time&&(d.time=0,d.directionBackwards=!1)}else d.time%=d.duration,0>d.time&&(d.time+=d.duration);var f=d.startFrame+THREE.Math.clamp(Math.floor(d.time/e),0,d.length-1),g=d.weight;
f!==d.currentFrame&&(this.morphTargetInfluences[d.lastFrame]=0,this.morphTargetInfluences[d.currentFrame]=1*g,this.morphTargetInfluences[f]=0,d.lastFrame=d.currentFrame,d.currentFrame=f);e=d.time%e/e;d.directionBackwards&&(e=1-e);this.morphTargetInfluences[d.currentFrame]=e*g;this.morphTargetInfluences[d.lastFrame]=(1-e)*g}}};

},{}],7:[function(require,module,exports){
var ref$, id, log, unlines, template, DebugOutput, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, unlines = ref$.unlines;
template = {
  cell: function(it){
    if (it) {
      return "▒▒";
    } else {
      return "  ";
    }
  },
  score: function(){
    return JSON.stringify(this, null, 2);
  },
  brick: function(){
    return this.shape.map(function(it){
      return it.map(template.cell).join(' ');
    }).join("\n        ");
  },
  keys: function(){
    var i$, len$, keySummary, results$ = [];
    if (this.length) {
      for (i$ = 0, len$ = this.length; i$ < len$; ++i$) {
        keySummary = this[i$];
        results$.push(keySummary.key + '-' + keySummary.action + "|");
      }
      return results$;
    } else {
      return "(no change)";
    }
  },
  normal: function(){
    return "score - " + template.score.apply(this.score) + "\nlines - " + this.lines + "\n\n meta - " + this.metagameState + "\n time - " + this.elapsedTime + "\nframe - " + this.elapsedFrames + "\n keys - " + template.keys.apply(this.inputState) + "\n drop - " + (this.forceDownMode ? 'soft' : 'auto');
  },
  menuItems: function(){
    var ix, item;
    return "" + unlines((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.menuData).length; i$ < len$; ++i$) {
        ix = i$;
        item = ref$[i$];
        results$.push(template.menuItem.call(item, ix, this.currentIndex));
      }
      return results$;
    }.call(this)));
  },
  startMenu: function(){
    return "START MENU\n" + template.menuItems.apply(this);
  },
  menuItem: function(index, currentIndex){
    return "" + (index === currentIndex ? ">" : " ") + " " + this.text;
  },
  failure: function(){
    return "   GAME OVER\n\n     Score\n\n  Single - " + this.score.singles + "\n  Double - " + this.score.doubles + "\n  Triple - " + this.score.triples + "\n  Tetris - " + this.score.tetris + "\n\nTotal Lines: " + this.score.lines + "\n\n" + template.menuItems.apply(this.failMenuState);
  }
};
out$.DebugOutput = DebugOutput = (function(){
  DebugOutput.displayName = 'DebugOutput';
  var prototype = DebugOutput.prototype, constructor = DebugOutput;
  function DebugOutput(){
    this.dbo = document.createElement('pre');
    document.body.appendChild(this.dbo);
    this.dbo.style.position = 'absolute';
  }
  prototype.render = function(state){
    switch (state.metagameState) {
    case 'game':
      return this.dbo.innerHTML = template.normal.apply(state);
    case 'failure':
      return this.dbo.innerHTML = template.failure.apply(state);
    case 'start-menu':
      return this.dbo.innerHTML = template.startMenu.apply(state.startMenuState);
    case 'remove-lines':
      return this.dbo.innerHTML = template.normal.apply(state);
    default:
      return this.dbo.innerHTML = "Unknown metagame state: " + state.metagameState;
    }
  };
  return DebugOutput;
}());
},{"std":36}],8:[function(require,module,exports){
var ref$, id, log, raf, FrameDriver, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, raf = ref$.raf;
out$.FrameDriver = FrameDriver = (function(){
  FrameDriver.displayName = 'FrameDriver';
  var prototype = FrameDriver.prototype, constructor = FrameDriver;
  function FrameDriver(onFrame){
    this.onFrame = onFrame;
    this.frame = bind$(this, 'frame', prototype);
    log("FrameDriver::new");
    this.state = {
      zero: 0,
      time: 0,
      frame: 0,
      running: false
    };
  }
  prototype.frame = function(){
    var now, Δt;
    if (this.state.running) {
      raf(this.frame);
    }
    now = Date.now() - this.state.zero;
    Δt = now - this.state.time;
    this.state.time = now;
    this.state.frame = this.state.frame + 1;
    this.state.Δt = Δt;
    return this.onFrame(Δt, this.state.time, this.state.frame);
  };
  prototype.start = function(){
    if (this.state.running === true) {
      return;
    }
    log("FrameDriver::Start - starting");
    this.state.zero = Date.now();
    this.state.time = 0;
    this.state.running = true;
    return this.frame();
  };
  prototype.stop = function(){
    if (this.state.running === false) {
      return;
    }
    log("FrameDriver::Stop - stopping");
    return this.state.running = false;
  };
  return FrameDriver;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{"std":36}],9:[function(require,module,exports){
var ref$, id, log, rand, Timer, GameState, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rand = ref$.rand;
Timer = require('./timer').Timer;
out$.GameState = GameState = (function(){
  GameState.displayName = 'GameState';
  var defaults, prototype = GameState.prototype, constructor = GameState;
  defaults = {
    metagameState: 'no-game',
    inputState: [],
    forceDownMode: false,
    elapsedTime: 0,
    elapsedFrames: 0,
    rowsToRemove: [],
    flags: {
      rowsRemovedThisFrame: false
    },
    score: {
      points: 0,
      lines: 0,
      singles: 0,
      doubles: 0,
      triples: 0,
      tetris: 0
    },
    brick: {
      next: void 8,
      current: void 8
    },
    timers: {
      dropTimer: null,
      forceDropWaitTiemr: null,
      keyRepeatTimer: null,
      removalAnimation: null,
      titleRevealTimer: null,
      failureRevealTimer: null
    },
    options: {
      tileWidth: 10,
      tileHeight: 18,
      tileSize: 20,
      hardDropJoltAmount: 0.35,
      dropSpeed: 300,
      forceDropWaitTime: 100,
      removalAnimationTime: 500,
      hardDropEffectTime: 100,
      keyRepeatTime: 100,
      titleRevealTime: 4000
    },
    arena: {
      cells: [[]],
      width: 0,
      height: 0
    }
  };
  function GameState(options){
    import$(this, defaults);
    import$(this.options, options);
    this.timers.dropTimer = new Timer(this.options.dropSpeed);
    this.timers.forceDropWaitTimer = new Timer(this.options.forceDropWaitTime);
    this.timers.keyRepeatTimer = new Timer(this.options.keyRepeatTime);
    this.timers.removalAnimation = new Timer(this.options.removalAnimationTime);
    this.timers.hardDropEffect = new Timer(this.options.hardDropEffectTime);
    this.timers.titleRevealTimer = new Timer(this.options.titleRevealTime);
    this.timers.failureRevealTimer = new Timer(this.options.titleRevealTime);
    this.arena = constructor.newArena(this.options.tileWidth, this.options.tileHeight);
  }
  GameState.newArena = function(width, height){
    var row, cell;
    return {
      cells: (function(){
        var i$, to$, lresult$, j$, to1$, results$ = [];
        for (i$ = 0, to$ = height; i$ < to$; ++i$) {
          row = i$;
          lresult$ = [];
          for (j$ = 0, to1$ = width; j$ < to1$; ++j$) {
            cell = j$;
            lresult$.push(0);
          }
          results$.push(lresult$);
        }
        return results$;
      }()),
      width: width,
      height: height
    };
  };
  return GameState;
}());
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./timer":42,"std":36}],10:[function(require,module,exports){
var ref$, id, log, filter, Timer, keyRepeatTime, KEY, ACTION_NAME, eventSummary, newBlankKeystate, InputHandler, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, filter = ref$.filter;
Timer = require('./timer').Timer;
keyRepeatTime = 150;
KEY = {
  RETURN: 13,
  ESCAPE: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  Z: 90,
  X: 88,
  ONE: 49,
  TWO: 50,
  THREE: 51,
  FOUR: 52,
  FIVE: 53,
  SIX: 54
};
ACTION_NAME = (ref$ = {}, ref$[KEY.RETURN + ""] = 'confirm', ref$[KEY.ESCAPE + ""] = 'cancel', ref$[KEY.SPACE + ""] = 'hard-drop', ref$[KEY.X + ""] = 'cw', ref$[KEY.Z + ""] = 'ccw', ref$[KEY.UP + ""] = 'up', ref$[KEY.LEFT + ""] = 'left', ref$[KEY.RIGHT + ""] = 'right', ref$[KEY.DOWN + ""] = 'down', ref$[KEY.ONE + ""] = 'debug-1', ref$[KEY.TWO + ""] = 'debug-2', ref$[KEY.THREE + ""] = 'debug-3', ref$[KEY.FOUR + ""] = 'debug-4', ref$[KEY.FIVE + ""] = 'debug-5', ref$);
eventSummary = function(key, state){
  return {
    key: key,
    action: state ? 'down' : 'up'
  };
};
newBlankKeystate = function(){
  return {
    up: false,
    down: false,
    left: false,
    right: false,
    actionA: false,
    actionB: false,
    confirm: false,
    cancel: false
  };
};
out$.InputHandler = InputHandler = (function(){
  InputHandler.displayName = 'InputHandler';
  var prototype = InputHandler.prototype, constructor = InputHandler;
  function InputHandler(){
    this.stateSetter = bind$(this, 'stateSetter', prototype);
    log("InputHandler::new");
    document.addEventListener('keydown', this.stateSetter(true));
    document.addEventListener('keyup', this.stateSetter(false));
    this.currKeystate = newBlankKeystate();
    this.lastKeystate = newBlankKeystate();
  }
  prototype.stateSetter = curry$((function(state, arg$){
    var which, key;
    which = arg$.which;
    if (key = ACTION_NAME[which]) {
      this.currKeystate[key] = state;
      if (state === true && this.lastHeldKey !== key) {
        return this.lastHeldKey = key;
      }
    }
  }), true);
  prototype.changesSinceLastFrame = function(){
    var key, state, wasDifferent;
    return filter(id, (function(){
      var ref$, results$ = [];
      for (key in ref$ = this.currKeystate) {
        state = ref$[key];
        wasDifferent = state !== this.lastKeystate[key];
        this.lastKeystate[key] = state;
        if (wasDifferent) {
          results$.push(eventSummary(key, state));
        }
      }
      return results$;
    }.call(this)));
  };
  InputHandler.debugMode = function(){
    return document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      return log("InputHandler::debugMode -", which, ACTION_NAME[which] || '[unbound]');
    });
  };
  InputHandler.on = function(code, λ){
    return document.addEventListener('keydown', function(arg$){
      var which;
      which = arg$.which;
      if (which === code) {
        return λ();
      }
    });
  };
  return InputHandler;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./timer":42,"std":36}],11:[function(require,module,exports){
var ref$, id, log, max, rand, floor, Palette, Blitter, ArenaView, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, max = ref$.max, rand = ref$.rand, floor = ref$.floor;
Palette = require('./palette').Palette;
Blitter = require('./blitter').Blitter;
out$.ArenaView = ArenaView = (function(superclass){
  var prototype = extend$((import$(ArenaView, superclass).displayName = 'ArenaView', ArenaView), superclass).prototype, constructor = ArenaView;
  function ArenaView(){
    ArenaView.superclass.apply(this, arguments);
    this.grid = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t;
      return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(Blitter, arguments, function(){});
    this.cells = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t;
      return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(Blitter, arguments, function(){});
  }
  prototype.drawCells = function(cells, size){
    var i$, len$, y, row, lresult$, j$, len1$, x, tile, results$ = [];
    this.cells.clear();
    for (i$ = 0, len$ = cells.length; i$ < len$; ++i$) {
      y = i$;
      row = cells[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        tile = row[j$];
        if (tile) {
          this.cells.ctx.fillStyle = Palette.tileColors[tile];
          lresult$.push(this.cells.ctx.fillRect(1 + x * size, 1 + y * size, size - 1, size - 1));
        }
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.drawGrid = function(w, h, size){
    var i$, x, y;
    this.grid.clear();
    this.grid.ctx.strokeStyle = 'black';
    this.grid.ctx.beginPath();
    for (i$ = 0; i$ <= w; ++i$) {
      x = i$;
      this.grid.ctx.moveTo(x * size + 0.5, 0);
      this.grid.ctx.lineTo(x * size + 0.5, h * size + 0.5);
    }
    for (i$ = 0; i$ <= h; ++i$) {
      y = i$;
      this.grid.ctx.moveTo(0, y * size + 0.5);
      this.grid.ctx.lineTo(w * size + 0.5, y * size + 0.5);
    }
    return this.grid.ctx.stroke();
  };
  prototype.drawRowRemoval = function(width, size, y, mode){
    var i$, x, results$ = [];
    mode == null && (mode = 1);
    for (i$ = 0; i$ <= width; ++i$) {
      x = i$;
      this.cells.ctx.fillStyle = mode
        ? Palette.neutral[0]
        : Palette.neutral[3];
      results$.push(this.cells.ctx.fillRect(1 + x * size, 1 + y * size, size - 1, size - 1));
    }
    return results$;
  };
  prototype.calculateJitter = function(gs){
    var rowsToRemove, timers, zz, jolt, jitter;
    rowsToRemove = gs.rowsToRemove, timers = gs.timers;
    zz = rowsToRemove.length;
    jolt = timers.removalAnimation.active && timers.hardDropEffect.active
      ? max(1 - timers.hardDropEffect.progress, 1 - timers.removalAnimation.progress)
      : 1 - timers.hardDropEffect.progress;
    jitter = (1 - timers.removalAnimation.progress) * zz / 4;
    jolt *= gs.options.hardDropJoltAmount * gs.hardDropDistance;
    if (timers.removalAnimation.active) {
      return [floor(rand(-zz, zz)), floor(rand(-zz, zz)) + jolt * (1 + zz)];
    } else {
      return [0, jolt];
    }
  };
  prototype.drawBorder = function(width, height, z){
    this.ctx.strokeStyle = Palette.neutral[2];
    return this.ctx.strokeRect(0.5, 0.5, width * z + 1, height * z + 1);
  };
  prototype.render = function(gs, arg$){
    var arena, cells, width, height, rowsToRemove, timers, z, zz, p, i$, len$, rowIx, blitJitter;
    arena = gs.arena, cells = arena.cells, width = arena.width, height = arena.height, rowsToRemove = gs.rowsToRemove, timers = gs.timers;
    z = arg$.z;
    this.clear();
    zz = rowsToRemove.length;
    if (gs.timers.removalAnimation.active) {
      p = 33 + floor((255 - 33) / 4 * zz * (1 - timers.removalAnimation.progress));
      this.ctx.fillStyle = "rgb(" + p + "," + p + "," + p + ")";
    } else {
      this.ctx.fillStyle = Palette.neutral[3];
    }
    this.ctx.fillRect(0, 0, width * z, height * z);
    this.drawCells(cells, z);
    this.drawBorder(width, height, z);
    for (i$ = 0, len$ = rowsToRemove.length; i$ < len$; ++i$) {
      rowIx = rowsToRemove[i$];
      if (floor(timers.removalAnimation.currentTime) % 2) {
        this.drawRowRemoval(width, z, rowIx, 1);
      } else {
        this.drawRowRemoval(width, z, rowIx, 0);
      }
    }
    blitJitter = this.calculateJitter(gs);
    this.grid.blitTo(this, blitJitter[0], blitJitter[1]);
    return this.cells.blitTo(this, blitJitter[0], blitJitter[1], 0.9);
  };
  return ArenaView;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./blitter":12,"./palette":16,"std":36}],12:[function(require,module,exports){
var ref$, id, log, Blitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Blitter = Blitter = (function(){
  Blitter.displayName = 'Blitter';
  var prototype = Blitter.prototype, constructor = Blitter;
  function Blitter(opts, w, h){
    this.opts = opts;
    this.w = w;
    this.h = h;
    this.canvas = document.createElement('canvas');
    this.width = this.canvas.width = this.w;
    this.height = this.canvas.height = this.h;
    this.ctx = this.canvas.getContext('2d');
  }
  prototype.showDebug = function(){
    this.canvas.style.background = '#f0f';
    this.canvas.style.margin = '10px';
    this.canvas.style.border = "2px solid #0f0";
    return document.body.appendChild(this.canvas);
  };
  prototype.blitTo = function(dest, x, y, alpha){
    x == null && (x = 0);
    y == null && (y = 0);
    alpha == null && (alpha = 1);
    dest.ctx.globalAlpha = alpha;
    dest.ctx.drawImage(this.canvas, x, y);
    return dest.ctx.globalAlpha = 1;
  };
  prototype.blitToCanvas = function(destCanvas){
    var ctx;
    ctx = destCanvas.getContext('2d');
    ctx.clearRect(0, 0, destCanvas.width, destCanvas.height);
    return ctx.drawImage(this.canvas, 0, 0, destCanvas.width, destCanvas.height);
  };
  prototype.clear = function(color){
    if (color != null) {
      this.ctx.fillColor = color;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    } else {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    }
  };
  return Blitter;
}());
},{"std":36}],13:[function(require,module,exports){
var ref$, id, log, tileColors, Blitter, BrickView, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
tileColors = require('./palette').tileColors;
Blitter = require('./blitter').Blitter;
out$.BrickView = BrickView = (function(superclass){
  var prototype = extend$((import$(BrickView, superclass).displayName = 'BrickView', BrickView), superclass).prototype, constructor = BrickView;
  function BrickView(){
    BrickView.superclass.apply(this, arguments);
  }
  prototype.render = function(brick){
    var i$, ref$, len$, y, row, j$, len1$, x, cell;
    this.clear();
    for (i$ = 0, len$ = (ref$ = brick.shape).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        if (cell) {
          this.ctx.fillStyle = tileColors[cell];
          this.ctx.fillRect(x * this.opts.z + 1, y * this.opts.z + 1, this.opts.z - 1, this.opts.z - 1);
        }
      }
    }
    return this;
  };
  return BrickView;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./blitter":12,"./palette":16,"std":36}],14:[function(require,module,exports){
var ref$, id, log, Blitter, Palette, ArenaView, BrickView, NextBrickView, StartMenuView, CanvasRenderer, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Blitter = require('./blitter').Blitter;
Palette = require('./palette').Palette;
ArenaView = require('./arena').ArenaView;
BrickView = require('./brick').BrickView;
NextBrickView = require('./next-brick').NextBrickView;
StartMenuView = require('./start-menu').StartMenuView;
out$.CanvasRenderer = CanvasRenderer = (function(superclass){
  var prototype = extend$((import$(CanvasRenderer, superclass).displayName = 'CanvasRenderer', CanvasRenderer), superclass).prototype, constructor = CanvasRenderer;
  function CanvasRenderer(opts){
    var z;
    this.opts = opts;
    this.z = z = this.opts.z;
    CanvasRenderer.superclass.call(this, this.opts, 17 * z, 20 * z);
    this.arena = new ArenaView(this.opts, 10 * z + 2, 18 * z + 2);
    this.brick = new BrickView(this.opts, 4 * z, 4 * z);
    this.next = new NextBrickView(this.opts, 4 * z, 4 * z);
    this.start = new StartMenuView(this.opts, 17 * z, 20 * z);
    this.outputCanvas = document.createElement('canvas');
    this.outputCanvas.width = 17 * this.opts.z;
    this.outputCanvas.height = 20 * this.opts.z;
    this.state = {};
  }
  prototype.renderStartMenu = function(gs){
    var startMenuState;
    startMenuState = gs.startMenuState;
    this.clear();
    if (this.state.lastStartMenuIndex !== gs.startMenuState.currentIndex) {
      this.start.render(startMenuState);
    }
    this.start.blitTo(this, 0, 0);
    return this.state.lastStartMenuIndex = gs.startMenuState.currentIndex;
  };
  prototype.renderBlank = function(){
    return this.clear();
  };
  prototype.renderGame = function(gs){
    this.brick.render(gs.brick.current, this.opts);
    this.next.render(gs.brick.next, this.opts);
    this.arena.render(gs, this.opts);
    return this.collapseAll(gs);
  };
  prototype.collapseAll = function(gs){
    var pos;
    pos = gs.brick.current.pos;
    this.ctx.fillStyle = Palette.neutral[3];
    this.ctx.fillRect(0, 0, this.width, this.height);
    this.brick.blitTo(this.arena, pos[0] * this.z, pos[1] * this.z);
    this.arena.blitTo(this, this.opts.z, this.opts.z);
    if (gs.metagameState === 'removal-animation') {
      this.flashing.blitTo(this, this.opts.z, this.opts.z);
    }
    return this.next.blitTo(this, (2 + gs.arena.width) * this.z, 1 * this.z);
  };
  prototype.render = function(gameState){
    var metagameState;
    metagameState = gameState.metagameState;
    switch (metagameState) {
    case 'start-menu':
      this.renderStartMenu(gameState);
      break;
    case 'pause':
      this.renderPauseMenu(gameState);
      break;
    case 'game':
      this.renderGame(gameState);
      break;
    case 'win':
      this.renderWinScreen(gameState);
      break;
    case 'remove-lines':
      this.renderGame(gameState);
      break;
    default:
      this.renderBlank();
    }
    return this.blitToCanvas(this.outputCanvas);
  };
  prototype.appendTo = function(host){
    return host.appendChild(this.outputCanvas);
  };
  return CanvasRenderer;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./arena":11,"./blitter":12,"./brick":13,"./next-brick":15,"./palette":16,"./start-menu":17,"std":36}],15:[function(require,module,exports){
var ref$, id, log, BrickView, Blitter, Palette, NextBrickView, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
BrickView = require('./brick').BrickView;
Blitter = require('./blitter').Blitter;
Palette = require('./palette').Palette;
out$.NextBrickView = NextBrickView = (function(superclass){
  var prototype = extend$((import$(NextBrickView, superclass).displayName = 'NextBrickView', NextBrickView), superclass).prototype, constructor = NextBrickView;
  function NextBrickView(){
    NextBrickView.superclass.apply(this, arguments);
    this.brick = new BrickView(this.opts, this.width, this.height);
  }
  prototype.prettyOffset = function(type){
    switch (type) {
    case 'square':
      return [0, 0];
    case 'zig':
      return [0.5, 0];
    case 'zag':
      return [0.5, 0];
    case 'left':
      return [0.5, 0];
    case 'right':
      return [0.5, 0];
    case 'tee':
      return [0.5, 0];
    case 'tetris':
      return [0, -0.5];
    }
  };
  prototype.renderBg = function(){
    this.ctx.fillStyle = Palette.neutral[3];
    this.ctx.fillRect(0, 0, this.width, this.height);
    this.ctx.strokeStyle = Palette.neutral[2];
    return this.ctx.strokeRect(0.5, 0.5, this.width - 1, this.height - 1);
  };
  prototype.render = function(brick){
    var ref$, x, y;
    this.clear();
    this.renderBg();
    this.brick.render(brick);
    ref$ = this.prettyOffset(brick.type), x = ref$[0], y = ref$[1];
    return this.brick.blitTo(this, x * this.opts.z, y * this.opts.z);
  };
  return NextBrickView;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./blitter":12,"./brick":13,"./palette":16,"std":36}],16:[function(require,module,exports){
var neutral, red, orange, green, magenta, blue, brown, yellow, cyan, tileColors, Palette, out$ = typeof exports != 'undefined' && exports || this;
out$.neutral = neutral = ['#ffffff', '#cccccc', '#888888', '#212121'];
out$.red = red = ['#FF4444', '#FF7777', '#dd4444', '#551111'];
out$.orange = orange = ['#FFBB33', '#FFCC88', '#CC8800', '#553300'];
out$.green = green = ['#44ff66', '#88ffaa', '#22bb33', '#115511'];
out$.magenta = magenta = ['#ff33ff', '#ffaaff', '#bb22bb', '#551155'];
out$.blue = blue = ['#66bbff', '#aaddff', '#5588ee', '#111155'];
out$.brown = brown = ['#ffbb33', '#ffcc88', '#bb9900', '#555511'];
out$.yellow = yellow = ['#eeee11', '#ffffaa', '#ccbb00', '#555511'];
out$.cyan = cyan = ['#44ddff', '#aae3ff', '#00aacc', '#006699'];
out$.tileColors = tileColors = [neutral[2], red[0], orange[0], yellow[0], green[0], cyan[0], blue[2], magenta[0], 'white'];
out$.Palette = Palette = {
  neutral: neutral,
  red: red,
  orange: orange,
  yellow: yellow,
  green: green,
  cyan: cyan,
  blue: blue,
  magenta: magenta,
  tileColors: tileColors
};
},{}],17:[function(require,module,exports){
var ref$, id, log, floor, Blitter, TextBlitter, StartMenuView, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor;
Blitter = require('./blitter').Blitter;
TextBlitter = require('./text-blitter').TextBlitter;
out$.StartMenuView = StartMenuView = (function(superclass){
  var prototype = extend$((import$(StartMenuView, superclass).displayName = 'StartMenuView', StartMenuView), superclass).prototype, constructor = StartMenuView;
  function StartMenuView(){
    StartMenuView.superclass.apply(this, arguments);
    this.text = new TextBlitter({}, this.w * 2 / 3, this.h / 20);
    this.title = new TextBlitter({}, this.w * 2 / 3, this.h / 10);
  }
  prototype.render = function(arg$){
    var menuData, currentIndex, i$, len$, i, entry, results$ = [];
    menuData = arg$.menuData, currentIndex = arg$.currentIndex;
    this.clear();
    for (i$ = 0, len$ = menuData.length; i$ < len$; ++i$) {
      i = i$;
      entry = menuData[i$];
      this.text.render(entry.text);
      if (i === currentIndex) {
        this.text.renderFrame();
      }
      this.text.blitTo(this, floor(this.w / 6), floor(this.h / 2 + this.h / 15 * i));
      this.title.render('TETRIS');
      results$.push(this.title.blitTo(this, this.w / 6, this.h / 6));
    }
    return results$;
  };
  return StartMenuView;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./blitter":12,"./text-blitter":18,"std":36}],18:[function(require,module,exports){
var ref$, id, log, Blitter, TextBlitter, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Blitter = require('./blitter').Blitter;
out$.TextBlitter = TextBlitter = (function(superclass){
  var defaultFontOptions, prototype = extend$((import$(TextBlitter, superclass).displayName = 'TextBlitter', TextBlitter), superclass).prototype, constructor = TextBlitter;
  defaultFontOptions = {
    font: "14px monospace",
    textAlign: 'center'
  };
  function TextBlitter(opts, x, y){
    this.opts = opts;
    TextBlitter.superclass.apply(this, arguments);
    this.font = {
      size: y,
      family: 'monospace'
    };
    this.setFont(this.font);
    this.setAlignment('center');
    this.ctx.textBaseline = 'middle';
  }
  prototype.setFont = function(settings){
    import$(this.font, settings);
    return this.ctx.font = this.font.size + "px " + this.font.family;
  };
  prototype.setAlignment = function(alignString){
    return this.ctx.textAlign = alignString;
  };
  prototype.render = function(text, color){
    color == null && (color = 'black');
    this.clear();
    this.ctx.fillStyle = color;
    return this.ctx.fillText(text, this.w / 2, this.font.size / 2, this.w);
  };
  prototype.renderFrame = function(){
    return this.ctx.strokeRect(0.5, 0.5, this.w - 1, this.h - 1);
  };
  return TextBlitter;
}(Blitter));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./blitter":12,"std":36}],19:[function(require,module,exports){
var ref$, id, log, el, DomRenderer, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
el = bind$(document, 'createElement');
out$.DomRenderer = DomRenderer = (function(){
  DomRenderer.displayName = 'DomRenderer';
  var prototype = DomRenderer.prototype, constructor = DomRenderer;
  function DomRenderer(opts){
    this.opts = opts;
    this.dom = {
      main: el('div')
    };
  }
  prototype.render = function(gameState){};
  prototype.appendTo = function(host){
    return host.appendChild(this.dom.main);
  };
  return DomRenderer;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{"std":36}],20:[function(require,module,exports){
var ref$, id, log, pi, rand, floor, Base, meshMaterials, ArenaCells, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, pi = ref$.pi, rand = ref$.rand, floor = ref$.floor;
Base = require('./base').Base;
meshMaterials = require('../palette').meshMaterials;
out$.ArenaCells = ArenaCells = (function(superclass){
  var prototype = extend$((import$(ArenaCells, superclass).displayName = 'ArenaCells', ArenaCells), superclass).prototype, constructor = ArenaCells;
  function ArenaCells(opts, gs){
    var ref$, width, height, res$, i$, len$, y, row, lresult$, j$, len1$, x, cell, cube, ref1$;
    this.opts = opts;
    ArenaCells.superclass.apply(this, arguments);
    ref$ = gs.arena, width = ref$.width, height = ref$.height;
    this.geom.box = new THREE.BoxGeometry(0.9, 0.9, 0.9);
    this.mats.zap = new THREE.MeshLambertMaterial({
      color: 0xffffff,
      emissive: 0x999999
    });
    this.offset = new THREE.Object3D;
    this.registration.add(this.offset);
    ref$ = this.registration.position;
    ref$.x = width / -2 + 0.5;
    ref$.y = height - 0.5;
    this.registration.rotation.x = pi;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = gs.arena.cells).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        cube = new THREE.Mesh(this.geom.box, this.mats.normal);
        ref1$ = cube.position;
        ref1$.x = x;
        ref1$.y = y;
        cube.visible = false;
        this.offset.add(cube);
        lresult$.push(cube);
      }
      res$.push(lresult$);
    }
    this.cells = res$;
  }
  prototype.toggleRowOfCells = function(rowIx, state){
    var i$, ref$, len$, box, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.cells[rowIx]).length; i$ < len$; ++i$) {
      box = ref$[i$];
      box.material = this.mats.zap;
      results$.push(box.visible = state);
    }
    return results$;
  };
  prototype.showZapEffect = function(jolt, gs){
    var arena, rowsToRemove, timers, onOff, i$, len$, rowIx, results$ = [];
    arena = gs.arena, rowsToRemove = gs.rowsToRemove, timers = gs.timers;
    onOff = !!(floor(timers.removalAnimation.currentTime) % 2);
    for (i$ = 0, len$ = rowsToRemove.length; i$ < len$; ++i$) {
      rowIx = rowsToRemove[i$];
      results$.push(this.toggleRowOfCells(rowIx, onOff));
    }
    return results$;
  };
  prototype.updateCells = function(cells){
    var i$, len$, y, row, lresult$, j$, len1$, x, cell, results$ = [];
    for (i$ = 0, len$ = cells.length; i$ < len$; ++i$) {
      y = i$;
      row = cells[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        this.cells[y][x].visible = !!cell;
        lresult$.push(this.cells[y][x].material = meshMaterials[cell]);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  return ArenaCells;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],21:[function(require,module,exports){
var ref$, id, log, Base, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
out$.Base = Base = (function(){
  Base.displayName = 'Base';
  var prototype = Base.prototype, constructor = Base;
  function Base(opts, gs){
    this.opts = opts;
    this.root = new THREE.Object3D;
    this.registration = new THREE.Object3D;
    this.root.add(this.registration);
    this.geom = {};
    this.mats = {
      normal: new THREE.MeshNormalMaterial()
    };
  }
  prototype.showBounds = function(scene){
    this.bounds = new THREE.BoundingBoxHelper(this.root, 0x555555);
    this.bounds.update();
    return scene.add(this.bounds);
  };
  prototype.addTo = function(obj){
    return obj.add(this.root);
  };
  Object.defineProperty(prototype, 'position', {
    get: function(){
      return this.root.position;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'visible', {
    get: function(){
      return this.root.visible;
    },
    set: function(state){
      this.root.visible = state;
    },
    configurable: true,
    enumerable: true
  });
  return Base;
}());
},{"std":36}],22:[function(require,module,exports){
var ref$, id, log, sin, Base, Brick, BrickPreview, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, sin = ref$.sin;
Base = require('./base').Base;
Brick = require('./brick').Brick;
out$.BrickPreview = BrickPreview = (function(superclass){
  var prettyOffset, prototype = extend$((import$(BrickPreview, superclass).displayName = 'BrickPreview', BrickPreview), superclass).prototype, constructor = BrickPreview;
  prettyOffset = {
    square: [0, 0],
    zig: [0.5, 0],
    zag: [0.5, 0],
    left: [0.5, 0],
    right: [0.5, 0],
    tee: [0.5, 0],
    tetris: [0, -0.5]
  };
  function BrickPreview(opts, gs){
    this.opts = opts;
    BrickPreview.superclass.apply(this, arguments);
  }
  prototype.displayShape = function(brick){
    var ref$, x, y;
    superclass.prototype.displayShape.apply(this, arguments);
    ref$ = prettyOffset[brick.type], x = ref$[0], y = ref$[1];
    this.registration.position.x = -1.5 + x;
    return this.registration.position.y = -1.5 + y;
  };
  prototype.updateWiggle = function(brick, elapsedTime){
    return this.root.rotation.y = 0.2 * sin(elapsedTime / 500);
  };
  return BrickPreview;
}(Brick));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./base":21,"./brick":23,"std":36}],23:[function(require,module,exports){
var ref$, id, log, pi, Base, meshMaterials, Brick, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, pi = ref$.pi;
Base = require('./base').Base;
meshMaterials = require('../palette').meshMaterials;
out$.Brick = Brick = (function(superclass){
  var prettyOffset, prototype = extend$((import$(Brick, superclass).displayName = 'Brick', Brick), superclass).prototype, constructor = Brick;
  prettyOffset = {
    square: [0, 0],
    zig: [0.5, 0],
    zag: [0.5, 0],
    left: [0.5, 0],
    right: [0.5, 0],
    tee: [0.5, 0],
    tetris: [0, -0.5]
  };
  function Brick(opts, gs){
    var ref$, width, height, res$, i$, i, cube;
    this.opts = opts;
    Brick.superclass.apply(this, arguments);
    ref$ = gs.arena, width = ref$.width, height = ref$.height;
    this.geom.brickBox = new THREE.BoxGeometry(0.9, 0.9, 0.9);
    this.registration.rotation.x = pi;
    ref$ = this.registration.position;
    ref$.x = width / -2 + 0.5;
    ref$.y = height - 0.5;
    this.brick = new THREE.Object3D;
    this.registration.add(this.brick);
    res$ = [];
    for (i$ = 0; i$ <= 3; ++i$) {
      i = i$;
      cube = new THREE.Mesh(this.geom.brickBox, this.mats.normal);
      this.brick.add(cube);
      cube.castShadow = true;
      res$.push(cube);
    }
    this.cells = res$;
  }
  prototype.displayShape = function(arg$, ix){
    var shape, i$, len$, y, row, lresult$, j$, len1$, x, cell, x$, ref$, results$ = [];
    shape = arg$.shape;
    ix == null && (ix = 0);
    for (i$ = 0, len$ = shape.length; i$ < len$; ++i$) {
      y = i$;
      row = shape[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        if (cell) {
          x$ = this.cells[ix];
          x$.material = meshMaterials[cell];
          ref$ = x$.position;
          ref$.x = x;
          ref$.y = y;
          lresult$.push(ix += 1);
        }
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.updatePos = function(arg$){
    var x, y, ref$;
    x = arg$[0], y = arg$[1];
    return ref$ = this.brick.position, ref$.x = x, ref$.y = y, ref$;
  };
  return Brick;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],24:[function(require,module,exports){
var ref$, id, log, Base, Frame, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Base = require('./base').Base;
out$.Frame = Frame = (function(superclass){
  var prototype = extend$((import$(Frame, superclass).displayName = 'Frame', Frame), superclass).prototype, constructor = Frame;
  function Frame(opts, gs){
    this.opts = opts;
    Frame.superclass.apply(this, arguments);
  }
  return Frame;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./base":21,"std":36}],25:[function(require,module,exports){
var ref$, id, log, floor, Base, lineMaterials, rowsToCols, GuideLines, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor;
Base = require('./base').Base;
lineMaterials = require('../palette').lineMaterials;
rowsToCols = function(rows){
  var cols, i$, to$, y, j$, to1$, x;
  cols = [];
  for (i$ = 0, to$ = rows[0].length; i$ < to$; ++i$) {
    y = i$;
    for (j$ = 0, to1$ = rows.length; j$ < to1$; ++j$) {
      x = j$;
      (cols[y] || (cols[y] = []))[x] = rows[x][y];
    }
  }
  return cols;
};
out$.GuideLines = GuideLines = (function(superclass){
  var prototype = extend$((import$(GuideLines, superclass).displayName = 'GuideLines', GuideLines), superclass).prototype, constructor = GuideLines;
  function GuideLines(opts, gs){
    var ref$, width, height, mesh, i$, i, line;
    this.opts = opts;
    GuideLines.superclass.apply(this, arguments);
    this.lines = [];
    ref$ = gs.arena, width = ref$.width, height = ref$.height;
    mesh = new THREE.Geometry();
    mesh.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, height, 0));
    this.registration.position.x = width / -2 + 0.5;
    for (i$ = 0; i$ <= 9; ++i$) {
      i = i$;
      line = new THREE.Line(mesh, lineMaterials[i]);
      ref$ = line.position;
      ref$.x = i;
      ref$.y = 0;
      this.lines.push(line);
      this.registration.add(line);
    }
  }
  prototype.showBeam = function(brick){
    var i$, ref$, len$, line, y, row, lresult$, j$, len1$, x, cell, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.lines).length; i$ < len$; ++i$) {
      line = ref$[i$];
      line.material = lineMaterials[0];
    }
    for (i$ = 0, len$ = (ref$ = brick.shape).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        if (cell) {
          lresult$.push(this.lines[brick.pos[0] + x].material = lineMaterials[cell]);
        }
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.dance = function(time){
    var i$, ref$, len$, i, line, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.lines).length; i$ < len$; ++i$) {
      i = i$;
      line = ref$[i$];
      results$.push(line.material = lineMaterials[(i + floor(time / 100)) % 8]);
    }
    return results$;
  };
  return GuideLines;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],26:[function(require,module,exports){
var ref$, Title, Table, Frame, Brick, Lighting, GuideLines, ArenaCells, BrickPreview, ParticleEffect, StartMenu, out$ = typeof exports != 'undefined' && exports || this;
import$(out$, (ref$ = require('./title'), Title = ref$.Title, ref$));
import$(out$, (ref$ = require('./table'), Table = ref$.Table, ref$));
import$(out$, (ref$ = require('./frame'), Frame = ref$.Frame, ref$));
import$(out$, (ref$ = require('./brick'), Brick = ref$.Brick, ref$));
import$(out$, (ref$ = require('./lighting'), Lighting = ref$.Lighting, ref$));
import$(out$, (ref$ = require('./guide-lines'), GuideLines = ref$.GuideLines, ref$));
import$(out$, (ref$ = require('./arena-cells'), ArenaCells = ref$.ArenaCells, ref$));
import$(out$, (ref$ = require('./brick-preview'), BrickPreview = ref$.BrickPreview, ref$));
import$(out$, (ref$ = require('./particle-effect'), ParticleEffect = ref$.ParticleEffect, ref$));
import$(out$, (ref$ = require('./start-menu'), StartMenu = ref$.StartMenu, ref$));
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./arena-cells":20,"./brick":23,"./brick-preview":22,"./frame":24,"./guide-lines":25,"./lighting":27,"./particle-effect":28,"./start-menu":29,"./table":30,"./title":31}],27:[function(require,module,exports){
var ref$, id, log, Base, Lighting, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Base = require('./base').Base;
out$.Lighting = Lighting = (function(superclass){
  var prototype = extend$((import$(Lighting, superclass).displayName = 'Lighting', Lighting), superclass).prototype, constructor = Lighting;
  function Lighting(opts, gs){
    this.opts = opts;
    Lighting.superclass.apply(this, arguments);
    this.light = new THREE.PointLight(0xffffff, 1.1, 100);
    this.root.add(this.light);
    this.spotlight = new THREE.SpotLight(0xffffff);
    this.spotlight.position.set(0, gs.arena.height, 0);
    this.spotlight.castShadow = true;
    this.spotlight.shadowDarkness = 0.5;
    this.spotlight.shadowBias = 0.0001;
    this.spotlight.shadowMapWidth = 1024;
    this.spotlight.shadowMapHeight = 1024;
    this.spotlight.shadowCameraVisible = true;
    this.spotlight.shadowCameraNear = 10;
    this.spotlight.shadowCameraFar = 2500;
    this.spotlight.shadowCameraFov = 50;
  }
  return Lighting;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./base":21,"std":36}],28:[function(require,module,exports){
var ref$, id, log, pi, sin, cos, Base, meshMaterials, ParticleEffect, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, pi = ref$.pi, sin = ref$.sin, cos = ref$.cos;
Base = require('./base').Base;
meshMaterials = require('../palette').meshMaterials;
out$.ParticleEffect = ParticleEffect = (function(superclass){
  var size, speed, lifespan, prototype = extend$((import$(ParticleEffect, superclass).displayName = 'ParticleEffect', ParticleEffect), superclass).prototype, constructor = ParticleEffect;
  size = 0.3;
  speed = 3;
  lifespan = 3000;
  function ParticleEffect(opts, gs){
    var arena, width, height, particles, geometry, color, material, particleSystem;
    this.opts = opts;
    arena = gs.arena, width = arena.width, height = arena.height;
    ParticleEffect.superclass.apply(this, arguments);
    this.lastP = 10;
    particles = 1200;
    geometry = new THREE.BufferGeometry();
    this.positions = new Float32Array(particles * 3);
    this.velocities = new Float32Array(particles * 3);
    this.lifespans = new Float32Array(particles * 3);
    this.colors = new Float32Array(particles * 3);
    color = new THREE.Color();
    this.posAttr = new THREE.BufferAttribute(this.positions, 3);
    this.colAttr = new THREE.BufferAttribute(this.colors, 3);
    this.resetParticles();
    geometry.addAttribute('position', this.posAttr);
    geometry.addAttribute('color', this.colAttr);
    geometry.computeBoundingSphere();
    material = new THREE.PointCloudMaterial({
      size: size,
      vertexColors: THREE.VertexColors
    });
    particleSystem = new THREE.PointCloud(geometry, material);
    this.root.add(particleSystem);
  }
  prototype.revive = function(n, y){
    var i$, i, results$ = [];
    for (i$ = 0; i$ < n; ++i$) {
      i = i$;
      this.lifespans[i] = lifespan / 2 + Math.random() * lifespan / 2;
      results$.push(this.positions[i * 3 + 1] = y);
    }
    return results$;
  };
  prototype.resetParticles = function(){
    var i$, to$, i, n, x, z, results$ = [];
    for (i$ = 0, to$ = this.positions.length; i$ < to$; i$ += 3) {
      i = i$;
      n = 10;
      x = 4.5 - Math.random() * 9;
      z = 0.5 - Math.random();
      this.positions[i + 0] = x;
      this.positions[i + 1] = 0;
      this.positions[i + 2] = z;
      this.velocities[i + 0] = x / 9 * 10;
      this.velocities[i + 1] = Math.random() * 2;
      this.velocities[i + 2] = z * 10;
      this.colors[i + 0] = 1;
      this.colors[i + 1] = 1;
      this.colors[i + 2] = 1;
      results$.push(this.lifespans[i] = 0);
    }
    return results$;
  };
  prototype.accelerateParticle = function(i, t){
    var acc, px, py, pz, vx, vy, vz, px1, py1, pz1, vx1, vy1, vz1;
    if (this.lifespans[i / 3] <= 0) {
      this.positions[i + 1] = -1000;
      return;
    }
    t = t / (1000 / speed);
    acc = -0.98;
    px = this.positions[i + 0];
    py = this.positions[i + 1];
    pz = this.positions[i + 2];
    vx = this.velocities[i + 0];
    vy = this.velocities[i + 1];
    vz = this.velocities[i + 2];
    px1 = px + 0.5 * 0 * t * t + vx * t;
    py1 = py + 0.5 * acc * t * t + vy * t;
    pz1 = pz + 0.5 * 0 * t * t + vz * t;
    vx1 = 0 * t + vx;
    vy1 = acc * t + vy;
    vz1 = 0 * t + vz;
    if (py1 < size / 2) {
      py1 = size / 2;
      vx1 *= 0.7;
      vy1 *= -0.6;
      vz1 *= 0.7;
    }
    this.positions[i + 0] = px1;
    this.positions[i + 1] = py1;
    this.positions[i + 2] = pz1;
    this.velocities[i + 0] = vx1;
    this.velocities[i + 1] = vy1;
    return this.velocities[i + 2] = vz1;
  };
  prototype.update = function(p, Δt){
    var i$, to$, i;
    this.lastP = p;
    for (i$ = 0, to$ = this.positions.length; i$ < to$; i$ += 3) {
      i = i$;
      this.accelerateParticle(i, Δt);
      this.lifespans[i / 3] -= Δt;
    }
    return this.posAttr.needsUpdate = true;
  };
  return ParticleEffect;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],29:[function(require,module,exports){
var ref$, id, log, sin, cos, Base, canvasTexture, StartMenu, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, sin = ref$.sin, cos = ref$.cos;
Base = require('./base').Base;
canvasTexture = function(){
  var textureSize, textCnv, imgCnv, textCtx, imgCtx;
  textureSize = 512;
  textCnv = document.createElement('canvas');
  imgCnv = document.createElement('canvas');
  textCtx = textCnv.getContext('2d');
  imgCtx = imgCnv.getContext('2d');
  imgCnv.width = imgCnv.height = textureSize;
  return function(arg$){
    var width, height, text, textSize, ref$;
    width = arg$.width, height = arg$.height, text = arg$.text, textSize = (ref$ = arg$.textSize) != null ? ref$ : 10;
    textCnv.width = width * 100;
    textCnv.height = height * 100;
    textCtx.textAlign = 'center';
    textCtx.textBaseline = 'middle';
    textCtx.fillStyle = 'white';
    textCtx.font = textSize * 100 + "px monospace";
    textCtx.fillText(text, width * 50, height * 50, width * 100);
    imgCtx.clearRect(0, 0, textureSize, textureSize);
    imgCtx.drawImage(textCnv, 0, 0, textureSize, textureSize);
    return imgCnv.toDataURL();
  };
}();
out$.StartMenu = StartMenu = (function(superclass){
  var prototype = extend$((import$(StartMenu, superclass).displayName = 'StartMenu', StartMenu), superclass).prototype, constructor = StartMenu;
  function StartMenu(opts, gs){
    var i$, ref$, len$, ix, option, image, tex, geom, mat, quad;
    this.opts = opts;
    StartMenu.superclass.apply(this, arguments);
    this.options = [];
    for (i$ = 0, len$ = (ref$ = gs.startMenuState.menuData).length; i$ < len$; ++i$) {
      ix = i$;
      option = ref$[i$];
      image = canvasTexture({
        text: option.text,
        width: 40,
        height: 10
      });
      tex = THREE.ImageUtils.loadTexture(image);
      geom = new THREE.PlaneGeometry(16, 4);
      mat = new THREE.MeshPhongMaterial({
        map: tex,
        alphaMap: tex,
        transparent: true
      });
      quad = new THREE.Mesh(geom, mat);
      quad.position.y = 6 - ix * 4.5;
      this.options.push(quad);
      this.root.add(quad);
    }
    this.registration.position.y = 10;
  }
  prototype.updateSelection = function(state, time){
    var i$, ref$, len$, ix, quad, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.options).length; i$ < len$; ++i$) {
      ix = i$;
      quad = ref$[i$];
      if (ix === state.currentIndex) {
        quad.scale.x = 1 + 0.05 * sin(time / 300);
        results$.push(quad.scale.y = 1 + 0.05 * -sin(time / 300));
      }
    }
    return results$;
  };
  return StartMenu;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./base":21,"std":36}],30:[function(require,module,exports){
var ref$, id, log, Base, meshMaterials, Table, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
Base = require('./base').Base;
meshMaterials = require('../palette').meshMaterials;
out$.Table = Table = (function(superclass){
  var prototype = extend$((import$(Table, superclass).displayName = 'Table', Table), superclass).prototype, constructor = Table;
  function Table(opts, gs){
    var size, texture, tableMat;
    this.opts = opts;
    Table.superclass.apply(this, arguments);
    size = 100;
    texture = THREE.ImageUtils.loadTexture('assets/marble.jpg');
    texture.repeat.set(2, 2);
    texture.wrapS = THREE.MirroredRepeatWrapping;
    texture.wrapT = THREE.MirroredRepeatWrapping;
    tableMat = new THREE.MeshPhongMaterial({
      map: texture
    });
    this.geom.table = new THREE.BoxGeometry(size, 1, size);
    this.table = new THREE.Mesh(this.geom.table, tableMat);
    this.table.receiveShadow = true;
    this.table.castShadow = true;
    this.registration.add(this.table);
    this.registration.position.y = -0.5;
  }
  return Table;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],31:[function(require,module,exports){
var ref$, id, log, pi, sin, cos, min, max, Ease, Base, meshMaterials, Title, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, pi = ref$.pi, sin = ref$.sin, cos = ref$.cos, min = ref$.min, max = ref$.max;
Ease = require('std').Ease;
Base = require('./base').Base;
meshMaterials = require('../palette').meshMaterials;
out$.Title = Title = (function(superclass){
  var blockText, prototype = extend$((import$(Title, superclass).displayName = 'Title', Title), superclass).prototype, constructor = Title;
  blockText = {
    tetris: [[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 0, 5, 6, 6, 6], [0, 1, 0, 2, 0, 0, 0, 3, 0, 4, 0, 4, 5, 6, 0, 0], [0, 1, 0, 2, 2, 0, 0, 3, 0, 4, 4, 0, 5, 6, 6, 6], [0, 1, 0, 2, 0, 0, 0, 3, 0, 4, 0, 4, 5, 0, 0, 6], [0, 1, 0, 2, 2, 2, 0, 3, 0, 4, 0, 4, 5, 6, 6, 6]],
    vrt: [[1, 0, 1, 4, 4, 6, 6, 6], [1, 0, 1, 4, 0, 4, 6, 0], [1, 0, 1, 4, 4, 0, 6, 0], [1, 0, 1, 4, 0, 4, 6, 0], [0, 1, 0, 4, 0, 4, 6, 0]]
  };
  function Title(opts, gs){
    var ref$, width, height, word, boxSize, titleOffset, i$, len$, y, row, j$, len1$, x, cell, box;
    this.opts = opts;
    Title.superclass.apply(this, arguments);
    ref$ = gs.arena, width = ref$.width, height = ref$.height;
    word = blockText.vrt;
    boxSize = 1;
    this.height = height;
    this.geom.box = new THREE.BoxGeometry(boxSize * 0.9, boxSize * 0.9, boxSize * 0.9);
    this.geom.strut = new THREE.BoxGeometry(width, height, 0.9);
    this.strut = new THREE.Mesh(this.geom.strut, meshMaterials[0]);
    this.strut.position.z = -1;
    this.strut.position.y = height / -2 + 0.5;
    titleOffset = {
      x: (word[0].length - 1) / (-2 * boxSize),
      y: height / -2 - (word.length - 1) / (-1 * boxSize)
    };
    this.title = new THREE.Object3D;
    import$(this.title.position, titleOffset);
    this.registration.add(this.title);
    ref$ = this.registration.position;
    ref$.x = 0;
    ref$.y = height - 0.5;
    for (i$ = 0, len$ = word.length; i$ < len$; ++i$) {
      y = i$;
      row = word[i$];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        cell = row[j$];
        if (cell) {
          box = new THREE.Mesh(this.geom.box, meshMaterials[cell]);
          ref$ = box.position;
          ref$.x = x / boxSize;
          ref$.y = word.length / 2 - y / boxSize;
          this.title.add(box);
        }
      }
    }
  }
  prototype.reveal = function(progress){
    var p;
    p = min(1, progress);
    this.registration.position.y = Ease.quintOut(p, this.height * 2, this.height);
    this.registration.rotation.y = Ease.expOut(p, 30, 0);
    return this.registration.rotation.x = Ease.expOut(p, -pi / 10, 0);
  };
  prototype.dance = function(time){
    return this.title.opacity = 0.5 + 0.5 * sin + time / 1000;
  };
  return Title;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"../palette":33,"./base":21,"std":36}],32:[function(require,module,exports){
var ref$, id, log, sin, cos, pi, tau, max, lerp, rand, floor, map, THREE, Palette, SceneManager, Title, Table, Frame, Brick, Lighting, GuideLines, ArenaCells, BrickPreview, ParticleEffect, StartMenu, ThreeJsRenderer, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, sin = ref$.sin, cos = ref$.cos, pi = ref$.pi, tau = ref$.tau, max = ref$.max, lerp = ref$.lerp, rand = ref$.rand, floor = ref$.floor, map = ref$.map;
THREE = require('three-js-vr-extensions');
Palette = require('./palette').Palette;
SceneManager = require('./scene-manager').SceneManager;
ref$ = require('./components'), Title = ref$.Title, Table = ref$.Table, Frame = ref$.Frame, Brick = ref$.Brick, Lighting = ref$.Lighting;
ref$ = require('./components'), GuideLines = ref$.GuideLines, ArenaCells = ref$.ArenaCells, BrickPreview = ref$.BrickPreview;
ref$ = require('./components'), ParticleEffect = ref$.ParticleEffect, StartMenu = ref$.StartMenu;
out$.ThreeJsRenderer = ThreeJsRenderer = (function(){
  ThreeJsRenderer.displayName = 'ThreeJsRenderer';
  var prototype = ThreeJsRenderer.prototype, constructor = ThreeJsRenderer;
  function ThreeJsRenderer(opts, gs){
    var arena, width, height, ref$, name, part, this$ = this;
    this.opts = opts;
    arena = gs.arena, width = arena.width, height = arena.height;
    log("New 3D Renderer:", this.opts);
    this.sceneMan = new SceneManager(this.opts);
    this.outputCanvas = this.sceneMan.domElement;
    this.parts = {
      title: new Title(this.opts, gs),
      table: new Table(this.opts, gs),
      frame: new Frame(this.opts, gs),
      lighting: new Lighting(this.opts, gs),
      guideLines: new GuideLines(this.opts, gs),
      arenaCells: new ArenaCells(this.opts, gs),
      thisBrick: new Brick(this.opts, gs),
      nextBrick: new BrickPreview(this.opts, gs),
      particles: new ParticleEffect(this.opts, gs),
      startMenu: new StartMenu(this.opts, gs)
    };
    ref$ = this.parts.lighting.position;
    ref$.y = height / 2;
    ref$.z = 7;
    this.parts.nextBrick.position.y = height + 5;
    this.parts.table.table.receiveShadow = true;
    this.parts.thisBrick.brick.castShadow = true;
    for (name in ref$ = this.parts) {
      part = ref$[name];
      this.sceneMan.add(part);
    }
    this.r = 15;
    this.y = 3;
    this.sceneMan.root.position.set(0, -this.y, -this.r);
    log(this.sceneMan.root, this.sceneMan.root.position);
    this.sceneMan.camera.lookAt(new THREE.Vector3(0, this.r, this.y));
    this.showSceneHelpers();
    this.sceneMan.controls.zeroSensor();
    document.addEventListener('mousemove', function(arg$){
      var pageX, pageY;
      pageX = arg$.pageX, pageY = arg$.pageY;
      return;
      return this$.positionDebugCamera(lerp(-1, 1, pageX / window.innerWidth), lerp(-1, 1, pageY / window.innerHeight));
    });
  }
  prototype.showSceneHelpers = function(){
    var grid, axis, light, spot;
    grid = new THREE.GridHelper(10, 1);
    axis = new THREE.AxisHelper(5);
    light = new THREE.PointLightHelper(this.parts.lighting.light, 1);
    spot = new THREE.SpotLightHelper(this.parts.lighting.spotlight, 1);
    return this.sceneMan.camera.lookAt(new THREE.Vector3(0, this.y, 0));
  };
  prototype.positionDebugCamera = function(phase, vphase){
    vphase == null && (vphase = 0);
    this.sceneMan.root.position.y = -this.y;
    return;
    this.sceneMan.camera.position.x = this.r * sin(phase);
    this.sceneMan.camera.position.y = this.y + this.r * -sin(vphase);
    this.sceneMan.camera.position.z = this.r * cos(phase);
    return this.sceneMan.camera.lookAt(new THREE.Vector3(0, 10, 0));
  };
  prototype.autoRotateDebugCamera = function(gs){
    return this.positionDebugCamera(pi / 10 * sin(gs.elapsedTime / 1000));
  };
  prototype.calculateJolt = function(gs){
    var rowsToRemove, timers, p, zz, jolt;
    rowsToRemove = gs.rowsToRemove, timers = gs.timers;
    p = timers.removalAnimation.active
      ? 1 - timers.removalAnimation.progress
      : timers.hardDropEffect.progress ? max(1 - timers.hardDropEffect.progress) : 0;
    zz = rowsToRemove.length;
    return jolt = -1 * p * (1 + zz) * gs.options.hardDropJoltAmount;
  };
  prototype.renderLineZap = function(gs){
    var arena, rowsToRemove, timers, jolt, zz, jitter, i$, len$, i, rowIx, p;
    arena = gs.arena, rowsToRemove = gs.rowsToRemove, timers = gs.timers;
    jolt = this.calculateJolt(gs);
    zz = rowsToRemove.length / 20;
    jitter = [rand(-zz, zz), rand(-zz, zz)];
    this.parts.arenaCells.showZapEffect(jolt, gs);
    this.sceneMan.root.position.x = jitter[0];
    this.sceneMan.root.position.y = jitter[1] + jolt;
    this.autoRotateDebugCamera(gs);
    if (gs.flags.rowsRemovedThisFrame) {
      this.parts.particles.resetParticles();
      for (i$ = 0, len$ = rowsToRemove.length; i$ < len$; ++i$) {
        i = i$;
        rowIx = rowsToRemove[i$];
        p = (fn$());
        this.parts.particles.revive(p - i * p / rowsToRemove.length, arena.height - rowIx - 0.5);
      }
    }
    return this.parts.particles.update(timers.removalAnimation.progress, gs.Δt);
    function fn$(){
      switch (rowsToRemove.length) {
      case 1:
        return 100;
      case 2:
        return 300;
      case 3:
        return 600;
      case 4:
        return 1200;
      }
    }
  };
  prototype.renderArena = function(gs){
    var arena, brick;
    arena = gs.arena, brick = gs.brick;
    this.parts.title.visible = false;
    this.parts.arenaCells.visible = true;
    this.parts.thisBrick.visible = true;
    this.parts.nextBrick.visible = true;
    this.parts.guideLines.visible = true;
    this.parts.startMenu.visible = false;
    this.parts.arenaCells.updateCells(arena.cells);
    this.parts.thisBrick.displayShape(brick.current);
    this.parts.thisBrick.updatePos(brick.current.pos);
    this.parts.guideLines.showBeam(brick.current);
    this.parts.nextBrick.displayShape(brick.next);
    this.parts.nextBrick.updateWiggle(gs, gs.elapsedTime);
    this.sceneMan.root.position.y = this.calculateJolt(gs);
    this.autoRotateDebugCamera(gs);
    return this.parts.particles.update(gs.timers.removalAnimation.progress, gs.Δt);
  };
  prototype.renderPauseMenu = function(gs){
    var arena, height, timers;
    arena = gs.arena, height = arena.height, timers = gs.timers;
  };
  prototype.renderStartMenu = function(gs){
    var arena, height, timers;
    arena = gs.arena, height = arena.height, timers = gs.timers;
    this.parts.title.visible = true;
    this.parts.arenaCells.visible = false;
    this.parts.guideLines.visible = false;
    this.parts.thisBrick.visible = false;
    this.parts.nextBrick.visible = false;
    this.parts.startMenu.visible = true;
    if (timers.titleRevealTimer.active) {
      this.parts.title.dance(gs.elapsedTime);
      this.parts.title.reveal(timers.titleRevealTimer.progress);
    } else {
      this.parts.title.dance(gs.elapsedTime);
    }
    this.autoRotateDebugCamera(gs);
    return this.parts.startMenu.updateSelection(gs.startMenuState, gs.elapsedTime);
  };
  prototype.renderFailScreen = function(gs){
    var arena, height, timers;
    arena = gs.arena, height = arena.height, timers = gs.timers;
  };
  prototype.render = function(gs){
    this.sceneMan.update();
    switch (gs.metagameState) {
    case 'game':
      this.renderArena(gs);
      break;
    case 'no-game':
      log('no-game');
      break;
    case 'start-menu':
      this.renderStartMenu(gs);
      break;
    case 'pause-menu':
      this.renderPauseMenu(gs);
      break;
    case 'remove-lines':
      this.renderLineZap(gs);
      break;
    case 'failure':
      this.renderFailScreen(gs);
      break;
    default:
      log("ThreeJsRenderer::render - Unknown metagamestate:", gs.metagameState);
    }
    this.parts.particles.update(1, gs.Δt);
    return this.sceneMan.render();
  };
  prototype.appendTo = function(host){
    return host.appendChild(this.outputCanvas);
  };
  return ThreeJsRenderer;
}());
},{"./components":26,"./palette":33,"./scene-manager":34,"std":36,"three-js-vr-extensions":5}],33:[function(require,module,exports){
var THREE, neutral, red, orange, green, magenta, blue, brown, yellow, cyan, tileColors, meshMaterials, color, lineMaterials, Palette, out$ = typeof exports != 'undefined' && exports || this;
THREE = require('three-js-vr-extensions');
out$.neutral = neutral = [0xffffff, 0xcccccc, 0x888888, 0x212121];
out$.red = red = [0xFF4444, 0xFF7777, 0xdd4444, 0x551111];
out$.orange = orange = [0xFFBB33, 0xFFCC88, 0xCC8800, 0x553300];
out$.green = green = [0x44ff66, 0x88ffaa, 0x22bb33, 0x115511];
out$.magenta = magenta = [0xff33ff, 0xffaaff, 0xbb22bb, 0x551155];
out$.blue = blue = [0x66bbff, 0xaaddff, 0x5588ee, 0x111155];
out$.brown = brown = [0xffbb33, 0xffcc88, 0xbb9900, 0x555511];
out$.yellow = yellow = [0xeeee11, 0xffffaa, 0xccbb00, 0x555511];
out$.cyan = cyan = [0x44ddff, 0xaae3ff, 0x00aacc, 0x006699];
out$.tileColors = tileColors = [neutral[2], red[0], orange[0], yellow[0], green[0], cyan[0], blue[2], magenta[0], 'white'];
out$.meshMaterials = meshMaterials = (function(){
  var i$, ref$, len$, results$ = [];
  for (i$ = 0, len$ = (ref$ = tileColors).length; i$ < len$; ++i$) {
    color = ref$[i$];
    results$.push(new THREE.MeshPhongMaterial({
      metal: true,
      color: color,
      specular: color,
      shininess: 100
    }));
  }
  return results$;
}());
out$.lineMaterials = lineMaterials = (function(){
  var i$, ref$, len$, results$ = [];
  for (i$ = 0, len$ = (ref$ = tileColors).length; i$ < len$; ++i$) {
    color = ref$[i$];
    results$.push(new THREE.LineBasicMaterial({
      color: color
    }));
  }
  return results$;
}());
out$.Palette = Palette = {
  neutral: neutral,
  red: red,
  orange: orange,
  yellow: yellow,
  green: green,
  cyan: cyan,
  blue: blue,
  magenta: magenta,
  tileColors: tileColors,
  meshMaterials: meshMaterials,
  lineMaterials: lineMaterials
};
},{"three-js-vr-extensions":5}],34:[function(require,module,exports){
var ref$, id, log, THREE, SceneManager, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log;
THREE = require('three-js-vr-extensions');
out$.SceneManager = SceneManager = (function(){
  SceneManager.displayName = 'SceneManager';
  var prototype = SceneManager.prototype, constructor = SceneManager;
  function SceneManager(opts){
    var aspect;
    this.opts = opts;
    this.resize = bind$(this, 'resize', prototype);
    this.zeroSensor = bind$(this, 'zeroSensor', prototype);
    this.goFullscreen = bind$(this, 'goFullscreen', prototype);
    aspect = window.innerWidth / window.innerHeight;
    this.renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(75, aspect, 1, 10000);
    this.controls = new THREE.VRControls(this.camera);
    this.root = new THREE.Object3D;
    this.effect = new THREE.VREffect(this.renderer);
    this.effect.setSize(window.innerWidth, window.innerHeight);
    window.addEventListener('keydown', this.zeroSensor, true);
    window.addEventListener('resize', this.resize, false);
    document.body.addEventListener('dblclick', this.goFullscreen);
  }
  prototype.enableShadowCasting = function(){
    this.renderer.shadowMapEnabled = true;
    this.renderer.shadowMapSoft = true;
    this.renderer.shadowCameraNear = 3;
    this.renderer.shadowCameraFar = 1000;
    this.renderer.shadowCameraFov = 50;
    this.renderer.shadowMapBias = 0.0039;
    this.renderer.shadowMapDarkness = 0.5;
    this.renderer.shadowMapWidth = 1024;
    return this.renderer.shadowMapHeight = 1024;
  };
  prototype.goFullscreen = function(){
    log('Starting fullscreen...');
    return this.effect.setFullScreen(true);
  };
  prototype.zeroSensor = function(event){
    var keyCode;
    keyCode = event.keyCode;
    event.preventDefault();
    if (keyCode === 86) {
      return this.controls.zeroSensor();
    }
  };
  prototype.resize = function(){
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    return this.effect.setSize(window.innerWidth, window.innerHeight);
  };
  prototype.update = function(){
    return this.controls.update();
  };
  prototype.render = function(){
    return this.effect.render(this.scene, this.camera);
  };
  Object.defineProperty(prototype, 'domElement', {
    get: function(){
      return this.renderer.domElement;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'root', {
    get: function(){
      return this.scene;
    },
    configurable: true,
    enumerable: true
  });
  prototype.add = function(){
    var i$, len$, obj, that, results$ = [];
    for (i$ = 0, len$ = arguments.length; i$ < len$; ++i$) {
      obj = arguments[i$];
      results$.push(this.root.add((that = obj.root) != null ? that : obj));
    }
    return results$;
  };
  return SceneManager;
}());
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{"std":36,"three-js-vr-extensions":5}],35:[function(require,module,exports){
var pow, quadIn, quadOut, cubicIn, cubicOut, quartIn, quartOut, quintIn, quintOut, expIn, expOut, out$ = typeof exports != 'undefined' && exports || this;
pow = require('std').pow;
out$.quadIn = quadIn = function(t, b, e, c){
  c == null && (c = e - b);
  return c * t * t + b;
};
out$.quadOut = quadOut = function(t, b, e, c){
  c == null && (c = e - b);
  return -c * t * (t - 2) + b;
};
out$.cubicIn = cubicIn = function(t, b, e, c){
  c == null && (c = e - b);
  return c * Math.pow(t, 3) + b;
};
out$.cubicOut = cubicOut = function(t, b, e, c){
  c == null && (c = e - b);
  return c * (Math.pow(t - 1, 3) + 1) + b;
};
out$.quartIn = quartIn = function(t, b, e, c){
  c == null && (c = e - b);
  return c * Math.pow(t, 4) + b;
};
out$.quartOut = quartOut = function(t, b, e, c){
  c == null && (c = e - b);
  return -c * (Math.pow(t - 1, 4) - 1) + b;
};
out$.quintIn = quintIn = function(t, b, e, c){
  c == null && (c = e - b);
  return c * Math.pow(t, 5) + b;
};
out$.quintOut = quintOut = function(t, b, e, c){
  c == null && (c = e - b);
  return c * (Math.pow(t - 1, 5) + 1) + b;
};
out$.expIn = expIn = function(t, b, e, c){
  c == null && (c = e - b);
  return c * pow(2, 10 * (t - 1)) + b;
};
out$.expOut = expOut = function(t, b, e, c){
  c == null && (c = e - b);
  return c * ((-pow(2, -10 * t)) + 1) + b;
};
},{"std":36}],36:[function(require,module,exports){
var id, log, flip, delay, floor, random, rand, randInt, randomFrom, addV2, filter, pi, tau, pow, sin, cos, min, max, lerp, map, join, unlines, wrap, limit, raf, that, Ease, out$ = typeof exports != 'undefined' && exports || this;
out$.id = id = function(it){
  return it;
};
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.flip = flip = function(λ){
  return function(a, b){
    return λ(b, a);
  };
};
out$.delay = delay = flip(setTimeout);
out$.floor = floor = Math.floor;
out$.random = random = Math.random;
out$.rand = rand = function(min, max){
  return min + random() * (max - min);
};
out$.randInt = randInt = function(min, max){
  return min + floor(random() * (max - min));
};
out$.randomFrom = randomFrom = function(list){
  return list[rand(0, list.length - 1)];
};
out$.addV2 = addV2 = function(a, b){
  return [a[0] + b[0], a[1] + b[1]];
};
out$.filter = filter = curry$(function(λ, list){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
    x = list[i$];
    if (λ(x)) {
      results$.push(x);
    }
  }
  return results$;
});
out$.pi = pi = Math.PI;
out$.tau = tau = pi * 2;
out$.pow = pow = Math.pow;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.min = min = Math.min;
out$.max = max = Math.max;
out$.lerp = lerp = curry$(function(min, max, p){
  return min + p * (max - min);
});
out$.map = map = curry$(function(λ, l){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = l.length; i$ < len$; ++i$) {
    x = l[i$];
    results$.push(λ(x));
  }
  return results$;
});
out$.join = join = curry$(function(char, str){
  return str.join(char);
});
out$.unlines = unlines = join("\n");
out$.wrap = wrap = curry$(function(min, max, n){
  if (n > max) {
    return min;
  } else if (n < min) {
    return max;
  } else {
    return n;
  }
});
out$.limit = limit = curry$(function(min, max, n){
  if (n > max) {
    return max;
  } else if (n < min) {
    return min;
  } else {
    return n;
  }
});
out$.raf = raf = (that = window.requestAnimationFrame) != null
  ? that
  : (that = window.webkitRequestAnimationFrame) != null
    ? that
    : (that = window.mozRequestAnimationFrame) != null
      ? that
      : function(λ){
        return setTimeout(λ, 1000 / 60);
      };
out$.Ease = Ease = require('./easing');
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./easing":35}],37:[function(require,module,exports){
var square, zig, zag, left, right, tee, tetris, all, out$ = typeof exports != 'undefined' && exports || this;
out$.square = square = [[[0, 0, 0], [0, 1, 1], [0, 1, 1]]];
out$.zig = zig = [[[0, 0, 0], [2, 2, 0], [0, 2, 2]], [[0, 2, 0], [2, 2, 0], [2, 0, 0]]];
out$.zag = zag = [[[0, 0, 0], [0, 3, 3], [3, 3, 0]], [[3, 0, 0], [3, 3, 0], [0, 3, 0]]];
out$.left = left = [[[0, 0, 0], [4, 4, 4], [4, 0, 0]], [[4, 4, 0], [0, 4, 0], [0, 4, 0]], [[0, 0, 4], [4, 4, 4], [0, 0, 0]], [[0, 4, 0], [0, 4, 0], [0, 4, 4]]];
out$.right = right = [[[0, 0, 0], [5, 5, 5], [0, 0, 5]], [[0, 5, 0], [0, 5, 0], [5, 5, 0]], [[5, 0, 0], [5, 5, 5], [0, 0, 0]], [[0, 5, 5], [0, 5, 0], [0, 5, 0]]];
out$.tee = tee = [[[0, 0, 0], [6, 6, 6], [0, 6, 0]], [[0, 6, 0], [6, 6, 0], [0, 6, 0]], [[0, 6, 0], [6, 6, 6], [0, 0, 0]], [[0, 6, 0], [0, 6, 6], [0, 6, 0]]];
out$.tetris = tetris = [[[0, 0, 0, 0], [0, 0, 0, 0], [7, 7, 7, 7]], [[0, 7, 0, 0], [0, 7, 0, 0], [0, 7, 0, 0], [0, 7, 0, 0]]];
out$.all = all = [
  {
    type: 'square',
    shapes: square
  }, {
    type: 'zig',
    shapes: zig
  }, {
    type: 'zag',
    shapes: zag
  }, {
    type: 'left',
    shapes: left
  }, {
    type: 'right',
    shapes: right
  }, {
    type: 'tee',
    shapes: tee
  }, {
    type: 'tetris',
    shapes: tetris
  }
];
},{}],38:[function(require,module,exports){
var ref$, id, log, wrap, menuData, limiter, primeGameState, chooseOption, selectPrevItem, selectNextItem, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, wrap = ref$.wrap;
menuData = [
  {
    state: 'restart',
    text: "Restart"
  }, {
    state: 'go-back',
    text: "Back to Main"
  }
];
limiter = wrap(0, menuData.length - 1);
out$.primeGameState = primeGameState = function(gamestate){
  return gamestate.failMenuState = {
    currentIndex: 0,
    currentState: menuData[0],
    menuData: menuData
  };
};
out$.chooseOption = chooseOption = function(fms, index){
  fms.currentIndex = limiter(index);
  return fms.currentState = menuData[fms.currentIndex];
};
out$.selectPrevItem = selectPrevItem = function(fms){
  var currentIndex;
  currentIndex = fms.currentIndex;
  return chooseOption(fms, currentIndex - 1);
};
out$.selectNextItem = selectNextItem = function(fms){
  var currentIndex;
  currentIndex = fms.currentIndex;
  return chooseOption(fms, currentIndex + 1);
};
},{"std":36}],39:[function(require,module,exports){
var ref$, id, log, addV2, randInt, wrap, randomFrom, BrickShapes, canDrop, canMove, canRotate, collides, copyBrickToArena, topIsReached, isComplete, newBrick, spawnNewBrick, dropArenaRow, removeRows, clearArena, getShapeOfRotation, normaliseRotation, rotateBrick, computeScore, resetScore, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, addV2 = ref$.addV2, randInt = ref$.randInt, wrap = ref$.wrap, randomFrom = ref$.randomFrom;
BrickShapes = require('./data/brick-shapes');
out$.canDrop = canDrop = function(brick, arena){
  return canMove(brick, [0, 1], arena);
};
out$.canMove = canMove = function(brick, move, arena){
  var newPos;
  newPos = addV2(brick.pos, move);
  return collides(newPos, brick.shape, arena);
};
out$.canRotate = canRotate = function(brick, dir, arena){
  var newShape;
  newShape = getShapeOfRotation(brick, brick.rotation + dir);
  return collides(brick.pos, newShape, arena);
};
out$.collides = collides = function(pos, shape, arg$){
  var cells, width, height, i$, ref$, len$, y, v, j$, ref1$, len1$, x, u;
  cells = arg$.cells, width = arg$.width, height = arg$.height;
  for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
    y = i$;
    v = ref$[i$];
    for (j$ = 0, len1$ = (ref1$ = (fn1$())).length; j$ < len1$; ++j$) {
      x = j$;
      u = ref1$[j$];
      if (shape[y][x] > 0) {
        if (v >= 0) {
          if (v >= height || u >= width || u < 0 || cells[v][u]) {
            return false;
          }
        }
      }
    }
  }
  return true;
  function fn$(){
    var i$, to$, results$ = [];
    for (i$ = pos[1], to$ = pos[1] + shape.length; i$ < to$; ++i$) {
      results$.push(i$);
    }
    return results$;
  }
  function fn1$(){
    var i$, to$, results$ = [];
    for (i$ = pos[0], to$ = pos[0] + shape[0].length; i$ < to$; ++i$) {
      results$.push(i$);
    }
    return results$;
  }
};
out$.copyBrickToArena = copyBrickToArena = function(arg$, arg1$){
  var pos, shape, cells, i$, ref$, len$, y, v, lresult$, j$, ref1$, len1$, x, u, results$ = [];
  pos = arg$.pos, shape = arg$.shape;
  cells = arg1$.cells;
  for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
    y = i$;
    v = ref$[i$];
    lresult$ = [];
    for (j$ = 0, len1$ = (ref1$ = (fn1$())).length; j$ < len1$; ++j$) {
      x = j$;
      u = ref1$[j$];
      if (shape[y][x] && v >= 0) {
        lresult$.push(cells[v][u] = shape[y][x]);
      }
    }
    results$.push(lresult$);
  }
  return results$;
  function fn$(){
    var i$, to$, results$ = [];
    for (i$ = pos[1], to$ = pos[1] + shape.length; i$ < to$; ++i$) {
      results$.push(i$);
    }
    return results$;
  }
  function fn1$(){
    var i$, to$, results$ = [];
    for (i$ = pos[0], to$ = pos[0] + shape[0].length; i$ < to$; ++i$) {
      results$.push(i$);
    }
    return results$;
  }
};
out$.topIsReached = topIsReached = function(arg$){
  var cells, i$, ref$, len$, cell;
  cells = arg$.cells;
  for (i$ = 0, len$ = (ref$ = cells[0]).length; i$ < len$; ++i$) {
    cell = ref$[i$];
    if (cell) {
      return true;
    }
  }
  return false;
};
out$.isComplete = isComplete = function(row){
  var i$, len$, cell;
  for (i$ = 0, len$ = row.length; i$ < len$; ++i$) {
    cell = row[i$];
    if (!cell) {
      return false;
    }
  }
  return true;
};
out$.newBrick = newBrick = function(ix){
  ix == null && (ix = randInt(0, BrickShapes.all.length));
  return {
    rotation: 0,
    shape: BrickShapes.all[ix].shapes[0],
    type: BrickShapes.all[ix].type,
    pos: [0, 0]
  };
};
out$.spawnNewBrick = spawnNewBrick = function(gs){
  gs.brick.current = gs.brick.next;
  gs.brick.current.pos = [4, -1];
  return gs.brick.next = newBrick();
};
out$.dropArenaRow = dropArenaRow = function(arg$, rowIx){
  var cells;
  cells = arg$.cells;
  cells.splice(rowIx, 1);
  return cells.unshift(repeatArray$([0], cells[0].length));
};
out$.removeRows = removeRows = function(rows, arena){
  var i$, len$, rowIx, results$ = [];
  for (i$ = 0, len$ = rows.length; i$ < len$; ++i$) {
    rowIx = rows[i$];
    results$.push(dropArenaRow(arena, rowIx));
  }
  return results$;
};
out$.clearArena = clearArena = function(arena){
  var i$, ref$, len$, row, lresult$, j$, len1$, i, cell, results$ = [];
  for (i$ = 0, len$ = (ref$ = arena.cells).length; i$ < len$; ++i$) {
    row = ref$[i$];
    lresult$ = [];
    for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
      i = j$;
      cell = row[j$];
      lresult$.push(row[i] = 0);
    }
    results$.push(lresult$);
  }
  return results$;
};
out$.getShapeOfRotation = getShapeOfRotation = function(brick, rotation){
  rotation = normaliseRotation(brick, rotation);
  return BrickShapes[brick.type][rotation];
};
out$.normaliseRotation = normaliseRotation = function(arg$, rotation){
  var type;
  type = arg$.type;
  return wrap(0, BrickShapes[type].length - 1, rotation);
};
out$.rotateBrick = rotateBrick = function(brick, dir){
  var rotation, type;
  rotation = brick.rotation, type = brick.type;
  brick.rotation = normaliseRotation(brick, brick.rotation + dir);
  return brick.shape = getShapeOfRotation(brick, brick.rotation);
};
out$.computeScore = computeScore = function(score, rows, lvl){
  lvl == null && (lvl = 0);
  switch (rows.length) {
  case 1:
    score.singles += 1;
    score.points += 40 * (lvl + 1);
    break;
  case 2:
    score.doubles += 1;
    score.points += 100 * (lvl + 1);
    break;
  case 3:
    score.triples += 1;
    score.points += 300 * (lvl + 1);
    break;
  case 4:
    score.tetris += 1;
    score.points += 1200 * (lvl + 1);
  }
  return score.lines += rows.length;
};
out$.resetScore = resetScore = function(score){
  return import$(score, {
    points: 0,
    lines: 0,
    singles: 0,
    doubles: 0,
    triples: 0,
    tetris: 0
  });
};
function repeatArray$(arr, n){
  for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
    if (n & 1) r.push.apply(r, arr);
  return r;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./data/brick-shapes":37,"std":36}],40:[function(require,module,exports){
var ref$, id, log, rand, randomFrom, Core, StartMenu, FailMenu, TetrisGame, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, rand = ref$.rand;
randomFrom = require('std').randomFrom;
Core = require('./game-core');
StartMenu = require('./start-menu');
FailMenu = require('./fail-menu');
out$.TetrisGame = TetrisGame = (function(){
  TetrisGame.displayName = 'TetrisGame';
  var prototype = TetrisGame.prototype, constructor = TetrisGame;
  function TetrisGame(gameState){
    log("TetrisGame::new");
    StartMenu.primeGameState(gameState);
    FailMenu.primeGameState(gameState);
  }
  prototype.beginNewGame = function(gameState){
    (function(){
      Core.clearArena(this.arena);
      this.brick.next = Core.newBrick();
      this.brick.next.pos = [3, -1];
      this.brick.current = Core.newBrick();
      this.brick.current.pos = [3, -1];
      Core.resetScore(this.score);
      this.metagameState = 'game';
      this.timers.dropTimer.reset();
      this.timers.keyRepeatTimer.reset();
    }.call(gameState));
    return gameState;
  };
  prototype.advanceRemovalAnimation = function(gs){
    var timers, animationState;
    timers = gs.timers, animationState = gs.animationState;
    if (timers.removalAnimation.expired) {
      Core.removeRows(gs.rowsToRemove, gs.arena);
      gs.rowsToRemove = [];
      return gs.metagameState = 'game';
    }
  };
  prototype.handleKeyInput = function(gs){
    var brick, arena, inputState, lresult$, ref$, key, action, amt, i, pos, i$, to$, y, lresult1$, j$, to1$, x, results$ = [];
    brick = gs.brick, arena = gs.arena, inputState = gs.inputState;
    while (inputState.length) {
      lresult$ = [];
      ref$ = inputState.shift(), key = ref$.key, action = ref$.action;
      if (action === 'down') {
        switch (key) {
        case 'left':
          if (Core.canMove(brick.current, [-1, 0], arena)) {
            lresult$.push(brick.current.pos[0] -= 1);
          }
          break;
        case 'right':
          if (Core.canMove(brick.current, [1, 0], arena)) {
            lresult$.push(brick.current.pos[0] += 1);
          }
          break;
        case 'down':
          lresult$.push(gs.forceDownMode = true);
          break;
        case 'up':
        case 'cw':
          if (Core.canRotate(brick.current, 1, arena)) {
            lresult$.push(Core.rotateBrick(brick.current, 1));
          }
          break;
        case 'ccw':
          if (Core.canRotate(brick.current, -1, arena)) {
            lresult$.push(Core.rotateBrick(brick.current, -1));
          }
          break;
        case 'hard-drop':
          gs.hardDropDistance = 0;
          while (Core.canDrop(brick.current, arena)) {
            gs.hardDropDistance += 1;
            brick.current.pos[1] += 1;
          }
          gs.inputState = [];
          gs.timers.hardDropEffect.runFor(gs.hardDropDistance * 10);
          lresult$.push(gs.timers.dropTimer.timeToExpiry = -1);
          break;
        case 'debug-1':
        case 'debug-2':
        case 'debug-3':
        case 'debug-4':
          amt = parseInt(key.replace(/\D/g, ''));
          log("DEBUG: Destroying rows:", amt);
          log(gs.rowsToRemove = (fn$()));
          gs.metagameState = 'remove-lines';
          gs.flags.rowsRemovedThisFrame = true;
          lresult$.push(gs.timers.removalAnimation.runFor * 10);
          break;
        case 'debug-5':
          pos = gs.brick.current.pos;
          gs.brick.current = Core.newBrick(6);
          import$(gs.brick.current.pos, pos);
          for (i$ = arena.height - 1, to$ = arena.height - 4; i$ >= to$; --i$) {
            y = i$;
            lresult1$ = [];
            for (j$ = 0, to1$ = arena.width - 2; j$ <= to1$; ++j$) {
              x = j$;
              lresult1$.push(arena.cells[y][x] = 1);
            }
            lresult$.push(lresult1$);
          }
        }
      } else if (action === 'up') {
        switch (key) {
        case 'down':
          lresult$.push(gs.forceDownMode = false);
        }
      }
      results$.push(lresult$);
    }
    return results$;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = gs.arena.height - amt, to$ = gs.arena.height - 1; i$ <= to$; ++i$) {
        i = i$;
        results$.push(i);
      }
      return results$;
    }
  };
  prototype.clearOneFrameFlags = function(gs){
    return gs.flags.rowsRemovedThisFrame = false;
  };
  prototype.advanceGame = function(gs){
    var brick, arena, inputState, completeRows, res$, i$, ref$, len$, ix, row;
    brick = gs.brick, arena = gs.arena, inputState = gs.inputState;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = arena.cells).length; i$ < len$; ++i$) {
      ix = i$;
      row = ref$[i$];
      if (Core.isComplete(row)) {
        res$.push(ix);
      }
    }
    completeRows = res$;
    if (completeRows.length) {
      gs.metagameState = 'remove-lines';
      gs.flags.rowsRemovedThisFrame = true;
      gs.timers.removalAnimation.runFor(completeRows.length * 10);
      gs.rowsToRemove = completeRows;
      Core.computeScore(gs.score, gs.rowsToRemove);
      return;
    }
    if (Core.topIsReached(arena)) {
      this.revealFailScreen(gs);
      return;
    }
    if (gs.forceDownMode) {
      gs.timers.dropTimer.timeToExpiry = 0;
    }
    if (gs.timers.dropTimer.expired) {
      gs.timers.dropTimer.resetWithRemainder();
      if (Core.canDrop(brick.current, arena)) {
        brick.current.pos[1] += 1;
      } else {
        Core.copyBrickToArena(brick.current, arena);
        Core.spawnNewBrick(gs);
        gs.forceDownMode = false;
      }
    }
    return this.handleKeyInput(gs);
  };
  prototype.showStartScreen = function(gs){
    var inputState, startMenuState, ref$, key, action, results$ = [];
    inputState = gs.inputState, startMenuState = gs.startMenuState;
    while (inputState.length) {
      ref$ = inputState.shift(), key = ref$.key, action = ref$.action;
      if (action === 'down') {
        switch (key) {
        case 'up':
          results$.push(StartMenu.selectPrevItem(startMenuState));
          break;
        case 'down':
          results$.push(StartMenu.selectNextItem(startMenuState));
          break;
        case 'action-a':
        case 'confirm':
          if (startMenuState.currentState.state === 'start-game') {
            results$.push(this.beginNewGame(gs));
          }
        }
      } else if (action === 'up') {
        switch (key) {
        case 'down':
          results$.push(gs.forceDownMode = false);
        }
      }
    }
    return results$;
  };
  prototype.revealStartScreen = function(gs){
    var timers;
    timers = gs.timers;
    timers.titleRevealTimer.reset();
    return gs.metagameState = 'start-menu';
  };
  prototype.showFailScreen = function(gs, Δt){
    var inputState, failMenuState, ref$, key, action, results$ = [];
    inputState = gs.inputState, failMenuState = gs.failMenuState;
    while (inputState.length) {
      ref$ = inputState.shift(), key = ref$.key, action = ref$.action;
      if (action === 'down') {
        switch (key) {
        case 'up':
          results$.push(FailMenu.selectPrevItem(failMenuState));
          break;
        case 'down':
          results$.push(FailMenu.selectNextItem(failMenuState));
          break;
        case 'action-a':
        case 'confirm':
          log(failMenuState.currentState.state);
          if (failMenuState.currentState.state === 'restart') {
            results$.push(this.beginNewGame(gs));
          } else if (failMenuState.currentState.state === 'go-back') {
            results$.push(this.revealStartScreen(gs));
          }
          break;
        case 'action-a':
        case 'confirm':
          results$.push(this.beginNewGame(gs));
        }
      }
    }
    return results$;
  };
  prototype.revealFailScreen = function(gs){
    gs.timers.failureRevealTimer.reset();
    return gs.metagameState = 'failure';
  };
  prototype.runFrame = function(gameState, Δt){
    var metagameState;
    metagameState = gameState.metagameState;
    this.clearOneFrameFlags(gameState);
    switch (metagameState) {
    case 'failure':
      this.showFailScreen.apply(this, arguments);
      break;
    case 'game':
      this.advanceGame.apply(this, arguments);
      break;
    case 'no-game':
      this.revealStartScreen.apply(this, arguments);
      break;
    case 'start-menu':
      this.showStartScreen.apply(this, arguments);
      break;
    case 'remove-lines':
      this.advanceRemovalAnimation.apply(this, arguments);
      break;
    default:
      console.debug('Unknown metagame-state:', metagameState);
    }
    return gameState;
  };
  return TetrisGame;
}());
module.exports = {
  TetrisGame: TetrisGame
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./fail-menu":38,"./game-core":39,"./start-menu":41,"std":36}],41:[function(require,module,exports){
var ref$, id, log, wrap, menuData, limiter, primeGameState, chooseOption, selectPrevItem, selectNextItem, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, wrap = ref$.wrap;
menuData = [
  {
    state: 'start-game',
    text: "Start Game"
  }, {
    state: 'nothing',
    text: "Don't Start Game"
  }
];
limiter = wrap(0, menuData.length - 1);
out$.primeGameState = primeGameState = function(gamestate){
  return gamestate.startMenuState = {
    currentIndex: 0,
    currentState: menuData[0],
    menuData: menuData
  };
};
out$.chooseOption = chooseOption = function(sms, index){
  sms.currentIndex = limiter(index);
  return sms.currentState = menuData[sms.currentIndex];
};
out$.selectPrevItem = selectPrevItem = function(sms){
  var currentIndex;
  currentIndex = sms.currentIndex;
  return chooseOption(sms, currentIndex - 1);
};
out$.selectNextItem = selectNextItem = function(sms){
  var currentIndex;
  currentIndex = sms.currentIndex;
  return chooseOption(sms, currentIndex + 1);
};
},{"std":36}],42:[function(require,module,exports){
var ref$, id, log, floor, asciiProgressBar, Timer, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('std'), id = ref$.id, log = ref$.log, floor = ref$.floor;
asciiProgressBar = curry$(function(len, val, max){
  var valueChars, emptyChars;
  val = val > max ? max : val;
  valueChars = floor(len * val / max);
  emptyChars = len - valueChars;
  return repeatString$("▒", valueChars) + repeatString$("-", emptyChars);
});
out$.Timer = Timer = (function(){
  Timer.displayName = 'Timer';
  var allTimers, progbar, ref$, TIMER_ACTIVE, TIMER_EXPIRED, prototype = Timer.prototype, constructor = Timer;
  allTimers = [];
  progbar = asciiProgressBar(21);
  ref$ = [0, 1], TIMER_ACTIVE = ref$[0], TIMER_EXPIRED = ref$[1];
  function Timer(targetTime, begin){
    this.targetTime = targetTime != null ? targetTime : 1000;
    begin == null && (begin = false);
    this.currentTime = 0;
    this.state = begin ? TIMER_ACTIVE : TIMER_EXPIRED;
    this.active = begin;
    this.expired = !begin;
    allTimers.push(this);
  }
  Object.defineProperty(prototype, 'active', {
    get: function(){
      return this.state === TIMER_ACTIVE;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'expired', {
    get: function(){
      return this.state === TIMER_EXPIRED;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'progress', {
    get: function(){
      return this.currentTime / this.targetTime;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'timeToExpiry', {
    get: function(){
      return this.targetTime - this.currentTime;
    },
    set: function(expTime){
      this.currentTime = this.targetTime - expTime;
    },
    configurable: true,
    enumerable: true
  });
  prototype.update = function(Δt){
    if (this.active) {
      this.currentTime += Δt;
      if (this.currentTime >= this.targetTime) {
        return this.state = TIMER_EXPIRED;
      }
    }
  };
  prototype.reset = function(time){
    time == null && (time = this.targetTime);
    this.currentTime = 0;
    this.targetTime = time;
    return this.state = TIMER_ACTIVE;
  };
  prototype.resetWithRemainder = function(time){
    time == null && (time = this.targetTime);
    this.currentTime = this.currentTime - time;
    this.targetTime = time;
    return this.state = TIMER_ACTIVE;
  };
  prototype.stop = function(){
    this.currentTime = 0;
    return this.state = TIMER_EXPIRED;
  };
  prototype.destroy = function(){
    return allTimers.splice(allTimers.indexOf(this), 1);
  };
  prototype.runFor = function(time){
    this.timeToExpiry = time;
    return this.state = TIMER_ACTIVE;
  };
  prototype.toString = function(){
    return "TIMER: " + this.targetTime + "\nSTATE: " + this.state + " (" + this.active + "|" + this.expired + ")\n" + progbar(this.currentTime, this.targetTime);
  };
  Timer.updateAll = function(Δt){
    return allTimers.map(function(it){
      return it.update(Δt);
    });
  };
  return Timer;
}());
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"std":36}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlc1xcYnJvd3NlcmlmeVxcbm9kZV9tb2R1bGVzXFxicm93c2VyLXBhY2tcXF9wcmVsdWRlLmpzIiwiLi9zcmMvaW5kZXgubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvbGliL21venZyL1N0ZXJlb0VmZmVjdC5qcyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9saWIvbW96dnIvVlJDb250cm9scy5qcyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9saWIvbW96dnIvVlJFZmZlY3QuanMiLCJsaWIvbW96dnIvaW5kZXguanMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvbGliL3RocmVlLm1pbi5qcyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvZGVidWctb3V0cHV0LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9mcmFtZS1kcml2ZXIubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL2dhbWUtc3RhdGUubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL2lucHV0LWhhbmRsZXIubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy9jYW52YXMvYXJlbmEubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy9jYW52YXMvYmxpdHRlci5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL2NhbnZhcy9icmljay5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL2NhbnZhcy9pbmRleC5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL2NhbnZhcy9uZXh0LWJyaWNrLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvY2FudmFzL3BhbGV0dGUubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy9jYW52YXMvc3RhcnQtbWVudS5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL2NhbnZhcy90ZXh0LWJsaXR0ZXIubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy9kb20vaW5kZXgubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy90aHJlZWpzL2NvbXBvbmVudHMvYXJlbmEtY2VsbHMubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3JlbmRlcmVycy90aHJlZWpzL2NvbXBvbmVudHMvYmFzZS5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL3RocmVlanMvY29tcG9uZW50cy9icmljay1wcmV2aWV3LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL2JyaWNrLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL2ZyYW1lLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL2d1aWRlLWxpbmVzLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL2luZGV4LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL2xpZ2h0aW5nLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL3BhcnRpY2xlLWVmZmVjdC5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL3RocmVlanMvY29tcG9uZW50cy9zdGFydC1tZW51LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL3RhYmxlLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9jb21wb25lbnRzL3RpdGxlLmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy9yZW5kZXJlcnMvdGhyZWVqcy9pbmRleC5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL3RocmVlanMvcGFsZXR0ZS5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvcmVuZGVyZXJzL3RocmVlanMvc2NlbmUtbWFuYWdlci5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvc3RkL2Vhc2luZy5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvc3RkL2luZGV4LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy90ZXRyaXMtZ2FtZS9kYXRhL2JyaWNrLXNoYXBlcy5scyIsIkM6L2N5Z3dpbjY0L2hvbWUvSm9yZGFuL1Byb2plY3RzL3NpbXBsZS1saXZlc2NyaXB0LXRldHJpcy9zcmMvdGV0cmlzLWdhbWUvZmFpbC1tZW51LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy90ZXRyaXMtZ2FtZS9nYW1lLWNvcmUubHMiLCJDOi9jeWd3aW42NC9ob21lL0pvcmRhbi9Qcm9qZWN0cy9zaW1wbGUtbGl2ZXNjcmlwdC10ZXRyaXMvc3JjL3RldHJpcy1nYW1lL2luZGV4LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy90ZXRyaXMtZ2FtZS9zdGFydC1tZW51LmxzIiwiQzovY3lnd2luNjQvaG9tZS9Kb3JkYW4vUHJvamVjdHMvc2ltcGxlLWxpdmVzY3JpcHQtdGV0cmlzL3NyYy90aW1lci5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3JQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaDJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciByZWYkLCBsb2csIGRlbGF5LCBGcmFtZURyaXZlciwgSW5wdXRIYW5kbGVyLCBUaW1lciwgVGV0cmlzR2FtZSwgR2FtZVN0YXRlLCBEb21SZW5kZXJlciwgQ2FudmFzUmVuZGVyZXIsIFRocmVlSnNSZW5kZXJlciwgRGVidWdPdXRwdXQ7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGxvZyA9IHJlZiQubG9nLCBkZWxheSA9IHJlZiQuZGVsYXk7XG5GcmFtZURyaXZlciA9IHJlcXVpcmUoJy4vZnJhbWUtZHJpdmVyJykuRnJhbWVEcml2ZXI7XG5JbnB1dEhhbmRsZXIgPSByZXF1aXJlKCcuL2lucHV0LWhhbmRsZXInKS5JbnB1dEhhbmRsZXI7XG5UaW1lciA9IHJlcXVpcmUoJy4vdGltZXInKS5UaW1lcjtcblRldHJpc0dhbWUgPSByZXF1aXJlKCcuL3RldHJpcy1nYW1lJykuVGV0cmlzR2FtZTtcbkdhbWVTdGF0ZSA9IHJlcXVpcmUoJy4vZ2FtZS1zdGF0ZScpLkdhbWVTdGF0ZTtcbkRvbVJlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMvZG9tJykuRG9tUmVuZGVyZXI7XG5DYW52YXNSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzL2NhbnZhcycpLkNhbnZhc1JlbmRlcmVyO1xuVGhyZWVKc1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMvdGhyZWVqcycpLlRocmVlSnNSZW5kZXJlcjtcbkRlYnVnT3V0cHV0ID0gcmVxdWlyZSgnLi9kZWJ1Zy1vdXRwdXQnKS5EZWJ1Z091dHB1dDtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpe1xuICB2YXIgZ2FtZU9wdHMsIHJlbmRlck9wdHMsIGlucHV0SGFuZGxlciwgZ2FtZVN0YXRlLCB0ZXRyaXNHYW1lLCByZW5kZXJlcnMsIGkkLCBsZW4kLCByZW5kZXJlciwgZGVidWdPdXRwdXQsIHRlc3RFYXNpbmcsIGZyYW1lRHJpdmVyO1xuICBnYW1lT3B0cyA9IHtcbiAgICB0aWxlV2lkdGg6IDEwLFxuICAgIHRpbGVIZWlnaHQ6IDE4LFxuICAgIHRpbWVGYWN0b3I6IDEwXG4gIH07XG4gIHJlbmRlck9wdHMgPSB7XG4gICAgejogMjBcbiAgfTtcbiAgaW5wdXRIYW5kbGVyID0gbmV3IElucHV0SGFuZGxlcjtcbiAgZ2FtZVN0YXRlID0gbmV3IEdhbWVTdGF0ZShnYW1lT3B0cyk7XG4gIHRldHJpc0dhbWUgPSBuZXcgVGV0cmlzR2FtZShnYW1lU3RhdGUpO1xuICByZW5kZXJlcnMgPSBbbmV3IFRocmVlSnNSZW5kZXJlcihyZW5kZXJPcHRzLCBnYW1lU3RhdGUpXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSByZW5kZXJlcnMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICByZW5kZXJlciA9IHJlbmRlcmVyc1tpJF07XG4gICAgcmVuZGVyZXIuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG4gIH1cbiAgZGVidWdPdXRwdXQgPSBuZXcgRGVidWdPdXRwdXQ7XG4gIElucHV0SGFuZGxlci5vbigxOTIsIGZ1bmN0aW9uKCl7XG4gICAgaWYgKGZyYW1lRHJpdmVyLnN0YXRlLnJ1bm5pbmcpIHtcbiAgICAgIHJldHVybiBmcmFtZURyaXZlci5zdG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmcmFtZURyaXZlci5zdGFydCgpO1xuICAgIH1cbiAgfSk7XG4gIHRlc3RFYXNpbmcgPSBmdW5jdGlvbigpe1xuICAgIHZhciBFYXNlLCBpJCwgcmVmJCwgbGVuJCwgZWwsIGVhc2VOYW1lLCBlYXNlLCBscmVzdWx0JCwgY252LCBjdHgsIGksIHAsIHJlc3VsdHMkID0gW107XG4gICAgRWFzZSA9IHJlcXVpcmUoJ3N0ZCcpLkVhc2U7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcycpKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgZWwgPSByZWYkW2kkXTtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICAgIGZvciAoZWFzZU5hbWUgaW4gRWFzZSkge1xuICAgICAgZWFzZSA9IEVhc2VbZWFzZU5hbWVdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGNudiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgY252LndpZHRoID0gMjAwO1xuICAgICAgY252LmhlaWdodCA9IDIwMDtcbiAgICAgIGNudi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3doaXRlJztcbiAgICAgIGNudi5zdHlsZS5ib3JkZXJMZWZ0ID0gXCIzcHggc29saWQgYmxhY2tcIjtcbiAgICAgIGN0eCA9IGNudi5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjbnYpO1xuICAgICAgY3R4LmZvbnQgPSBcIjE0cHggbW9ub3NwYWNlXCI7XG4gICAgICBjdHguZmlsbFRleHQoZWFzZU5hbWUsIDIsIDE2LCAyMDApO1xuICAgICAgZm9yIChpJCA9IDA7IGkkIDw9IDEwMDsgKytpJCkge1xuICAgICAgICBpID0gaSQ7XG4gICAgICAgIHAgPSBpIC8gMTAwO1xuICAgICAgICBscmVzdWx0JC5wdXNoKGN0eC5maWxsUmVjdCgyICogaSwgMjAwIC0gZWFzZShwLCAwLCAyMDApLCAyLCAyKSk7XG4gICAgICB9XG4gICAgICByZXN1bHRzJC5wdXNoKGxyZXN1bHQkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICBmcmFtZURyaXZlciA9IG5ldyBGcmFtZURyaXZlcihmdW5jdGlvbijOlHQsIHRpbWUsIGZyYW1lKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIHJlbmRlcmVyO1xuICAgIGdhbWVTdGF0ZS7OlHQgPSDOlHQgLyBnYW1lT3B0cy50aW1lRmFjdG9yO1xuICAgIGdhbWVTdGF0ZS5lbGFwc2VkVGltZSA9IHRpbWUgLyBnYW1lT3B0cy50aW1lRmFjdG9yO1xuICAgIGdhbWVTdGF0ZS5lbGFwc2VkRnJhbWVzID0gZnJhbWU7XG4gICAgZ2FtZVN0YXRlLmlucHV0U3RhdGUgPSBpbnB1dEhhbmRsZXIuY2hhbmdlc1NpbmNlTGFzdEZyYW1lKCk7XG4gICAgVGltZXIudXBkYXRlQWxsKM6UdCAvIGdhbWVPcHRzLnRpbWVGYWN0b3IpO1xuICAgIGdhbWVTdGF0ZSA9IHRldHJpc0dhbWUucnVuRnJhbWUoZ2FtZVN0YXRlLCDOlHQpO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSByZW5kZXJlcnMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICByZW5kZXJlciA9IHJlZiRbaSRdO1xuICAgICAgcmVuZGVyZXIucmVuZGVyKGdhbWVTdGF0ZSwgcmVuZGVyT3B0cyk7XG4gICAgfVxuICAgIGlmIChkZWJ1Z091dHB1dCkge1xuICAgICAgcmV0dXJuIGRlYnVnT3V0cHV0LnJlbmRlcihnYW1lU3RhdGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZWxheSgxMDAwLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmcmFtZURyaXZlci5zdGFydCgpO1xuICB9KTtcbn0pOyIsIi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob2QgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9kIGFyb2RpYyAvIGh0dHA6Ly9hbGVrc2FuZGFycm9kaWMuY29tL1xuICovXG5cblRIUkVFLlN0ZXJlb0VmZmVjdCA9IGZ1bmN0aW9uICggcmVuZGVyZXIgKSB7XG5cblx0Ly8gQVBJXG5cblx0dGhpcy5zZXBhcmF0aW9uID0gMztcblxuXHQvLyBpbnRlcm5hbHNcblxuXHR2YXIgX3dpZHRoLCBfaGVpZ2h0O1xuXG5cdHZhciBfcG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHR2YXIgX3F1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuXHR2YXIgX3NjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHR2YXIgX2NhbWVyYUwgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0dmFyIF9jYW1lcmFSID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cblx0Ly8gaW5pdGlhbGl6YXRpb25cblxuXHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRfd2lkdGggPSB3aWR0aCAvIDI7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdHJlbmRlcmVyLnNldFNpemUoIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9O1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0c2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggY2FtZXJhLnBhcmVudCA9PT0gdW5kZWZpbmVkICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRjYW1lcmEubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24sIF9xdWF0ZXJuaW9uLCBfc2NhbGUgKTtcblxuXHRcdC8vIGxlZnRcblxuXHRcdF9jYW1lcmFMLmZvdiA9IGNhbWVyYS5mb3Y7XG5cdFx0X2NhbWVyYUwuYXNwZWN0ID0gMC41ICogY2FtZXJhLmFzcGVjdDtcblx0XHRfY2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0X2NhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjtcblx0XHRfY2FtZXJhTC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRfY2FtZXJhTC5wb3NpdGlvbi5jb3B5KCBfcG9zaXRpb24gKTtcblx0XHRfY2FtZXJhTC5xdWF0ZXJuaW9uLmNvcHkoIF9xdWF0ZXJuaW9uICk7XG5cdFx0X2NhbWVyYUwudHJhbnNsYXRlWCggLSB0aGlzLnNlcGFyYXRpb24gKTtcblxuXHRcdC8vIHJpZ2h0XG5cblx0XHRfY2FtZXJhUi5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0X2NhbWVyYVIuZmFyID0gY2FtZXJhLmZhcjtcblx0XHRfY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4ID0gX2NhbWVyYUwucHJvamVjdGlvbk1hdHJpeDtcblxuXHRcdF9jYW1lcmFSLnBvc2l0aW9uLmNvcHkoIF9wb3NpdGlvbiApO1xuXHRcdF9jYW1lcmFSLnF1YXRlcm5pb24uY29weSggX3F1YXRlcm5pb24gKTtcblx0XHRfY2FtZXJhUi50cmFuc2xhdGVYKCB0aGlzLnNlcGFyYXRpb24gKTtcblxuXHRcdC8vXG5cblx0XHRyZW5kZXJlci5zZXRWaWV3cG9ydCggMCwgMCwgX3dpZHRoICogMiwgX2hlaWdodCApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRyZW5kZXJlci5zZXRWaWV3cG9ydCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgX2NhbWVyYUwgKTtcblxuXHRcdHJlbmRlcmVyLnNldFZpZXdwb3J0KCBfd2lkdGgsIDAsIF93aWR0aCwgX2hlaWdodCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIF9jYW1lcmFSICk7XG5cblx0fTtcblxufTtcbiIsIi8qKlxuICogQGF1dGhvciBkbWFyY29zIC8gaHR0cHM6Ly9naXRodWIuY29tL2RtYXJjb3NcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cbiAqL1xuXG5USFJFRS5WUkNvbnRyb2xzID0gZnVuY3Rpb24gKCBvYmplY3QsIG9uRXJyb3IgKSB7XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR2YXIgdnJJbnB1dHMgPSBbXTtcblxuXHRmdW5jdGlvbiBmaWx0ZXJJbnZhbGlkRGV2aWNlcyggZGV2aWNlcyApIHtcblxuXHRcdC8vIEV4Y2x1ZGUgQ2FyZGJvYXJkIHBvc2l0aW9uIHNlbnNvciBpZiBPY3VsdXMgZXhpc3RzLlxuXG5cdFx0dmFyIG9jdWx1c0RldmljZXMgPSBkZXZpY2VzLmZpbHRlciggZnVuY3Rpb24gKCBkZXZpY2UgKSB7XG5cblx0XHRcdHJldHVybiBkZXZpY2UuZGV2aWNlTmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ29jdWx1cycpICE9PSAtMTtcblxuXHRcdH0gKTtcblxuXHRcdGlmICggb2N1bHVzRGV2aWNlcy5sZW5ndGggPj0gMSApIHtcblxuXHRcdFx0cmV0dXJuIGRldmljZXMuZmlsdGVyKCBmdW5jdGlvbiAoIGRldmljZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZGV2aWNlLmRldmljZU5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdjYXJkYm9hcmQnKSA9PT0gLTE7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBkZXZpY2VzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnb3RWUkRldmljZXMoIGRldmljZXMgKSB7XG5cblx0XHRkZXZpY2VzID0gZmlsdGVySW52YWxpZERldmljZXMoIGRldmljZXMgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGRldmljZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGRldmljZXNbIGkgXSBpbnN0YW5jZW9mIFBvc2l0aW9uU2Vuc29yVlJEZXZpY2UgKSB7XG5cblx0XHRcdFx0dnJJbnB1dHMucHVzaCggZGV2aWNlc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoICdITUQgbm90IGF2YWlsYWJsZScgKTtcblxuXHR9XG5cblx0aWYgKCBuYXZpZ2F0b3IuZ2V0VlJEZXZpY2VzICkge1xuXG5cdFx0bmF2aWdhdG9yLmdldFZSRGV2aWNlcygpLnRoZW4oIGdvdFZSRGV2aWNlcyApO1xuXG5cdH1cblxuXHQvLyB0aGUgUmlmdCBTREsgcmV0dXJucyB0aGUgcG9zaXRpb24gaW4gbWV0ZXJzXG5cdC8vIHRoaXMgc2NhbGUgZmFjdG9yIGFsbG93cyB0aGUgdXNlciB0byBkZWZpbmUgaG93IG1ldGVyc1xuXHQvLyBhcmUgY29udmVydGVkIHRvIHNjZW5lIHVuaXRzLlxuXG5cdHRoaXMuc2NhbGUgPSAxO1xuXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdnJJbnB1dHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdnJJbnB1dCA9IHZySW5wdXRzWyBpIF07XG5cblx0XHRcdHZhciBzdGF0ZSA9IHZySW5wdXQuZ2V0U3RhdGUoKTtcblxuXHRcdFx0aWYgKCBzdGF0ZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRvYmplY3QucXVhdGVybmlvbi5jb3B5KCBzdGF0ZS5vcmllbnRhdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3RhdGUucG9zaXRpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LnBvc2l0aW9uLmNvcHkoIHN0YXRlLnBvc2l0aW9uICkubXVsdGlwbHlTY2FsYXIoIHNjb3BlLnNjYWxlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMucmVzZXRTZW5zb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2cklucHV0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2cklucHV0ID0gdnJJbnB1dHNbIGkgXTtcblxuXHRcdFx0aWYgKCB2cklucHV0LnJlc2V0U2Vuc29yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dnJJbnB1dC5yZXNldFNlbnNvcigpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2cklucHV0Lnplcm9TZW5zb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2cklucHV0Lnplcm9TZW5zb3IoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy56ZXJvU2Vuc29yID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0VEhSRUUud2FybiggJ1RIUkVFLlZSQ29udHJvbHM6IC56ZXJvU2Vuc29yKCkgaXMgbm93IC5yZXNldFNlbnNvcigpLicgKTtcblx0XHR0aGlzLnJlc2V0U2Vuc29yKCk7XG5cblx0fTtcblxufTtcblxuIiwiXG4vKipcbiAqIEBhdXRob3IgZG1hcmNvcyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9kbWFyY29zXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tXG4gKlxuICogV2ViVlIgU3BlYzogaHR0cDovL21venZyLmdpdGh1Yi5pby93ZWJ2ci1zcGVjL3dlYnZyLmh0bWxcbiAqXG4gKiBGaXJlZm94OiBodHRwOi8vbW96dnIuY29tL2Rvd25sb2Fkcy9cbiAqIENocm9taXVtOiBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZm9sZGVydmlldz9pZD0wQnp1ZEx0MjJCcUdSYlc5V1RITXRPV016TmpRJnVzcD1zaGFyaW5nI2xpc3RcbiAqXG4gKi9cblxuVEhSRUUuVlJFZmZlY3QgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBvbkVycm9yICkge1xuXG5cdHZhciB2ckhNRDtcblx0dmFyIGV5ZVRyYW5zbGF0aW9uTCwgZXllRk9WTDtcblx0dmFyIGV5ZVRyYW5zbGF0aW9uUiwgZXllRk9WUjtcblxuXHRmdW5jdGlvbiBnb3RWUkRldmljZXMoIGRldmljZXMgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBkZXZpY2VzWyBpIF0gaW5zdGFuY2VvZiBITURWUkRldmljZSApIHtcblxuXHRcdFx0XHR2ckhNRCA9IGRldmljZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIHZySE1ELmdldEV5ZVBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZhciBleWVQYXJhbXNMID0gdnJITUQuZ2V0RXllUGFyYW1ldGVycyggJ2xlZnQnICk7XG5cdFx0XHRcdFx0dmFyIGV5ZVBhcmFtc1IgPSB2ckhNRC5nZXRFeWVQYXJhbWV0ZXJzKCAncmlnaHQnICk7XG5cblx0XHRcdFx0XHRleWVUcmFuc2xhdGlvbkwgPSBleWVQYXJhbXNMLmV5ZVRyYW5zbGF0aW9uO1xuXHRcdFx0XHRcdGV5ZVRyYW5zbGF0aW9uUiA9IGV5ZVBhcmFtc1IuZXllVHJhbnNsYXRpb247XG5cdFx0XHRcdFx0ZXllRk9WTCA9IGV5ZVBhcmFtc0wucmVjb21tZW5kZWRGaWVsZE9mVmlldztcblx0XHRcdFx0XHRleWVGT1ZSID0gZXllUGFyYW1zUi5yZWNvbW1lbmRlZEZpZWxkT2ZWaWV3O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBUT0RPOiBUaGlzIGlzIGFuIG9sZGVyIGNvZGUgcGF0aCBhbmQgbm90IHNwZWMgY29tcGxpYW50LlxuXHRcdFx0XHRcdC8vIEl0IHNob3VsZCBiZSByZW1vdmVkIGF0IHNvbWUgcG9pbnQgaW4gdGhlIG5lYXIgZnV0dXJlLlxuXHRcdFx0XHRcdGV5ZVRyYW5zbGF0aW9uTCA9IHZySE1ELmdldEV5ZVRyYW5zbGF0aW9uKCAnbGVmdCcgKTtcblx0XHRcdFx0XHRleWVUcmFuc2xhdGlvblIgPSB2ckhNRC5nZXRFeWVUcmFuc2xhdGlvbiggJ3JpZ2h0JyApO1xuXHRcdFx0XHRcdGV5ZUZPVkwgPSB2ckhNRC5nZXRSZWNvbW1lbmRlZEV5ZUZpZWxkT2ZWaWV3KCAnbGVmdCcgKTtcblx0XHRcdFx0XHRleWVGT1ZSID0gdnJITUQuZ2V0UmVjb21tZW5kZWRFeWVGaWVsZE9mVmlldyggJ3JpZ2h0JyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhazsgLy8gV2Uga2VlcCB0aGUgZmlyc3Qgd2UgZW5jb3VudGVyXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdnJITUQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBvbkVycm9yICkgb25FcnJvciggJ0hNRCBub3QgYXZhaWxhYmxlJyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRpZiAoIG5hdmlnYXRvci5nZXRWUkRldmljZXMgKSB7XG5cblx0XHRuYXZpZ2F0b3IuZ2V0VlJEZXZpY2VzKCkudGhlbiggZ290VlJEZXZpY2VzICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5zY2FsZSA9IDE7XG5cblx0dGhpcy5zZXRTaXplID0gZnVuY3Rpb24oIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRyZW5kZXJlci5zZXRTaXplKCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHQvLyBmdWxsc2NyZWVuXG5cblx0dmFyIGlzRnVsbHNjcmVlbiA9IGZhbHNlO1xuXG5cdHZhciBjYW52YXMgPSByZW5kZXJlci5kb21FbGVtZW50O1xuXHR2YXIgZnVsbHNjcmVlbmNoYW5nZSA9IGNhbnZhcy5tb3pSZXF1ZXN0RnVsbFNjcmVlbiA/ICdtb3pmdWxsc2NyZWVuY2hhbmdlJyA6ICd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJztcblxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBmdWxsc2NyZWVuY2hhbmdlLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0aXNGdWxsc2NyZWVuID0gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7XG5cblx0fSwgZmFsc2UgKTtcblxuXHR0aGlzLnNldEZ1bGxTY3JlZW4gPSBmdW5jdGlvbiAoIGJvb2xlYW4gKSB7XG5cblx0XHRpZiAoIHZySE1EID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cdFx0aWYgKCBpc0Z1bGxzY3JlZW4gPT09IGJvb2xlYW4gKSByZXR1cm47XG5cblx0XHRpZiAoIGNhbnZhcy5tb3pSZXF1ZXN0RnVsbFNjcmVlbiApIHtcblxuXHRcdFx0Y2FudmFzLm1velJlcXVlc3RGdWxsU2NyZWVuKCB7IHZyRGlzcGxheTogdnJITUQgfSApO1xuXG5cdFx0fSBlbHNlIGlmICggY2FudmFzLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuICkge1xuXG5cdFx0XHRjYW52YXMud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oIHsgdnJEaXNwbGF5OiB2ckhNRCB9ICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyByZW5kZXJcblxuXHR2YXIgY2FtZXJhTCA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHR2YXIgY2FtZXJhUiA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0aWYgKCB2ckhNRCApIHtcblxuXHRcdFx0dmFyIHNjZW5lTCwgc2NlbmVSO1xuXG5cdFx0XHRpZiAoIHNjZW5lIGluc3RhbmNlb2YgQXJyYXkgKSB7XG5cblx0XHRcdFx0c2NlbmVMID0gc2NlbmVbIDAgXTtcblx0XHRcdFx0c2NlbmVSID0gc2NlbmVbIDEgXTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzY2VuZUwgPSBzY2VuZTtcblx0XHRcdFx0c2NlbmVSID0gc2NlbmU7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHNpemUgPSByZW5kZXJlci5nZXRTaXplKCk7XG5cdFx0XHRzaXplLndpZHRoIC89IDI7XG5cblx0XHRcdHJlbmRlcmVyLmVuYWJsZVNjaXNzb3JUZXN0KCB0cnVlICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhcigpO1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5wYXJlbnQgPT09IHVuZGVmaW5lZCApIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRjYW1lcmFMLnByb2plY3Rpb25NYXRyaXggPSBmb3ZUb1Byb2plY3Rpb24oIGV5ZUZPVkwsIHRydWUsIGNhbWVyYS5uZWFyLCBjYW1lcmEuZmFyICk7XG5cdFx0XHRjYW1lcmFSLnByb2plY3Rpb25NYXRyaXggPSBmb3ZUb1Byb2plY3Rpb24oIGV5ZUZPVlIsIHRydWUsIGNhbWVyYS5uZWFyLCBjYW1lcmEuZmFyICk7XG5cblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIGNhbWVyYUwucG9zaXRpb24sIGNhbWVyYUwucXVhdGVybmlvbiwgY2FtZXJhTC5zY2FsZSApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggY2FtZXJhUi5wb3NpdGlvbiwgY2FtZXJhUi5xdWF0ZXJuaW9uLCBjYW1lcmFSLnNjYWxlICk7XG5cblx0XHRcdGNhbWVyYUwudHJhbnNsYXRlWCggZXllVHJhbnNsYXRpb25MLnggKiB0aGlzLnNjYWxlICk7XG5cdFx0XHRjYW1lcmFSLnRyYW5zbGF0ZVgoIGV5ZVRyYW5zbGF0aW9uUi54ICogdGhpcy5zY2FsZSApO1xuXG5cdFx0XHQvLyByZW5kZXIgbGVmdCBleWVcblx0XHRcdHJlbmRlcmVyLnNldFZpZXdwb3J0KCAwLCAwLCBzaXplLndpZHRoLCBzaXplLmhlaWdodCApO1xuXHRcdFx0cmVuZGVyZXIuc2V0U2Npc3NvciggMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQgKTtcblx0XHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmVMLCBjYW1lcmFMICk7XG5cblx0XHRcdC8vIHJlbmRlciByaWdodCBleWVcblx0XHRcdHJlbmRlcmVyLnNldFZpZXdwb3J0KCBzaXplLndpZHRoLCAwLCBzaXplLndpZHRoLCBzaXplLmhlaWdodCApO1xuXHRcdFx0cmVuZGVyZXIuc2V0U2Npc3Nvciggc2l6ZS53aWR0aCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQgKTtcblx0XHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmVSLCBjYW1lcmFSICk7XG5cblx0XHRcdHJlbmRlcmVyLmVuYWJsZVNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBSZWd1bGFyIHJlbmRlciBtb2RlIGlmIG5vdCBITURcblxuXHRcdGlmICggc2NlbmUgaW5zdGFuY2VvZiBBcnJheSApIHNjZW5lID0gc2NlbmVbIDAgXTtcblxuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYSApO1xuXG5cdH07XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBmb3ZUb05EQ1NjYWxlT2Zmc2V0KCBmb3YgKSB7XG5cblx0XHR2YXIgcHhzY2FsZSA9IDIuMCAvIChmb3YubGVmdFRhbiArIGZvdi5yaWdodFRhbik7XG5cdFx0dmFyIHB4b2Zmc2V0ID0gKGZvdi5sZWZ0VGFuIC0gZm92LnJpZ2h0VGFuKSAqIHB4c2NhbGUgKiAwLjU7XG5cdFx0dmFyIHB5c2NhbGUgPSAyLjAgLyAoZm92LnVwVGFuICsgZm92LmRvd25UYW4pO1xuXHRcdHZhciBweW9mZnNldCA9IChmb3YudXBUYW4gLSBmb3YuZG93blRhbikgKiBweXNjYWxlICogMC41O1xuXHRcdHJldHVybiB7IHNjYWxlOiBbIHB4c2NhbGUsIHB5c2NhbGUgXSwgb2Zmc2V0OiBbIHB4b2Zmc2V0LCBweW9mZnNldCBdIH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGZvdlBvcnRUb1Byb2plY3Rpb24oIGZvdiwgcmlnaHRIYW5kZWQsIHpOZWFyLCB6RmFyICkge1xuXG5cdFx0cmlnaHRIYW5kZWQgPSByaWdodEhhbmRlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHJpZ2h0SGFuZGVkO1xuXHRcdHpOZWFyID0gek5lYXIgPT09IHVuZGVmaW5lZCA/IDAuMDEgOiB6TmVhcjtcblx0XHR6RmFyID0gekZhciA9PT0gdW5kZWZpbmVkID8gMTAwMDAuMCA6IHpGYXI7XG5cblx0XHR2YXIgaGFuZGVkbmVzc1NjYWxlID0gcmlnaHRIYW5kZWQgPyAtMS4wIDogMS4wO1xuXG5cdFx0Ly8gc3RhcnQgd2l0aCBhbiBpZGVudGl0eSBtYXRyaXhcblx0XHR2YXIgbW9iaiA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5cdFx0dmFyIG0gPSBtb2JqLmVsZW1lbnRzO1xuXG5cdFx0Ly8gYW5kIHdpdGggc2NhbGUvb2Zmc2V0IGluZm8gZm9yIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3Jkc1xuXHRcdHZhciBzY2FsZUFuZE9mZnNldCA9IGZvdlRvTkRDU2NhbGVPZmZzZXQoZm92KTtcblxuXHRcdC8vIFggcmVzdWx0LCBtYXAgY2xpcCBlZGdlcyB0byBbLXcsK3ddXG5cdFx0bVswICogNCArIDBdID0gc2NhbGVBbmRPZmZzZXQuc2NhbGVbMF07XG5cdFx0bVswICogNCArIDFdID0gMC4wO1xuXHRcdG1bMCAqIDQgKyAyXSA9IHNjYWxlQW5kT2Zmc2V0Lm9mZnNldFswXSAqIGhhbmRlZG5lc3NTY2FsZTtcblx0XHRtWzAgKiA0ICsgM10gPSAwLjA7XG5cblx0XHQvLyBZIHJlc3VsdCwgbWFwIGNsaXAgZWRnZXMgdG8gWy13LCt3XVxuXHRcdC8vIFkgb2Zmc2V0IGlzIG5lZ2F0ZWQgYmVjYXVzZSB0aGlzIHByb2ogbWF0cml4IHRyYW5zZm9ybXMgZnJvbSB3b3JsZCBjb29yZHMgd2l0aCBZPXVwLFxuXHRcdC8vIGJ1dCB0aGUgTkRDIHNjYWxpbmcgaGFzIFk9ZG93biAodGhhbmtzIEQzRD8pXG5cdFx0bVsxICogNCArIDBdID0gMC4wO1xuXHRcdG1bMSAqIDQgKyAxXSA9IHNjYWxlQW5kT2Zmc2V0LnNjYWxlWzFdO1xuXHRcdG1bMSAqIDQgKyAyXSA9IC1zY2FsZUFuZE9mZnNldC5vZmZzZXRbMV0gKiBoYW5kZWRuZXNzU2NhbGU7XG5cdFx0bVsxICogNCArIDNdID0gMC4wO1xuXG5cdFx0Ly8gWiByZXN1bHQgKHVwIHRvIHRoZSBhcHApXG5cdFx0bVsyICogNCArIDBdID0gMC4wO1xuXHRcdG1bMiAqIDQgKyAxXSA9IDAuMDtcblx0XHRtWzIgKiA0ICsgMl0gPSB6RmFyIC8gKHpOZWFyIC0gekZhcikgKiAtaGFuZGVkbmVzc1NjYWxlO1xuXHRcdG1bMiAqIDQgKyAzXSA9ICh6RmFyICogek5lYXIpIC8gKHpOZWFyIC0gekZhcik7XG5cblx0XHQvLyBXIHJlc3VsdCAoPSBaIGluKVxuXHRcdG1bMyAqIDQgKyAwXSA9IDAuMDtcblx0XHRtWzMgKiA0ICsgMV0gPSAwLjA7XG5cdFx0bVszICogNCArIDJdID0gaGFuZGVkbmVzc1NjYWxlO1xuXHRcdG1bMyAqIDQgKyAzXSA9IDAuMDtcblxuXHRcdG1vYmoudHJhbnNwb3NlKCk7XG5cblx0XHRyZXR1cm4gbW9iajtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvdlRvUHJvamVjdGlvbiggZm92LCByaWdodEhhbmRlZCwgek5lYXIsIHpGYXIgKSB7XG5cblx0XHR2YXIgREVHMlJBRCA9IE1hdGguUEkgLyAxODAuMDtcblxuXHRcdHZhciBmb3ZQb3J0ID0ge1xuXHRcdFx0dXBUYW46IE1hdGgudGFuKCBmb3YudXBEZWdyZWVzICogREVHMlJBRCApLFxuXHRcdFx0ZG93blRhbjogTWF0aC50YW4oIGZvdi5kb3duRGVncmVlcyAqIERFRzJSQUQgKSxcblx0XHRcdGxlZnRUYW46IE1hdGgudGFuKCBmb3YubGVmdERlZ3JlZXMgKiBERUcyUkFEICksXG5cdFx0XHRyaWdodFRhbjogTWF0aC50YW4oIGZvdi5yaWdodERlZ3JlZXMgKiBERUcyUkFEIClcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZvdlBvcnRUb1Byb2plY3Rpb24oIGZvdlBvcnQsIHJpZ2h0SGFuZGVkLCB6TmVhciwgekZhciApO1xuXG5cdH1cblxufTtcbiIsIlxuLypcbiAqIE1velZSIEV4dGVuc2lvbnMgdG8gdGhyZWUuanNcbiAqXG4gKiBBIGJyb3dzZXJpZnkgd3JhcHBlciBmb3IgdGhlIFZSIGhlbHBlcnMgZnJvbSBNb3pWUidzIGdpdGh1YiByZXBvLlxuICogaHR0cHM6Ly9naXRodWIuY29tL01velZSL3ZyLXdlYi1leGFtcGxlcy90cmVlL21hc3Rlci90aHJlZWpzLXZyLWJvaWxlcnBsYXRlXG4gKlxuICogVGhlIGV4dGVuc2lvbiBmaWxlcyBhcmUgbm90IG1vZHVsZSBjb21wYXRpYmxlIGFuZCB3b3JrIGJ5IGFwcGVuZGluZyB0byB0aGVcbiAqIFRIUkVFIG9iamVjdC4gRG8gdXNlIHRoZW0sIHdlIG1ha2UgdGhlIFRIUkVFIG9iamVjdCBnbG9iYWwsIGFuZCB0aGVuIG1ha2VcbiAqIGl0IHRoZSBleHBvcnQgdmFsdWUgb2YgdGhpcyBtb2R1bGUuXG4gKlxuICovXG5cbmdsb2JhbC5USFJFRSA9IHJlcXVpcmUoJy4uL3RocmVlLm1pbi5qcycpO1xuXG5jb25zb2xlLmdyb3VwQ29sbGFwc2VkKCdMb2FkaW5nIE1velZSIEV4dGVuc2lvbnMuLi4nKTtcbnJlcXVpcmUoJy4vU3RlcmVvRWZmZWN0LmpzJyk7XG5jb25zb2xlLmxvZygnU3RlcmVvRWZmZWN0IC0gT0snKTtcblxucmVxdWlyZSgnLi9WUkNvbnRyb2xzLmpzJyk7XG5jb25zb2xlLmxvZygnVlJDb250cm9scyAtIE9LJyk7XG5cbnJlcXVpcmUoJy4vVlJFZmZlY3QuanMnKTtcbmNvbnNvbGUubG9nKCdWUkVmZmVjdCAtIE9LJyk7XG5cbmNvbnNvbGUuZ3JvdXBFbmQoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUSFJFRTtcblxuIiwiLy8gdGhyZWVqcy5vcmcvbGljZW5zZVxuJ3VzZSBzdHJpY3QnO3ZhciBUSFJFRT17UkVWSVNJT046XCI3MmRldlwifTtcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPVRIUkVFKTt2b2lkIDA9PT1NYXRoLnNpZ24mJihNYXRoLnNpZ249ZnVuY3Rpb24oYSl7cmV0dXJuIDA+YT8tMTowPGE/MTorYX0pO1RIUkVFLmxvZz1mdW5jdGlvbigpe2NvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX07VEhSRUUud2Fybj1mdW5jdGlvbigpe2NvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLGFyZ3VtZW50cyl9O1RIUkVFLmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLGFyZ3VtZW50cyl9O1RIUkVFLk1PVVNFPXtMRUZUOjAsTUlERExFOjEsUklHSFQ6Mn07VEhSRUUuQ3VsbEZhY2VOb25lPTA7VEhSRUUuQ3VsbEZhY2VCYWNrPTE7VEhSRUUuQ3VsbEZhY2VGcm9udD0yO1RIUkVFLkN1bGxGYWNlRnJvbnRCYWNrPTM7VEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ1c9MDtcblRIUkVFLkZyb250RmFjZURpcmVjdGlvbkNDVz0xO1RIUkVFLkJhc2ljU2hhZG93TWFwPTA7VEhSRUUuUENGU2hhZG93TWFwPTE7VEhSRUUuUENGU29mdFNoYWRvd01hcD0yO1RIUkVFLkZyb250U2lkZT0wO1RIUkVFLkJhY2tTaWRlPTE7VEhSRUUuRG91YmxlU2lkZT0yO1RIUkVFLk5vU2hhZGluZz0wO1RIUkVFLkZsYXRTaGFkaW5nPTE7VEhSRUUuU21vb3RoU2hhZGluZz0yO1RIUkVFLk5vQ29sb3JzPTA7VEhSRUUuRmFjZUNvbG9ycz0xO1RIUkVFLlZlcnRleENvbG9ycz0yO1RIUkVFLk5vQmxlbmRpbmc9MDtUSFJFRS5Ob3JtYWxCbGVuZGluZz0xO1RIUkVFLkFkZGl0aXZlQmxlbmRpbmc9MjtUSFJFRS5TdWJ0cmFjdGl2ZUJsZW5kaW5nPTM7VEhSRUUuTXVsdGlwbHlCbGVuZGluZz00O1RIUkVFLkN1c3RvbUJsZW5kaW5nPTU7VEhSRUUuQWRkRXF1YXRpb249MTAwO1RIUkVFLlN1YnRyYWN0RXF1YXRpb249MTAxO1RIUkVFLlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uPTEwMjtcblRIUkVFLk1pbkVxdWF0aW9uPTEwMztUSFJFRS5NYXhFcXVhdGlvbj0xMDQ7VEhSRUUuWmVyb0ZhY3Rvcj0yMDA7VEhSRUUuT25lRmFjdG9yPTIwMTtUSFJFRS5TcmNDb2xvckZhY3Rvcj0yMDI7VEhSRUUuT25lTWludXNTcmNDb2xvckZhY3Rvcj0yMDM7VEhSRUUuU3JjQWxwaGFGYWN0b3I9MjA0O1RIUkVFLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3I9MjA1O1RIUkVFLkRzdEFscGhhRmFjdG9yPTIwNjtUSFJFRS5PbmVNaW51c0RzdEFscGhhRmFjdG9yPTIwNztUSFJFRS5Ec3RDb2xvckZhY3Rvcj0yMDg7VEhSRUUuT25lTWludXNEc3RDb2xvckZhY3Rvcj0yMDk7VEhSRUUuU3JjQWxwaGFTYXR1cmF0ZUZhY3Rvcj0yMTA7VEhSRUUuTXVsdGlwbHlPcGVyYXRpb249MDtUSFJFRS5NaXhPcGVyYXRpb249MTtUSFJFRS5BZGRPcGVyYXRpb249MjtUSFJFRS5VVk1hcHBpbmc9MzAwO1RIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZz0zMDE7VEhSRUUuQ3ViZVJlZnJhY3Rpb25NYXBwaW5nPTMwMjtcblRIUkVFLkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nPTMwMztUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZz0zMDQ7VEhSRUUuU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc9MzA1O1RIUkVFLlJlcGVhdFdyYXBwaW5nPTFFMztUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nPTEwMDE7VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZz0xMDAyO1RIUkVFLk5lYXJlc3RGaWx0ZXI9MTAwMztUSFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcj0xMDA0O1RIUkVFLk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI9MTAwNTtUSFJFRS5MaW5lYXJGaWx0ZXI9MTAwNjtUSFJFRS5MaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyPTEwMDc7VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyPTEwMDg7VEhSRUUuVW5zaWduZWRCeXRlVHlwZT0xMDA5O1RIUkVFLkJ5dGVUeXBlPTEwMTA7VEhSRUUuU2hvcnRUeXBlPTEwMTE7XG5USFJFRS5VbnNpZ25lZFNob3J0VHlwZT0xMDEyO1RIUkVFLkludFR5cGU9MTAxMztUSFJFRS5VbnNpZ25lZEludFR5cGU9MTAxNDtUSFJFRS5GbG9hdFR5cGU9MTAxNTtUSFJFRS5IYWxmRmxvYXRUeXBlPTEwMjU7VEhSRUUuVW5zaWduZWRTaG9ydDQ0NDRUeXBlPTEwMTY7VEhSRUUuVW5zaWduZWRTaG9ydDU1NTFUeXBlPTEwMTc7VEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGU9MTAxODtUSFJFRS5BbHBoYUZvcm1hdD0xMDE5O1RIUkVFLlJHQkZvcm1hdD0xMDIwO1RIUkVFLlJHQkFGb3JtYXQ9MTAyMTtUSFJFRS5MdW1pbmFuY2VGb3JtYXQ9MTAyMjtUSFJFRS5MdW1pbmFuY2VBbHBoYUZvcm1hdD0xMDIzO1RIUkVFLlJHQkVGb3JtYXQ9VEhSRUUuUkdCQUZvcm1hdDtUSFJFRS5SR0JfUzNUQ19EWFQxX0Zvcm1hdD0yMDAxO1RIUkVFLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdD0yMDAyO1RIUkVFLlJHQkFfUzNUQ19EWFQzX0Zvcm1hdD0yMDAzO1xuVEhSRUUuUkdCQV9TM1RDX0RYVDVfRm9ybWF0PTIwMDQ7VEhSRUUuUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQ9MjEwMDtUSFJFRS5SR0JfUFZSVENfMkJQUFYxX0Zvcm1hdD0yMTAxO1RIUkVFLlJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdD0yMTAyO1RIUkVFLlJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdD0yMTAzO1xuVEhSRUUuUHJvamVjdG9yPWZ1bmN0aW9uKCl7VEhSRUUuZXJyb3IoXCJUSFJFRS5Qcm9qZWN0b3IgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3JlbmRlcmVycy9Qcm9qZWN0b3IuanMuXCIpO3RoaXMucHJvamVjdFZlY3Rvcj1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5Qcm9qZWN0b3I6IC5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci5wcm9qZWN0KCkuXCIpO2EucHJvamVjdChiKX07dGhpcy51bnByb2plY3RWZWN0b3I9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuUHJvamVjdG9yOiAudW5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci51bnByb2plY3QoKS5cIik7YS51bnByb2plY3QoYil9O3RoaXMucGlja2luZ1JheT1mdW5jdGlvbihhLGIpe1RIUkVFLmVycm9yKFwiVEhSRUUuUHJvamVjdG9yOiAucGlja2luZ1JheSgpIGlzIG5vdyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSgpLlwiKX19O1xuVEhSRUUuQ2FudmFzUmVuZGVyZXI9ZnVuY3Rpb24oKXtUSFJFRS5lcnJvcihcIlRIUkVFLkNhbnZhc1JlbmRlcmVyIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9yZW5kZXJlcnMvQ2FudmFzUmVuZGVyZXIuanNcIik7dGhpcy5kb21FbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7dGhpcy5jbGVhcj1mdW5jdGlvbigpe307dGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXt9O3RoaXMuc2V0Q2xlYXJDb2xvcj1mdW5jdGlvbigpe307dGhpcy5zZXRTaXplPWZ1bmN0aW9uKCl7fX07VEhSRUUuQ29sb3I9ZnVuY3Rpb24oYSl7cmV0dXJuIDM9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMuc2V0UkdCKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKTp0aGlzLnNldChhKX07XG5USFJFRS5Db2xvci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkNvbG9yLHI6MSxnOjEsYjoxLHNldDpmdW5jdGlvbihhKXthIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/dGhpcy5jb3B5KGEpOlwibnVtYmVyXCI9PT10eXBlb2YgYT90aGlzLnNldEhleChhKTpcInN0cmluZ1wiPT09dHlwZW9mIGEmJnRoaXMuc2V0U3R5bGUoYSk7cmV0dXJuIHRoaXN9LHNldEhleDpmdW5jdGlvbihhKXthPU1hdGguZmxvb3IoYSk7dGhpcy5yPShhPj4xNiYyNTUpLzI1NTt0aGlzLmc9KGE+PjgmMjU1KS8yNTU7dGhpcy5iPShhJjI1NSkvMjU1O3JldHVybiB0aGlzfSxzZXRSR0I6ZnVuY3Rpb24oYSxiLGMpe3RoaXMucj1hO3RoaXMuZz1iO3RoaXMuYj1jO3JldHVybiB0aGlzfSxzZXRIU0w6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iKXRoaXMucj10aGlzLmc9dGhpcy5iPWM7ZWxzZXt2YXIgZD1mdW5jdGlvbihhLGIsYyl7MD5jJiYoYys9MSk7MTxjJiYoYy09MSk7cmV0dXJuIGM8MS82P2ErNiooYi1hKSpcbmM6LjU+Yz9iOmM8Mi8zP2ErNiooYi1hKSooMi8zLWMpOmF9O2I9LjU+PWM/YyooMStiKTpjK2ItYypiO2M9MipjLWI7dGhpcy5yPWQoYyxiLGErMS8zKTt0aGlzLmc9ZChjLGIsYSk7dGhpcy5iPWQoYyxiLGEtMS8zKX1yZXR1cm4gdGhpc30sc2V0U3R5bGU6ZnVuY3Rpb24oYSl7aWYoL15yZ2JcXCgoXFxkKyksID8oXFxkKyksID8oXFxkKylcXCkkL2kudGVzdChhKSlyZXR1cm4gYT0vXnJnYlxcKChcXGQrKSwgPyhcXGQrKSwgPyhcXGQrKVxcKSQvaS5leGVjKGEpLHRoaXMucj1NYXRoLm1pbigyNTUscGFyc2VJbnQoYVsxXSwxMCkpLzI1NSx0aGlzLmc9TWF0aC5taW4oMjU1LHBhcnNlSW50KGFbMl0sMTApKS8yNTUsdGhpcy5iPU1hdGgubWluKDI1NSxwYXJzZUludChhWzNdLDEwKSkvMjU1LHRoaXM7aWYoL15yZ2JcXCgoXFxkKylcXCUsID8oXFxkKylcXCUsID8oXFxkKylcXCVcXCkkL2kudGVzdChhKSlyZXR1cm4gYT0vXnJnYlxcKChcXGQrKVxcJSwgPyhcXGQrKVxcJSwgPyhcXGQrKVxcJVxcKSQvaS5leGVjKGEpLHRoaXMucj1cbk1hdGgubWluKDEwMCxwYXJzZUludChhWzFdLDEwKSkvMTAwLHRoaXMuZz1NYXRoLm1pbigxMDAscGFyc2VJbnQoYVsyXSwxMCkpLzEwMCx0aGlzLmI9TWF0aC5taW4oMTAwLHBhcnNlSW50KGFbM10sMTApKS8xMDAsdGhpcztpZigvXlxcIyhbMC05YS1mXXs2fSkkL2kudGVzdChhKSlyZXR1cm4gYT0vXlxcIyhbMC05YS1mXXs2fSkkL2kuZXhlYyhhKSx0aGlzLnNldEhleChwYXJzZUludChhWzFdLDE2KSksdGhpcztpZigvXlxcIyhbMC05YS1mXSkoWzAtOWEtZl0pKFswLTlhLWZdKSQvaS50ZXN0KGEpKXJldHVybiBhPS9eXFwjKFswLTlhLWZdKShbMC05YS1mXSkoWzAtOWEtZl0pJC9pLmV4ZWMoYSksdGhpcy5zZXRIZXgocGFyc2VJbnQoYVsxXSthWzFdK2FbMl0rYVsyXSthWzNdK2FbM10sMTYpKSx0aGlzO2lmKC9eKFxcdyspJC9pLnRlc3QoYSkpcmV0dXJuIHRoaXMuc2V0SGV4KFRIUkVFLkNvbG9yS2V5d29yZHNbYV0pLHRoaXN9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5yPWEucjt0aGlzLmc9XG5hLmc7dGhpcy5iPWEuYjtyZXR1cm4gdGhpc30sY29weUdhbW1hVG9MaW5lYXI6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yKTt0aGlzLnI9TWF0aC5wb3coYS5yLGIpO3RoaXMuZz1NYXRoLnBvdyhhLmcsYik7dGhpcy5iPU1hdGgucG93KGEuYixiKTtyZXR1cm4gdGhpc30sY29weUxpbmVhclRvR2FtbWE6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yKTt2YXIgYz0wPGI/MS9iOjE7dGhpcy5yPU1hdGgucG93KGEucixjKTt0aGlzLmc9TWF0aC5wb3coYS5nLGMpO3RoaXMuYj1NYXRoLnBvdyhhLmIsYyk7cmV0dXJuIHRoaXN9LGNvbnZlcnRHYW1tYVRvTGluZWFyOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yLGI9dGhpcy5nLGM9dGhpcy5iO3RoaXMucj1hKmE7dGhpcy5nPWIqYjt0aGlzLmI9YypjO3JldHVybiB0aGlzfSxjb252ZXJ0TGluZWFyVG9HYW1tYTpmdW5jdGlvbigpe3RoaXMucj1NYXRoLnNxcnQodGhpcy5yKTt0aGlzLmc9TWF0aC5zcXJ0KHRoaXMuZyk7dGhpcy5iPVxuTWF0aC5zcXJ0KHRoaXMuYik7cmV0dXJuIHRoaXN9LGdldEhleDpmdW5jdGlvbigpe3JldHVybiAyNTUqdGhpcy5yPDwxNl4yNTUqdGhpcy5nPDw4XjI1NSp0aGlzLmI8PDB9LGdldEhleFN0cmluZzpmdW5jdGlvbigpe3JldHVybihcIjAwMDAwMFwiK3RoaXMuZ2V0SGV4KCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNil9LGdldEhTTDpmdW5jdGlvbihhKXthPWF8fHtoOjAsczowLGw6MH07dmFyIGI9dGhpcy5yLGM9dGhpcy5nLGQ9dGhpcy5iLGU9TWF0aC5tYXgoYixjLGQpLGY9TWF0aC5taW4oYixjLGQpLGcsaD0oZitlKS8yO2lmKGY9PT1lKWY9Zz0wO2Vsc2V7dmFyIGs9ZS1mLGY9LjU+PWg/ay8oZStmKTprLygyLWUtZik7c3dpdGNoKGUpe2Nhc2UgYjpnPShjLWQpL2srKGM8ZD82OjApO2JyZWFrO2Nhc2UgYzpnPShkLWIpL2srMjticmVhaztjYXNlIGQ6Zz0oYi1jKS9rKzR9Zy89Nn1hLmg9ZzthLnM9ZjthLmw9aDtyZXR1cm4gYX0sZ2V0U3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm5cInJnYihcIitcbigyNTUqdGhpcy5yfDApK1wiLFwiKygyNTUqdGhpcy5nfDApK1wiLFwiKygyNTUqdGhpcy5ifDApK1wiKVwifSxvZmZzZXRIU0w6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuZ2V0SFNMKCk7ZC5oKz1hO2Qucys9YjtkLmwrPWM7dGhpcy5zZXRIU0woZC5oLGQucyxkLmwpO3JldHVybiB0aGlzfSxhZGQ6ZnVuY3Rpb24oYSl7dGhpcy5yKz1hLnI7dGhpcy5nKz1hLmc7dGhpcy5iKz1hLmI7cmV0dXJuIHRoaXN9LGFkZENvbG9yczpmdW5jdGlvbihhLGIpe3RoaXMucj1hLnIrYi5yO3RoaXMuZz1hLmcrYi5nO3RoaXMuYj1hLmIrYi5iO3JldHVybiB0aGlzfSxhZGRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5yKz1hO3RoaXMuZys9YTt0aGlzLmIrPWE7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMucio9YS5yO3RoaXMuZyo9YS5nO3RoaXMuYio9YS5iO3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLnIqPWE7dGhpcy5nKj1hO3RoaXMuYio9YTtcbnJldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy5yKz0oYS5yLXRoaXMucikqYjt0aGlzLmcrPShhLmctdGhpcy5nKSpiO3RoaXMuYis9KGEuYi10aGlzLmIpKmI7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5yPT09dGhpcy5yJiZhLmc9PT10aGlzLmcmJmEuYj09PXRoaXMuYn0sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMucj1hWzBdO3RoaXMuZz1hWzFdO3RoaXMuYj1hWzJdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5yO2FbYisxXT10aGlzLmc7YVtiKzJdPXRoaXMuYjtyZXR1cm4gYX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLkNvbG9yKS5zZXRSR0IodGhpcy5yLHRoaXMuZyx0aGlzLmIpfX07XG5USFJFRS5Db2xvcktleXdvcmRzPXthbGljZWJsdWU6MTU3OTIzODMsYW50aXF1ZXdoaXRlOjE2NDQ0Mzc1LGFxdWE6NjU1MzUsYXF1YW1hcmluZTo4Mzg4NTY0LGF6dXJlOjE1Nzk0MTc1LGJlaWdlOjE2MTE5MjYwLGJpc3F1ZToxNjc3MDI0NCxibGFjazowLGJsYW5jaGVkYWxtb25kOjE2NzcyMDQ1LGJsdWU6MjU1LGJsdWV2aW9sZXQ6OTA1NTIwMixicm93bjoxMDgyNDIzNCxidXJseXdvb2Q6MTQ1OTYyMzEsY2FkZXRibHVlOjYyNjY1MjgsY2hhcnRyZXVzZTo4Mzg4MzUyLGNob2NvbGF0ZToxMzc4OTQ3MCxjb3JhbDoxNjc0NDI3Mixjb3JuZmxvd2VyYmx1ZTo2NTkxOTgxLGNvcm5zaWxrOjE2Nzc1Mzg4LGNyaW1zb246MTQ0MjMxMDAsY3lhbjo2NTUzNSxkYXJrYmx1ZToxMzksZGFya2N5YW46MzU3MjMsZGFya2dvbGRlbnJvZDoxMjA5MjkzOSxkYXJrZ3JheToxMTExOTAxNyxkYXJrZ3JlZW46MjU2MDAsZGFya2dyZXk6MTExMTkwMTcsZGFya2toYWtpOjEyNDMzMjU5LGRhcmttYWdlbnRhOjkxMDk2NDMsXG5kYXJrb2xpdmVncmVlbjo1NTk3OTk5LGRhcmtvcmFuZ2U6MTY3NDc1MjAsZGFya29yY2hpZDoxMDA0MDAxMixkYXJrcmVkOjkxMDk1MDQsZGFya3NhbG1vbjoxNTMwODQxMCxkYXJrc2VhZ3JlZW46OTQxOTkxOSxkYXJrc2xhdGVibHVlOjQ3MzQzNDcsZGFya3NsYXRlZ3JheTozMTAwNDk1LGRhcmtzbGF0ZWdyZXk6MzEwMDQ5NSxkYXJrdHVycXVvaXNlOjUyOTQ1LGRhcmt2aW9sZXQ6OTY5OTUzOSxkZWVwcGluazoxNjcxNjk0NyxkZWVwc2t5Ymx1ZTo0OTE1MSxkaW1ncmF5OjY5MDgyNjUsZGltZ3JleTo2OTA4MjY1LGRvZGdlcmJsdWU6MjAwMzE5OSxmaXJlYnJpY2s6MTE2NzQxNDYsZmxvcmFsd2hpdGU6MTY3NzU5MjAsZm9yZXN0Z3JlZW46MjI2Mzg0MixmdWNoc2lhOjE2NzExOTM1LGdhaW5zYm9ybzoxNDQ3NDQ2MCxnaG9zdHdoaXRlOjE2MzE2NjcxLGdvbGQ6MTY3NjY3MjAsZ29sZGVucm9kOjE0MzI5MTIwLGdyYXk6ODQyMTUwNCxncmVlbjozMjc2OCxncmVlbnllbGxvdzoxMTQwMzA1NSxcbmdyZXk6ODQyMTUwNCxob25leWRldzoxNTc5NDE2MCxob3RwaW5rOjE2NzM4NzQwLGluZGlhbnJlZDoxMzQ1ODUyNCxpbmRpZ286NDkxNTMzMCxpdm9yeToxNjc3NzIwMCxraGFraToxNTc4NzY2MCxsYXZlbmRlcjoxNTEzMjQxMCxsYXZlbmRlcmJsdXNoOjE2NzczMzY1LGxhd25ncmVlbjo4MTkwOTc2LGxlbW9uY2hpZmZvbjoxNjc3NTg4NSxsaWdodGJsdWU6MTEzOTMyNTQsbGlnaHRjb3JhbDoxNTc2MTUzNixsaWdodGN5YW46MTQ3NDU1OTksbGlnaHRnb2xkZW5yb2R5ZWxsb3c6MTY0NDgyMTAsbGlnaHRncmF5OjEzODgyMzIzLGxpZ2h0Z3JlZW46OTQ5ODI1NixsaWdodGdyZXk6MTM4ODIzMjMsbGlnaHRwaW5rOjE2NzU4NDY1LGxpZ2h0c2FsbW9uOjE2NzUyNzYyLGxpZ2h0c2VhZ3JlZW46MjE0Mjg5MCxsaWdodHNreWJsdWU6ODkwMDM0NixsaWdodHNsYXRlZ3JheTo3ODMzNzUzLGxpZ2h0c2xhdGVncmV5Ojc4MzM3NTMsbGlnaHRzdGVlbGJsdWU6MTE1ODQ3MzQsbGlnaHR5ZWxsb3c6MTY3NzcxODQsXG5saW1lOjY1MjgwLGxpbWVncmVlbjozMzI5MzMwLGxpbmVuOjE2NDQ1NjcwLG1hZ2VudGE6MTY3MTE5MzUsbWFyb29uOjgzODg2MDgsbWVkaXVtYXF1YW1hcmluZTo2NzM3MzIyLG1lZGl1bWJsdWU6MjA1LG1lZGl1bW9yY2hpZDoxMjIxMTY2NyxtZWRpdW1wdXJwbGU6OTY2MjY4MyxtZWRpdW1zZWFncmVlbjozOTc4MDk3LG1lZGl1bXNsYXRlYmx1ZTo4MDg3NzkwLG1lZGl1bXNwcmluZ2dyZWVuOjY0MTU0LG1lZGl1bXR1cnF1b2lzZTo0NzcyMzAwLG1lZGl1bXZpb2xldHJlZDoxMzA0NzE3MyxtaWRuaWdodGJsdWU6MTY0NDkxMixtaW50Y3JlYW06MTYxMjE4NTAsbWlzdHlyb3NlOjE2NzcwMjczLG1vY2Nhc2luOjE2NzcwMjI5LG5hdmFqb3doaXRlOjE2NzY4Njg1LG5hdnk6MTI4LG9sZGxhY2U6MTY2NDM1NTgsb2xpdmU6ODQyMTM3NixvbGl2ZWRyYWI6NzA0ODczOSxvcmFuZ2U6MTY3NTM5MjAsb3JhbmdlcmVkOjE2NzI5MzQ0LG9yY2hpZDoxNDMxNTczNCxwYWxlZ29sZGVucm9kOjE1NjU3MTMwLFxucGFsZWdyZWVuOjEwMDI1ODgwLHBhbGV0dXJxdW9pc2U6MTE1Mjk5NjYscGFsZXZpb2xldHJlZDoxNDM4MTIwMyxwYXBheWF3aGlwOjE2NzczMDc3LHBlYWNocHVmZjoxNjc2NzY3MyxwZXJ1OjEzNDY4OTkxLHBpbms6MTY3NjEwMzUscGx1bToxNDUyNDYzNyxwb3dkZXJibHVlOjExNTkxOTEwLHB1cnBsZTo4Mzg4NzM2LHJlZDoxNjcxMTY4MCxyb3N5YnJvd246MTIzNTc1MTkscm95YWxibHVlOjQyODY5NDUsc2FkZGxlYnJvd246OTEyNzE4NyxzYWxtb246MTY0MTY4ODIsc2FuZHlicm93bjoxNjAzMjg2NCxzZWFncmVlbjozMDUwMzI3LHNlYXNoZWxsOjE2Nzc0NjM4LHNpZW5uYToxMDUwNjc5NyxzaWx2ZXI6MTI2MzIyNTYsc2t5Ymx1ZTo4OTAwMzMxLHNsYXRlYmx1ZTo2OTcwMDYxLHNsYXRlZ3JheTo3MzcyOTQ0LHNsYXRlZ3JleTo3MzcyOTQ0LHNub3c6MTY3NzU5MzAsc3ByaW5nZ3JlZW46NjU0MDcsc3RlZWxibHVlOjQ2MjA5ODAsdGFuOjEzODA4NzgwLHRlYWw6MzI4OTYsdGhpc3RsZToxNDIwNDg4OCxcbnRvbWF0bzoxNjczNzA5NSx0dXJxdW9pc2U6NDI1MTg1Nix2aW9sZXQ6MTU2MzEwODYsd2hlYXQ6MTYxMTMzMzEsd2hpdGU6MTY3NzcyMTUsd2hpdGVzbW9rZToxNjExOTI4NSx5ZWxsb3c6MTY3NzY5NjAseWVsbG93Z3JlZW46MTAxNDUwNzR9O1RIUkVFLlF1YXRlcm5pb249ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5feD1hfHwwO3RoaXMuX3k9Ynx8MDt0aGlzLl96PWN8fDA7dGhpcy5fdz12b2lkIDAhPT1kP2Q6MX07XG5USFJFRS5RdWF0ZXJuaW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuUXVhdGVybmlvbixfeDowLF95OjAsX3o6MCxfdzowLGdldCB4KCl7cmV0dXJuIHRoaXMuX3h9LHNldCB4KGEpe3RoaXMuX3g9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IHkoKXtyZXR1cm4gdGhpcy5feX0sc2V0IHkoYSl7dGhpcy5feT1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgeigpe3JldHVybiB0aGlzLl96fSxzZXQgeihhKXt0aGlzLl96PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB3KCl7cmV0dXJuIHRoaXMuX3d9LHNldCB3KGEpe3RoaXMuX3c9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX3c9ZDt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejtcbnRoaXMuX3c9YS53O3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tRXVsZXI6ZnVuY3Rpb24oYSxiKXtpZighMT09PWEgaW5zdGFuY2VvZiBUSFJFRS5FdWxlcil0aHJvdyBFcnJvcihcIlRIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO3ZhciBjPU1hdGguY29zKGEuX3gvMiksZD1NYXRoLmNvcyhhLl95LzIpLGU9TWF0aC5jb3MoYS5fei8yKSxmPU1hdGguc2luKGEuX3gvMiksZz1NYXRoLnNpbihhLl95LzIpLGg9TWF0aC5zaW4oYS5fei8yKTtcIlhZWlwiPT09YS5vcmRlcj8odGhpcy5feD1mKmQqZStjKmcqaCx0aGlzLl95PWMqZyplLWYqZCpoLHRoaXMuX3o9YypkKmgrZipnKmUsdGhpcy5fdz1jKmQqZS1mKmcqaCk6XCJZWFpcIj09PWEub3JkZXI/KHRoaXMuX3g9ZipkKmUrYypnKmgsdGhpcy5feT1jKmcqZS1mKmQqaCx0aGlzLl96PVxuYypkKmgtZipnKmUsdGhpcy5fdz1jKmQqZStmKmcqaCk6XCJaWFlcIj09PWEub3JkZXI/KHRoaXMuX3g9ZipkKmUtYypnKmgsdGhpcy5feT1jKmcqZStmKmQqaCx0aGlzLl96PWMqZCpoK2YqZyplLHRoaXMuX3c9YypkKmUtZipnKmgpOlwiWllYXCI9PT1hLm9yZGVyPyh0aGlzLl94PWYqZCplLWMqZypoLHRoaXMuX3k9YypnKmUrZipkKmgsdGhpcy5fej1jKmQqaC1mKmcqZSx0aGlzLl93PWMqZCplK2YqZypoKTpcIllaWFwiPT09YS5vcmRlcj8odGhpcy5feD1mKmQqZStjKmcqaCx0aGlzLl95PWMqZyplK2YqZCpoLHRoaXMuX3o9YypkKmgtZipnKmUsdGhpcy5fdz1jKmQqZS1mKmcqaCk6XCJYWllcIj09PWEub3JkZXImJih0aGlzLl94PWYqZCplLWMqZypoLHRoaXMuX3k9YypnKmUtZipkKmgsdGhpcy5fej1jKmQqaCtmKmcqZSx0aGlzLl93PWMqZCplK2YqZypoKTtpZighMSE9PWIpdGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21BeGlzQW5nbGU6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPWIvMixkPU1hdGguc2luKGMpO3RoaXMuX3g9YS54KmQ7dGhpcy5feT1hLnkqZDt0aGlzLl96PWEueipkO3RoaXMuX3c9TWF0aC5jb3MoYyk7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj1hLmVsZW1lbnRzLGM9YlswXTthPWJbNF07dmFyIGQ9Yls4XSxlPWJbMV0sZj1iWzVdLGc9Yls5XSxoPWJbMl0saz1iWzZdLGI9YlsxMF0sbD1jK2YrYjswPGw/KGM9LjUvTWF0aC5zcXJ0KGwrMSksdGhpcy5fdz0uMjUvYyx0aGlzLl94PShrLWcpKmMsdGhpcy5feT0oZC1oKSpjLHRoaXMuX3o9KGUtYSkqYyk6Yz5mJiZjPmI/KGM9MipNYXRoLnNxcnQoMStjLWYtYiksdGhpcy5fdz0oay1nKS9jLHRoaXMuX3g9LjI1KmMsdGhpcy5feT0oYStlKS9jLHRoaXMuX3o9KGQraCkvYyk6Zj5iPyhjPTIqTWF0aC5zcXJ0KDErZi1jLWIpLHRoaXMuX3c9KGQtaCkvYyx0aGlzLl94PShhK2UpL2MsdGhpcy5feT1cbi4yNSpjLHRoaXMuX3o9KGcraykvYyk6KGM9MipNYXRoLnNxcnQoMStiLWMtZiksdGhpcy5fdz0oZS1hKS9jLHRoaXMuX3g9KGQraCkvYyx0aGlzLl95PShnK2spL2MsdGhpcy5fej0uMjUqYyk7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Vbml0VmVjdG9yczpmdW5jdGlvbigpe3ZhciBhLGI7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO2I9Yy5kb3QoZCkrMTsxRS02PmI/KGI9MCxNYXRoLmFicyhjLngpPk1hdGguYWJzKGMueik/YS5zZXQoLWMueSxjLngsMCk6YS5zZXQoMCwtYy56LGMueSkpOmEuY3Jvc3NWZWN0b3JzKGMsZCk7dGhpcy5feD1hLng7dGhpcy5feT1hLnk7dGhpcy5fej1hLno7dGhpcy5fdz1iO3RoaXMubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9fSgpLGludmVyc2U6ZnVuY3Rpb24oKXt0aGlzLmNvbmp1Z2F0ZSgpLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzfSxjb25qdWdhdGU6ZnVuY3Rpb24oKXt0aGlzLl94Kj1cbi0xO3RoaXMuX3kqPS0xO3RoaXMuX3oqPS0xO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxkb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3gqYS5feCt0aGlzLl95KmEuX3krdGhpcy5feiphLl96K3RoaXMuX3cqYS5fd30sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5feCp0aGlzLl94K3RoaXMuX3kqdGhpcy5feSt0aGlzLl96KnRoaXMuX3ordGhpcy5fdyp0aGlzLl93fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuX3gqdGhpcy5feCt0aGlzLl95KnRoaXMuX3krdGhpcy5feip0aGlzLl96K3RoaXMuX3cqdGhpcy5fdyl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMubGVuZ3RoKCk7MD09PWE/KHRoaXMuX3o9dGhpcy5feT10aGlzLl94PTAsdGhpcy5fdz0xKTooYT0xL2EsdGhpcy5feCo9YSx0aGlzLl95Kj1hLHRoaXMuX3oqPWEsdGhpcy5fdyo9YSk7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LFxubXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oVEhSRUUud2FybihcIlRIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5UXVhdGVybmlvbnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoYSxiKSk6dGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKHRoaXMsYSl9LG11bHRpcGx5UXVhdGVybmlvbnM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLl94LGQ9YS5feSxlPWEuX3osZj1hLl93LGc9Yi5feCxoPWIuX3ksaz1iLl96LGw9Yi5fdzt0aGlzLl94PWMqbCtmKmcrZCprLWUqaDt0aGlzLl95PWQqbCtmKmgrZSpnLWMqazt0aGlzLl96PWUqbCtmKmsrYypoLWQqZzt0aGlzLl93PWYqbC1jKmctZCpoLWUqazt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sbXVsdGlwbHlWZWN0b3IzOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC5cIik7XG5yZXR1cm4gYS5hcHBseVF1YXRlcm5pb24odGhpcyl9LHNsZXJwOmZ1bmN0aW9uKGEsYil7aWYoMD09PWIpcmV0dXJuIHRoaXM7aWYoMT09PWIpcmV0dXJuIHRoaXMuY29weShhKTt2YXIgYz10aGlzLl94LGQ9dGhpcy5feSxlPXRoaXMuX3osZj10aGlzLl93LGc9ZiphLl93K2MqYS5feCtkKmEuX3krZSphLl96OzA+Zz8odGhpcy5fdz0tYS5fdyx0aGlzLl94PS1hLl94LHRoaXMuX3k9LWEuX3ksdGhpcy5fej0tYS5feixnPS1nKTp0aGlzLmNvcHkoYSk7aWYoMTw9ZylyZXR1cm4gdGhpcy5fdz1mLHRoaXMuX3g9Yyx0aGlzLl95PWQsdGhpcy5fej1lLHRoaXM7dmFyIGg9TWF0aC5hY29zKGcpLGs9TWF0aC5zcXJ0KDEtZypnKTtpZiguMDAxPk1hdGguYWJzKGspKXJldHVybiB0aGlzLl93PS41KihmK3RoaXMuX3cpLHRoaXMuX3g9LjUqKGMrdGhpcy5feCksdGhpcy5feT0uNSooZCt0aGlzLl95KSx0aGlzLl96PS41KihlK3RoaXMuX3opLHRoaXM7Zz1NYXRoLnNpbigoMS1iKSpoKS9rO2g9XG5NYXRoLnNpbihiKmgpL2s7dGhpcy5fdz1mKmcrdGhpcy5fdypoO3RoaXMuX3g9YypnK3RoaXMuX3gqaDt0aGlzLl95PWQqZyt0aGlzLl95Kmg7dGhpcy5fej1lKmcrdGhpcy5feipoO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuX3g9PT10aGlzLl94JiZhLl95PT09dGhpcy5feSYmYS5fej09PXRoaXMuX3omJmEuX3c9PT10aGlzLl93fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLl94PWFbYl07dGhpcy5feT1hW2IrMV07dGhpcy5fej1hW2IrMl07dGhpcy5fdz1hW2IrM107dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLl94O2FbYisxXT10aGlzLl95O2FbYisyXT10aGlzLl96O2FbYiszXT10aGlzLl93O3JldHVybiBhfSxvbkNoYW5nZTpmdW5jdGlvbihhKXt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2s9XG5hO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuUXVhdGVybmlvbih0aGlzLl94LHRoaXMuX3ksdGhpcy5feix0aGlzLl93KX19O1RIUkVFLlF1YXRlcm5pb24uc2xlcnA9ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIGMuY29weShhKS5zbGVycChiLGQpfTtUSFJFRS5WZWN0b3IyPWZ1bmN0aW9uKGEsYil7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDB9O1xuVEhSRUUuVmVjdG9yMi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlZlY3RvcjIsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy54PWE7dGhpcy55PWI7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSl7dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSl7dGhpcy55PWE7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudDpmdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDA6dGhpcy54PWI7YnJlYWs7Y2FzZSAxOnRoaXMueT1iO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGdldENvbXBvbmVudDpmdW5jdGlvbihhKXtzd2l0Y2goYSl7Y2FzZSAwOnJldHVybiB0aGlzLng7Y2FzZSAxOnJldHVybiB0aGlzLnk7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sY29weTpmdW5jdGlvbihhKXt0aGlzLng9YS54O3RoaXMueT1hLnk7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhLFxuYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3JldHVybiB0aGlzfSxhZGRWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCtiLng7dGhpcy55PWEueStiLnk7cmV0dXJuIHRoaXN9LHN1YjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIFRIUkVFLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuc3ViVmVjdG9ycyhhLGIpO3RoaXMueC09YS54O3RoaXMueS09YS55O3JldHVybiB0aGlzfSxcbnN1YlNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngtPWE7dGhpcy55LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMueCo9YS54O3RoaXMueSo9YS55O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3JldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXswIT09YT8oYT0xL2EsdGhpcy54Kj1hLHRoaXMueSo9YSk6dGhpcy55PXRoaXMueD0wO3JldHVybiB0aGlzfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PmEueCYmKHRoaXMueD1hLngpO3RoaXMueT5hLnkmJih0aGlzLnk9YS55KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueDxhLngmJih0aGlzLng9YS54KTtcbnRoaXMueTxhLnkmJih0aGlzLnk9YS55KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng8YS54P3RoaXMueD1hLng6dGhpcy54PmIueCYmKHRoaXMueD1iLngpO3RoaXMueTxhLnk/dGhpcy55PWEueTp0aGlzLnk+Yi55JiYodGhpcy55PWIueSk7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMixiPW5ldyBUSFJFRS5WZWN0b3IyKTthLnNldChjLGMpO2Iuc2V0KGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7cmV0dXJuIHRoaXN9LGNlaWw6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5jZWlsKHRoaXMueCk7dGhpcy55PU1hdGguY2VpbCh0aGlzLnkpO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1cbk1hdGgucm91bmQodGhpcy54KTt0aGlzLnk9TWF0aC5yb3VuZCh0aGlzLnkpO3JldHVybiB0aGlzfSxyb3VuZFRvWmVybzpmdW5jdGlvbigpe3RoaXMueD0wPnRoaXMueD9NYXRoLmNlaWwodGhpcy54KTpNYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PTA+dGhpcy55P01hdGguY2VpbCh0aGlzLnkpOk1hdGguZmxvb3IodGhpcy55KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnl9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCkpfSxkaXN0YW5jZVRvOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnNxcnQodGhpcy5kaXN0YW5jZVRvU3F1YXJlZChhKSl9LFxuZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LWEueDthPXRoaXMueS1hLnk7cmV0dXJuIGIqYithKmF9LHNldExlbmd0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCgpOzAhPT1iJiZhIT09YiYmdGhpcy5tdWx0aXBseVNjYWxhcihhL2IpO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3JldHVybiB0aGlzfSxsZXJwVmVjdG9yczpmdW5jdGlvbihhLGIsYyl7dGhpcy5zdWJWZWN0b3JzKGIsYSkubXVsdGlwbHlTY2FsYXIoYykuYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueD09PXRoaXMueCYmYS55PT09dGhpcy55fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09XG5hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLng7YVtiKzFdPXRoaXMueTtyZXR1cm4gYX0sZnJvbUF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YyYmKGM9MCk7Yj1iKmEuaXRlbVNpemUrYzt0aGlzLng9YS5hcnJheVtiXTt0aGlzLnk9YS5hcnJheVtiKzFdO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMih0aGlzLngsdGhpcy55KX19O1RIUkVFLlZlY3RvcjM9ZnVuY3Rpb24oYSxiLGMpe3RoaXMueD1hfHwwO3RoaXMueT1ifHwwO3RoaXMuej1jfHwwfTtcblRIUkVFLlZlY3RvcjMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5WZWN0b3IzLHNldDpmdW5jdGlvbihhLGIsYyl7dGhpcy54PWE7dGhpcy55PWI7dGhpcy56PWM7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSl7dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSl7dGhpcy55PWE7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSl7dGhpcy56PWE7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudDpmdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDA6dGhpcy54PWI7YnJlYWs7Y2FzZSAxOnRoaXMueT1iO2JyZWFrO2Nhc2UgMjp0aGlzLno9YjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O2Nhc2UgMTpyZXR1cm4gdGhpcy55O2Nhc2UgMjpyZXR1cm4gdGhpcy56O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK1xuYSk7fX0sY29weTpmdW5jdGlvbihhKXt0aGlzLng9YS54O3RoaXMueT1hLnk7dGhpcy56PWEuejtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7dGhpcy56Kz1hLno7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3RoaXMueis9YTtyZXR1cm4gdGhpc30sYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSxcbnRoaXMuc3ViVmVjdG9ycyhhLGIpO3RoaXMueC09YS54O3RoaXMueS09YS55O3RoaXMuei09YS56O3JldHVybiB0aGlzfSxzdWJTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54LT1hO3RoaXMueS09YTt0aGlzLnotPWE7cmV0dXJuIHRoaXN9LHN1YlZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54LWIueDt0aGlzLnk9YS55LWIueTt0aGlzLno9YS56LWIuejtyZXR1cm4gdGhpc30sbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5tdWx0aXBseVZlY3RvcnMoYSxiKTt0aGlzLngqPWEueDt0aGlzLnkqPWEueTt0aGlzLnoqPWEuejtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kj1hO3RoaXMueSo9YTt0aGlzLnoqPVxuYTtyZXR1cm4gdGhpc30sbXVsdGlwbHlWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueCpiLng7dGhpcy55PWEueSpiLnk7dGhpcy56PWEueipiLno7cmV0dXJuIHRoaXN9LGFwcGx5RXVsZXI6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7ITE9PT1iIGluc3RhbmNlb2YgVEhSRUUuRXVsZXImJlRIUkVFLmVycm9yKFwiVEhSRUUuVmVjdG9yMzogLmFwcGx5RXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5RdWF0ZXJuaW9uKTt0aGlzLmFwcGx5UXVhdGVybmlvbihhLnNldEZyb21FdWxlcihiKSk7cmV0dXJuIHRoaXN9fSgpLGFwcGx5QXhpc0FuZ2xlOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlF1YXRlcm5pb24pO3RoaXMuYXBwbHlRdWF0ZXJuaW9uKGEuc2V0RnJvbUF4aXNBbmdsZShiLFxuYykpO3JldHVybiB0aGlzfX0oKSxhcHBseU1hdHJpeDM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt0aGlzLng9YVswXSpiK2FbM10qYythWzZdKmQ7dGhpcy55PWFbMV0qYithWzRdKmMrYVs3XSpkO3RoaXMuej1hWzJdKmIrYVs1XSpjK2FbOF0qZDtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMuejthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkK2FbMTJdO3RoaXMueT1hWzFdKmIrYVs1XSpjK2FbOV0qZCthWzEzXTt0aGlzLno9YVsyXSpiK2FbNl0qYythWzEwXSpkK2FbMTRdO3JldHVybiB0aGlzfSxhcHBseVByb2plY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt2YXIgZT0xLyhhWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0pO3RoaXMueD0oYVswXSpiK2FbNF0qXG5jK2FbOF0qZCthWzEyXSkqZTt0aGlzLnk9KGFbMV0qYithWzVdKmMrYVs5XSpkK2FbMTNdKSplO3RoaXMuej0oYVsyXSpiK2FbNl0qYythWzEwXSpkK2FbMTRdKSplO3JldHVybiB0aGlzfSxhcHBseVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56LGU9YS54LGY9YS55LGc9YS56O2E9YS53O3ZhciBoPWEqYitmKmQtZypjLGs9YSpjK2cqYi1lKmQsbD1hKmQrZSpjLWYqYixiPS1lKmItZipjLWcqZDt0aGlzLng9aCphK2IqLWUrayotZy1sKi1mO3RoaXMueT1rKmErYiotZitsKi1lLWgqLWc7dGhpcy56PWwqYStiKi1nK2gqLWYtayotZTtyZXR1cm4gdGhpc30scHJvamVjdDpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tdWx0aXBseU1hdHJpY2VzKGIucHJvamVjdGlvbk1hdHJpeCxhLmdldEludmVyc2UoYi5tYXRyaXhXb3JsZCkpO3JldHVybiB0aGlzLmFwcGx5UHJvamVjdGlvbihhKX19KCksXG51bnByb2plY3Q6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk1hdHJpeDQpO2EubXVsdGlwbHlNYXRyaWNlcyhiLm1hdHJpeFdvcmxkLGEuZ2V0SW52ZXJzZShiLnByb2plY3Rpb25NYXRyaXgpKTtyZXR1cm4gdGhpcy5hcHBseVByb2plY3Rpb24oYSl9fSgpLHRyYW5zZm9ybURpcmVjdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLno7YT1hLmVsZW1lbnRzO3RoaXMueD1hWzBdKmIrYVs0XSpjK2FbOF0qZDt0aGlzLnk9YVsxXSpiK2FbNV0qYythWzldKmQ7dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZDt0aGlzLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzfSxkaXZpZGU6ZnVuY3Rpb24oYSl7dGhpcy54Lz1hLng7dGhpcy55Lz1hLnk7dGhpcy56Lz1hLno7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXswIT09YT8oYT0xL2EsdGhpcy54Kj1hLHRoaXMueSo9YSx0aGlzLnoqPVxuYSk6dGhpcy56PXRoaXMueT10aGlzLng9MDtyZXR1cm4gdGhpc30sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD5hLngmJih0aGlzLng9YS54KTt0aGlzLnk+YS55JiYodGhpcy55PWEueSk7dGhpcy56PmEueiYmKHRoaXMuej1hLnopO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PGEueCYmKHRoaXMueD1hLngpO3RoaXMueTxhLnkmJih0aGlzLnk9YS55KTt0aGlzLno8YS56JiYodGhpcy56PWEueik7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKGEsYil7dGhpcy54PGEueD90aGlzLng9YS54OnRoaXMueD5iLngmJih0aGlzLng9Yi54KTt0aGlzLnk8YS55P3RoaXMueT1hLnk6dGhpcy55PmIueSYmKHRoaXMueT1iLnkpO3RoaXMuejxhLno/dGhpcy56PWEuejp0aGlzLno+Yi56JiYodGhpcy56PWIueik7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yMyxcbmI9bmV3IFRIUkVFLlZlY3RvcjMpO2Euc2V0KGMsYyxjKTtiLnNldChkLGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PU1hdGguZmxvb3IodGhpcy56KTtyZXR1cm4gdGhpc30sY2VpbDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmNlaWwodGhpcy54KTt0aGlzLnk9TWF0aC5jZWlsKHRoaXMueSk7dGhpcy56PU1hdGguY2VpbCh0aGlzLnopO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTt0aGlzLno9TWF0aC5yb3VuZCh0aGlzLnopO3JldHVybiB0aGlzfSxyb3VuZFRvWmVybzpmdW5jdGlvbigpe3RoaXMueD0wPnRoaXMueD9NYXRoLmNlaWwodGhpcy54KTpNYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PTA+dGhpcy55P01hdGguY2VpbCh0aGlzLnkpOlxuTWF0aC5mbG9vcih0aGlzLnkpO3RoaXMuej0wPnRoaXMuej9NYXRoLmNlaWwodGhpcy56KTpNYXRoLmZsb29yKHRoaXMueik7cmV0dXJuIHRoaXN9LG5lZ2F0ZTpmdW5jdGlvbigpe3RoaXMueD0tdGhpcy54O3RoaXMueT0tdGhpcy55O3RoaXMuej0tdGhpcy56O3JldHVybiB0aGlzfSxkb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMueCphLngrdGhpcy55KmEueSt0aGlzLnoqYS56fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMuen0sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueil9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe3JldHVybiBNYXRoLmFicyh0aGlzLngpK01hdGguYWJzKHRoaXMueSkrTWF0aC5hYnModGhpcy56KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCkpfSxcbnNldExlbmd0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCgpOzAhPT1iJiZhIT09YiYmdGhpcy5tdWx0aXBseVNjYWxhcihhL2IpO3JldHVybiB0aGlzfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz0oYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7cmV0dXJuIHRoaXN9LGxlcnBWZWN0b3JzOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnN1YlZlY3RvcnMoYixhKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSk7cmV0dXJuIHRoaXN9LGNyb3NzOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuY3Jvc3NWZWN0b3JzKGEsYik7dmFyIGM9dGhpcy54LGQ9dGhpcy55LGU9dGhpcy56O3RoaXMueD1kKmEuei1lKmEueTt0aGlzLnk9XG5lKmEueC1jKmEuejt0aGlzLno9YyphLnktZCphLng7cmV0dXJuIHRoaXN9LGNyb3NzVmVjdG9yczpmdW5jdGlvbihhLGIpe3ZhciBjPWEueCxkPWEueSxlPWEueixmPWIueCxnPWIueSxoPWIuejt0aGlzLng9ZCpoLWUqZzt0aGlzLnk9ZSpmLWMqaDt0aGlzLno9YypnLWQqZjtyZXR1cm4gdGhpc30scHJvamVjdE9uVmVjdG9yOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlZlY3RvcjMpO2EuY29weShjKS5ub3JtYWxpemUoKTtiPXRoaXMuZG90KGEpO3JldHVybiB0aGlzLmNvcHkoYSkubXVsdGlwbHlTY2FsYXIoYil9fSgpLHByb2plY3RPblBsYW5lOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTthLmNvcHkodGhpcykucHJvamVjdE9uVmVjdG9yKGIpO3JldHVybiB0aGlzLnN1YihhKX19KCkscmVmbGVjdDpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbihiKXt2b2lkIDA9PT1cbmEmJihhPW5ldyBUSFJFRS5WZWN0b3IzKTtyZXR1cm4gdGhpcy5zdWIoYS5jb3B5KGIpLm11bHRpcGx5U2NhbGFyKDIqdGhpcy5kb3QoYikpKX19KCksYW5nbGVUbzpmdW5jdGlvbihhKXthPXRoaXMuZG90KGEpLyh0aGlzLmxlbmd0aCgpKmEubGVuZ3RoKCkpO3JldHVybiBNYXRoLmFjb3MoVEhSRUUuTWF0aC5jbGFtcChhLC0xLDEpKX0sZGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoYSkpfSxkaXN0YW5jZVRvU3F1YXJlZDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngtYS54LGM9dGhpcy55LWEueTthPXRoaXMuei1hLno7cmV0dXJuIGIqYitjKmMrYSphfSxzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhLGIpe1RIUkVFLmVycm9yKFwiVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuXCIpfSxcbnNldEV1bGVyRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSxiKXtUSFJFRS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC5cIil9LGdldFBvc2l0aW9uRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oYSl9LGdldFNjYWxlRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldFNjYWxlRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhTY2FsZSgpLlwiKTtyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoYSl9LGdldENvbHVtbkZyb21NYXRyaXg6ZnVuY3Rpb24oYSxcbmIpe1RIUkVFLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS5cIik7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbihhLGIpfSxzZXRGcm9tTWF0cml4UG9zaXRpb246ZnVuY3Rpb24oYSl7dGhpcy54PWEuZWxlbWVudHNbMTJdO3RoaXMueT1hLmVsZW1lbnRzWzEzXTt0aGlzLno9YS5lbGVtZW50c1sxNF07cmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXhTY2FsZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnNldChhLmVsZW1lbnRzWzBdLGEuZWxlbWVudHNbMV0sYS5lbGVtZW50c1syXSkubGVuZ3RoKCksYz10aGlzLnNldChhLmVsZW1lbnRzWzRdLGEuZWxlbWVudHNbNV0sYS5lbGVtZW50c1s2XSkubGVuZ3RoKCk7YT10aGlzLnNldChhLmVsZW1lbnRzWzhdLGEuZWxlbWVudHNbOV0sYS5lbGVtZW50c1sxMF0pLmxlbmd0aCgpO3RoaXMueD1iO3RoaXMueT1jO3RoaXMuej1hO1xucmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXhDb2x1bW46ZnVuY3Rpb24oYSxiKXt2YXIgYz00KmEsZD1iLmVsZW1lbnRzO3RoaXMueD1kW2NdO3RoaXMueT1kW2MrMV07dGhpcy56PWRbYysyXTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLng9PT10aGlzLngmJmEueT09PXRoaXMueSYmYS56PT09dGhpcy56fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3RoaXMuej1hW2IrMl07cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1hJiYoYT1bXSk7dm9pZCAwPT09YiYmKGI9MCk7YVtiXT10aGlzLng7YVtiKzFdPXRoaXMueTthW2IrMl09dGhpcy56O3JldHVybiBhfSxmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1jJiYoYz0wKTtiPWIqYS5pdGVtU2l6ZStjO3RoaXMueD1hLmFycmF5W2JdO3RoaXMueT1hLmFycmF5W2IrMV07dGhpcy56PVxuYS5hcnJheVtiKzJdO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLngsdGhpcy55LHRoaXMueil9fTtUSFJFRS5WZWN0b3I0PWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMueD1hfHwwO3RoaXMueT1ifHwwO3RoaXMuej1jfHwwO3RoaXMudz12b2lkIDAhPT1kP2Q6MX07XG5USFJFRS5WZWN0b3I0LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuVmVjdG9yNCxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy54PWE7dGhpcy55PWI7dGhpcy56PWM7dGhpcy53PWQ7cmV0dXJuIHRoaXN9LHNldFg6ZnVuY3Rpb24oYSl7dGhpcy54PWE7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSl7dGhpcy55PWE7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSl7dGhpcy56PWE7cmV0dXJuIHRoaXN9LHNldFc6ZnVuY3Rpb24oYSl7dGhpcy53PWE7cmV0dXJuIHRoaXN9LHNldENvbXBvbmVudDpmdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDA6dGhpcy54PWI7YnJlYWs7Y2FzZSAxOnRoaXMueT1iO2JyZWFrO2Nhc2UgMjp0aGlzLno9YjticmVhaztjYXNlIDM6dGhpcy53PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrYSk7fX0sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtcbmNhc2UgMTpyZXR1cm4gdGhpcy55O2Nhc2UgMjpyZXR1cm4gdGhpcy56O2Nhc2UgMzpyZXR1cm4gdGhpcy53O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy54PWEueDt0aGlzLnk9YS55O3RoaXMuej1hLno7dGhpcy53PXZvaWQgMCE9PWEudz9hLnc6MTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gVEhSRUUud2FybihcIlRIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7dGhpcy56Kz1hLno7dGhpcy53Kz1hLnc7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3RoaXMueis9YTt0aGlzLncrPWE7cmV0dXJuIHRoaXN9LGFkZFZlY3RvcnM6ZnVuY3Rpb24oYSxcbmIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3RoaXMudz1hLncrYi53O3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBUSFJFRS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLnN1YlZlY3RvcnMoYSxiKTt0aGlzLngtPWEueDt0aGlzLnktPWEueTt0aGlzLnotPWEuejt0aGlzLnctPWEudztyZXR1cm4gdGhpc30sc3ViU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueC09YTt0aGlzLnktPWE7dGhpcy56LT1hO3RoaXMudy09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3RoaXMudz1hLnctYi53O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPVxuYTt0aGlzLnkqPWE7dGhpcy56Kj1hO3RoaXMudyo9YTtyZXR1cm4gdGhpc30sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMueixlPXRoaXMudzthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzRdKmMrYVs4XSpkK2FbMTJdKmU7dGhpcy55PWFbMV0qYithWzVdKmMrYVs5XSpkK2FbMTNdKmU7dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XSplO3RoaXMudz1hWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0qZTtyZXR1cm4gdGhpc30sZGl2aWRlU2NhbGFyOmZ1bmN0aW9uKGEpezAhPT1hPyhhPTEvYSx0aGlzLngqPWEsdGhpcy55Kj1hLHRoaXMueio9YSx0aGlzLncqPWEpOih0aGlzLno9dGhpcy55PXRoaXMueD0wLHRoaXMudz0xKTtyZXR1cm4gdGhpc30sc2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dGhpcy53PTIqTWF0aC5hY29zKGEudyk7dmFyIGI9TWF0aC5zcXJ0KDEtYS53KmEudyk7MUUtND5cbmI/KHRoaXMueD0xLHRoaXMuej10aGlzLnk9MCk6KHRoaXMueD1hLngvYix0aGlzLnk9YS55L2IsdGhpcy56PWEuei9iKTtyZXR1cm4gdGhpc30sc2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4OmZ1bmN0aW9uKGEpe3ZhciBiLGMsZDthPWEuZWxlbWVudHM7dmFyIGU9YVswXTtkPWFbNF07dmFyIGY9YVs4XSxnPWFbMV0saD1hWzVdLGs9YVs5XTtjPWFbMl07Yj1hWzZdO3ZhciBsPWFbMTBdO2lmKC4wMT5NYXRoLmFicyhkLWcpJiYuMDE+TWF0aC5hYnMoZi1jKSYmLjAxPk1hdGguYWJzKGstYikpe2lmKC4xPk1hdGguYWJzKGQrZykmJi4xPk1hdGguYWJzKGYrYykmJi4xPk1hdGguYWJzKGsrYikmJi4xPk1hdGguYWJzKGUraCtsLTMpKXJldHVybiB0aGlzLnNldCgxLDAsMCwwKSx0aGlzO2E9TWF0aC5QSTtlPShlKzEpLzI7aD0oaCsxKS8yO2w9KGwrMSkvMjtkPShkK2cpLzQ7Zj0oZitjKS80O2s9KGsrYikvNDtlPmgmJmU+bD8uMDE+ZT8oYj0wLGQ9Yz0uNzA3MTA2NzgxKTooYj1cbk1hdGguc3FydChlKSxjPWQvYixkPWYvYik6aD5sPy4wMT5oPyhiPS43MDcxMDY3ODEsYz0wLGQ9LjcwNzEwNjc4MSk6KGM9TWF0aC5zcXJ0KGgpLGI9ZC9jLGQ9ay9jKTouMDE+bD8oYz1iPS43MDcxMDY3ODEsZD0wKTooZD1NYXRoLnNxcnQobCksYj1mL2QsYz1rL2QpO3RoaXMuc2V0KGIsYyxkLGEpO3JldHVybiB0aGlzfWE9TWF0aC5zcXJ0KChiLWspKihiLWspKyhmLWMpKihmLWMpKyhnLWQpKihnLWQpKTsuMDAxPk1hdGguYWJzKGEpJiYoYT0xKTt0aGlzLng9KGItaykvYTt0aGlzLnk9KGYtYykvYTt0aGlzLno9KGctZCkvYTt0aGlzLnc9TWF0aC5hY29zKChlK2grbC0xKS8yKTtyZXR1cm4gdGhpc30sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD5hLngmJih0aGlzLng9YS54KTt0aGlzLnk+YS55JiYodGhpcy55PWEueSk7dGhpcy56PmEueiYmKHRoaXMuej1hLnopO3RoaXMudz5hLncmJih0aGlzLnc9YS53KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueDxhLngmJlxuKHRoaXMueD1hLngpO3RoaXMueTxhLnkmJih0aGlzLnk9YS55KTt0aGlzLno8YS56JiYodGhpcy56PWEueik7dGhpcy53PGEudyYmKHRoaXMudz1hLncpO3JldHVybiB0aGlzfSxjbGFtcDpmdW5jdGlvbihhLGIpe3RoaXMueDxhLng/dGhpcy54PWEueDp0aGlzLng+Yi54JiYodGhpcy54PWIueCk7dGhpcy55PGEueT90aGlzLnk9YS55OnRoaXMueT5iLnkmJih0aGlzLnk9Yi55KTt0aGlzLno8YS56P3RoaXMuej1hLno6dGhpcy56PmIueiYmKHRoaXMuej1iLnopO3RoaXMudzxhLnc/dGhpcy53PWEudzp0aGlzLnc+Yi53JiYodGhpcy53PWIudyk7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGEsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuVmVjdG9yNCxiPW5ldyBUSFJFRS5WZWN0b3I0KTthLnNldChjLGMsYyxjKTtiLnNldChkLGQsZCxkKTtyZXR1cm4gdGhpcy5jbGFtcChhLGIpfX0oKSxmbG9vcjpmdW5jdGlvbigpe3RoaXMueD1cbk1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9TWF0aC5mbG9vcih0aGlzLnkpO3RoaXMuej1NYXRoLmZsb29yKHRoaXMueik7dGhpcy53PU1hdGguZmxvb3IodGhpcy53KTtyZXR1cm4gdGhpc30sY2VpbDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLmNlaWwodGhpcy54KTt0aGlzLnk9TWF0aC5jZWlsKHRoaXMueSk7dGhpcy56PU1hdGguY2VpbCh0aGlzLnopO3RoaXMudz1NYXRoLmNlaWwodGhpcy53KTtyZXR1cm4gdGhpc30scm91bmQ6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5yb3VuZCh0aGlzLngpO3RoaXMueT1NYXRoLnJvdW5kKHRoaXMueSk7dGhpcy56PU1hdGgucm91bmQodGhpcy56KTt0aGlzLnc9TWF0aC5yb3VuZCh0aGlzLncpO3JldHVybiB0aGlzfSxyb3VuZFRvWmVybzpmdW5jdGlvbigpe3RoaXMueD0wPnRoaXMueD9NYXRoLmNlaWwodGhpcy54KTpNYXRoLmZsb29yKHRoaXMueCk7dGhpcy55PTA+dGhpcy55P01hdGguY2VpbCh0aGlzLnkpOk1hdGguZmxvb3IodGhpcy55KTtcbnRoaXMuej0wPnRoaXMuej9NYXRoLmNlaWwodGhpcy56KTpNYXRoLmZsb29yKHRoaXMueik7dGhpcy53PTA+dGhpcy53P01hdGguY2VpbCh0aGlzLncpOk1hdGguZmxvb3IodGhpcy53KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7dGhpcy56PS10aGlzLno7dGhpcy53PS10aGlzLnc7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55K3RoaXMueiphLnordGhpcy53KmEud30sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnordGhpcy53KnRoaXMud30sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53KX0sbGVuZ3RoTWFuaGF0dGFuOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYWJzKHRoaXMueCkrXG5NYXRoLmFicyh0aGlzLnkpK01hdGguYWJzKHRoaXMueikrTWF0aC5hYnModGhpcy53KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCkpfSxzZXRMZW5ndGg6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5sZW5ndGgoKTswIT09YiYmYSE9PWImJnRoaXMubXVsdGlwbHlTY2FsYXIoYS9iKTtyZXR1cm4gdGhpc30sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMueCs9KGEueC10aGlzLngpKmI7dGhpcy55Kz0oYS55LXRoaXMueSkqYjt0aGlzLnorPShhLnotdGhpcy56KSpiO3RoaXMudys9KGEudy10aGlzLncpKmI7cmV0dXJuIHRoaXN9LGxlcnBWZWN0b3JzOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnN1YlZlY3RvcnMoYixhKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS54PT09dGhpcy54JiZhLnk9PT10aGlzLnkmJmEuej09PXRoaXMueiYmYS53PT09dGhpcy53fSxcbmZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMueD1hW2JdO3RoaXMueT1hW2IrMV07dGhpcy56PWFbYisyXTt0aGlzLnc9YVtiKzNdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7YVtiKzJdPXRoaXMuejthW2IrM109dGhpcy53O3JldHVybiBhfSxmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXt2b2lkIDA9PT1jJiYoYz0wKTtiPWIqYS5pdGVtU2l6ZStjO3RoaXMueD1hLmFycmF5W2JdO3RoaXMueT1hLmFycmF5W2IrMV07dGhpcy56PWEuYXJyYXlbYisyXTt0aGlzLnc9YS5hcnJheVtiKzNdO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuVmVjdG9yNCh0aGlzLngsdGhpcy55LHRoaXMueix0aGlzLncpfX07XG5USFJFRS5FdWxlcj1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLl94PWF8fDA7dGhpcy5feT1ifHwwO3RoaXMuX3o9Y3x8MDt0aGlzLl9vcmRlcj1kfHxUSFJFRS5FdWxlci5EZWZhdWx0T3JkZXJ9O1RIUkVFLkV1bGVyLlJvdGF0aW9uT3JkZXJzPVwiWFlaIFlaWCBaWFkgWFpZIFlYWiBaWVhcIi5zcGxpdChcIiBcIik7VEhSRUUuRXVsZXIuRGVmYXVsdE9yZGVyPVwiWFlaXCI7XG5USFJFRS5FdWxlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkV1bGVyLF94OjAsX3k6MCxfejowLF9vcmRlcjpUSFJFRS5FdWxlci5EZWZhdWx0T3JkZXIsZ2V0IHgoKXtyZXR1cm4gdGhpcy5feH0sc2V0IHgoYSl7dGhpcy5feD1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfSxnZXQgeSgpe3JldHVybiB0aGlzLl95fSxzZXQgeShhKXt0aGlzLl95PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9LGdldCB6KCl7cmV0dXJuIHRoaXMuX3p9LHNldCB6KGEpe3RoaXMuX3o9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sZ2V0IG9yZGVyKCl7cmV0dXJuIHRoaXMuX29yZGVyfSxzZXQgb3JkZXIoYSl7dGhpcy5fb3JkZXI9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX0sc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX29yZGVyPWR8fHRoaXMuX29yZGVyO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuX3g9XG5hLl94O3RoaXMuX3k9YS5feTt0aGlzLl96PWEuX3o7dGhpcy5fb3JkZXI9YS5fb3JkZXI7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9VEhSRUUuTWF0aC5jbGFtcCxlPWEuZWxlbWVudHM7YT1lWzBdO3ZhciBmPWVbNF0sZz1lWzhdLGg9ZVsxXSxrPWVbNV0sbD1lWzldLHA9ZVsyXSxuPWVbNl0sZT1lWzEwXTtiPWJ8fHRoaXMuX29yZGVyO1wiWFlaXCI9PT1iPyh0aGlzLl95PU1hdGguYXNpbihkKGcsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhnKT8odGhpcy5feD1NYXRoLmF0YW4yKC1sLGUpLHRoaXMuX3o9TWF0aC5hdGFuMigtZixhKSk6KHRoaXMuX3g9TWF0aC5hdGFuMihuLGspLHRoaXMuX3o9MCkpOlwiWVhaXCI9PT1iPyh0aGlzLl94PU1hdGguYXNpbigtZChsLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMobCk/KHRoaXMuX3k9TWF0aC5hdGFuMihnLGUpLHRoaXMuX3o9TWF0aC5hdGFuMihoLFxuaykpOih0aGlzLl95PU1hdGguYXRhbjIoLXAsYSksdGhpcy5fej0wKSk6XCJaWFlcIj09PWI/KHRoaXMuX3g9TWF0aC5hc2luKGQobiwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKG4pPyh0aGlzLl95PU1hdGguYXRhbjIoLXAsZSksdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKToodGhpcy5feT0wLHRoaXMuX3o9TWF0aC5hdGFuMihoLGEpKSk6XCJaWVhcIj09PWI/KHRoaXMuX3k9TWF0aC5hc2luKC1kKHAsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhwKT8odGhpcy5feD1NYXRoLmF0YW4yKG4sZSksdGhpcy5fej1NYXRoLmF0YW4yKGgsYSkpOih0aGlzLl94PTAsdGhpcy5fej1NYXRoLmF0YW4yKC1mLGspKSk6XCJZWlhcIj09PWI/KHRoaXMuX3o9TWF0aC5hc2luKGQoaCwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGgpPyh0aGlzLl94PU1hdGguYXRhbjIoLWwsayksdGhpcy5feT1NYXRoLmF0YW4yKC1wLGEpKToodGhpcy5feD0wLHRoaXMuX3k9TWF0aC5hdGFuMihnLGUpKSk6XCJYWllcIj09PWI/KHRoaXMuX3o9XG5NYXRoLmFzaW4oLWQoZiwtMSwxKSksLjk5OTk5Pk1hdGguYWJzKGYpPyh0aGlzLl94PU1hdGguYXRhbjIobixrKSx0aGlzLl95PU1hdGguYXRhbjIoZyxhKSk6KHRoaXMuX3g9TWF0aC5hdGFuMigtbCxlKSx0aGlzLl95PTApKTpUSFJFRS53YXJuKFwiVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBnaXZlbiB1bnN1cHBvcnRlZCBvcmRlcjogXCIrYik7dGhpcy5fb3JkZXI9YjtpZighMSE9PWMpdGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0cml4NCk7YS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihiKTt0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeChhLGMsZCk7cmV0dXJuIHRoaXN9fSgpLHNldEZyb21WZWN0b3IzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuc2V0KGEueCxhLnksYS56LFxuYnx8dGhpcy5fb3JkZXIpfSxyZW9yZGVyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2Euc2V0RnJvbUV1bGVyKHRoaXMpO3RoaXMuc2V0RnJvbVF1YXRlcm5pb24oYSxiKX19KCksZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLl94PT09dGhpcy5feCYmYS5feT09PXRoaXMuX3kmJmEuX3o9PT10aGlzLl96JiZhLl9vcmRlcj09PXRoaXMuX29yZGVyfSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSl7dGhpcy5feD1hWzBdO3RoaXMuX3k9YVsxXTt0aGlzLl96PWFbMl07dm9pZCAwIT09YVszXSYmKHRoaXMuX29yZGVyPWFbM10pO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy5feDthW2IrMV09dGhpcy5feTthW2IrMl09dGhpcy5fejthW2IrM109dGhpcy5fb3JkZXI7cmV0dXJuIGF9LHRvVmVjdG9yMzpmdW5jdGlvbihhKXtyZXR1cm4gYT9cbmEuc2V0KHRoaXMuX3gsdGhpcy5feSx0aGlzLl96KTpuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLl94LHRoaXMuX3ksdGhpcy5feil9LG9uQ2hhbmdlOmZ1bmN0aW9uKGEpe3RoaXMub25DaGFuZ2VDYWxsYmFjaz1hO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuRXVsZXIodGhpcy5feCx0aGlzLl95LHRoaXMuX3osdGhpcy5fb3JkZXIpfX07VEhSRUUuTGluZTM9ZnVuY3Rpb24oYSxiKXt0aGlzLnN0YXJ0PXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmVuZD12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLlZlY3RvcjN9O1xuVEhSRUUuTGluZTMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5MaW5lMyxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLnN0YXJ0LmNvcHkoYSk7dGhpcy5lbmQuY29weShiKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLnN0YXJ0LmNvcHkoYS5zdGFydCk7dGhpcy5lbmQuY29weShhLmVuZCk7cmV0dXJuIHRoaXN9LGNlbnRlcjpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLmFkZFZlY3RvcnModGhpcy5zdGFydCx0aGlzLmVuZCkubXVsdGlwbHlTY2FsYXIoLjUpfSxkZWx0YTpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLnN1YlZlY3RvcnModGhpcy5lbmQsdGhpcy5zdGFydCl9LGRpc3RhbmNlU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmVuZCl9LGRpc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyh0aGlzLmVuZCl9LGF0OmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1ifHxuZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gdGhpcy5kZWx0YShjKS5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy5zdGFydCl9LGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihjLGQpe2Euc3ViVmVjdG9ycyhjLHRoaXMuc3RhcnQpO2Iuc3ViVmVjdG9ycyh0aGlzLmVuZCx0aGlzLnN0YXJ0KTt2YXIgZT1iLmRvdChiKSxlPWIuZG90KGEpL2U7ZCYmKGU9VEhSRUUuTWF0aC5jbGFtcChlLDAsMSkpO3JldHVybiBlfX0oKSxjbG9zZXN0UG9pbnRUb1BvaW50OmZ1bmN0aW9uKGEsYixjKXthPXRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcihhLGIpO2M9Y3x8bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIHRoaXMuZGVsdGEoYykubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMuc3RhcnQpfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dGhpcy5zdGFydC5hcHBseU1hdHJpeDQoYSk7XG50aGlzLmVuZC5hcHBseU1hdHJpeDQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdGFydC5lcXVhbHModGhpcy5zdGFydCkmJmEuZW5kLmVxdWFscyh0aGlzLmVuZCl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5MaW5lMykuY29weSh0aGlzKX19O1RIUkVFLkJveDI9ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjIoSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yMigtSW5maW5pdHksLUluZmluaXR5KX07XG5USFJFRS5Cb3gyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQm94MixzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbi5jb3B5KGEpO3RoaXMubWF4LmNvcHkoYik7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oYSl7dGhpcy5tYWtlRW1wdHkoKTtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5leHBhbmRCeVBvaW50KGFbYl0pO3JldHVybiB0aGlzfSxzZXRGcm9tQ2VudGVyQW5kU2l6ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IyO3JldHVybiBmdW5jdGlvbihiLGMpe3ZhciBkPWEuY29weShjKS5tdWx0aXBseVNjYWxhciguNSk7dGhpcy5taW4uY29weShiKS5zdWIoZCk7dGhpcy5tYXguY29weShiKS5hZGQoZCk7cmV0dXJuIHRoaXN9fSgpLGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5taW4uY29weShhLm1pbik7dGhpcy5tYXguY29weShhLm1heCk7cmV0dXJuIHRoaXN9LG1ha2VFbXB0eTpmdW5jdGlvbigpe3RoaXMubWluLng9XG50aGlzLm1pbi55PUluZmluaXR5O3RoaXMubWF4Lng9dGhpcy5tYXgueT0tSW5maW5pdHk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4Lng8dGhpcy5taW4ueHx8dGhpcy5tYXgueTx0aGlzLm1pbi55fSxjZW50ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IyKS5hZGRWZWN0b3JzKHRoaXMubWluLHRoaXMubWF4KS5tdWx0aXBseVNjYWxhciguNSl9LHNpemU6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IyKS5zdWJWZWN0b3JzKHRoaXMubWF4LHRoaXMubWluKX0sZXhwYW5kQnlQb2ludDpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYSk7dGhpcy5tYXgubWF4KGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVZlY3RvcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5zdWIoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGRTY2FsYXIoLWEpO1xudGhpcy5tYXguYWRkU2NhbGFyKGEpO3JldHVybiB0aGlzfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLng8dGhpcy5taW4ueHx8YS54PnRoaXMubWF4Lnh8fGEueTx0aGlzLm1pbi55fHxhLnk+dGhpcy5tYXgueT8hMTohMH0sY29udGFpbnNCb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubWluLng8PWEubWluLngmJmEubWF4Lng8PXRoaXMubWF4LngmJnRoaXMubWluLnk8PWEubWluLnkmJmEubWF4Lnk8PXRoaXMubWF4Lnk/ITA6ITF9LGdldFBhcmFtZXRlcjpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMikuc2V0KChhLngtdGhpcy5taW4ueCkvKHRoaXMubWF4LngtdGhpcy5taW4ueCksKGEueS10aGlzLm1pbi55KS8odGhpcy5tYXgueS10aGlzLm1pbi55KSl9LGlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLm1heC54PHRoaXMubWluLnh8fGEubWluLng+dGhpcy5tYXgueHx8YS5tYXgueTx0aGlzLm1pbi55fHxhLm1pbi55PlxudGhpcy5tYXgueT8hMTohMH0sY2xhbXBQb2ludDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMikuY29weShhKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCl9LGRpc3RhbmNlVG9Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IyO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYS5jb3B5KGIpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KS5zdWIoYikubGVuZ3RoKCl9fSgpLGludGVyc2VjdDpmdW5jdGlvbihhKXt0aGlzLm1pbi5tYXgoYS5taW4pO3RoaXMubWF4Lm1pbihhLm1heCk7cmV0dXJuIHRoaXN9LHVuaW9uOmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhLm1pbik7dGhpcy5tYXgubWF4KGEubWF4KTtyZXR1cm4gdGhpc30sdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZChhKTt0aGlzLm1heC5hZGQoYSk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5taW4uZXF1YWxzKHRoaXMubWluKSYmXG5hLm1heC5lcXVhbHModGhpcy5tYXgpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuQm94MikuY29weSh0aGlzKX19O1RIUkVFLkJveDM9ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlZlY3RvcjMoSW5maW5pdHksSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yMygtSW5maW5pdHksLUluZmluaXR5LC1JbmZpbml0eSl9O1xuVEhSRUUuQm94My5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkJveDMsc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5taW4uY29weShhKTt0aGlzLm1heC5jb3B5KGIpO3JldHVybiB0aGlzfSxzZXRGcm9tUG9pbnRzOmZ1bmN0aW9uKGEpe3RoaXMubWFrZUVtcHR5KCk7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMuZXhwYW5kQnlQb2ludChhW2JdKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNlbnRlckFuZFNpemU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD1hLmNvcHkoYykubXVsdGlwbHlTY2FsYXIoLjUpO3RoaXMubWluLmNvcHkoYikuc3ViKGQpO3RoaXMubWF4LmNvcHkoYikuYWRkKGQpO3JldHVybiB0aGlzfX0oKSxzZXRGcm9tT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7Yi51cGRhdGVNYXRyaXhXb3JsZCghMCk7XG50aGlzLm1ha2VFbXB0eSgpO2IudHJhdmVyc2UoZnVuY3Rpb24oYil7dmFyIGU9Yi5nZW9tZXRyeTtpZih2b2lkIDAhPT1lKWlmKGUgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlmb3IodmFyIGY9ZS52ZXJ0aWNlcyxlPTAsZz1mLmxlbmd0aDtlPGc7ZSsrKWEuY29weShmW2VdKSxhLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKSxjLmV4cGFuZEJ5UG9pbnQoYSk7ZWxzZSBpZihlIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkmJnZvaWQgMCE9PWUuYXR0cmlidXRlcy5wb3NpdGlvbilmb3IoZj1lLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXksZT0wLGc9Zi5sZW5ndGg7ZTxnO2UrPTMpYS5zZXQoZltlXSxmW2UrMV0sZltlKzJdKSxhLmFwcGx5TWF0cml4NChiLm1hdHJpeFdvcmxkKSxjLmV4cGFuZEJ5UG9pbnQoYSl9KTtyZXR1cm4gdGhpc319KCksY29weTpmdW5jdGlvbihhKXt0aGlzLm1pbi5jb3B5KGEubWluKTt0aGlzLm1heC5jb3B5KGEubWF4KTtyZXR1cm4gdGhpc30sXG5tYWtlRW1wdHk6ZnVuY3Rpb24oKXt0aGlzLm1pbi54PXRoaXMubWluLnk9dGhpcy5taW4uej1JbmZpbml0eTt0aGlzLm1heC54PXRoaXMubWF4Lnk9dGhpcy5tYXguej0tSW5maW5pdHk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4Lng8dGhpcy5taW4ueHx8dGhpcy5tYXgueTx0aGlzLm1pbi55fHx0aGlzLm1heC56PHRoaXMubWluLnp9LGNlbnRlcjpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLmFkZFZlY3RvcnModGhpcy5taW4sdGhpcy5tYXgpLm11bHRpcGx5U2NhbGFyKC41KX0sc2l6ZTpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlZlY3RvcjMpLnN1YlZlY3RvcnModGhpcy5tYXgsdGhpcy5taW4pfSxleHBhbmRCeVBvaW50OmZ1bmN0aW9uKGEpe3RoaXMubWluLm1pbihhKTt0aGlzLm1heC5tYXgoYSk7cmV0dXJuIHRoaXN9LGV4cGFuZEJ5VmVjdG9yOmZ1bmN0aW9uKGEpe3RoaXMubWluLnN1YihhKTtcbnRoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkU2NhbGFyKC1hKTt0aGlzLm1heC5hZGRTY2FsYXIoYSk7cmV0dXJuIHRoaXN9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueDx0aGlzLm1pbi54fHxhLng+dGhpcy5tYXgueHx8YS55PHRoaXMubWluLnl8fGEueT50aGlzLm1heC55fHxhLno8dGhpcy5taW4uenx8YS56PnRoaXMubWF4Lno/ITE6ITB9LGNvbnRhaW5zQm94OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm1pbi54PD1hLm1pbi54JiZhLm1heC54PD10aGlzLm1heC54JiZ0aGlzLm1pbi55PD1hLm1pbi55JiZhLm1heC55PD10aGlzLm1heC55JiZ0aGlzLm1pbi56PD1hLm1pbi56JiZhLm1heC56PD10aGlzLm1heC56PyEwOiExfSxnZXRQYXJhbWV0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IFRIUkVFLlZlY3RvcjMpLnNldCgoYS54LXRoaXMubWluLngpLyh0aGlzLm1heC54LVxudGhpcy5taW4ueCksKGEueS10aGlzLm1pbi55KS8odGhpcy5tYXgueS10aGlzLm1pbi55KSwoYS56LXRoaXMubWluLnopLyh0aGlzLm1heC56LXRoaXMubWluLnopKX0saXNJbnRlcnNlY3Rpb25Cb3g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWF4Lng8dGhpcy5taW4ueHx8YS5taW4ueD50aGlzLm1heC54fHxhLm1heC55PHRoaXMubWluLnl8fGEubWluLnk+dGhpcy5tYXgueXx8YS5tYXguejx0aGlzLm1pbi56fHxhLm1pbi56PnRoaXMubWF4Lno/ITE6ITB9LGNsYW1wUG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IFRIUkVFLlZlY3RvcjMpLmNvcHkoYSkuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuY29weShiKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCkuc3ViKGIpLmxlbmd0aCgpfX0oKSxnZXRCb3VuZGluZ1NwaGVyZTpmdW5jdGlvbigpe3ZhciBhPVxubmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLlNwaGVyZTtiLmNlbnRlcj10aGlzLmNlbnRlcigpO2IucmFkaXVzPS41KnRoaXMuc2l6ZShhKS5sZW5ndGgoKTtyZXR1cm4gYn19KCksaW50ZXJzZWN0OmZ1bmN0aW9uKGEpe3RoaXMubWluLm1heChhLm1pbik7dGhpcy5tYXgubWluKGEubWF4KTtyZXR1cm4gdGhpc30sdW5pb246ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEubWluKTt0aGlzLm1heC5tYXgoYS5tYXgpO3JldHVybiB0aGlzfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oKXt2YXIgYT1bbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjNdO3JldHVybiBmdW5jdGlvbihiKXthWzBdLnNldCh0aGlzLm1pbi54LHRoaXMubWluLnksXG50aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVsxXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTthWzJdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbM10uc2V0KHRoaXMubWluLngsdGhpcy5tYXgueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7YVs0XS5zZXQodGhpcy5tYXgueCx0aGlzLm1pbi55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTthWzVdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO2FbNl0uc2V0KHRoaXMubWF4LngsdGhpcy5tYXgueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVs3XS5zZXQodGhpcy5tYXgueCx0aGlzLm1heC55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTt0aGlzLm1ha2VFbXB0eSgpO3RoaXMuc2V0RnJvbVBvaW50cyhhKTtyZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMubWluLmFkZChhKTtcbnRoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm1pbi5lcXVhbHModGhpcy5taW4pJiZhLm1heC5lcXVhbHModGhpcy5tYXgpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuQm94MykuY29weSh0aGlzKX19O1RIUkVFLk1hdHJpeDM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnRzPW5ldyBGbG9hdDMyQXJyYXkoWzEsMCwwLDAsMSwwLDAsMCwxXSk7MDxhcmd1bWVudHMubGVuZ3RoJiZUSFJFRS5lcnJvcihcIlRIUkVFLk1hdHJpeDM6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuXCIpfTtcblRIUkVFLk1hdHJpeDMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRyaXgzLHNldDpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9dGhpcy5lbGVtZW50cztsWzBdPWE7bFszXT1iO2xbNl09YztsWzFdPWQ7bFs0XT1lO2xbN109ZjtsWzJdPWc7bFs1XT1oO2xbOF09aztyZXR1cm4gdGhpc30saWRlbnRpdHk6ZnVuY3Rpb24oKXt0aGlzLnNldCgxLDAsMCwwLDEsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGNvcHk6ZnVuY3Rpb24oYSl7YT1hLmVsZW1lbnRzO3RoaXMuc2V0KGFbMF0sYVszXSxhWzZdLGFbMV0sYVs0XSxhWzddLGFbMl0sYVs1XSxhWzhdKTtyZXR1cm4gdGhpc30sbXVsdGlwbHlWZWN0b3IzOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDMoIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5TWF0cml4Myh0aGlzKX0sXG5tdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIG1hdHJpeC5hcHBseVRvVmVjdG9yM0FycmF5KCBhcnJheSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5VG9WZWN0b3IzQXJyYXkoYSl9LGFwcGx5VG9WZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjLGQpe3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMD09PWQmJihkPWIubGVuZ3RoKTtmb3IodmFyIGU9MDtlPGQ7ZSs9MyxjKz0zKWEueD1iW2NdLGEueT1iW2MrMV0sYS56PWJbYysyXSxhLmFwcGx5TWF0cml4Myh0aGlzKSxiW2NdPWEueCxiW2MrMV09YS55LGJbYysyXT1hLno7cmV0dXJuIGJ9fSgpLG11bHRpcGx5U2NhbGFyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YlswXSo9YTtiWzNdKj1hO2JbNl0qPVxuYTtiWzFdKj1hO2JbNF0qPWE7Yls3XSo9YTtiWzJdKj1hO2JbNV0qPWE7Yls4XSo9YTtyZXR1cm4gdGhpc30sZGV0ZXJtaW5hbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzLGI9YVswXSxjPWFbMV0sZD1hWzJdLGU9YVszXSxmPWFbNF0sZz1hWzVdLGg9YVs2XSxrPWFbN10sYT1hWzhdO3JldHVybiBiKmYqYS1iKmcqay1jKmUqYStjKmcqaCtkKmUqay1kKmYqaH0sZ2V0SW52ZXJzZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEuZWxlbWVudHMsZD10aGlzLmVsZW1lbnRzO2RbMF09Y1sxMF0qY1s1XS1jWzZdKmNbOV07ZFsxXT0tY1sxMF0qY1sxXStjWzJdKmNbOV07ZFsyXT1jWzZdKmNbMV0tY1syXSpjWzVdO2RbM109LWNbMTBdKmNbNF0rY1s2XSpjWzhdO2RbNF09Y1sxMF0qY1swXS1jWzJdKmNbOF07ZFs1XT0tY1s2XSpjWzBdK2NbMl0qY1s0XTtkWzZdPWNbOV0qY1s0XS1jWzVdKmNbOF07ZFs3XT0tY1s5XSpjWzBdK2NbMV0qY1s4XTtkWzhdPWNbNV0qY1swXS1jWzFdKmNbNF07XG5jPWNbMF0qZFswXStjWzFdKmRbM10rY1syXSpkWzZdO2lmKDA9PT1jKXtpZihiKXRocm93IEVycm9yKFwiTWF0cml4My5nZXRJbnZlcnNlKCk6IGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIik7VEhSRUUud2FybihcIk1hdHJpeDMuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO3RoaXMuaWRlbnRpdHkoKTtyZXR1cm4gdGhpc310aGlzLm11bHRpcGx5U2NhbGFyKDEvYyk7cmV0dXJuIHRoaXN9LHRyYW5zcG9zZTpmdW5jdGlvbigpe3ZhciBhLGI9dGhpcy5lbGVtZW50czthPWJbMV07YlsxXT1iWzNdO2JbM109YTthPWJbMl07YlsyXT1iWzZdO2JbNl09YTthPWJbNV07Yls1XT1iWzddO2JbN109YTtyZXR1cm4gdGhpc30sZmxhdHRlblRvQXJyYXlPZmZzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2FbYl09Y1swXTthW2IrMV09Y1sxXTthW2IrMl09Y1syXTthW2IrM109Y1szXTthW2IrNF09Y1s0XTtcbmFbYis1XT1jWzVdO2FbYis2XT1jWzZdO2FbYis3XT1jWzddO2FbYis4XT1jWzhdO3JldHVybiBhfSxnZXROb3JtYWxNYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5nZXRJbnZlcnNlKGEpLnRyYW5zcG9zZSgpO3JldHVybiB0aGlzfSx0cmFuc3Bvc2VJbnRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthWzBdPWJbMF07YVsxXT1iWzNdO2FbMl09Yls2XTthWzNdPWJbMV07YVs0XT1iWzRdO2FbNV09Yls3XTthWzZdPWJbMl07YVs3XT1iWzVdO2FbOF09Yls4XTtyZXR1cm4gdGhpc30sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMuZWxlbWVudHMuc2V0KGEpO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cztyZXR1cm5bYVswXSxhWzFdLGFbMl0sYVszXSxhWzRdLGFbNV0sYVs2XSxhWzddLGFbOF1dfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuTWF0cml4MykuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfX07XG5USFJFRS5NYXRyaXg0PWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50cz1uZXcgRmxvYXQzMkFycmF5KFsxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxXSk7MDxhcmd1bWVudHMubGVuZ3RoJiZUSFJFRS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuXCIpfTtcblRIUkVFLk1hdHJpeDQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRyaXg0LHNldDpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayxsLHAsbixtLHMsdCxyKXt2YXIgdj10aGlzLmVsZW1lbnRzO3ZbMF09YTt2WzRdPWI7dls4XT1jO3ZbMTJdPWQ7dlsxXT1lO3ZbNV09Zjt2WzldPWc7dlsxM109aDt2WzJdPWs7dls2XT1sO3ZbMTBdPXA7dlsxNF09bjt2WzNdPW07dls3XT1zO3ZbMTFdPXQ7dlsxNV09cjtyZXR1cm4gdGhpc30saWRlbnRpdHk6ZnVuY3Rpb24oKXt0aGlzLnNldCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLmVsZW1lbnRzLnNldChhLmVsZW1lbnRzKTtyZXR1cm4gdGhpc30sZXh0cmFjdFBvc2l0aW9uOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuZXh0cmFjdFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY29weVBvc2l0aW9uKCkuXCIpO3JldHVybiB0aGlzLmNvcHlQb3NpdGlvbihhKX0sXG5jb3B5UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthPWEuZWxlbWVudHM7YlsxMl09YVsxMl07YlsxM109YVsxM107YlsxNF09YVsxNF07cmV0dXJuIHRoaXN9LGV4dHJhY3RCYXNpczpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5lbGVtZW50czthLnNldChkWzBdLGRbMV0sZFsyXSk7Yi5zZXQoZFs0XSxkWzVdLGRbNl0pO2Muc2V0KGRbOF0sZFs5XSxkWzEwXSk7cmV0dXJuIHRoaXN9LG1ha2VCYXNpczpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXQoYS54LGIueCxjLngsMCxhLnksYi55LGMueSwwLGEueixiLnosYy56LDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGV4dHJhY3RSb3RhdGlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2I9Yi5lbGVtZW50czt2YXIgZD0xL2Euc2V0KGJbMF0sYlsxXSxiWzJdKS5sZW5ndGgoKSxlPTEvYS5zZXQoYls0XSxiWzVdLGJbNl0pLmxlbmd0aCgpLFxuZj0xL2Euc2V0KGJbOF0sYls5XSxiWzEwXSkubGVuZ3RoKCk7Y1swXT1iWzBdKmQ7Y1sxXT1iWzFdKmQ7Y1syXT1iWzJdKmQ7Y1s0XT1iWzRdKmU7Y1s1XT1iWzVdKmU7Y1s2XT1iWzZdKmU7Y1s4XT1iWzhdKmY7Y1s5XT1iWzldKmY7Y1sxMF09YlsxMF0qZjtyZXR1cm4gdGhpc319KCksbWFrZVJvdGF0aW9uRnJvbUV1bGVyOmZ1bmN0aW9uKGEpeyExPT09YSBpbnN0YW5jZW9mIFRIUkVFLkV1bGVyJiZUSFJFRS5lcnJvcihcIlRIUkVFLk1hdHJpeDogLm1ha2VSb3RhdGlvbkZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci5cIik7dmFyIGI9dGhpcy5lbGVtZW50cyxjPWEueCxkPWEueSxlPWEueixmPU1hdGguY29zKGMpLGM9TWF0aC5zaW4oYyksZz1NYXRoLmNvcyhkKSxkPU1hdGguc2luKGQpLGg9TWF0aC5jb3MoZSksZT1NYXRoLnNpbihlKTtpZihcIlhZWlwiPT09YS5vcmRlcil7YT1mKmg7dmFyIGs9ZiplLFxubD1jKmgscD1jKmU7YlswXT1nKmg7Yls0XT0tZyplO2JbOF09ZDtiWzFdPWsrbCpkO2JbNV09YS1wKmQ7Yls5XT0tYypnO2JbMl09cC1hKmQ7Yls2XT1sK2sqZDtiWzEwXT1mKmd9ZWxzZVwiWVhaXCI9PT1hLm9yZGVyPyhhPWcqaCxrPWcqZSxsPWQqaCxwPWQqZSxiWzBdPWErcCpjLGJbNF09bCpjLWssYls4XT1mKmQsYlsxXT1mKmUsYls1XT1mKmgsYls5XT0tYyxiWzJdPWsqYy1sLGJbNl09cCthKmMsYlsxMF09ZipnKTpcIlpYWVwiPT09YS5vcmRlcj8oYT1nKmgsaz1nKmUsbD1kKmgscD1kKmUsYlswXT1hLXAqYyxiWzRdPS1mKmUsYls4XT1sK2sqYyxiWzFdPWsrbCpjLGJbNV09ZipoLGJbOV09cC1hKmMsYlsyXT0tZipkLGJbNl09YyxiWzEwXT1mKmcpOlwiWllYXCI9PT1hLm9yZGVyPyhhPWYqaCxrPWYqZSxsPWMqaCxwPWMqZSxiWzBdPWcqaCxiWzRdPWwqZC1rLGJbOF09YSpkK3AsYlsxXT1nKmUsYls1XT1wKmQrYSxiWzldPWsqZC1sLGJbMl09LWQsYls2XT1jKmcsYlsxMF09ZipnKTpcIllaWFwiPT09XG5hLm9yZGVyPyhhPWYqZyxrPWYqZCxsPWMqZyxwPWMqZCxiWzBdPWcqaCxiWzRdPXAtYSplLGJbOF09bCplK2ssYlsxXT1lLGJbNV09ZipoLGJbOV09LWMqaCxiWzJdPS1kKmgsYls2XT1rKmUrbCxiWzEwXT1hLXAqZSk6XCJYWllcIj09PWEub3JkZXImJihhPWYqZyxrPWYqZCxsPWMqZyxwPWMqZCxiWzBdPWcqaCxiWzRdPS1lLGJbOF09ZCpoLGJbMV09YSplK3AsYls1XT1mKmgsYls5XT1rKmUtbCxiWzJdPWwqZS1rLGJbNl09YypoLGJbMTBdPXAqZSthKTtiWzNdPTA7Yls3XT0wO2JbMTFdPTA7YlsxMl09MDtiWzEzXT0wO2JbMTRdPTA7YlsxNV09MTtyZXR1cm4gdGhpc30sc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLlwiKTtyZXR1cm4gdGhpcy5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihhKX0sXG5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzLGM9YS54LGQ9YS55LGU9YS56LGY9YS53LGc9YytjLGg9ZCtkLGs9ZStlO2E9YypnO3ZhciBsPWMqaCxjPWMqayxwPWQqaCxkPWQqayxlPWUqayxnPWYqZyxoPWYqaCxmPWYqaztiWzBdPTEtKHArZSk7Yls0XT1sLWY7Yls4XT1jK2g7YlsxXT1sK2Y7Yls1XT0xLShhK2UpO2JbOV09ZC1nO2JbMl09Yy1oO2JbNl09ZCtnO2JbMTBdPTEtKGErcCk7YlszXT0wO2JbN109MDtiWzExXT0wO2JbMTJdPTA7YlsxM109MDtiWzE0XT0wO2JbMTVdPTE7cmV0dXJuIHRoaXN9LGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZCxlLGYpe3ZhciBnPXRoaXMuZWxlbWVudHM7Yy5zdWJWZWN0b3JzKGQsZSkubm9ybWFsaXplKCk7MD09PWMubGVuZ3RoKCkmJihjLno9MSk7YS5jcm9zc1ZlY3RvcnMoZixcbmMpLm5vcm1hbGl6ZSgpOzA9PT1hLmxlbmd0aCgpJiYoYy54Kz0xRS00LGEuY3Jvc3NWZWN0b3JzKGYsYykubm9ybWFsaXplKCkpO2IuY3Jvc3NWZWN0b3JzKGMsYSk7Z1swXT1hLng7Z1s0XT1iLng7Z1s4XT1jLng7Z1sxXT1hLnk7Z1s1XT1iLnk7Z1s5XT1jLnk7Z1syXT1hLno7Z1s2XT1iLno7Z1sxMF09Yy56O3JldHVybiB0aGlzfX0oKSxtdWx0aXBseTpmdW5jdGlvbihhLGIpe3JldHVybiB2b2lkIDAhPT1iPyhUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlNYXRyaWNlcyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMubXVsdGlwbHlNYXRyaWNlcyhhLGIpKTp0aGlzLm11bHRpcGx5TWF0cmljZXModGhpcyxhKX0sbXVsdGlwbHlNYXRyaWNlczpmdW5jdGlvbihhLGIpe3ZhciBjPWEuZWxlbWVudHMsZD1iLmVsZW1lbnRzLGU9dGhpcy5lbGVtZW50cyxmPWNbMF0sZz1jWzRdLGg9Y1s4XSxcbms9Y1sxMl0sbD1jWzFdLHA9Y1s1XSxuPWNbOV0sbT1jWzEzXSxzPWNbMl0sdD1jWzZdLHI9Y1sxMF0sdj1jWzE0XSx1PWNbM10seD1jWzddLHo9Y1sxMV0sYz1jWzE1XSx3PWRbMF0sRj1kWzRdLEc9ZFs4XSx5PWRbMTJdLEk9ZFsxXSxCPWRbNV0sQz1kWzldLEU9ZFsxM10sTD1kWzJdLE49ZFs2XSxIPWRbMTBdLE89ZFsxNF0sTT1kWzNdLEE9ZFs3XSxKPWRbMTFdLGQ9ZFsxNV07ZVswXT1mKncrZypJK2gqTCtrKk07ZVs0XT1mKkYrZypCK2gqTitrKkE7ZVs4XT1mKkcrZypDK2gqSCtrKko7ZVsxMl09Zip5K2cqRStoKk8raypkO2VbMV09bCp3K3AqSStuKkwrbSpNO2VbNV09bCpGK3AqQituKk4rbSpBO2VbOV09bCpHK3AqQytuKkgrbSpKO2VbMTNdPWwqeStwKkUrbipPK20qZDtlWzJdPXMqdyt0KkkrcipMK3YqTTtlWzZdPXMqRit0KkIrcipOK3YqQTtlWzEwXT1zKkcrdCpDK3IqSCt2Kko7ZVsxNF09cyp5K3QqRStyKk8rdipkO2VbM109dSp3K3gqSSt6KkwrYypNO2VbN109dSpGK1xueCpCK3oqTitjKkE7ZVsxMV09dSpHK3gqQyt6KkgrYypKO2VbMTVdPXUqeSt4KkUreipPK2MqZDtyZXR1cm4gdGhpc30sbXVsdGlwbHlUb0FycmF5OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLmVsZW1lbnRzO3RoaXMubXVsdGlwbHlNYXRyaWNlcyhhLGIpO2NbMF09ZFswXTtjWzFdPWRbMV07Y1syXT1kWzJdO2NbM109ZFszXTtjWzRdPWRbNF07Y1s1XT1kWzVdO2NbNl09ZFs2XTtjWzddPWRbN107Y1s4XT1kWzhdO2NbOV09ZFs5XTtjWzEwXT1kWzEwXTtjWzExXT1kWzExXTtjWzEyXT1kWzEyXTtjWzEzXT1kWzEzXTtjWzE0XT1kWzE0XTtjWzE1XT1kWzE1XTtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztiWzBdKj1hO2JbNF0qPWE7Yls4XSo9YTtiWzEyXSo9YTtiWzFdKj1hO2JbNV0qPWE7Yls5XSo9YTtiWzEzXSo9YTtiWzJdKj1hO2JbNl0qPWE7YlsxMF0qPWE7YlsxNF0qPWE7YlszXSo9YTtiWzddKj1hO2JbMTFdKj1cbmE7YlsxNV0qPWE7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBvciB2ZWN0b3IuYXBwbHlQcm9qZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseVByb2plY3Rpb24odGhpcyl9LG11bHRpcGx5VmVjdG9yNDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcyl9LG11bHRpcGx5VmVjdG9yM0FycmF5OmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW5hbWVkLiBVc2UgbWF0cml4LmFwcGx5VG9WZWN0b3IzQXJyYXkoIGFycmF5ICkgaW5zdGVhZC5cIik7XG5yZXR1cm4gdGhpcy5hcHBseVRvVmVjdG9yM0FycmF5KGEpfSxhcHBseVRvVmVjdG9yM0FycmF5OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1kJiYoZD1iLmxlbmd0aCk7Zm9yKHZhciBlPTA7ZTxkO2UrPTMsYys9MylhLng9YltjXSxhLnk9YltjKzFdLGEuej1iW2MrMl0sYS5hcHBseU1hdHJpeDQodGhpcyksYltjXT1hLngsYltjKzFdPWEueSxiW2MrMl09YS56O3JldHVybiBifX0oKSxyb3RhdGVBeGlzOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7YS50cmFuc2Zvcm1EaXJlY3Rpb24odGhpcyl9LGNyb3NzVmVjdG9yOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7XG5yZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcyl9LGRldGVybWluYW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cyxiPWFbMF0sYz1hWzRdLGQ9YVs4XSxlPWFbMTJdLGY9YVsxXSxnPWFbNV0saD1hWzldLGs9YVsxM10sbD1hWzJdLHA9YVs2XSxuPWFbMTBdLG09YVsxNF07cmV0dXJuIGFbM10qKCtlKmgqcC1kKmsqcC1lKmcqbitjKmsqbitkKmcqbS1jKmgqbSkrYVs3XSooK2IqaCptLWIqaypuK2UqZipuLWQqZiptK2QqaypsLWUqaCpsKSthWzExXSooK2IqaypwLWIqZyptLWUqZipwK2MqZiptK2UqZypsLWMqaypsKSthWzE1XSooLWQqZypsLWIqaCpwK2IqZypuK2QqZipwLWMqZipuK2MqaCpsKX0sdHJhbnNwb3NlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5lbGVtZW50cyxiO2I9YVsxXTthWzFdPWFbNF07YVs0XT1iO2I9YVsyXTthWzJdPWFbOF07YVs4XT1iO2I9YVs2XTthWzZdPWFbOV07YVs5XT1iO2I9YVszXTthWzNdPWFbMTJdO2FbMTJdPWI7Yj1hWzddO2FbN109YVsxM107XG5hWzEzXT1iO2I9YVsxMV07YVsxMV09YVsxNF07YVsxNF09YjtyZXR1cm4gdGhpc30sZmxhdHRlblRvQXJyYXlPZmZzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2FbYl09Y1swXTthW2IrMV09Y1sxXTthW2IrMl09Y1syXTthW2IrM109Y1szXTthW2IrNF09Y1s0XTthW2IrNV09Y1s1XTthW2IrNl09Y1s2XTthW2IrN109Y1s3XTthW2IrOF09Y1s4XTthW2IrOV09Y1s5XTthW2IrMTBdPWNbMTBdO2FbYisxMV09Y1sxMV07YVtiKzEyXT1jWzEyXTthW2IrMTNdPWNbMTNdO2FbYisxNF09Y1sxNF07YVtiKzE1XT1jWzE1XTtyZXR1cm4gYX0sZ2V0UG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmdldFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLlwiKTt2YXIgYj1cbnRoaXMuZWxlbWVudHM7cmV0dXJuIGEuc2V0KGJbMTJdLGJbMTNdLGJbMTRdKX19KCksc2V0UG9zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztiWzEyXT1hLng7YlsxM109YS55O2JbMTRdPWEuejtyZXR1cm4gdGhpc30sZ2V0SW52ZXJzZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZWxlbWVudHMsZD1hLmVsZW1lbnRzLGU9ZFswXSxmPWRbNF0sZz1kWzhdLGg9ZFsxMl0saz1kWzFdLGw9ZFs1XSxwPWRbOV0sbj1kWzEzXSxtPWRbMl0scz1kWzZdLHQ9ZFsxMF0scj1kWzE0XSx2PWRbM10sdT1kWzddLHg9ZFsxMV0sZD1kWzE1XTtjWzBdPXAqcip1LW4qdCp1K24qcyp4LWwqcip4LXAqcypkK2wqdCpkO2NbNF09aCp0KnUtZypyKnUtaCpzKngrZipyKngrZypzKmQtZip0KmQ7Y1s4XT1nKm4qdS1oKnAqdStoKmwqeC1mKm4qeC1nKmwqZCtmKnAqZDtjWzEyXT1oKnAqcy1nKm4qcy1oKmwqdCtmKm4qdCtnKmwqci1mKnAqcjtjWzFdPW4qdCp2LXAqcip2LW4qbSp4K1xuaypyKngrcCptKmQtayp0KmQ7Y1s1XT1nKnIqdi1oKnQqditoKm0qeC1lKnIqeC1nKm0qZCtlKnQqZDtjWzldPWgqcCp2LWcqbip2LWgqayp4K2Uqbip4K2cqaypkLWUqcCpkO2NbMTNdPWcqbiptLWgqcCptK2gqayp0LWUqbip0LWcqaypyK2UqcCpyO2NbMl09bCpyKnYtbipzKnYrbiptKnUtaypyKnUtbCptKmQraypzKmQ7Y1s2XT1oKnMqdi1mKnIqdi1oKm0qdStlKnIqdStmKm0qZC1lKnMqZDtjWzEwXT1mKm4qdi1oKmwqditoKmsqdS1lKm4qdS1mKmsqZCtlKmwqZDtjWzE0XT1oKmwqbS1mKm4qbS1oKmsqcytlKm4qcytmKmsqci1lKmwqcjtjWzNdPXAqcyp2LWwqdCp2LXAqbSp1K2sqdCp1K2wqbSp4LWsqcyp4O2NbN109Zip0KnYtZypzKnYrZyptKnUtZSp0KnUtZiptKngrZSpzKng7Y1sxMV09ZypsKnYtZipwKnYtZyprKnUrZSpwKnUrZiprKngtZSpsKng7Y1sxNV09ZipwKm0tZypsKm0rZyprKnMtZSpwKnMtZiprKnQrZSpsKnQ7Yz1lKmNbMF0raypjWzRdK20qY1s4XSt2KmNbMTJdO1xuaWYoMD09Yyl7aWYoYil0aHJvdyBFcnJvcihcIlRIUkVFLk1hdHJpeDQuZ2V0SW52ZXJzZSgpOiBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO1RIUkVFLndhcm4oXCJUSFJFRS5NYXRyaXg0LmdldEludmVyc2UoKTogY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTt0aGlzLmlkZW50aXR5KCk7cmV0dXJuIHRoaXN9dGhpcy5tdWx0aXBseVNjYWxhcigxL2MpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7VEhSRUUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVg6ZnVuY3Rpb24oYSl7VEhSRUUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxyb3RhdGVZOmZ1bmN0aW9uKGEpe1RIUkVFLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLnJvdGF0ZVkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0scm90YXRlWjpmdW5jdGlvbihhKXtUSFJFRS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVaKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LFxucm90YXRlQnlBeGlzOmZ1bmN0aW9uKGEsYil7VEhSRUUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQnlBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHMsYz1hLngsZD1hLnk7YT1hLno7YlswXSo9YztiWzRdKj1kO2JbOF0qPWE7YlsxXSo9YztiWzVdKj1kO2JbOV0qPWE7YlsyXSo9YztiWzZdKj1kO2JbMTBdKj1hO2JbM10qPWM7Yls3XSo9ZDtiWzExXSo9YTtyZXR1cm4gdGhpc30sZ2V0TWF4U2NhbGVPbkF4aXM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzO3JldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoYVswXSphWzBdK2FbMV0qYVsxXSthWzJdKmFbMl0sTWF0aC5tYXgoYVs0XSphWzRdK2FbNV0qYVs1XSthWzZdKmFbNl0sYVs4XSphWzhdK2FbOV0qYVs5XSthWzEwXSphWzEwXSkpKX0sbWFrZVRyYW5zbGF0aW9uOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldCgxLDAsMCxhLDAsMSwwLGIsMCwwLDEsXG5jLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlUm90YXRpb25YOmZ1bmN0aW9uKGEpe3ZhciBiPU1hdGguY29zKGEpO2E9TWF0aC5zaW4oYSk7dGhpcy5zZXQoMSwwLDAsMCwwLGIsLWEsMCwwLGEsYiwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlUm90YXRpb25ZOmZ1bmN0aW9uKGEpe3ZhciBiPU1hdGguY29zKGEpO2E9TWF0aC5zaW4oYSk7dGhpcy5zZXQoYiwwLGEsMCwwLDEsMCwwLC1hLDAsYiwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlUm90YXRpb25aOmZ1bmN0aW9uKGEpe3ZhciBiPU1hdGguY29zKGEpO2E9TWF0aC5zaW4oYSk7dGhpcy5zZXQoYiwtYSwwLDAsYSxiLDAsMCwwLDAsMSwwLDAsMCwwLDEpO3JldHVybiB0aGlzfSxtYWtlUm90YXRpb25BeGlzOmZ1bmN0aW9uKGEsYil7dmFyIGM9TWF0aC5jb3MoYiksZD1NYXRoLnNpbihiKSxlPTEtYyxmPWEueCxnPWEueSxoPWEueixrPWUqZixsPWUqZzt0aGlzLnNldChrKmYrYyxrKmctZCpoLGsqaCtkKmcsMCxrKmcrXG5kKmgsbCpnK2MsbCpoLWQqZiwwLGsqaC1kKmcsbCpoK2QqZixlKmgqaCtjLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VTY2FsZTpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXQoYSwwLDAsMCwwLGIsMCwwLDAsMCxjLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LGNvbXBvc2U6ZnVuY3Rpb24oYSxiLGMpe3RoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oYik7dGhpcy5zY2FsZShjKTt0aGlzLnNldFBvc2l0aW9uKGEpO3JldHVybiB0aGlzfSxkZWNvbXBvc2U6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihjLGQsZSl7dmFyIGY9dGhpcy5lbGVtZW50cyxnPWEuc2V0KGZbMF0sZlsxXSxmWzJdKS5sZW5ndGgoKSxoPWEuc2V0KGZbNF0sZls1XSxmWzZdKS5sZW5ndGgoKSxrPWEuc2V0KGZbOF0sZls5XSxmWzEwXSkubGVuZ3RoKCk7MD50aGlzLmRldGVybWluYW50KCkmJihnPS1nKTtjLng9ZlsxMl07XG5jLnk9ZlsxM107Yy56PWZbMTRdO2IuZWxlbWVudHMuc2V0KHRoaXMuZWxlbWVudHMpO2M9MS9nO3ZhciBmPTEvaCxsPTEvaztiLmVsZW1lbnRzWzBdKj1jO2IuZWxlbWVudHNbMV0qPWM7Yi5lbGVtZW50c1syXSo9YztiLmVsZW1lbnRzWzRdKj1mO2IuZWxlbWVudHNbNV0qPWY7Yi5lbGVtZW50c1s2XSo9ZjtiLmVsZW1lbnRzWzhdKj1sO2IuZWxlbWVudHNbOV0qPWw7Yi5lbGVtZW50c1sxMF0qPWw7ZC5zZXRGcm9tUm90YXRpb25NYXRyaXgoYik7ZS54PWc7ZS55PWg7ZS56PWs7cmV0dXJuIHRoaXN9fSgpLG1ha2VGcnVzdHVtOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLmVsZW1lbnRzO2dbMF09MiplLyhiLWEpO2dbNF09MDtnWzhdPShiK2EpLyhiLWEpO2dbMTJdPTA7Z1sxXT0wO2dbNV09MiplLyhkLWMpO2dbOV09KGQrYykvKGQtYyk7Z1sxM109MDtnWzJdPTA7Z1s2XT0wO2dbMTBdPS0oZitlKS8oZi1lKTtnWzE0XT0tMipmKmUvKGYtZSk7Z1szXT0wO2dbN109MDtcbmdbMTFdPS0xO2dbMTVdPTA7cmV0dXJuIHRoaXN9LG1ha2VQZXJzcGVjdGl2ZTpmdW5jdGlvbihhLGIsYyxkKXthPWMqTWF0aC50YW4oVEhSRUUuTWF0aC5kZWdUb1JhZCguNSphKSk7dmFyIGU9LWE7cmV0dXJuIHRoaXMubWFrZUZydXN0dW0oZSpiLGEqYixlLGEsYyxkKX0sbWFrZU9ydGhvZ3JhcGhpYzpmdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9dGhpcy5lbGVtZW50cyxoPWItYSxrPWMtZCxsPWYtZTtnWzBdPTIvaDtnWzRdPTA7Z1s4XT0wO2dbMTJdPS0oKGIrYSkvaCk7Z1sxXT0wO2dbNV09Mi9rO2dbOV09MDtnWzEzXT0tKChjK2QpL2spO2dbMl09MDtnWzZdPTA7Z1sxMF09LTIvbDtnWzE0XT0tKChmK2UpL2wpO2dbM109MDtnWzddPTA7Z1sxMV09MDtnWzE1XT0xO3JldHVybiB0aGlzfSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSl7dGhpcy5lbGVtZW50cy5zZXQoYSk7cmV0dXJuIHRoaXN9LHRvQXJyYXk6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnRzO3JldHVyblthWzBdLFxuYVsxXSxhWzJdLGFbM10sYVs0XSxhWzVdLGFbNl0sYVs3XSxhWzhdLGFbOV0sYVsxMF0sYVsxMV0sYVsxMl0sYVsxM10sYVsxNF0sYVsxNV1dfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuTWF0cml4NCkuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfX07VEhSRUUuUmF5PWZ1bmN0aW9uKGEsYil7dGhpcy5vcmlnaW49dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuZGlyZWN0aW9uPXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuVmVjdG9yM307XG5USFJFRS5SYXkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5SYXksc2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5vcmlnaW4uY29weShhKTt0aGlzLmRpcmVjdGlvbi5jb3B5KGIpO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMub3JpZ2luLmNvcHkoYS5vcmlnaW4pO3RoaXMuZGlyZWN0aW9uLmNvcHkoYS5kaXJlY3Rpb24pO3JldHVybiB0aGlzfSxhdDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMub3JpZ2luKX0scmVjYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3RoaXMub3JpZ2luLmNvcHkodGhpcy5hdChiLGEpKTtyZXR1cm4gdGhpc319KCksY2xvc2VzdFBvaW50VG9Qb2ludDpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fG5ldyBUSFJFRS5WZWN0b3IzO2Muc3ViVmVjdG9ycyhhLHRoaXMub3JpZ2luKTtcbnZhciBkPWMuZG90KHRoaXMuZGlyZWN0aW9uKTtyZXR1cm4gMD5kP2MuY29weSh0aGlzLm9yaWdpbik6Yy5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkKS5hZGQodGhpcy5vcmlnaW4pfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9YS5zdWJWZWN0b3JzKGIsdGhpcy5vcmlnaW4pLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD5jKXJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvKGIpO2EuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoYykuYWRkKHRoaXMub3JpZ2luKTtyZXR1cm4gYS5kaXN0YW5jZVRvKGIpfX0oKSxkaXN0YW5jZVNxVG9TZWdtZW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihkLGUsZixnKXthLmNvcHkoZCkuYWRkKGUpLm11bHRpcGx5U2NhbGFyKC41KTtcbmIuY29weShlKS5zdWIoZCkubm9ybWFsaXplKCk7Yy5jb3B5KHRoaXMub3JpZ2luKS5zdWIoYSk7dmFyIGg9LjUqZC5kaXN0YW5jZVRvKGUpLGs9LXRoaXMuZGlyZWN0aW9uLmRvdChiKSxsPWMuZG90KHRoaXMuZGlyZWN0aW9uKSxwPS1jLmRvdChiKSxuPWMubGVuZ3RoU3EoKSxtPU1hdGguYWJzKDEtayprKSxzOzA8bT8oZD1rKnAtbCxlPWsqbC1wLHM9aCptLDA8PWQ/ZT49LXM/ZTw9cz8oaD0xL20sZCo9aCxlKj1oLGs9ZCooZCtrKmUrMipsKStlKihrKmQrZSsyKnApK24pOihlPWgsZD1NYXRoLm1heCgwLC0oayplK2wpKSxrPS1kKmQrZSooZSsyKnApK24pOihlPS1oLGQ9TWF0aC5tYXgoMCwtKGsqZStsKSksaz0tZCpkK2UqKGUrMipwKStuKTplPD0tcz8oZD1NYXRoLm1heCgwLC0oLWsqaCtsKSksZT0wPGQ/LWg6TWF0aC5taW4oTWF0aC5tYXgoLWgsLXApLGgpLGs9LWQqZCtlKihlKzIqcCkrbik6ZTw9cz8oZD0wLGU9TWF0aC5taW4oTWF0aC5tYXgoLWgsLXApLGgpLGs9ZSooZStcbjIqcCkrbik6KGQ9TWF0aC5tYXgoMCwtKGsqaCtsKSksZT0wPGQ/aDpNYXRoLm1pbihNYXRoLm1heCgtaCwtcCksaCksaz0tZCpkK2UqKGUrMipwKStuKSk6KGU9MDxrPy1oOmgsZD1NYXRoLm1heCgwLC0oayplK2wpKSxrPS1kKmQrZSooZSsyKnApK24pO2YmJmYuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoZCkuYWRkKHRoaXMub3JpZ2luKTtnJiZnLmNvcHkoYikubXVsdGlwbHlTY2FsYXIoZSkuYWRkKGEpO3JldHVybiBrfX0oKSxpc0ludGVyc2VjdGlvblNwaGVyZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5jZW50ZXIpPD1hLnJhZGl1c30saW50ZXJzZWN0U3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zdWJWZWN0b3JzKGIuY2VudGVyLHRoaXMub3JpZ2luKTt2YXIgZD1hLmRvdCh0aGlzLmRpcmVjdGlvbiksZT1hLmRvdChhKS1kKmQsZj1iLnJhZGl1cypiLnJhZGl1cztcbmlmKGU+ZilyZXR1cm4gbnVsbDtmPU1hdGguc3FydChmLWUpO2U9ZC1mO2QrPWY7cmV0dXJuIDA+ZSYmMD5kP251bGw6MD5lP3RoaXMuYXQoZCxjKTp0aGlzLmF0KGUsYyl9fSgpLGlzSW50ZXJzZWN0aW9uUGxhbmU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5kaXN0YW5jZVRvUG9pbnQodGhpcy5vcmlnaW4pO3JldHVybiAwPT09Ynx8MD5hLm5vcm1hbC5kb3QodGhpcy5kaXJlY3Rpb24pKmI/ITA6ITF9LGRpc3RhbmNlVG9QbGFuZTpmdW5jdGlvbihhKXt2YXIgYj1hLm5vcm1hbC5kb3QodGhpcy5kaXJlY3Rpb24pO2lmKDA9PWIpcmV0dXJuIDA9PWEuZGlzdGFuY2VUb1BvaW50KHRoaXMub3JpZ2luKT8wOm51bGw7YT0tKHRoaXMub3JpZ2luLmRvdChhLm5vcm1hbCkrYS5jb25zdGFudCkvYjtyZXR1cm4gMDw9YT9hOm51bGx9LGludGVyc2VjdFBsYW5lOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5kaXN0YW5jZVRvUGxhbmUoYSk7cmV0dXJuIG51bGw9PT1jP251bGw6dGhpcy5hdChjLGIpfSxcbmlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBudWxsIT09dGhpcy5pbnRlcnNlY3RCb3goYixhKX19KCksaW50ZXJzZWN0Qm94OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZztkPTEvdGhpcy5kaXJlY3Rpb24ueDtmPTEvdGhpcy5kaXJlY3Rpb24ueTtnPTEvdGhpcy5kaXJlY3Rpb24uejt2YXIgaD10aGlzLm9yaWdpbjswPD1kPyhjPShhLm1pbi54LWgueCkqZCxkKj1hLm1heC54LWgueCk6KGM9KGEubWF4LngtaC54KSpkLGQqPWEubWluLngtaC54KTswPD1mPyhlPShhLm1pbi55LWgueSkqZixmKj1hLm1heC55LWgueSk6KGU9KGEubWF4LnktaC55KSpmLGYqPWEubWluLnktaC55KTtpZihjPmZ8fGU+ZClyZXR1cm4gbnVsbDtpZihlPmN8fGMhPT1jKWM9ZTtpZihmPGR8fGQhPT1kKWQ9ZjswPD1nPyhlPShhLm1pbi56LWgueikqZyxnKj1hLm1heC56LWgueik6KGU9KGEubWF4LnotaC56KSpcbmcsZyo9YS5taW4uei1oLnopO2lmKGM+Z3x8ZT5kKXJldHVybiBudWxsO2lmKGU+Y3x8YyE9PWMpYz1lO2lmKGc8ZHx8ZCE9PWQpZD1nO3JldHVybiAwPmQ/bnVsbDp0aGlzLmF0KDA8PWM/YzpkLGIpfSxpbnRlcnNlY3RUcmlhbmdsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMyxkPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihlLGYsZyxoLGspe2Iuc3ViVmVjdG9ycyhmLGUpO2Muc3ViVmVjdG9ycyhnLGUpO2QuY3Jvc3NWZWN0b3JzKGIsYyk7Zj10aGlzLmRpcmVjdGlvbi5kb3QoZCk7aWYoMDxmKXtpZihoKXJldHVybiBudWxsO2g9MX1lbHNlIGlmKDA+ZiloPS0xLGY9LWY7ZWxzZSByZXR1cm4gbnVsbDthLnN1YlZlY3RvcnModGhpcy5vcmlnaW4sZSk7ZT1oKnRoaXMuZGlyZWN0aW9uLmRvdChjLmNyb3NzVmVjdG9ycyhhLGMpKTtpZigwPmUpcmV0dXJuIG51bGw7Zz1oKnRoaXMuZGlyZWN0aW9uLmRvdChiLmNyb3NzKGEpKTtcbmlmKDA+Z3x8ZStnPmYpcmV0dXJuIG51bGw7ZT0taCphLmRvdChkKTtyZXR1cm4gMD5lP251bGw6dGhpcy5hdChlL2Ysayl9fSgpLGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLmRpcmVjdGlvbi5hZGQodGhpcy5vcmlnaW4pLmFwcGx5TWF0cml4NChhKTt0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQoYSk7dGhpcy5kaXJlY3Rpb24uc3ViKHRoaXMub3JpZ2luKTt0aGlzLmRpcmVjdGlvbi5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm9yaWdpbi5lcXVhbHModGhpcy5vcmlnaW4pJiZhLmRpcmVjdGlvbi5lcXVhbHModGhpcy5kaXJlY3Rpb24pfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuUmF5KS5jb3B5KHRoaXMpfX07VEhSRUUuU3BoZXJlPWZ1bmN0aW9uKGEsYil7dGhpcy5jZW50ZXI9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMucmFkaXVzPXZvaWQgMCE9PWI/YjowfTtcblRIUkVFLlNwaGVyZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlNwaGVyZSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLmNlbnRlci5jb3B5KGEpO3RoaXMucmFkaXVzPWI7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuQm94MztyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLmNlbnRlcjt2b2lkIDAhPT1jP2QuY29weShjKTphLnNldEZyb21Qb2ludHMoYikuY2VudGVyKGQpO2Zvcih2YXIgZT0wLGY9MCxnPWIubGVuZ3RoO2Y8ZztmKyspZT1NYXRoLm1heChlLGQuZGlzdGFuY2VUb1NxdWFyZWQoYltmXSkpO3RoaXMucmFkaXVzPU1hdGguc3FydChlKTtyZXR1cm4gdGhpc319KCksY29weTpmdW5jdGlvbihhKXt0aGlzLmNlbnRlci5jb3B5KGEuY2VudGVyKTt0aGlzLnJhZGl1cz1hLnJhZGl1cztyZXR1cm4gdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gMD49dGhpcy5yYWRpdXN9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5jZW50ZXIpPD1cbnRoaXMucmFkaXVzKnRoaXMucmFkaXVzfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzdGFuY2VUbyh0aGlzLmNlbnRlciktdGhpcy5yYWRpdXN9LGludGVyc2VjdHNTcGhlcmU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5yYWRpdXMrYS5yYWRpdXM7cmV0dXJuIGEuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9YipifSxjbGFtcFBvaW50OmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoYSksZD1ifHxuZXcgVEhSRUUuVmVjdG9yMztkLmNvcHkoYSk7Yz50aGlzLnJhZGl1cyp0aGlzLnJhZGl1cyYmKGQuc3ViKHRoaXMuY2VudGVyKS5ub3JtYWxpemUoKSxkLm11bHRpcGx5U2NhbGFyKHRoaXMucmFkaXVzKS5hZGQodGhpcy5jZW50ZXIpKTtyZXR1cm4gZH0sZ2V0Qm91bmRpbmdCb3g6ZnVuY3Rpb24oYSl7YT1hfHxuZXcgVEhSRUUuQm94MzthLnNldCh0aGlzLmNlbnRlcix0aGlzLmNlbnRlcik7YS5leHBhbmRCeVNjYWxhcih0aGlzLnJhZGl1cyk7XG5yZXR1cm4gYX0sYXBwbHlNYXRyaXg0OmZ1bmN0aW9uKGEpe3RoaXMuY2VudGVyLmFwcGx5TWF0cml4NChhKTt0aGlzLnJhZGl1cyo9YS5nZXRNYXhTY2FsZU9uQXhpcygpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5jZW50ZXIuYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2VudGVyLmVxdWFscyh0aGlzLmNlbnRlcikmJmEucmFkaXVzPT09dGhpcy5yYWRpdXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5TcGhlcmUpLmNvcHkodGhpcyl9fTtcblRIUkVFLkZydXN0dW09ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMucGxhbmVzPVt2b2lkIDAhPT1hP2E6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuUGxhbmUsdm9pZCAwIT09Yz9jOm5ldyBUSFJFRS5QbGFuZSx2b2lkIDAhPT1kP2Q6bmV3IFRIUkVFLlBsYW5lLHZvaWQgMCE9PWU/ZTpuZXcgVEhSRUUuUGxhbmUsdm9pZCAwIT09Zj9mOm5ldyBUSFJFRS5QbGFuZV19O1xuVEhSRUUuRnJ1c3R1bS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLkZydXN0dW0sc2V0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz10aGlzLnBsYW5lcztnWzBdLmNvcHkoYSk7Z1sxXS5jb3B5KGIpO2dbMl0uY29weShjKTtnWzNdLmNvcHkoZCk7Z1s0XS5jb3B5KGUpO2dbNV0uY29weShmKTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5wbGFuZXMsYz0wOzY+YztjKyspYltjXS5jb3B5KGEucGxhbmVzW2NdKTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBsYW5lcyxjPWEuZWxlbWVudHM7YT1jWzBdO3ZhciBkPWNbMV0sZT1jWzJdLGY9Y1szXSxnPWNbNF0saD1jWzVdLGs9Y1s2XSxsPWNbN10scD1jWzhdLG49Y1s5XSxtPWNbMTBdLHM9Y1sxMV0sdD1jWzEyXSxyPWNbMTNdLHY9Y1sxNF0sYz1jWzE1XTtiWzBdLnNldENvbXBvbmVudHMoZi1hLGwtZyxzLXAsYy10KS5ub3JtYWxpemUoKTtiWzFdLnNldENvbXBvbmVudHMoZitcbmEsbCtnLHMrcCxjK3QpLm5vcm1hbGl6ZSgpO2JbMl0uc2V0Q29tcG9uZW50cyhmK2QsbCtoLHMrbixjK3IpLm5vcm1hbGl6ZSgpO2JbM10uc2V0Q29tcG9uZW50cyhmLWQsbC1oLHMtbixjLXIpLm5vcm1hbGl6ZSgpO2JbNF0uc2V0Q29tcG9uZW50cyhmLWUsbC1rLHMtbSxjLXYpLm5vcm1hbGl6ZSgpO2JbNV0uc2V0Q29tcG9uZW50cyhmK2UsbCtrLHMrbSxjK3YpLm5vcm1hbGl6ZSgpO3JldHVybiB0aGlzfSxpbnRlcnNlY3RzT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlNwaGVyZTtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5nZW9tZXRyeTtudWxsPT09Yy5ib3VuZGluZ1NwaGVyZSYmYy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTthLmNvcHkoYy5ib3VuZGluZ1NwaGVyZSk7YS5hcHBseU1hdHJpeDQoYi5tYXRyaXhXb3JsZCk7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShhKX19KCksaW50ZXJzZWN0c1NwaGVyZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBsYW5lcyxcbmM9YS5jZW50ZXI7YT0tYS5yYWRpdXM7Zm9yKHZhciBkPTA7Nj5kO2QrKylpZihiW2RdLmRpc3RhbmNlVG9Qb2ludChjKTxhKXJldHVybiExO3JldHVybiEwfSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBkPXRoaXMucGxhbmVzLGU9MDs2PmU7ZSsrKXt2YXIgZj1kW2VdO2EueD0wPGYubm9ybWFsLng/Yy5taW4ueDpjLm1heC54O2IueD0wPGYubm9ybWFsLng/Yy5tYXgueDpjLm1pbi54O2EueT0wPGYubm9ybWFsLnk/Yy5taW4ueTpjLm1heC55O2IueT0wPGYubm9ybWFsLnk/Yy5tYXgueTpjLm1pbi55O2Euej0wPGYubm9ybWFsLno/Yy5taW4uejpjLm1heC56O2Iuej0wPGYubm9ybWFsLno/Yy5tYXguejpjLm1pbi56O3ZhciBnPWYuZGlzdGFuY2VUb1BvaW50KGEpLGY9Zi5kaXN0YW5jZVRvUG9pbnQoYik7aWYoMD5nJiYwPmYpcmV0dXJuITF9cmV0dXJuITB9fSgpLFxuY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5wbGFuZXMsYz0wOzY+YztjKyspaWYoMD5iW2NdLmRpc3RhbmNlVG9Qb2ludChhKSlyZXR1cm4hMTtyZXR1cm4hMH0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IFRIUkVFLkZydXN0dW0pLmNvcHkodGhpcyl9fTtUSFJFRS5QbGFuZT1mdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMygxLDAsMCk7dGhpcy5jb25zdGFudD12b2lkIDAhPT1iP2I6MH07XG5USFJFRS5QbGFuZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlBsYW5lLHNldDpmdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsLmNvcHkoYSk7dGhpcy5jb25zdGFudD1iO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMubm9ybWFsLnNldChhLGIsYyk7dGhpcy5jb25zdGFudD1kO3JldHVybiB0aGlzfSxzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludDpmdW5jdGlvbihhLGIpe3RoaXMubm9ybWFsLmNvcHkoYSk7dGhpcy5jb25zdGFudD0tYi5kb3QodGhpcy5ub3JtYWwpO3JldHVybiB0aGlzfSxzZXRGcm9tQ29wbGFuYXJQb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihjLGQsZSl7ZD1hLnN1YlZlY3RvcnMoZSxkKS5jcm9zcyhiLnN1YlZlY3RvcnMoYyxkKSkubm9ybWFsaXplKCk7dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChkLFxuYyk7cmV0dXJuIHRoaXN9fSgpLGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5ub3JtYWwuY29weShhLm5vcm1hbCk7dGhpcy5jb25zdGFudD1hLmNvbnN0YW50O3JldHVybiB0aGlzfSxub3JtYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT0xL3RoaXMubm9ybWFsLmxlbmd0aCgpO3RoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKGEpO3RoaXMuY29uc3RhbnQqPWE7cmV0dXJuIHRoaXN9LG5lZ2F0ZTpmdW5jdGlvbigpe3RoaXMuY29uc3RhbnQqPS0xO3RoaXMubm9ybWFsLm5lZ2F0ZSgpO3JldHVybiB0aGlzfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubm9ybWFsLmRvdChhKSt0aGlzLmNvbnN0YW50fSxkaXN0YW5jZVRvU3BoZXJlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludChhLmNlbnRlciktYS5yYWRpdXN9LHByb2plY3RQb2ludDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm9ydGhvUG9pbnQoYSxiKS5zdWIoYSkubmVnYXRlKCl9LG9ydGhvUG9pbnQ6ZnVuY3Rpb24oYSxcbmIpe3ZhciBjPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEpO3JldHVybihifHxuZXcgVEhSRUUuVmVjdG9yMykuY29weSh0aGlzLm5vcm1hbCkubXVsdGlwbHlTY2FsYXIoYyl9LGlzSW50ZXJzZWN0aW9uTGluZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmRpc3RhbmNlVG9Qb2ludChhLnN0YXJ0KTthPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEuZW5kKTtyZXR1cm4gMD5iJiYwPGF8fDA+YSYmMDxifSxpbnRlcnNlY3RMaW5lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7dmFyIGQ9Y3x8bmV3IFRIUkVFLlZlY3RvcjMsZT1iLmRlbHRhKGEpLGY9dGhpcy5ub3JtYWwuZG90KGUpO2lmKDA9PWYpe2lmKDA9PXRoaXMuZGlzdGFuY2VUb1BvaW50KGIuc3RhcnQpKXJldHVybiBkLmNvcHkoYi5zdGFydCl9ZWxzZSByZXR1cm4gZj0tKGIuc3RhcnQuZG90KHRoaXMubm9ybWFsKSt0aGlzLmNvbnN0YW50KS9mLDA+Znx8MTxmP3ZvaWQgMDpkLmNvcHkoZSkubXVsdGlwbHlTY2FsYXIoZikuYWRkKGIuc3RhcnQpfX0oKSxcbmNvcGxhbmFyUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBUSFJFRS5WZWN0b3IzKS5jb3B5KHRoaXMubm9ybWFsKS5tdWx0aXBseVNjYWxhcigtdGhpcy5jb25zdGFudCl9LGFwcGx5TWF0cml4NDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuTWF0cml4MztyZXR1cm4gZnVuY3Rpb24oZCxlKXt2YXIgZj1lfHxjLmdldE5vcm1hbE1hdHJpeChkKSxmPWEuY29weSh0aGlzLm5vcm1hbCkuYXBwbHlNYXRyaXgzKGYpLGc9dGhpcy5jb3BsYW5hclBvaW50KGIpO2cuYXBwbHlNYXRyaXg0KGQpO3RoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoZixnKTtyZXR1cm4gdGhpc319KCksdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMuY29uc3RhbnQtPWEuZG90KHRoaXMubm9ybWFsKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vcm1hbC5lcXVhbHModGhpcy5ub3JtYWwpJiZcbmEuY29uc3RhbnQ9PXRoaXMuY29uc3RhbnR9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBUSFJFRS5QbGFuZSkuY29weSh0aGlzKX19O1xuVEhSRUUuTWF0aD17Z2VuZXJhdGVVVUlEOmZ1bmN0aW9uKCl7dmFyIGE9XCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpLGI9QXJyYXkoMzYpLGM9MCxkO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgZT0wOzM2PmU7ZSsrKTg9PWV8fDEzPT1lfHwxOD09ZXx8MjM9PWU/YltlXT1cIi1cIjoxND09ZT9iW2VdPVwiNFwiOigyPj1jJiYoYz0zMzU1NDQzMisxNjc3NzIxNipNYXRoLnJhbmRvbSgpfDApLGQ9YyYxNSxjPj49NCxiW2VdPWFbMTk9PWU/ZCYzfDg6ZF0pO3JldHVybiBiLmpvaW4oXCJcIil9fSgpLGNsYW1wOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYTxiP2I6YT5jP2M6YX0sY2xhbXBCb3R0b206ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYTxiP2I6YX0sbWFwTGluZWFyOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGQrKGEtYikqKGUtZCkvKGMtYil9LHNtb290aHN0ZXA6ZnVuY3Rpb24oYSxiLGMpe2lmKGE8PVxuYilyZXR1cm4gMDtpZihhPj1jKXJldHVybiAxO2E9KGEtYikvKGMtYik7cmV0dXJuIGEqYSooMy0yKmEpfSxzbW9vdGhlcnN0ZXA6ZnVuY3Rpb24oYSxiLGMpe2lmKGE8PWIpcmV0dXJuIDA7aWYoYT49YylyZXR1cm4gMTthPShhLWIpLyhjLWIpO3JldHVybiBhKmEqYSooYSooNiphLTE1KSsxMCl9LHJhbmRvbTE2OmZ1bmN0aW9uKCl7cmV0dXJuKDY1MjgwKk1hdGgucmFuZG9tKCkrMjU1Kk1hdGgucmFuZG9tKCkpLzY1NTM1fSxyYW5kSW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIE1hdGguZmxvb3IodGhpcy5yYW5kRmxvYXQoYSxiKSl9LHJhbmRGbG9hdDpmdW5jdGlvbihhLGIpe3JldHVybiBhK01hdGgucmFuZG9tKCkqKGItYSl9LHJhbmRGbG9hdFNwcmVhZDpmdW5jdGlvbihhKXtyZXR1cm4gYSooLjUtTWF0aC5yYW5kb20oKSl9LGRlZ1RvUmFkOmZ1bmN0aW9uKCl7dmFyIGE9TWF0aC5QSS8xODA7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBiKmF9fSgpLHJhZFRvRGVnOmZ1bmN0aW9uKCl7dmFyIGE9XG4xODAvTWF0aC5QSTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIqYX19KCksaXNQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiAwPT09KGEmYS0xKSYmMCE9PWF9LG5leHRQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe2EtLTthfD1hPj4xO2F8PWE+PjI7YXw9YT4+NDthfD1hPj44O2F8PWE+PjE2O2ErKztyZXR1cm4gYX19O1xuVEhSRUUuU3BsaW5lPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYsZyl7YT0uNSooYy1hKTtkPS41KihkLWIpO3JldHVybigyKihiLWMpK2ErZCkqZysoLTMqKGItYyktMiphLWQpKmYrYSplK2J9dGhpcy5wb2ludHM9YTt2YXIgYz1bXSxkPXt4OjAseTowLHo6MH0sZSxmLGcsaCxrLGwscCxuLG07dGhpcy5pbml0RnJvbUFycmF5PWZ1bmN0aW9uKGEpe3RoaXMucG9pbnRzPVtdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXRoaXMucG9pbnRzW2JdPXt4OmFbYl1bMF0seTphW2JdWzFdLHo6YVtiXVsyXX19O3RoaXMuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7ZT0odGhpcy5wb2ludHMubGVuZ3RoLTEpKmE7Zj1NYXRoLmZsb29yKGUpO2c9ZS1mO2NbMF09MD09PWY/ZjpmLTE7Y1sxXT1mO2NbMl09Zj50aGlzLnBvaW50cy5sZW5ndGgtMj90aGlzLnBvaW50cy5sZW5ndGgtMTpmKzE7Y1szXT1mPnRoaXMucG9pbnRzLmxlbmd0aC0zP3RoaXMucG9pbnRzLmxlbmd0aC0xOmYrXG4yO2w9dGhpcy5wb2ludHNbY1swXV07cD10aGlzLnBvaW50c1tjWzFdXTtuPXRoaXMucG9pbnRzW2NbMl1dO209dGhpcy5wb2ludHNbY1szXV07aD1nKmc7az1nKmg7ZC54PWIobC54LHAueCxuLngsbS54LGcsaCxrKTtkLnk9YihsLnkscC55LG4ueSxtLnksZyxoLGspO2Quej1iKGwueixwLnosbi56LG0ueixnLGgsayk7cmV0dXJuIGR9O3RoaXMuZ2V0Q29udHJvbFBvaW50c0FycmF5PWZ1bmN0aW9uKCl7dmFyIGEsYixjPXRoaXMucG9pbnRzLmxlbmd0aCxkPVtdO2ZvcihhPTA7YTxjO2ErKyliPXRoaXMucG9pbnRzW2FdLGRbYV09W2IueCxiLnksYi56XTtyZXR1cm4gZH07dGhpcy5nZXRMZW5ndGg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9Yj1iPTAsZj1uZXcgVEhSRUUuVmVjdG9yMyxnPW5ldyBUSFJFRS5WZWN0b3IzLGg9W10saz0wO2hbMF09MDthfHwoYT0xMDApO2M9dGhpcy5wb2ludHMubGVuZ3RoKmE7Zi5jb3B5KHRoaXMucG9pbnRzWzBdKTtmb3IoYT0xO2E8YzthKyspYj1cbmEvYyxkPXRoaXMuZ2V0UG9pbnQoYiksZy5jb3B5KGQpLGsrPWcuZGlzdGFuY2VUbyhmKSxmLmNvcHkoZCksYio9dGhpcy5wb2ludHMubGVuZ3RoLTEsYj1NYXRoLmZsb29yKGIpLGIhPWUmJihoW2JdPWssZT1iKTtoW2gubGVuZ3RoXT1rO3JldHVybntjaHVua3M6aCx0b3RhbDprfX07dGhpcy5yZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGg9W10saz1uZXcgVEhSRUUuVmVjdG9yMyxtPXRoaXMuZ2V0TGVuZ3RoKCk7aC5wdXNoKGsuY29weSh0aGlzLnBvaW50c1swXSkuY2xvbmUoKSk7Zm9yKGI9MTtiPHRoaXMucG9pbnRzLmxlbmd0aDtiKyspe2M9bS5jaHVua3NbYl0tbS5jaHVua3NbYi0xXTtnPU1hdGguY2VpbChhKmMvbS50b3RhbCk7ZT0oYi0xKS8odGhpcy5wb2ludHMubGVuZ3RoLTEpO2Y9Yi8odGhpcy5wb2ludHMubGVuZ3RoLTEpO2ZvcihjPTE7YzxnLTE7YysrKWQ9ZSsxL2cqYyooZi1lKSxkPXRoaXMuZ2V0UG9pbnQoZCksaC5wdXNoKGsuY29weShkKS5jbG9uZSgpKTtcbmgucHVzaChrLmNvcHkodGhpcy5wb2ludHNbYl0pLmNsb25lKCkpfXRoaXMucG9pbnRzPWh9fTtUSFJFRS5UcmlhbmdsZT1mdW5jdGlvbihhLGIsYyl7dGhpcy5hPXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmI9dm9pZCAwIT09Yj9iOm5ldyBUSFJFRS5WZWN0b3IzO3RoaXMuYz12b2lkIDAhPT1jP2M6bmV3IFRIUkVFLlZlY3RvcjN9O1RIUkVFLlRyaWFuZ2xlLm5vcm1hbD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtlPWV8fG5ldyBUSFJFRS5WZWN0b3IzO2Uuc3ViVmVjdG9ycyhkLGMpO2Euc3ViVmVjdG9ycyhiLGMpO2UuY3Jvc3MoYSk7Yj1lLmxlbmd0aFNxKCk7cmV0dXJuIDA8Yj9lLm11bHRpcGx5U2NhbGFyKDEvTWF0aC5zcXJ0KGIpKTplLnNldCgwLDAsMCl9fSgpO1xuVEhSRUUuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMyxjPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihkLGUsZixnLGgpe2Euc3ViVmVjdG9ycyhnLGUpO2Iuc3ViVmVjdG9ycyhmLGUpO2Muc3ViVmVjdG9ycyhkLGUpO2Q9YS5kb3QoYSk7ZT1hLmRvdChiKTtmPWEuZG90KGMpO3ZhciBrPWIuZG90KGIpO2c9Yi5kb3QoYyk7dmFyIGw9ZCprLWUqZTtoPWh8fG5ldyBUSFJFRS5WZWN0b3IzO2lmKDA9PWwpcmV0dXJuIGguc2V0KC0yLC0xLC0xKTtsPTEvbDtrPShrKmYtZSpnKSpsO2Q9KGQqZy1lKmYpKmw7cmV0dXJuIGguc2V0KDEtay1kLGQsayl9fSgpO1xuVEhSRUUuVHJpYW5nbGUuY29udGFpbnNQb2ludD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtiPVRIUkVFLlRyaWFuZ2xlLmJhcnljb29yZEZyb21Qb2ludChiLGMsZCxlLGEpO3JldHVybiAwPD1iLngmJjA8PWIueSYmMT49Yi54K2IueX19KCk7XG5USFJFRS5UcmlhbmdsZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlRyaWFuZ2xlLHNldDpmdW5jdGlvbihhLGIsYyl7dGhpcy5hLmNvcHkoYSk7dGhpcy5iLmNvcHkoYik7dGhpcy5jLmNvcHkoYyk7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHNBbmRJbmRpY2VzOmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuYS5jb3B5KGFbYl0pO3RoaXMuYi5jb3B5KGFbY10pO3RoaXMuYy5jb3B5KGFbZF0pO3JldHVybiB0aGlzfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYS5jb3B5KGEuYSk7dGhpcy5iLmNvcHkoYS5iKTt0aGlzLmMuY29weShhLmMpO3JldHVybiB0aGlzfSxhcmVhOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXthLnN1YlZlY3RvcnModGhpcy5jLHRoaXMuYik7Yi5zdWJWZWN0b3JzKHRoaXMuYSx0aGlzLmIpO3JldHVybi41KmEuY3Jvc3MoYikubGVuZ3RoKCl9fSgpLG1pZHBvaW50OmZ1bmN0aW9uKGEpe3JldHVybihhfHxcbm5ldyBUSFJFRS5WZWN0b3IzKS5hZGRWZWN0b3JzKHRoaXMuYSx0aGlzLmIpLmFkZCh0aGlzLmMpLm11bHRpcGx5U2NhbGFyKDEvMyl9LG5vcm1hbDpmdW5jdGlvbihhKXtyZXR1cm4gVEhSRUUuVHJpYW5nbGUubm9ybWFsKHRoaXMuYSx0aGlzLmIsdGhpcy5jLGEpfSxwbGFuZTpmdW5jdGlvbihhKXtyZXR1cm4oYXx8bmV3IFRIUkVFLlBsYW5lKS5zZXRGcm9tQ29wbGFuYXJQb2ludHModGhpcy5hLHRoaXMuYix0aGlzLmMpfSxiYXJ5Y29vcmRGcm9tUG9pbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVEhSRUUuVHJpYW5nbGUuYmFyeWNvb3JkRnJvbVBvaW50KGEsdGhpcy5hLHRoaXMuYix0aGlzLmMsYil9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFRIUkVFLlRyaWFuZ2xlLmNvbnRhaW5zUG9pbnQoYSx0aGlzLmEsdGhpcy5iLHRoaXMuYyl9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5hLmVxdWFscyh0aGlzLmEpJiZhLmIuZXF1YWxzKHRoaXMuYikmJmEuYy5lcXVhbHModGhpcy5jKX0sXG5jbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgVEhSRUUuVHJpYW5nbGUpLmNvcHkodGhpcyl9fTtUSFJFRS5DbG9jaz1mdW5jdGlvbihhKXt0aGlzLmF1dG9TdGFydD12b2lkIDAhPT1hP2E6ITA7dGhpcy5lbGFwc2VkVGltZT10aGlzLm9sZFRpbWU9dGhpcy5zdGFydFRpbWU9MDt0aGlzLnJ1bm5pbmc9ITF9O1xuVEhSRUUuQ2xvY2sucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5DbG9jayxzdGFydDpmdW5jdGlvbigpe3RoaXMub2xkVGltZT10aGlzLnN0YXJ0VGltZT12b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlJiZ2b2lkIDAhPT1zZWxmLnBlcmZvcm1hbmNlLm5vdz9zZWxmLnBlcmZvcm1hbmNlLm5vdygpOkRhdGUubm93KCk7dGhpcy5ydW5uaW5nPSEwfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5nZXRFbGFwc2VkVGltZSgpO3RoaXMucnVubmluZz0hMX0sZ2V0RWxhcHNlZFRpbWU6ZnVuY3Rpb24oKXt0aGlzLmdldERlbHRhKCk7cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWV9LGdldERlbHRhOmZ1bmN0aW9uKCl7dmFyIGE9MDt0aGlzLmF1dG9TdGFydCYmIXRoaXMucnVubmluZyYmdGhpcy5zdGFydCgpO2lmKHRoaXMucnVubmluZyl7dmFyIGI9dm9pZCAwIT09c2VsZi5wZXJmb3JtYW5jZSYmdm9pZCAwIT09c2VsZi5wZXJmb3JtYW5jZS5ub3c/c2VsZi5wZXJmb3JtYW5jZS5ub3coKTpEYXRlLm5vdygpLFxuYT0uMDAxKihiLXRoaXMub2xkVGltZSk7dGhpcy5vbGRUaW1lPWI7dGhpcy5lbGFwc2VkVGltZSs9YX1yZXR1cm4gYX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlcj1mdW5jdGlvbigpe307XG5USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5FdmVudERpc3BhdGNoZXIsYXBwbHk6ZnVuY3Rpb24oYSl7YS5hZGRFdmVudExpc3RlbmVyPVRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjthLmhhc0V2ZW50TGlzdGVuZXI9VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5oYXNFdmVudExpc3RlbmVyO2EucmVtb3ZlRXZlbnRMaXN0ZW5lcj1USFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI7YS5kaXNwYXRjaEV2ZW50PVRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudH0sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PXRoaXMuX2xpc3RlbmVycyYmKHRoaXMuX2xpc3RlbmVycz17fSk7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3ZvaWQgMD09PWNbYV0mJihjW2FdPVtdKTstMT09PWNbYV0uaW5kZXhPZihiKSYmXG5jW2FdLnB1c2goYil9LGhhc0V2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDA9PT10aGlzLl9saXN0ZW5lcnMpcmV0dXJuITE7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3JldHVybiB2b2lkIDAhPT1jW2FdJiYtMSE9PWNbYV0uaW5kZXhPZihiKT8hMDohMX0scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PXRoaXMuX2xpc3RlbmVycyl7dmFyIGM9dGhpcy5fbGlzdGVuZXJzW2FdO2lmKHZvaWQgMCE9PWMpe3ZhciBkPWMuaW5kZXhPZihiKTstMSE9PWQmJmMuc3BsaWNlKGQsMSl9fX0sZGlzcGF0Y2hFdmVudDpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT10aGlzLl9saXN0ZW5lcnMpe3ZhciBiPXRoaXMuX2xpc3RlbmVyc1thLnR5cGVdO2lmKHZvaWQgMCE9PWIpe2EudGFyZ2V0PXRoaXM7Zm9yKHZhciBjPVtdLGQ9Yi5sZW5ndGgsZT0wO2U8ZDtlKyspY1tlXT1iW2VdO2ZvcihlPTA7ZTxkO2UrKyljW2VdLmNhbGwodGhpcyxhKX19fX07XG4oZnVuY3Rpb24oYSl7YS5SYXljYXN0ZXI9ZnVuY3Rpb24oYixjLGYsZyl7dGhpcy5yYXk9bmV3IGEuUmF5KGIsYyk7dGhpcy5uZWFyPWZ8fDA7dGhpcy5mYXI9Z3x8SW5maW5pdHk7dGhpcy5wYXJhbXM9e1Nwcml0ZTp7fSxNZXNoOnt9LFBvaW50Q2xvdWQ6e3RocmVzaG9sZDoxfSxMT0Q6e30sTGluZTp7fX19O3ZhciBiPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuZGlzdGFuY2UtYi5kaXN0YW5jZX0sYz1mdW5jdGlvbihhLGIsZixnKXthLnJheWNhc3QoYixmKTtpZighMD09PWcpe2E9YS5jaGlsZHJlbjtnPTA7Zm9yKHZhciBoPWEubGVuZ3RoO2c8aDtnKyspYyhhW2ddLGIsZiwhMCl9fTthLlJheWNhc3Rlci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmEuUmF5Y2FzdGVyLHByZWNpc2lvbjoxRS00LGxpbmVQcmVjaXNpb246MSxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLnJheS5zZXQoYSxiKX0sc2V0RnJvbUNhbWVyYTpmdW5jdGlvbihiLGMpe2MgaW5zdGFuY2VvZiBhLlBlcnNwZWN0aXZlQ2FtZXJhP1xuKHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYy5tYXRyaXhXb3JsZCksdGhpcy5yYXkuZGlyZWN0aW9uLnNldChiLngsYi55LC41KS51bnByb2plY3QoYykuc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCkpOmMgaW5zdGFuY2VvZiBhLk9ydGhvZ3JhcGhpY0NhbWVyYT8odGhpcy5yYXkub3JpZ2luLnNldChiLngsYi55LC0xKS51bnByb2plY3QoYyksdGhpcy5yYXkuZGlyZWN0aW9uLnNldCgwLDAsLTEpLnRyYW5zZm9ybURpcmVjdGlvbihjLm1hdHJpeFdvcmxkKSk6YS5lcnJvcihcIlRIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuXCIpfSxpbnRlcnNlY3RPYmplY3Q6ZnVuY3Rpb24oYSxlKXt2YXIgZj1bXTtjKGEsdGhpcyxmLGUpO2Yuc29ydChiKTtyZXR1cm4gZn0saW50ZXJzZWN0T2JqZWN0czpmdW5jdGlvbihkLGUpe3ZhciBmPVtdO2lmKCExPT09ZCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBhLndhcm4oXCJUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuXCIpLFxuZjtmb3IodmFyIGc9MCxoPWQubGVuZ3RoO2c8aDtnKyspYyhkW2ddLHRoaXMsZixlKTtmLnNvcnQoYik7cmV0dXJuIGZ9fX0pKFRIUkVFKTtcblRIUkVFLk9iamVjdDNEPWZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpUSFJFRS5PYmplY3QzRElkQ291bnQrK30pO3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMubmFtZT1cIlwiO3RoaXMudHlwZT1cIk9iamVjdDNEXCI7dGhpcy5wYXJlbnQ9dm9pZCAwO3RoaXMuY2hpbGRyZW49W107dGhpcy51cD1USFJFRS5PYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5FdWxlcixjPW5ldyBUSFJFRS5RdWF0ZXJuaW9uLGQ9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpO2Iub25DaGFuZ2UoZnVuY3Rpb24oKXtjLnNldEZyb21FdWxlcihiLCExKX0pO2Mub25DaGFuZ2UoZnVuY3Rpb24oKXtiLnNldEZyb21RdWF0ZXJuaW9uKGMsdm9pZCAwLCExKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse3Bvc2l0aW9uOntlbnVtZXJhYmxlOiEwLHZhbHVlOmF9LHJvdGF0aW9uOntlbnVtZXJhYmxlOiEwLFxudmFsdWU6Yn0scXVhdGVybmlvbjp7ZW51bWVyYWJsZTohMCx2YWx1ZTpjfSxzY2FsZTp7ZW51bWVyYWJsZTohMCx2YWx1ZTpkfX0pO3RoaXMucm90YXRpb25BdXRvVXBkYXRlPSEwO3RoaXMubWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0O3RoaXMubWF0cml4V29ybGQ9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSEwO3RoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMTt0aGlzLnZpc2libGU9ITA7dGhpcy5yZWNlaXZlU2hhZG93PXRoaXMuY2FzdFNoYWRvdz0hMTt0aGlzLmZydXN0dW1DdWxsZWQ9ITA7dGhpcy5yZW5kZXJPcmRlcj0wO3RoaXMudXNlckRhdGE9e319O1RIUkVFLk9iamVjdDNELkRlZmF1bHRVcD1uZXcgVEhSRUUuVmVjdG9yMygwLDEsMCk7XG5USFJFRS5PYmplY3QzRC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLk9iamVjdDNELGdldCBldWxlck9yZGVyKCl7VEhSRUUud2FybihcIlRIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBoYXMgYmVlbiBtb3ZlZCB0byAucm90YXRpb24ub3JkZXIuXCIpO3JldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyfSxzZXQgZXVsZXJPcmRlcihhKXtUSFJFRS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGhhcyBiZWVuIG1vdmVkIHRvIC5yb3RhdGlvbi5vcmRlci5cIik7dGhpcy5yb3RhdGlvbi5vcmRlcj1hfSxnZXQgdXNlUXVhdGVybmlvbigpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC5cIil9LHNldCB1c2VRdWF0ZXJuaW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC5cIil9LFxuYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7dGhpcy5tYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhhLHRoaXMubWF0cml4KTt0aGlzLm1hdHJpeC5kZWNvbXBvc2UodGhpcy5wb3NpdGlvbix0aGlzLnF1YXRlcm5pb24sdGhpcy5zY2FsZSl9LHNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZTpmdW5jdGlvbihhLGIpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKGEsYil9LHNldFJvdGF0aW9uRnJvbUV1bGVyOmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoYSwhMCl9LHNldFJvdGF0aW9uRnJvbU1hdHJpeDpmdW5jdGlvbihhKXt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEpfSxzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5jb3B5KGEpfSxyb3RhdGVPbkF4aXM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUXVhdGVybmlvbjtyZXR1cm4gZnVuY3Rpb24oYixjKXthLnNldEZyb21BeGlzQW5nbGUoYixcbmMpO3RoaXMucXVhdGVybmlvbi5tdWx0aXBseShhKTtyZXR1cm4gdGhpc319KCkscm90YXRlWDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDEsMCwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGEsYil9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygwLDEsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhhLGIpfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5jb3B5KGIpLmFwcGx5UXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pO3RoaXMucG9zaXRpb24uYWRkKGEubXVsdGlwbHlTY2FsYXIoYykpO1xucmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhiLGEpfSx0cmFuc2xhdGVYOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMoMSwwLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlWTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzKDAsMSwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGEsYil9fSgpLHRyYW5zbGF0ZVo6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMygwLDAsMSk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhhLFxuYil9fSgpLGxvY2FsVG9Xb3JsZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCl9LHdvcmxkVG9Mb2NhbDpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0O3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYi5hcHBseU1hdHJpeDQoYS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpKX19KCksbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKGIpe2EubG9va0F0KGIsdGhpcy5wb3NpdGlvbix0aGlzLnVwKTt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEpfX0oKSxhZGQ6ZnVuY3Rpb24oYSl7aWYoMTxhcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXRoaXMuYWRkKGFyZ3VtZW50c1tiXSk7cmV0dXJuIHRoaXN9aWYoYT09PXRoaXMpcmV0dXJuIFRIUkVFLmVycm9yKFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuXCIsXG5hKSx0aGlzO2EgaW5zdGFuY2VvZiBUSFJFRS5PYmplY3QzRD8odm9pZCAwIT09YS5wYXJlbnQmJmEucGFyZW50LnJlbW92ZShhKSxhLnBhcmVudD10aGlzLGEuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImFkZGVkXCJ9KSx0aGlzLmNoaWxkcmVuLnB1c2goYSkpOlRIUkVFLmVycm9yKFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELlwiLGEpO3JldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oYSl7aWYoMTxhcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgYj0wO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspdGhpcy5yZW1vdmUoYXJndW1lbnRzW2JdKTtiPXRoaXMuY2hpbGRyZW4uaW5kZXhPZihhKTstMSE9PWImJihhLnBhcmVudD12b2lkIDAsYS5kaXNwYXRjaEV2ZW50KHt0eXBlOlwicmVtb3ZlZFwifSksdGhpcy5jaGlsZHJlbi5zcGxpY2UoYiwxKSl9LGdldENoaWxkQnlOYW1lOmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5PYmplY3QzRDogLmdldENoaWxkQnlOYW1lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0T2JqZWN0QnlOYW1lKCkuXCIpO1xucmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlOYW1lKGEpfSxnZXRPYmplY3RCeUlkOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoXCJpZFwiLGEpfSxnZXRPYmplY3RCeU5hbWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eShcIm5hbWVcIixhKX0sZ2V0T2JqZWN0QnlQcm9wZXJ0eTpmdW5jdGlvbihhLGIpe2lmKHRoaXNbYV09PT1iKXJldHVybiB0aGlzO2Zvcih2YXIgYz0wLGQ9dGhpcy5jaGlsZHJlbi5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9dGhpcy5jaGlsZHJlbltjXS5nZXRPYmplY3RCeVByb3BlcnR5KGEsYik7aWYodm9pZCAwIT09ZSlyZXR1cm4gZX19LGdldFdvcmxkUG9zaXRpb246ZnVuY3Rpb24oYSl7YT1hfHxuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtyZXR1cm4gYS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCl9LGdldFdvcmxkUXVhdGVybmlvbjpmdW5jdGlvbigpe3ZhciBhPVxubmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyl7Yz1jfHxuZXcgVEhSRUUuUXVhdGVybmlvbjt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZShhLGMsYik7cmV0dXJuIGN9fSgpLGdldFdvcmxkUm90YXRpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUXVhdGVybmlvbjtyZXR1cm4gZnVuY3Rpb24oYil7Yj1ifHxuZXcgVEhSRUUuRXVsZXI7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0RnJvbVF1YXRlcm5pb24oYSx0aGlzLnJvdGF0aW9uLm9yZGVyLCExKX19KCksZ2V0V29ybGRTY2FsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGMpe2M9Y3x8bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoYSxcbmIsYyk7cmV0dXJuIGN9fSgpLGdldFdvcmxkRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0KDAsMCwxKS5hcHBseVF1YXRlcm5pb24oYSl9fSgpLHJheWNhc3Q6ZnVuY3Rpb24oKXt9LHRyYXZlcnNlOmZ1bmN0aW9uKGEpe2EodGhpcyk7Zm9yKHZhciBiPTAsYz10aGlzLmNoaWxkcmVuLmxlbmd0aDtiPGM7YisrKXRoaXMuY2hpbGRyZW5bYl0udHJhdmVyc2UoYSl9LHRyYXZlcnNlVmlzaWJsZTpmdW5jdGlvbihhKXtpZighMSE9PXRoaXMudmlzaWJsZSl7YSh0aGlzKTtmb3IodmFyIGI9MCxjPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2I8YztiKyspdGhpcy5jaGlsZHJlbltiXS50cmF2ZXJzZVZpc2libGUoYSl9fSx0cmF2ZXJzZUFuY2VzdG9yczpmdW5jdGlvbihhKXt0aGlzLnBhcmVudCYmKGEodGhpcy5wYXJlbnQpLFxudGhpcy5wYXJlbnQudHJhdmVyc2VBbmNlc3RvcnMoYSkpfSx1cGRhdGVNYXRyaXg6ZnVuY3Rpb24oKXt0aGlzLm1hdHJpeC5jb21wb3NlKHRoaXMucG9zaXRpb24sdGhpcy5xdWF0ZXJuaW9uLHRoaXMuc2NhbGUpO3RoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH0sdXBkYXRlTWF0cml4V29ybGQ6ZnVuY3Rpb24oYSl7ITA9PT10aGlzLm1hdHJpeEF1dG9VcGRhdGUmJnRoaXMudXBkYXRlTWF0cml4KCk7aWYoITA9PT10aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGV8fCEwPT09YSl2b2lkIDA9PT10aGlzLnBhcmVudD90aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpOnRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyh0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCx0aGlzLm1hdHJpeCksdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSExLGE9ITA7Zm9yKHZhciBiPTAsYz10aGlzLmNoaWxkcmVuLmxlbmd0aDtiPGM7YisrKXRoaXMuY2hpbGRyZW5bYl0udXBkYXRlTWF0cml4V29ybGQoYSl9LFxudG9KU09OOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9W10sYztmb3IoYyBpbiBhKXt2YXIgZD1hW2NdO2RlbGV0ZSBkLm1ldGFkYXRhO2IucHVzaChkKX1yZXR1cm4gYn12YXIgYz12b2lkIDA9PT1hLGQ9e30sZTtjJiYoYT17Z2VvbWV0cmllczp7fSxtYXRlcmlhbHM6e319LGU9e3ZlcnNpb246NC40LHR5cGU6XCJPYmplY3RcIixnZW5lcmF0b3I6XCJPYmplY3QzRC50b0pTT05cIn0pO2QudHlwZT10aGlzLnR5cGU7ZC51dWlkPXRoaXMudXVpZDtcIlwiIT09dGhpcy5uYW1lJiYoZC5uYW1lPXRoaXMubmFtZSk7XCJ7fVwiIT09SlNPTi5zdHJpbmdpZnkodGhpcy51c2VyRGF0YSkmJihkLnVzZXJEYXRhPXRoaXMudXNlckRhdGEpOyEwIT09dGhpcy52aXNpYmxlJiYoZC52aXNpYmxlPXRoaXMudmlzaWJsZSk7ZC5tYXRyaXg9dGhpcy5tYXRyaXgudG9BcnJheSgpO2lmKDA8dGhpcy5jaGlsZHJlbi5sZW5ndGgpe2QuY2hpbGRyZW49W107Zm9yKHZhciBmPTA7Zjx0aGlzLmNoaWxkcmVuLmxlbmd0aDtmKyspZC5jaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5bZl0udG9KU09OKGEpLm9iamVjdCl9cmV0dXJuIGM/XG57bWV0YWRhdGE6ZSxnZW9tZXRyaWVzOmIoYS5nZW9tZXRyaWVzKSxtYXRlcmlhbHM6YihhLm1hdGVyaWFscyksb2JqZWN0OmR9OntvYmplY3Q6ZH19LGNsb25lOmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLk9iamVjdDNEKTt2b2lkIDA9PT1iJiYoYj0hMCk7YS5uYW1lPXRoaXMubmFtZTthLnVwLmNvcHkodGhpcy51cCk7YS5wb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pO2EucXVhdGVybmlvbi5jb3B5KHRoaXMucXVhdGVybmlvbik7YS5zY2FsZS5jb3B5KHRoaXMuc2NhbGUpO2Eucm90YXRpb25BdXRvVXBkYXRlPXRoaXMucm90YXRpb25BdXRvVXBkYXRlO2EubWF0cml4LmNvcHkodGhpcy5tYXRyaXgpO2EubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeFdvcmxkKTthLm1hdHJpeEF1dG9VcGRhdGU9dGhpcy5tYXRyaXhBdXRvVXBkYXRlO2EubWF0cml4V29ybGROZWVkc1VwZGF0ZT10aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7YS52aXNpYmxlPXRoaXMudmlzaWJsZTtcbmEuY2FzdFNoYWRvdz10aGlzLmNhc3RTaGFkb3c7YS5yZWNlaXZlU2hhZG93PXRoaXMucmVjZWl2ZVNoYWRvdzthLmZydXN0dW1DdWxsZWQ9dGhpcy5mcnVzdHVtQ3VsbGVkO2EudXNlckRhdGE9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJEYXRhKSk7aWYoITA9PT1iKWZvcih2YXIgYz0wO2M8dGhpcy5jaGlsZHJlbi5sZW5ndGg7YysrKWEuYWRkKHRoaXMuY2hpbGRyZW5bY10uY2xvbmUoKSk7cmV0dXJuIGF9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuT2JqZWN0M0RJZENvdW50PTA7XG5USFJFRS5GYWNlMz1mdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5hPWE7dGhpcy5iPWI7dGhpcy5jPWM7dGhpcy5ub3JtYWw9ZCBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjM/ZDpuZXcgVEhSRUUuVmVjdG9yMzt0aGlzLnZlcnRleE5vcm1hbHM9ZCBpbnN0YW5jZW9mIEFycmF5P2Q6W107dGhpcy5jb2xvcj1lIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/ZTpuZXcgVEhSRUUuQ29sb3I7dGhpcy52ZXJ0ZXhDb2xvcnM9ZSBpbnN0YW5jZW9mIEFycmF5P2U6W107dGhpcy52ZXJ0ZXhUYW5nZW50cz1bXTt0aGlzLm1hdGVyaWFsSW5kZXg9dm9pZCAwIT09Zj9mOjB9O1xuVEhSRUUuRmFjZTMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5GYWNlMyxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5GYWNlMyh0aGlzLmEsdGhpcy5iLHRoaXMuYyk7YS5ub3JtYWwuY29weSh0aGlzLm5vcm1hbCk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EubWF0ZXJpYWxJbmRleD10aGlzLm1hdGVyaWFsSW5kZXg7Zm9yKHZhciBiPTAsYz10aGlzLnZlcnRleE5vcm1hbHMubGVuZ3RoO2I8YztiKyspYS52ZXJ0ZXhOb3JtYWxzW2JdPXRoaXMudmVydGV4Tm9ybWFsc1tiXS5jbG9uZSgpO2I9MDtmb3IoYz10aGlzLnZlcnRleENvbG9ycy5sZW5ndGg7YjxjO2IrKylhLnZlcnRleENvbG9yc1tiXT10aGlzLnZlcnRleENvbG9yc1tiXS5jbG9uZSgpO2I9MDtmb3IoYz10aGlzLnZlcnRleFRhbmdlbnRzLmxlbmd0aDtiPGM7YisrKWEudmVydGV4VGFuZ2VudHNbYl09dGhpcy52ZXJ0ZXhUYW5nZW50c1tiXS5jbG9uZSgpO3JldHVybiBhfX07XG5USFJFRS5GYWNlND1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXtUSFJFRS53YXJuKFwiVEhSRUUuRmFjZTQgaGFzIGJlZW4gcmVtb3ZlZC4gQSBUSFJFRS5GYWNlMyB3aWxsIGJlIGNyZWF0ZWQgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5GYWNlMyhhLGIsYyxlLGYsZyl9O1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe3RoaXMuYXJyYXk9YTt0aGlzLml0ZW1TaXplPWI7dGhpcy5uZWVkc1VwZGF0ZT0hMX07XG5USFJFRS5CdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CdWZmZXJBdHRyaWJ1dGUsZ2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLmFycmF5Lmxlbmd0aH0sY29weUF0OmZ1bmN0aW9uKGEsYixjKXthKj10aGlzLml0ZW1TaXplO2MqPWIuaXRlbVNpemU7Zm9yKHZhciBkPTAsZT10aGlzLml0ZW1TaXplO2Q8ZTtkKyspdGhpcy5hcnJheVthK2RdPWIuYXJyYXlbYytkXTtyZXR1cm4gdGhpc30sc2V0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy5hcnJheS5zZXQoYSxiKTtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplXT1iO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMV09YjtyZXR1cm4gdGhpc30sc2V0WjpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzJdPWI7cmV0dXJuIHRoaXN9LHNldFhZOmZ1bmN0aW9uKGEsXG5iLGMpe2EqPXRoaXMuaXRlbVNpemU7dGhpcy5hcnJheVthKzBdPWI7dGhpcy5hcnJheVthKzFdPWM7cmV0dXJuIHRoaXN9LHNldFhZWjpmdW5jdGlvbihhLGIsYyxkKXthKj10aGlzLml0ZW1TaXplO3RoaXMuYXJyYXlbYSswXT1iO3RoaXMuYXJyYXlbYSsxXT1jO3RoaXMuYXJyYXlbYSsyXT1kO3JldHVybiB0aGlzfSxzZXRYWVpXOmZ1bmN0aW9uKGEsYixjLGQsZSl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2ErMF09Yjt0aGlzLmFycmF5W2ErMV09Yzt0aGlzLmFycmF5W2ErMl09ZDt0aGlzLmFycmF5W2ErM109ZTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3Rvcih0aGlzLmFycmF5KSx0aGlzLml0ZW1TaXplKX19O1xuVEhSRUUuSW50OEF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5JbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIGluc3RlYWQuXCIpO3JldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGEsYil9O1RIUkVFLlVpbnQ4QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLlVpbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIGluc3RlYWQuXCIpO3JldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGEsYil9O1xuVEhSRUUuVWludDhDbGFtcGVkQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLGIpfTtUSFJFRS5JbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLGIpfTtcblRIUkVFLlVpbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe1RIUkVFLndhcm4oXCJUSFJFRS5VaW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07VEhSRUUuSW50MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSxiKX07XG5USFJFRS5VaW50MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIGluc3RlYWQuXCIpO3JldHVybiBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGEsYil9O1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLGIpfTtcblRIUkVFLkZsb2F0NjRBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtUSFJFRS53YXJuKFwiVEhSRUUuRmxvYXQ2NEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShhLGIpfTtUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7VEhSRUUuQnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcyxhLGIpO3RoaXMudXBkYXRlUmFuZ2U9e29mZnNldDowLGNvdW50Oi0xfX07VEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlKTtUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlO1xuVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUobmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IodGhpcy5hcnJheSksdGhpcy5pdGVtU2l6ZSl9O1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5EeW5hbWljQnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcyxhLGIpO3RoaXMuZHluYW1pYz1kfHwhMTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9Y3x8MX07VEhSRUUuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlKTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTtcblRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZShuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3Rvcih0aGlzLmFycmF5KSx0aGlzLml0ZW1TaXplLHRoaXMubWVzaFBlckF0dHJpYnV0ZSx0aGlzLmR5bmFtaWMpfTtUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcj1mdW5jdGlvbihhLGIsYyl7dGhpcy5hcnJheT1hO3RoaXMuc3RyaWRlPWI7dGhpcy5uZWVkc1VwZGF0ZT0hMTt0aGlzLmR5bmFtaWM9Y3x8ITE7dGhpcy51cGRhdGVSYW5nZT17b2Zmc2V0OjAsY291bnQ6LTF9fTtcblRIUkVFLkludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXIsZ2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLmFycmF5Lmxlbmd0aH0sY29weUF0OmZ1bmN0aW9uKGEsYixjKXthKj10aGlzLnN0cmlkZTtjKj1iLnN0cmlkZTtmb3IodmFyIGQ9MCxlPXRoaXMuc3RyaWRlO2Q8ZTtkKyspdGhpcy5hcnJheVthK2RdPWIuYXJyYXlbYytkXTtyZXR1cm4gdGhpc30sc2V0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7dGhpcy5hcnJheS5zZXQoYSxiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkludGVybGVhdmVkQnVmZmVyKG5ldyB0aGlzLmFycmF5LmNvbnN0cnVjdG9yKHRoaXMuYXJyYXkpLHRoaXMuc3RyaWRlLHRoaXMuZHluYW1pYyl9fTtcblRIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyPWZ1bmN0aW9uKGEsYixjLGQpe1RIUkVFLkludGVybGVhdmVkQnVmZmVyLmNhbGwodGhpcyxhLGIsYyk7dGhpcy5tZXNoUGVyQXR0cmlidXRlPWR8fDF9O1RIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSk7VEhSRUUuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyO1RIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgVEhSRUUuSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIobmV3IHRoaXMuYXJyYXkuY29uc3RydWN0b3IodGhpcy5hcnJheSksdGhpcy5zdHJpZGUsdGhpcy5keW5hbWljLHRoaXMubWVzaFBlckF0dHJpYnV0ZSl9O1xuVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuZGF0YT1hO3RoaXMuaXRlbVNpemU9Yjt0aGlzLm9mZnNldD1jfTtcblRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsZ2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLml0ZW1TaXplKnRoaXMuZGF0YS5hcnJheS5sZW5ndGgvdGhpcy5kYXRhLnN0cmlkZX0sc2V0WDpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXRdPWI7cmV0dXJuIHRoaXN9LHNldFk6ZnVuY3Rpb24oYSxiKXt0aGlzLmRhdGEuYXJyYXlbYSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0KzFdPWI7cmV0dXJuIHRoaXN9LHNldFo6ZnVuY3Rpb24oYSxiKXt0aGlzLmRhdGEuYXJyYXlbYSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0KzJdPWI7cmV0dXJuIHRoaXN9LHNldFhZOmZ1bmN0aW9uKGEsYixjKXthPWEqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldDt0aGlzLmRhdGEuYXJyYXlbYSswXT1iO3RoaXMuZGF0YS5hcnJheVthK1xuMV09YztyZXR1cm4gdGhpc30sc2V0WFlaOmZ1bmN0aW9uKGEsYixjLGQpe2E9YSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0O3RoaXMuZGF0YS5hcnJheVthKzBdPWI7dGhpcy5kYXRhLmFycmF5W2ErMV09Yzt0aGlzLmRhdGEuYXJyYXlbYSsyXT1kO3JldHVybiB0aGlzfSxzZXRYWVpXOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQ7dGhpcy5kYXRhLmFycmF5W2ErMF09Yjt0aGlzLmRhdGEuYXJyYXlbYSsxXT1jO3RoaXMuZGF0YS5hcnJheVthKzJdPWQ7dGhpcy5kYXRhLmFycmF5W2ErM109ZTtyZXR1cm4gdGhpc319O1xuVEhSRUUuR2VvbWV0cnk9ZnVuY3Rpb24oKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOlRIUkVFLkdlb21ldHJ5SWRDb3VudCsrfSk7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5uYW1lPVwiXCI7dGhpcy50eXBlPVwiR2VvbWV0cnlcIjt0aGlzLnZlcnRpY2VzPVtdO3RoaXMuY29sb3JzPVtdO3RoaXMuZmFjZXM9W107dGhpcy5mYWNlVmVydGV4VXZzPVtbXV07dGhpcy5tb3JwaFRhcmdldHM9W107dGhpcy5tb3JwaENvbG9ycz1bXTt0aGlzLm1vcnBoTm9ybWFscz1bXTt0aGlzLnNraW5XZWlnaHRzPVtdO3RoaXMuc2tpbkluZGljZXM9W107dGhpcy5saW5lRGlzdGFuY2VzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMuaGFzVGFuZ2VudHM9ITE7dGhpcy5keW5hbWljPSEwO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT10aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlPXRoaXMuY29sb3JzTmVlZFVwZGF0ZT1cbnRoaXMudGFuZ2VudHNOZWVkVXBkYXRlPXRoaXMubm9ybWFsc05lZWRVcGRhdGU9dGhpcy51dnNOZWVkVXBkYXRlPXRoaXMuZWxlbWVudHNOZWVkVXBkYXRlPXRoaXMudmVydGljZXNOZWVkVXBkYXRlPSExfTtcblRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuR2VvbWV0cnksYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPShuZXcgVEhSRUUuTWF0cml4MykuZ2V0Tm9ybWFsTWF0cml4KGEpLGM9MCxkPXRoaXMudmVydGljZXMubGVuZ3RoO2M8ZDtjKyspdGhpcy52ZXJ0aWNlc1tjXS5hcHBseU1hdHJpeDQoYSk7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe2E9dGhpcy5mYWNlc1tjXTthLm5vcm1hbC5hcHBseU1hdHJpeDMoYikubm9ybWFsaXplKCk7Zm9yKHZhciBlPTAsZj1hLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8ZjtlKyspYS52ZXJ0ZXhOb3JtYWxzW2VdLmFwcGx5TWF0cml4MyhiKS5ub3JtYWxpemUoKX1udWxsIT09dGhpcy5ib3VuZGluZ0JveCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtudWxsIT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPVxudGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9ITB9LGZyb21CdWZmZXJHZW9tZXRyeTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcyxjPWEuYXR0cmlidXRlcyxkPWMucG9zaXRpb24uYXJyYXksZT12b2lkIDAhPT1jLmluZGV4P2MuaW5kZXguYXJyYXk6dm9pZCAwLGY9dm9pZCAwIT09Yy5ub3JtYWw/Yy5ub3JtYWwuYXJyYXk6dm9pZCAwLGc9dm9pZCAwIT09Yy5jb2xvcj9jLmNvbG9yLmFycmF5OnZvaWQgMCxoPXZvaWQgMCE9PWMudXY/Yy51di5hcnJheTp2b2lkIDAsaz1bXSxsPVtdLHA9Yz0wO2M8ZC5sZW5ndGg7Yys9MyxwKz0yKWIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyhkW2NdLGRbYysxXSxkW2MrMl0pKSx2b2lkIDAhPT1mJiZrLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoZltjXSxmW2MrMV0sZltjKzJdKSksdm9pZCAwIT09ZyYmYi5jb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3IoZ1tjXSxnW2MrMV0sZ1tjKzJdKSksdm9pZCAwIT09aCYmbC5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGhbcF0sXG5oW3ArMV0pKTt2YXIgbj1mdW5jdGlvbihhLGMsZCl7dmFyIGU9dm9pZCAwIT09Zj9ba1thXS5jbG9uZSgpLGtbY10uY2xvbmUoKSxrW2RdLmNsb25lKCldOltdLG09dm9pZCAwIT09Zz9bYi5jb2xvcnNbYV0uY2xvbmUoKSxiLmNvbG9yc1tjXS5jbG9uZSgpLGIuY29sb3JzW2RdLmNsb25lKCldOltdO2IuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYSxjLGQsZSxtKSk7dm9pZCAwIT09aCYmYi5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2xbYV0uY2xvbmUoKSxsW2NdLmNsb25lKCksbFtkXS5jbG9uZSgpXSl9O2lmKHZvaWQgMCE9PWUpaWYoZD1hLmRyYXdjYWxscywwPGQubGVuZ3RoKWZvcihjPTA7YzxkLmxlbmd0aDtjKyspZm9yKHZhciBwPWRbY10sbT1wLnN0YXJ0LHM9cC5jb3VudCx0PXAuaW5kZXgscD1tLG09bStzO3A8bTtwKz0zKW4odCtlW3BdLHQrZVtwKzFdLHQrZVtwKzJdKTtlbHNlIGZvcihjPTA7YzxlLmxlbmd0aDtjKz0zKW4oZVtjXSxlW2MrMV0sZVtjKzJdKTtlbHNlIGZvcihjPVxuMDtjPGQubGVuZ3RoLzM7Yys9MyluKGMsYysxLGMrMik7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtudWxsIT09YS5ib3VuZGluZ0JveCYmKHRoaXMuYm91bmRpbmdCb3g9YS5ib3VuZGluZ0JveC5jbG9uZSgpKTtudWxsIT09YS5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9YS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpKTtyZXR1cm4gdGhpc30sY2VudGVyOmZ1bmN0aW9uKCl7dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTt2YXIgYT10aGlzLmJvdW5kaW5nQm94LmNlbnRlcigpLm5lZ2F0ZSgpO3RoaXMuYXBwbHlNYXRyaXgoKG5ldyBUSFJFRS5NYXRyaXg0KS5zZXRQb3NpdGlvbihhKSk7cmV0dXJuIGF9LGNvbXB1dGVGYWNlTm9ybWFsczpmdW5jdGlvbigpe2Zvcih2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5WZWN0b3IzLGM9MCxkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPXRoaXMuZmFjZXNbY10sZj10aGlzLnZlcnRpY2VzW2UuYV0sXG5nPXRoaXMudmVydGljZXNbZS5iXTthLnN1YlZlY3RvcnModGhpcy52ZXJ0aWNlc1tlLmNdLGcpO2Iuc3ViVmVjdG9ycyhmLGcpO2EuY3Jvc3MoYik7YS5ub3JtYWxpemUoKTtlLm5vcm1hbC5jb3B5KGEpfX0sY29tcHV0ZVZlcnRleE5vcm1hbHM6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkO2Q9QXJyYXkodGhpcy52ZXJ0aWNlcy5sZW5ndGgpO2I9MDtmb3IoYz10aGlzLnZlcnRpY2VzLmxlbmd0aDtiPGM7YisrKWRbYl09bmV3IFRIUkVFLlZlY3RvcjM7aWYoYSl7dmFyIGUsZixnLGg9bmV3IFRIUkVFLlZlY3RvcjMsaz1uZXcgVEhSRUUuVmVjdG9yMzthPTA7Zm9yKGI9dGhpcy5mYWNlcy5sZW5ndGg7YTxiO2ErKyljPXRoaXMuZmFjZXNbYV0sZT10aGlzLnZlcnRpY2VzW2MuYV0sZj10aGlzLnZlcnRpY2VzW2MuYl0sZz10aGlzLnZlcnRpY2VzW2MuY10saC5zdWJWZWN0b3JzKGcsZiksay5zdWJWZWN0b3JzKGUsZiksaC5jcm9zcyhrKSxkW2MuYV0uYWRkKGgpLGRbYy5iXS5hZGQoaCksZFtjLmNdLmFkZChoKX1lbHNlIGZvcihhPVxuMCxiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspYz10aGlzLmZhY2VzW2FdLGRbYy5hXS5hZGQoYy5ub3JtYWwpLGRbYy5iXS5hZGQoYy5ub3JtYWwpLGRbYy5jXS5hZGQoYy5ub3JtYWwpO2I9MDtmb3IoYz10aGlzLnZlcnRpY2VzLmxlbmd0aDtiPGM7YisrKWRbYl0ubm9ybWFsaXplKCk7YT0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspYz10aGlzLmZhY2VzW2FdLGMudmVydGV4Tm9ybWFsc1swXT1kW2MuYV0uY2xvbmUoKSxjLnZlcnRleE5vcm1hbHNbMV09ZFtjLmJdLmNsb25lKCksYy52ZXJ0ZXhOb3JtYWxzWzJdPWRbYy5jXS5jbG9uZSgpfSxjb21wdXRlTW9ycGhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKylmb3IoZT10aGlzLmZhY2VzW2NdLGUuX19vcmlnaW5hbEZhY2VOb3JtYWw/ZS5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KGUubm9ybWFsKTplLl9fb3JpZ2luYWxGYWNlTm9ybWFsPVxuZS5ub3JtYWwuY2xvbmUoKSxlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzfHwoZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscz1bXSksYT0wLGI9ZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDthPGI7YSsrKWUuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbYV0/ZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1thXS5jb3B5KGUudmVydGV4Tm9ybWFsc1thXSk6ZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1thXT1lLnZlcnRleE5vcm1hbHNbYV0uY2xvbmUoKTt2YXIgZj1uZXcgVEhSRUUuR2VvbWV0cnk7Zi5mYWNlcz10aGlzLmZhY2VzO2E9MDtmb3IoYj10aGlzLm1vcnBoVGFyZ2V0cy5sZW5ndGg7YTxiO2ErKyl7aWYoIXRoaXMubW9ycGhOb3JtYWxzW2FdKXt0aGlzLm1vcnBoTm9ybWFsc1thXT17fTt0aGlzLm1vcnBoTm9ybWFsc1thXS5mYWNlTm9ybWFscz1bXTt0aGlzLm1vcnBoTm9ybWFsc1thXS52ZXJ0ZXhOb3JtYWxzPVtdO2U9dGhpcy5tb3JwaE5vcm1hbHNbYV0uZmFjZU5vcm1hbHM7dmFyIGc9XG50aGlzLm1vcnBoTm9ybWFsc1thXS52ZXJ0ZXhOb3JtYWxzLGgsaztjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKyloPW5ldyBUSFJFRS5WZWN0b3IzLGs9e2E6bmV3IFRIUkVFLlZlY3RvcjMsYjpuZXcgVEhSRUUuVmVjdG9yMyxjOm5ldyBUSFJFRS5WZWN0b3IzfSxlLnB1c2goaCksZy5wdXNoKGspfWc9dGhpcy5tb3JwaE5vcm1hbHNbYV07Zi52ZXJ0aWNlcz10aGlzLm1vcnBoVGFyZ2V0c1thXS52ZXJ0aWNlcztmLmNvbXB1dGVGYWNlTm9ybWFscygpO2YuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtjPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YzxkO2MrKyllPXRoaXMuZmFjZXNbY10saD1nLmZhY2VOb3JtYWxzW2NdLGs9Zy52ZXJ0ZXhOb3JtYWxzW2NdLGguY29weShlLm5vcm1hbCksay5hLmNvcHkoZS52ZXJ0ZXhOb3JtYWxzWzBdKSxrLmIuY29weShlLnZlcnRleE5vcm1hbHNbMV0pLGsuYy5jb3B5KGUudmVydGV4Tm9ybWFsc1syXSl9Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8XG5kO2MrKyllPXRoaXMuZmFjZXNbY10sZS5ub3JtYWw9ZS5fX29yaWdpbmFsRmFjZU5vcm1hbCxlLnZlcnRleE5vcm1hbHM9ZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc30sY29tcHV0ZVRhbmdlbnRzOmZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZSxmLGcsaCxrLGwscCxuLG0scyx0LHIsdix1PVtdLHg9W107Yz1uZXcgVEhSRUUuVmVjdG9yMzt2YXIgej1uZXcgVEhSRUUuVmVjdG9yMyx3PW5ldyBUSFJFRS5WZWN0b3IzLEY9bmV3IFRIUkVFLlZlY3RvcjMsRz1uZXcgVEhSRUUuVmVjdG9yMzthPTA7Zm9yKGI9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7YTxiO2ErKyl1W2FdPW5ldyBUSFJFRS5WZWN0b3IzLHhbYV09bmV3IFRIUkVFLlZlY3RvcjM7YT0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspZT10aGlzLmZhY2VzW2FdLGY9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2FdLGQ9ZS5hLHY9ZS5iLGU9ZS5jLGc9dGhpcy52ZXJ0aWNlc1tkXSxoPXRoaXMudmVydGljZXNbdl0saz10aGlzLnZlcnRpY2VzW2VdLFxubD1mWzBdLHA9ZlsxXSxuPWZbMl0sZj1oLngtZy54LG09ay54LWcueCxzPWgueS1nLnksdD1rLnktZy55LGg9aC56LWcueixnPWsuei1nLnosaz1wLngtbC54LHI9bi54LWwueCxwPXAueS1sLnksbD1uLnktbC55LG49MS8oaypsLXIqcCksYy5zZXQoKGwqZi1wKm0pKm4sKGwqcy1wKnQpKm4sKGwqaC1wKmcpKm4pLHouc2V0KChrKm0tcipmKSpuLChrKnQtcipzKSpuLChrKmctcipoKSpuKSx1W2RdLmFkZChjKSx1W3ZdLmFkZChjKSx1W2VdLmFkZChjKSx4W2RdLmFkZCh6KSx4W3ZdLmFkZCh6KSx4W2VdLmFkZCh6KTt6PVtcImFcIixcImJcIixcImNcIixcImRcIl07YT0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2E8YjthKyspZm9yKGU9dGhpcy5mYWNlc1thXSxjPTA7YzxNYXRoLm1pbihlLnZlcnRleE5vcm1hbHMubGVuZ3RoLDMpO2MrKylHLmNvcHkoZS52ZXJ0ZXhOb3JtYWxzW2NdKSxkPWVbeltjXV0sdj11W2RdLHcuY29weSh2KSx3LnN1YihHLm11bHRpcGx5U2NhbGFyKEcuZG90KHYpKSkubm9ybWFsaXplKCksXG5GLmNyb3NzVmVjdG9ycyhlLnZlcnRleE5vcm1hbHNbY10sdiksZD1GLmRvdCh4W2RdKSxkPTA+ZD8tMToxLGUudmVydGV4VGFuZ2VudHNbY109bmV3IFRIUkVFLlZlY3RvcjQody54LHcueSx3LnosZCk7dGhpcy5oYXNUYW5nZW50cz0hMH0sY29tcHV0ZUxpbmVEaXN0YW5jZXM6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMudmVydGljZXMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKykwPGMmJihhKz1iW2NdLmRpc3RhbmNlVG8oYltjLTFdKSksdGhpcy5saW5lRGlzdGFuY2VzW2NdPWF9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1uZXcgVEhSRUUuQm94Myk7dGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tUG9pbnRzKHRoaXMudmVydGljZXMpfSxjb21wdXRlQm91bmRpbmdTcGhlcmU6ZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmKHRoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZSk7XG50aGlzLmJvdW5kaW5nU3BoZXJlLnNldEZyb21Qb2ludHModGhpcy52ZXJ0aWNlcyl9LG1lcmdlOmZ1bmN0aW9uKGEsYixjKXtpZighMT09PWEgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlUSFJFRS5lcnJvcihcIlRIUkVFLkdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5HZW9tZXRyeS5cIixhKTtlbHNle3ZhciBkLGU9dGhpcy52ZXJ0aWNlcy5sZW5ndGgsZj10aGlzLnZlcnRpY2VzLGc9YS52ZXJ0aWNlcyxoPXRoaXMuZmFjZXMsaz1hLmZhY2VzLGw9dGhpcy5mYWNlVmVydGV4VXZzWzBdO2E9YS5mYWNlVmVydGV4VXZzWzBdO3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMCE9PWImJihkPShuZXcgVEhSRUUuTWF0cml4MykuZ2V0Tm9ybWFsTWF0cml4KGIpKTtmb3IodmFyIHA9MCxuPWcubGVuZ3RoO3A8bjtwKyspe3ZhciBtPWdbcF0uY2xvbmUoKTt2b2lkIDAhPT1iJiZtLmFwcGx5TWF0cml4NChiKTtmLnB1c2gobSl9cD0wO2ZvcihuPWsubGVuZ3RoO3A8XG5uO3ArKyl7dmFyIGc9a1twXSxzLHQ9Zy52ZXJ0ZXhOb3JtYWxzLHI9Zy52ZXJ0ZXhDb2xvcnMsbT1uZXcgVEhSRUUuRmFjZTMoZy5hK2UsZy5iK2UsZy5jK2UpO20ubm9ybWFsLmNvcHkoZy5ub3JtYWwpO3ZvaWQgMCE9PWQmJm0ubm9ybWFsLmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKTtiPTA7Zm9yKGY9dC5sZW5ndGg7YjxmO2IrKylzPXRbYl0uY2xvbmUoKSx2b2lkIDAhPT1kJiZzLmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKSxtLnZlcnRleE5vcm1hbHMucHVzaChzKTttLmNvbG9yLmNvcHkoZy5jb2xvcik7Yj0wO2ZvcihmPXIubGVuZ3RoO2I8ZjtiKyspcz1yW2JdLG0udmVydGV4Q29sb3JzLnB1c2gocy5jbG9uZSgpKTttLm1hdGVyaWFsSW5kZXg9Zy5tYXRlcmlhbEluZGV4K2M7aC5wdXNoKG0pfXA9MDtmb3Iobj1hLmxlbmd0aDtwPG47cCsrKWlmKGM9YVtwXSxkPVtdLHZvaWQgMCE9PWMpe2I9MDtmb3IoZj1jLmxlbmd0aDtiPGY7YisrKWQucHVzaChjW2JdLmNsb25lKCkpO1xubC5wdXNoKGQpfX19LG1lcmdlTWVzaDpmdW5jdGlvbihhKXshMT09PWEgaW5zdGFuY2VvZiBUSFJFRS5NZXNoP1RIUkVFLmVycm9yKFwiVEhSRUUuR2VvbWV0cnkubWVyZ2VNZXNoKCk6IG1lc2ggbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk1lc2guXCIsYSk6KGEubWF0cml4QXV0b1VwZGF0ZSYmYS51cGRhdGVNYXRyaXgoKSx0aGlzLm1lcmdlKGEuZ2VvbWV0cnksYS5tYXRyaXgpKX0sbWVyZ2VWZXJ0aWNlczpmdW5jdGlvbigpe3ZhciBhPXt9LGI9W10sYz1bXSxkLGU9TWF0aC5wb3coMTAsNCksZixnO2Y9MDtmb3IoZz10aGlzLnZlcnRpY2VzLmxlbmd0aDtmPGc7ZisrKWQ9dGhpcy52ZXJ0aWNlc1tmXSxkPU1hdGgucm91bmQoZC54KmUpK1wiX1wiK01hdGgucm91bmQoZC55KmUpK1wiX1wiK01hdGgucm91bmQoZC56KmUpLHZvaWQgMD09PWFbZF0/KGFbZF09ZixiLnB1c2godGhpcy52ZXJ0aWNlc1tmXSksY1tmXT1iLmxlbmd0aC0xKTpjW2ZdPWNbYVtkXV07YT1bXTtmPTA7Zm9yKGc9dGhpcy5mYWNlcy5sZW5ndGg7Zjxcbmc7ZisrKWZvcihlPXRoaXMuZmFjZXNbZl0sZS5hPWNbZS5hXSxlLmI9Y1tlLmJdLGUuYz1jW2UuY10sZT1bZS5hLGUuYixlLmNdLGQ9MDszPmQ7ZCsrKWlmKGVbZF09PWVbKGQrMSklM10pe2EucHVzaChmKTticmVha31mb3IoZj1hLmxlbmd0aC0xOzA8PWY7Zi0tKWZvcihlPWFbZl0sdGhpcy5mYWNlcy5zcGxpY2UoZSwxKSxjPTAsZz10aGlzLmZhY2VWZXJ0ZXhVdnMubGVuZ3RoO2M8ZztjKyspdGhpcy5mYWNlVmVydGV4VXZzW2NdLnNwbGljZShlLDEpO2Y9dGhpcy52ZXJ0aWNlcy5sZW5ndGgtYi5sZW5ndGg7dGhpcy52ZXJ0aWNlcz1iO3JldHVybiBmfSx0b0pTT046ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYixjKXtyZXR1cm4gYz9hfDE8PGI6YSZ+KDE8PGIpfWZ1bmN0aW9uIGIoYSl7dmFyIGI9YS54LnRvU3RyaW5nKCkrYS55LnRvU3RyaW5nKCkrYS56LnRvU3RyaW5nKCk7aWYodm9pZCAwIT09bFtiXSlyZXR1cm4gbFtiXTtsW2JdPWsubGVuZ3RoLzM7ay5wdXNoKGEueCxhLnksXG5hLnopO3JldHVybiBsW2JdfWZ1bmN0aW9uIGMoYSl7dmFyIGI9YS5yLnRvU3RyaW5nKCkrYS5nLnRvU3RyaW5nKCkrYS5iLnRvU3RyaW5nKCk7aWYodm9pZCAwIT09bltiXSlyZXR1cm4gbltiXTtuW2JdPXAubGVuZ3RoO3AucHVzaChhLmdldEhleCgpKTtyZXR1cm4gbltiXX1mdW5jdGlvbiBkKGEpe3ZhciBiPWEueC50b1N0cmluZygpK2EueS50b1N0cmluZygpO2lmKHZvaWQgMCE9PXNbYl0pcmV0dXJuIHNbYl07c1tiXT1tLmxlbmd0aC8yO20ucHVzaChhLngsYS55KTtyZXR1cm4gc1tiXX12YXIgZT17bWV0YWRhdGE6e3ZlcnNpb246NC40LHR5cGU6XCJHZW9tZXRyeVwiLGdlbmVyYXRvcjpcIkdlb21ldHJ5LnRvSlNPTlwifX07ZS50eXBlPXRoaXMudHlwZTtlLnV1aWQ9dGhpcy51dWlkO1wiXCIhPT10aGlzLm5hbWUmJihlLm5hbWU9dGhpcy5uYW1lKTtpZih2b2lkIDAhPT10aGlzLnBhcmFtZXRlcnMpe3ZhciBmPXRoaXMucGFyYW1ldGVycyxnO2ZvcihnIGluIGYpdm9pZCAwIT09ZltnXSYmXG4oZVtnXT1mW2ddKTtyZXR1cm4gZX1mPVtdO2ZvcihnPTA7Zzx0aGlzLnZlcnRpY2VzLmxlbmd0aDtnKyspe3ZhciBoPXRoaXMudmVydGljZXNbZ107Zi5wdXNoKGgueCxoLnksaC56KX12YXIgaD1bXSxrPVtdLGw9e30scD1bXSxuPXt9LG09W10scz17fTtmb3IoZz0wO2c8dGhpcy5mYWNlcy5sZW5ndGg7ZysrKXt2YXIgdD10aGlzLmZhY2VzW2ddLHI9dm9pZCAwIT09dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLHY9MDx0Lm5vcm1hbC5sZW5ndGgoKSx1PTA8dC52ZXJ0ZXhOb3JtYWxzLmxlbmd0aCx4PTEhPT10LmNvbG9yLnJ8fDEhPT10LmNvbG9yLmd8fDEhPT10LmNvbG9yLmIsej0wPHQudmVydGV4Q29sb3JzLmxlbmd0aCx3PTAsdz1hKHcsMCwwKSx3PWEodywxLCExKSx3PWEodywyLCExKSx3PWEodywzLHIpLHc9YSh3LDQsdiksdz1hKHcsNSx1KSx3PWEodyw2LHgpLHc9YSh3LDcseik7aC5wdXNoKHcpO2gucHVzaCh0LmEsdC5iLHQuYyk7ciYmKHI9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLFxuaC5wdXNoKGQoclswXSksZChyWzFdKSxkKHJbMl0pKSk7diYmaC5wdXNoKGIodC5ub3JtYWwpKTt1JiYodj10LnZlcnRleE5vcm1hbHMsaC5wdXNoKGIodlswXSksYih2WzFdKSxiKHZbMl0pKSk7eCYmaC5wdXNoKGModC5jb2xvcikpO3omJih0PXQudmVydGV4Q29sb3JzLGgucHVzaChjKHRbMF0pLGModFsxXSksYyh0WzJdKSkpfWUuZGF0YT17fTtlLmRhdGEudmVydGljZXM9ZjtlLmRhdGEubm9ybWFscz1rOzA8cC5sZW5ndGgmJihlLmRhdGEuY29sb3JzPXApOzA8bS5sZW5ndGgmJihlLmRhdGEudXZzPVttXSk7ZS5kYXRhLmZhY2VzPWg7cmV0dXJuIGV9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPW5ldyBUSFJFRS5HZW9tZXRyeSxiPXRoaXMudmVydGljZXMsYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKylhLnZlcnRpY2VzLnB1c2goYltjXS5jbG9uZSgpKTtiPXRoaXMuZmFjZXM7Yz0wO2ZvcihkPWIubGVuZ3RoO2M8ZDtjKyspYS5mYWNlcy5wdXNoKGJbY10uY2xvbmUoKSk7Yz0wO1xuZm9yKGQ9dGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDtjPGQ7YysrKXtiPXRoaXMuZmFjZVZlcnRleFV2c1tjXTt2b2lkIDA9PT1hLmZhY2VWZXJ0ZXhVdnNbY10mJihhLmZhY2VWZXJ0ZXhVdnNbY109W10pO2Zvcih2YXIgZT0wLGY9Yi5sZW5ndGg7ZTxmO2UrKyl7Zm9yKHZhciBnPWJbZV0saD1bXSxrPTAsbD1nLmxlbmd0aDtrPGw7aysrKWgucHVzaChnW2tdLmNsb25lKCkpO2EuZmFjZVZlcnRleFV2c1tjXS5wdXNoKGgpfX1yZXR1cm4gYX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX07VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkdlb21ldHJ5SWRDb3VudD0wO1xuVEhSRUUuQnVmZmVyR2VvbWV0cnk9ZnVuY3Rpb24oKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOlRIUkVFLkdlb21ldHJ5SWRDb3VudCsrfSk7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5uYW1lPVwiXCI7dGhpcy50eXBlPVwiQnVmZmVyR2VvbWV0cnlcIjt0aGlzLmF0dHJpYnV0ZXM9e307dGhpcy5hdHRyaWJ1dGVzS2V5cz1bXTt0aGlzLm9mZnNldHM9dGhpcy5kcmF3Y2FsbHM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGx9O1xuVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CdWZmZXJHZW9tZXRyeSxhZGRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpeyExPT09YiBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSYmITE9PT1iIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU/KFRIUkVFLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEF0dHJpYnV0ZSgpIG5vdyBleHBlY3RzICggbmFtZSwgYXR0cmlidXRlICkuXCIpLHRoaXMuYXR0cmlidXRlc1thXT17YXJyYXk6YixpdGVtU2l6ZTpjfSk6KHRoaXMuYXR0cmlidXRlc1thXT1iLHRoaXMuYXR0cmlidXRlc0tleXM9T2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKSl9LGdldEF0dHJpYnV0ZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2FdfSxhZGREcmF3Q2FsbDpmdW5jdGlvbihhLGIsYyl7dGhpcy5kcmF3Y2FsbHMucHVzaCh7c3RhcnQ6YSxjb3VudDpiLFxuaW5kZXg6dm9pZCAwIT09Yz9jOjB9KX0sYXBwbHlNYXRyaXg6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO3ZvaWQgMCE9PWImJihhLmFwcGx5VG9WZWN0b3IzQXJyYXkoYi5hcnJheSksYi5uZWVkc1VwZGF0ZT0hMCk7Yj10aGlzLmF0dHJpYnV0ZXMubm9ybWFsO3ZvaWQgMCE9PWImJigobmV3IFRIUkVFLk1hdHJpeDMpLmdldE5vcm1hbE1hdHJpeChhKS5hcHBseVRvVmVjdG9yM0FycmF5KGIuYXJyYXkpLGIubmVlZHNVcGRhdGU9ITApO251bGwhPT10aGlzLmJvdW5kaW5nQm94JiZ0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO251bGwhPT10aGlzLmJvdW5kaW5nU3BoZXJlJiZ0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpfSxjZW50ZXI6ZnVuY3Rpb24oKXt0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO3ZhciBhPXRoaXMuYm91bmRpbmdCb3guY2VudGVyKCkubmVnYXRlKCk7dGhpcy5hcHBseU1hdHJpeCgobmV3IFRIUkVFLk1hdHJpeDQpLnNldFBvc2l0aW9uKGEpKTtcbnJldHVybiBhfSxmcm9tR2VvbWV0cnk6ZnVuY3Rpb24oYSxiKXtiPWJ8fHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuTm9Db2xvcnN9O3ZhciBjPWEudmVydGljZXMsZD1hLmZhY2VzLGU9YS5mYWNlVmVydGV4VXZzLGY9Yi52ZXJ0ZXhDb2xvcnMsZz0wPGVbMF0ubGVuZ3RoLGg9Mz09ZFswXS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aCxrPW5ldyBGbG9hdDMyQXJyYXkoOSpkLmxlbmd0aCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaywzKSk7dmFyIGw9bmV3IEZsb2F0MzJBcnJheSg5KmQubGVuZ3RoKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobCwzKSk7aWYoZiE9PVRIUkVFLk5vQ29sb3JzKXt2YXIgcD1uZXcgRmxvYXQzMkFycmF5KDkqZC5sZW5ndGgpO3RoaXMuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHAsMykpfWlmKCEwPT09Zyl7dmFyIG49bmV3IEZsb2F0MzJBcnJheSg2KlxuZC5sZW5ndGgpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG4sMikpfWZvcih2YXIgbT0wLHM9MCx0PTA7bTxkLmxlbmd0aDttKysscys9Nix0Kz05KXt2YXIgcj1kW21dLHY9Y1tyLmFdLHU9Y1tyLmJdLHg9Y1tyLmNdO2tbdF09di54O2tbdCsxXT12Lnk7a1t0KzJdPXYuejtrW3QrM109dS54O2tbdCs0XT11Lnk7a1t0KzVdPXUuejtrW3QrNl09eC54O2tbdCs3XT14Lnk7a1t0KzhdPXguejshMD09PWg/KHY9ci52ZXJ0ZXhOb3JtYWxzWzBdLHU9ci52ZXJ0ZXhOb3JtYWxzWzFdLHg9ci52ZXJ0ZXhOb3JtYWxzWzJdLGxbdF09di54LGxbdCsxXT12LnksbFt0KzJdPXYueixsW3QrM109dS54LGxbdCs0XT11LnksbFt0KzVdPXUueixsW3QrNl09eC54LGxbdCs3XT14LnksbFt0KzhdPXgueik6KHY9ci5ub3JtYWwsbFt0XT12LngsbFt0KzFdPXYueSxsW3QrMl09di56LGxbdCszXT12LngsbFt0KzRdPXYueSxsW3QrNV09di56LGxbdCs2XT12LngsXG5sW3QrN109di55LGxbdCs4XT12LnopO2Y9PT1USFJFRS5GYWNlQ29sb3JzPyhyPXIuY29sb3IscFt0XT1yLnIscFt0KzFdPXIuZyxwW3QrMl09ci5iLHBbdCszXT1yLnIscFt0KzRdPXIuZyxwW3QrNV09ci5iLHBbdCs2XT1yLnIscFt0KzddPXIuZyxwW3QrOF09ci5iKTpmPT09VEhSRUUuVmVydGV4Q29sb3JzJiYodj1yLnZlcnRleENvbG9yc1swXSx1PXIudmVydGV4Q29sb3JzWzFdLHI9ci52ZXJ0ZXhDb2xvcnNbMl0scFt0XT12LnIscFt0KzFdPXYuZyxwW3QrMl09di5iLHBbdCszXT11LnIscFt0KzRdPXUuZyxwW3QrNV09dS5iLHBbdCs2XT1yLnIscFt0KzddPXIuZyxwW3QrOF09ci5iKTshMD09PWcmJihyPWVbMF1bbV1bMF0sdj1lWzBdW21dWzFdLHU9ZVswXVttXVsyXSxuW3NdPXIueCxuW3MrMV09ci55LG5bcysyXT12LngsbltzKzNdPXYueSxuW3MrNF09dS54LG5bcys1XT11LnkpfXRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7cmV0dXJuIHRoaXN9LGNvbXB1dGVCb3VuZGluZ0JveDpmdW5jdGlvbigpe3ZhciBhPVxubmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKCl7bnVsbD09PXRoaXMuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PW5ldyBUSFJFRS5Cb3gzKTt2YXIgYj10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7aWYoYil7dmFyIGM9dGhpcy5ib3VuZGluZ0JveDtjLm1ha2VFbXB0eSgpO2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrPTMpYS5zZXQoYltkXSxiW2QrMV0sYltkKzJdKSxjLmV4cGFuZEJ5UG9pbnQoYSl9aWYodm9pZCAwPT09Ynx8MD09PWIubGVuZ3RoKXRoaXMuYm91bmRpbmdCb3gubWluLnNldCgwLDAsMCksdGhpcy5ib3VuZGluZ0JveC5tYXguc2V0KDAsMCwwKTsoaXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueCl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpfHxpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSkmJlRIUkVFLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3g6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicpfX0oKSxcbmNvbXB1dGVCb3VuZGluZ1NwaGVyZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5Cb3gzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKCl7bnVsbD09PXRoaXMuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUpO3ZhciBjPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtpZihjKXthLm1ha2VFbXB0eSgpO2Zvcih2YXIgZD10aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcixlPTAsZj1jLmxlbmd0aDtlPGY7ZSs9MyliLnNldChjW2VdLGNbZSsxXSxjW2UrMl0pLGEuZXhwYW5kQnlQb2ludChiKTthLmNlbnRlcihkKTtmb3IodmFyIGc9MCxlPTAsZj1jLmxlbmd0aDtlPGY7ZSs9MyliLnNldChjW2VdLGNbZSsxXSxjW2UrMl0pLGc9TWF0aC5tYXgoZyxkLmRpc3RhbmNlVG9TcXVhcmVkKGIpKTt0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cz1NYXRoLnNxcnQoZyk7aXNOYU4odGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMpJiZcblRIUkVFLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nKX19fSgpLGNvbXB1dGVGYWNlTm9ybWFsczpmdW5jdGlvbigpe30sY29tcHV0ZVZlcnRleE5vcm1hbHM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmF0dHJpYnV0ZXM7aWYoYS5wb3NpdGlvbil7dmFyIGI9YS5wb3NpdGlvbi5hcnJheTtpZih2b2lkIDA9PT1hLm5vcm1hbCl0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShiLmxlbmd0aCksMykpO2Vsc2UgZm9yKHZhciBjPWEubm9ybWFsLmFycmF5LGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspY1tkXT0wO3ZhciBjPWEubm9ybWFsLmFycmF5LGYsZyxoLGs9bmV3IFRIUkVFLlZlY3RvcjMsbD1uZXcgVEhSRUUuVmVjdG9yMyxcbnA9bmV3IFRIUkVFLlZlY3RvcjMsbj1uZXcgVEhSRUUuVmVjdG9yMyxtPW5ldyBUSFJFRS5WZWN0b3IzO2lmKGEuaW5kZXgpZm9yKHZhciBzPWEuaW5kZXguYXJyYXksdD0wPHRoaXMub2Zmc2V0cy5sZW5ndGg/dGhpcy5vZmZzZXRzOlt7c3RhcnQ6MCxjb3VudDpzLmxlbmd0aCxpbmRleDowfV0scj0wLHY9dC5sZW5ndGg7cjx2Oysrcil7ZT10W3JdLnN0YXJ0O2Y9dFtyXS5jb3VudDtmb3IodmFyIHU9dFtyXS5pbmRleCxkPWUsZT1lK2Y7ZDxlO2QrPTMpZj0zKih1K3NbZF0pLGc9MyoodStzW2QrMV0pLGg9MyoodStzW2QrMl0pLGsuZnJvbUFycmF5KGIsZiksbC5mcm9tQXJyYXkoYixnKSxwLmZyb21BcnJheShiLGgpLG4uc3ViVmVjdG9ycyhwLGwpLG0uc3ViVmVjdG9ycyhrLGwpLG4uY3Jvc3MobSksY1tmXSs9bi54LGNbZisxXSs9bi55LGNbZisyXSs9bi56LGNbZ10rPW4ueCxjW2crMV0rPW4ueSxjW2crMl0rPW4ueixjW2hdKz1uLngsY1toKzFdKz1uLnksY1toKzJdKz1uLnp9ZWxzZSBmb3IoZD1cbjAsZT1iLmxlbmd0aDtkPGU7ZCs9OSlrLmZyb21BcnJheShiLGQpLGwuZnJvbUFycmF5KGIsZCszKSxwLmZyb21BcnJheShiLGQrNiksbi5zdWJWZWN0b3JzKHAsbCksbS5zdWJWZWN0b3JzKGssbCksbi5jcm9zcyhtKSxjW2RdPW4ueCxjW2QrMV09bi55LGNbZCsyXT1uLnosY1tkKzNdPW4ueCxjW2QrNF09bi55LGNbZCs1XT1uLnosY1tkKzZdPW4ueCxjW2QrN109bi55LGNbZCs4XT1uLno7dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7YS5ub3JtYWwubmVlZHNVcGRhdGU9ITB9fSxjb21wdXRlVGFuZ2VudHM6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYixjKXtuLmZyb21BcnJheShkLDMqYSk7bS5mcm9tQXJyYXkoZCwzKmIpO3MuZnJvbUFycmF5KGQsMypjKTt0LmZyb21BcnJheShmLDIqYSk7ci5mcm9tQXJyYXkoZiwyKmIpO3YuZnJvbUFycmF5KGYsMipjKTt1PW0ueC1uLng7eD1zLngtbi54O3o9bS55LW4ueTt3PXMueS1uLnk7Rj1tLnotbi56O0c9cy56LW4uejt5PXIueC10Lng7ST1cbnYueC10Lng7Qj1yLnktdC55O0M9di55LXQueTtFPTEvKHkqQy1JKkIpO0wuc2V0KChDKnUtQip4KSpFLChDKnotQip3KSpFLChDKkYtQipHKSpFKTtOLnNldCgoeSp4LUkqdSkqRSwoeSp3LUkqeikqRSwoeSpHLUkqRikqRSk7a1thXS5hZGQoTCk7a1tiXS5hZGQoTCk7a1tjXS5hZGQoTCk7bFthXS5hZGQoTik7bFtiXS5hZGQoTik7bFtjXS5hZGQoTil9ZnVuY3Rpb24gYihhKXtpYS5mcm9tQXJyYXkoZSwzKmEpO1EuY29weShpYSk7YWE9a1thXTtELmNvcHkoYWEpO0Quc3ViKGlhLm11bHRpcGx5U2NhbGFyKGlhLmRvdChhYSkpKS5ub3JtYWxpemUoKTtYLmNyb3NzVmVjdG9ycyhRLGFhKTtjYT1YLmRvdChsW2FdKTtQPTA+Y2E/LTE6MTtoWzQqYV09RC54O2hbNCphKzFdPUQueTtoWzQqYSsyXT1ELno7aFs0KmErM109UH1pZih2b2lkIDA9PT10aGlzLmF0dHJpYnV0ZXMuaW5kZXh8fHZvaWQgMD09PXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbnx8dm9pZCAwPT09dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbHx8XG52b2lkIDA9PT10aGlzLmF0dHJpYnV0ZXMudXYpVEhSRUUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KSBpbiBCdWZmZXJHZW9tZXRyeS5jb21wdXRlVGFuZ2VudHMoKVwiKTtlbHNle3ZhciBjPXRoaXMuYXR0cmlidXRlcy5pbmRleC5hcnJheSxkPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSxlPXRoaXMuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXksZj10aGlzLmF0dHJpYnV0ZXMudXYuYXJyYXksZz1kLmxlbmd0aC8zO3ZvaWQgMD09PXRoaXMuYXR0cmlidXRlcy50YW5nZW50JiZ0aGlzLmFkZEF0dHJpYnV0ZShcInRhbmdlbnRcIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoNCpnKSw0KSk7Zm9yKHZhciBoPXRoaXMuYXR0cmlidXRlcy50YW5nZW50LmFycmF5LGs9W10sbD1bXSxwPTA7cDxnO3ArKylrW3BdPW5ldyBUSFJFRS5WZWN0b3IzLFxubFtwXT1uZXcgVEhSRUUuVmVjdG9yMzt2YXIgbj1uZXcgVEhSRUUuVmVjdG9yMyxtPW5ldyBUSFJFRS5WZWN0b3IzLHM9bmV3IFRIUkVFLlZlY3RvcjMsdD1uZXcgVEhSRUUuVmVjdG9yMixyPW5ldyBUSFJFRS5WZWN0b3IyLHY9bmV3IFRIUkVFLlZlY3RvcjIsdSx4LHosdyxGLEcseSxJLEIsQyxFLEw9bmV3IFRIUkVFLlZlY3RvcjMsTj1uZXcgVEhSRUUuVmVjdG9yMyxILE8sTSxBLEo7MD09PXRoaXMuZHJhd2NhbGxzLmxlbmd0aCYmdGhpcy5hZGREcmF3Q2FsbCgwLGMubGVuZ3RoLDApO3ZhciBSPXRoaXMuZHJhd2NhbGxzLHA9MDtmb3IoTz1SLmxlbmd0aDtwPE87KytwKXtIPVJbcF0uc3RhcnQ7TT1SW3BdLmNvdW50O3ZhciBLPVJbcF0uaW5kZXgsZz1IO2ZvcihIKz1NO2c8SDtnKz0zKU09SytjW2ddLEE9SytjW2crMV0sSj1LK2NbZysyXSxhKE0sQSxKKX12YXIgRD1uZXcgVEhSRUUuVmVjdG9yMyxYPW5ldyBUSFJFRS5WZWN0b3IzLGlhPW5ldyBUSFJFRS5WZWN0b3IzLFE9bmV3IFRIUkVFLlZlY3RvcjMsXG5QLGFhLGNhLHA9MDtmb3IoTz1SLmxlbmd0aDtwPE87KytwKWZvcihIPVJbcF0uc3RhcnQsTT1SW3BdLmNvdW50LEs9UltwXS5pbmRleCxnPUgsSCs9TTtnPEg7Zys9MylNPUsrY1tnXSxBPUsrY1tnKzFdLEo9SytjW2crMl0sYihNKSxiKEEpLGIoSil9fSxjb21wdXRlT2Zmc2V0czpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT02NTUzNSk7Zm9yKHZhciBiPXRoaXMuYXR0cmlidXRlcy5pbmRleC5hcnJheSxjPXRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheSxkPWIubGVuZ3RoLzMsZT1uZXcgVWludDE2QXJyYXkoYi5sZW5ndGgpLGY9MCxnPTAsaD1be3N0YXJ0OjAsY291bnQ6MCxpbmRleDowfV0saz1oWzBdLGw9MCxwPTAsbj1uZXcgSW50MzJBcnJheSg2KSxtPW5ldyBJbnQzMkFycmF5KGMubGVuZ3RoKSxzPW5ldyBJbnQzMkFycmF5KGMubGVuZ3RoKSx0PTA7dDxjLmxlbmd0aDt0KyspbVt0XT0tMSxzW3RdPS0xO2ZvcihjPTA7YzxkO2MrKyl7Zm9yKHZhciByPXA9MDszPnI7cisrKXQ9XG5iWzMqYytyXSwtMT09bVt0XT8oblsyKnJdPXQsblsyKnIrMV09LTEscCsrKTptW3RdPGsuaW5kZXg/KG5bMipyXT10LG5bMipyKzFdPS0xLGwrKyk6KG5bMipyXT10LG5bMipyKzFdPW1bdF0pO2lmKGcrcD5rLmluZGV4K2EpZm9yKGs9e3N0YXJ0OmYsY291bnQ6MCxpbmRleDpnfSxoLnB1c2goaykscD0wOzY+cDtwKz0yKXI9bltwKzFdLC0xPHImJnI8ay5pbmRleCYmKG5bcCsxXT0tMSk7Zm9yKHA9MDs2PnA7cCs9Mil0PW5bcF0scj1uW3ArMV0sLTE9PT1yJiYocj1nKyspLG1bdF09cixzW3JdPXQsZVtmKytdPXItay5pbmRleCxrLmNvdW50Kyt9dGhpcy5yZW9yZGVyQnVmZmVycyhlLHMsZyk7cmV0dXJuIHRoaXMuZHJhd2NhbGxzPXRoaXMub2Zmc2V0cz1ofSxtZXJnZTpmdW5jdGlvbihhLGIpe2lmKCExPT09YSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KVRIUkVFLmVycm9yKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5LlwiLFxuYSk7ZWxzZXt2b2lkIDA9PT1iJiYoYj0wKTt2YXIgYz10aGlzLmF0dHJpYnV0ZXMsZDtmb3IoZCBpbiBjKWlmKHZvaWQgMCE9PWEuYXR0cmlidXRlc1tkXSlmb3IodmFyIGU9Y1tkXS5hcnJheSxmPWEuYXR0cmlidXRlc1tkXSxnPWYuYXJyYXksaD0wLGY9Zi5pdGVtU2l6ZSpiO2g8Zy5sZW5ndGg7aCsrLGYrKyllW2ZdPWdbaF07cmV0dXJuIHRoaXN9fSxub3JtYWxpemVOb3JtYWxzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXksYixjLGQsZT0wLGY9YS5sZW5ndGg7ZTxmO2UrPTMpYj1hW2VdLGM9YVtlKzFdLGQ9YVtlKzJdLGI9MS9NYXRoLnNxcnQoYipiK2MqYytkKmQpLGFbZV0qPWIsYVtlKzFdKj1iLGFbZSsyXSo9Yn0scmVvcmRlckJ1ZmZlcnM6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXt9LGU7Zm9yKGUgaW4gdGhpcy5hdHRyaWJ1dGVzKVwiaW5kZXhcIiE9ZSYmKGRbZV09bmV3IHRoaXMuYXR0cmlidXRlc1tlXS5hcnJheS5jb25zdHJ1Y3Rvcih0aGlzLmF0dHJpYnV0ZXNbZV0uaXRlbVNpemUqXG5jKSk7Zm9yKHZhciBmPTA7ZjxjO2YrKyl7dmFyIGc9YltmXTtmb3IoZSBpbiB0aGlzLmF0dHJpYnV0ZXMpaWYoXCJpbmRleFwiIT1lKWZvcih2YXIgaD10aGlzLmF0dHJpYnV0ZXNbZV0uYXJyYXksaz10aGlzLmF0dHJpYnV0ZXNbZV0uaXRlbVNpemUsbD1kW2VdLHA9MDtwPGs7cCsrKWxbZiprK3BdPWhbZyprK3BdfXRoaXMuYXR0cmlidXRlcy5pbmRleC5hcnJheT1hO2ZvcihlIGluIHRoaXMuYXR0cmlidXRlcylcImluZGV4XCIhPWUmJih0aGlzLmF0dHJpYnV0ZXNbZV0uYXJyYXk9ZFtlXSx0aGlzLmF0dHJpYnV0ZXNbZV0ubnVtSXRlbXM9dGhpcy5hdHRyaWJ1dGVzW2VdLml0ZW1TaXplKmMpfSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT17bWV0YWRhdGE6e3ZlcnNpb246NC40LHR5cGU6XCJCdWZmZXJHZW9tZXRyeVwiLGdlbmVyYXRvcjpcIkJ1ZmZlckdlb21ldHJ5LnRvSlNPTlwifX07YS50eXBlPXRoaXMudHlwZTthLnV1aWQ9dGhpcy51dWlkO1wiXCIhPT10aGlzLm5hbWUmJihhLm5hbWU9dGhpcy5uYW1lKTtcbmEuZGF0YT17fTthLmRhdGEuYXR0cmlidXRlcz17fTt2YXIgYj10aGlzLmF0dHJpYnV0ZXMsYz10aGlzLm9mZnNldHMsZD10aGlzLmJvdW5kaW5nU3BoZXJlLGU7Zm9yKGUgaW4gYil7dmFyIGY9YltlXSxnPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGYuYXJyYXkpO2EuZGF0YS5hdHRyaWJ1dGVzW2VdPXtpdGVtU2l6ZTpmLml0ZW1TaXplLHR5cGU6Zi5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLGFycmF5Omd9fTA8Yy5sZW5ndGgmJihhLmRhdGEub2Zmc2V0cz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKSk7bnVsbCE9PWQmJihhLmRhdGEuYm91bmRpbmdTcGhlcmU9e2NlbnRlcjpkLmNlbnRlci50b0FycmF5KCkscmFkaXVzOmQucmFkaXVzfSk7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5LGI7Zm9yKGIgaW4gdGhpcy5hdHRyaWJ1dGVzKWEuYWRkQXR0cmlidXRlKGIsdGhpcy5hdHRyaWJ1dGVzW2JdLmNsb25lKCkpO1xuYj0wO2Zvcih2YXIgYz10aGlzLm9mZnNldHMubGVuZ3RoO2I8YztiKyspe3ZhciBkPXRoaXMub2Zmc2V0c1tiXTthLm9mZnNldHMucHVzaCh7c3RhcnQ6ZC5zdGFydCxpbmRleDpkLmluZGV4LGNvdW50OmQuY291bnR9KX1yZXR1cm4gYX0sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX07VEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZS5hcHBseShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5PWZ1bmN0aW9uKCl7VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeVwiO3RoaXMubWF4SW5zdGFuY2VkQ291bnQ9dm9pZCAwfTtUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xuVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5O1RIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5hZGREcmF3Q2FsbD1mdW5jdGlvbihhLGIsYyxkKXt0aGlzLmRyYXdjYWxscy5wdXNoKHtzdGFydDphLGNvdW50OmIsaW5kZXg6dm9pZCAwIT09Yz9jOjAsaW5zdGFuY2VzOmR9KX07XG5USFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksYjtmb3IoYiBpbiB0aGlzLmF0dHJpYnV0ZXMpYS5hZGRBdHRyaWJ1dGUoYix0aGlzLmF0dHJpYnV0ZXNbYl0uY2xvbmUoKSk7Yj0wO2Zvcih2YXIgYz10aGlzLm9mZnNldHMubGVuZ3RoO2I8YztiKyspe3ZhciBkPXRoaXMub2Zmc2V0c1tiXTthLm9mZnNldHMucHVzaCh7c3RhcnQ6ZC5zdGFydCxpbmRleDpkLmluZGV4LGNvdW50OmQuY291bnQsaW5zdGFuY2VzOmQuaW5zdGFuY2VzfSl9cmV0dXJuIGF9O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcblRIUkVFLkNhbWVyYT1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ2FtZXJhXCI7dGhpcy5tYXRyaXhXb3JsZEludmVyc2U9bmV3IFRIUkVFLk1hdHJpeDQ7dGhpcy5wcm9qZWN0aW9uTWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0fTtUSFJFRS5DYW1lcmEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5DYW1lcmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNhbWVyYTtUSFJFRS5DYW1lcmEucHJvdG90eXBlLmdldFdvcmxkRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlF1YXRlcm5pb247cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IFRIUkVFLlZlY3RvcjM7dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oYSk7cmV0dXJuIGIuc2V0KDAsMCwtMSkuYXBwbHlRdWF0ZXJuaW9uKGEpfX0oKTtcblRIUkVFLkNhbWVyYS5wcm90b3R5cGUubG9va0F0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKGIpe2EubG9va0F0KHRoaXMucG9zaXRpb24sYix0aGlzLnVwKTt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEpfX0oKTtUSFJFRS5DYW1lcmEucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5DYW1lcmEpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5tYXRyaXhXb3JsZEludmVyc2UuY29weSh0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZSk7YS5wcm9qZWN0aW9uTWF0cml4LmNvcHkodGhpcy5wcm9qZWN0aW9uTWF0cml4KTtyZXR1cm4gYX07XG5USFJFRS5DdWJlQ2FtZXJhPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN1YmVDYW1lcmFcIjt2YXIgZD1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2QudXAuc2V0KDAsLTEsMCk7ZC5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMSwwLDApKTt0aGlzLmFkZChkKTt2YXIgZT1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2UudXAuc2V0KDAsLTEsMCk7ZS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoLTEsMCwwKSk7dGhpcy5hZGQoZSk7dmFyIGY9bmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDkwLDEsYSxiKTtmLnVwLnNldCgwLDAsMSk7Zi5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApKTt0aGlzLmFkZChmKTt2YXIgZz1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2cudXAuc2V0KDAsMCwtMSk7Zy5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKSk7XG50aGlzLmFkZChnKTt2YXIgaD1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2gudXAuc2V0KDAsLTEsMCk7aC5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpKTt0aGlzLmFkZChoKTt2YXIgaz1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoOTAsMSxhLGIpO2sudXAuc2V0KDAsLTEsMCk7ay5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwwLC0xKSk7dGhpcy5hZGQoayk7dGhpcy5yZW5kZXJUYXJnZXQ9bmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZShjLGMse2Zvcm1hdDpUSFJFRS5SR0JGb3JtYXQsbWFnRmlsdGVyOlRIUkVFLkxpbmVhckZpbHRlcixtaW5GaWx0ZXI6VEhSRUUuTGluZWFyRmlsdGVyfSk7dGhpcy51cGRhdGVDdWJlTWFwPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5yZW5kZXJUYXJnZXQsbT1jLmdlbmVyYXRlTWlwbWFwcztjLmdlbmVyYXRlTWlwbWFwcz0hMTtjLmFjdGl2ZUN1YmVGYWNlPTA7YS5yZW5kZXIoYixkLGMpO2MuYWN0aXZlQ3ViZUZhY2U9XG4xO2EucmVuZGVyKGIsZSxjKTtjLmFjdGl2ZUN1YmVGYWNlPTI7YS5yZW5kZXIoYixmLGMpO2MuYWN0aXZlQ3ViZUZhY2U9MzthLnJlbmRlcihiLGcsYyk7Yy5hY3RpdmVDdWJlRmFjZT00O2EucmVuZGVyKGIsaCxjKTtjLmdlbmVyYXRlTWlwbWFwcz1tO2MuYWN0aXZlQ3ViZUZhY2U9NTthLnJlbmRlcihiLGssYyk7YS5zZXRSZW5kZXJUYXJnZXQobnVsbCl9fTtUSFJFRS5DdWJlQ2FtZXJhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ3ViZUNhbWVyYTtcblRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYT1mdW5jdGlvbihhLGIsYyxkLGUsZil7VEhSRUUuQ2FtZXJhLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiT3J0aG9ncmFwaGljQ2FtZXJhXCI7dGhpcy56b29tPTE7dGhpcy5sZWZ0PWE7dGhpcy5yaWdodD1iO3RoaXMudG9wPWM7dGhpcy5ib3R0b209ZDt0aGlzLm5lYXI9dm9pZCAwIT09ZT9lOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWY/ZjoyRTM7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1RIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DYW1lcmEucHJvdG90eXBlKTtUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYTtcblRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUudXBkYXRlUHJvamVjdGlvbk1hdHJpeD1mdW5jdGlvbigpe3ZhciBhPSh0aGlzLnJpZ2h0LXRoaXMubGVmdCkvKDIqdGhpcy56b29tKSxiPSh0aGlzLnRvcC10aGlzLmJvdHRvbSkvKDIqdGhpcy56b29tKSxjPSh0aGlzLnJpZ2h0K3RoaXMubGVmdCkvMixkPSh0aGlzLnRvcCt0aGlzLmJvdHRvbSkvMjt0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyhjLWEsYythLGQrYixkLWIsdGhpcy5uZWFyLHRoaXMuZmFyKX07XG5USFJFRS5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYTtUSFJFRS5DYW1lcmEucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLnpvb209dGhpcy56b29tO2EubGVmdD10aGlzLmxlZnQ7YS5yaWdodD10aGlzLnJpZ2h0O2EudG9wPXRoaXMudG9wO2EuYm90dG9tPXRoaXMuYm90dG9tO2EubmVhcj10aGlzLm5lYXI7YS5mYXI9dGhpcy5mYXI7YS5wcm9qZWN0aW9uTWF0cml4LmNvcHkodGhpcy5wcm9qZWN0aW9uTWF0cml4KTtyZXR1cm4gYX07XG5USFJFRS5PcnRob2dyYXBoaWNDYW1lcmEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbihhKXthPVRIUkVFLk9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LmxlZnQ9dGhpcy5sZWZ0O2Eub2JqZWN0LnJpZ2h0PXRoaXMucmlnaHQ7YS5vYmplY3QudG9wPXRoaXMudG9wO2Eub2JqZWN0LmJvdHRvbT10aGlzLmJvdHRvbTthLm9iamVjdC5uZWFyPXRoaXMubmVhcjthLm9iamVjdC5mYXI9dGhpcy5mYXI7cmV0dXJuIGF9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhPWZ1bmN0aW9uKGEsYixjLGQpe1RIUkVFLkNhbWVyYS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBlcnNwZWN0aXZlQ2FtZXJhXCI7dGhpcy56b29tPTE7dGhpcy5mb3Y9dm9pZCAwIT09YT9hOjUwO3RoaXMuYXNwZWN0PXZvaWQgMCE9PWI/YjoxO3RoaXMubmVhcj12b2lkIDAhPT1jP2M6LjE7dGhpcy5mYXI9dm9pZCAwIT09ZD9kOjJFMzt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX07XG5USFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DYW1lcmEucHJvdG90eXBlKTtUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUGVyc3BlY3RpdmVDYW1lcmE7VEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnNldExlbnM9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yNCk7dGhpcy5mb3Y9MipUSFJFRS5NYXRoLnJhZFRvRGVnKE1hdGguYXRhbihiLygyKmEpKSk7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5zZXRWaWV3T2Zmc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmZ1bGxXaWR0aD1hO3RoaXMuZnVsbEhlaWdodD1iO3RoaXMueD1jO3RoaXMueT1kO3RoaXMud2lkdGg9ZTt0aGlzLmhlaWdodD1mO3RoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfTtcblRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVQcm9qZWN0aW9uTWF0cml4PWZ1bmN0aW9uKCl7dmFyIGE9VEhSRUUuTWF0aC5yYWRUb0RlZygyKk1hdGguYXRhbihNYXRoLnRhbiguNSpUSFJFRS5NYXRoLmRlZ1RvUmFkKHRoaXMuZm92KSkvdGhpcy56b29tKSk7aWYodGhpcy5mdWxsV2lkdGgpe3ZhciBiPXRoaXMuZnVsbFdpZHRoL3RoaXMuZnVsbEhlaWdodCxhPU1hdGgudGFuKFRIUkVFLk1hdGguZGVnVG9SYWQoLjUqYSkpKnRoaXMubmVhcixjPS1hLGQ9YipjLGI9TWF0aC5hYnMoYiphLWQpLGM9TWF0aC5hYnMoYS1jKTt0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZUZydXN0dW0oZCt0aGlzLngqYi90aGlzLmZ1bGxXaWR0aCxkKyh0aGlzLngrdGhpcy53aWR0aCkqYi90aGlzLmZ1bGxXaWR0aCxhLSh0aGlzLnkrdGhpcy5oZWlnaHQpKmMvdGhpcy5mdWxsSGVpZ2h0LGEtdGhpcy55KmMvdGhpcy5mdWxsSGVpZ2h0LHRoaXMubmVhcix0aGlzLmZhcil9ZWxzZSB0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKGEsXG50aGlzLmFzcGVjdCx0aGlzLm5lYXIsdGhpcy5mYXIpfTtUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmE7VEhSRUUuQ2FtZXJhLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS56b29tPXRoaXMuem9vbTthLmZvdj10aGlzLmZvdjthLmFzcGVjdD10aGlzLmFzcGVjdDthLm5lYXI9dGhpcy5uZWFyO2EuZmFyPXRoaXMuZmFyO2EucHJvamVjdGlvbk1hdHJpeC5jb3B5KHRoaXMucHJvamVjdGlvbk1hdHJpeCk7cmV0dXJuIGF9O1RIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5mb3Y9dGhpcy5mb3Y7YS5vYmplY3QuYXNwZWN0PXRoaXMuYXNwZWN0O2Eub2JqZWN0Lm5lYXI9dGhpcy5uZWFyO2Eub2JqZWN0LmZhcj10aGlzLmZhcjtyZXR1cm4gYX07XG5USFJFRS5MaWdodD1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpZ2h0XCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoYSl9O1RIUkVFLkxpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuTGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTGlnaHQpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO3JldHVybiBhfTtUSFJFRS5BbWJpZW50TGlnaHQ9ZnVuY3Rpb24oYSl7VEhSRUUuTGlnaHQuY2FsbCh0aGlzLGEpO3RoaXMudHlwZT1cIkFtYmllbnRMaWdodFwifTtUSFJFRS5BbWJpZW50TGlnaHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGlnaHQucHJvdG90eXBlKTtcblRIUkVFLkFtYmllbnRMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQW1iaWVudExpZ2h0O1RIUkVFLkFtYmllbnRMaWdodC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuQW1iaWVudExpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7cmV0dXJuIGF9O1RIUkVFLkFtYmllbnRMaWdodC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKGEpe2E9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7YS5vYmplY3QuY29sb3I9dGhpcy5jb2xvci5nZXRIZXgoKTtyZXR1cm4gYX07XG5USFJFRS5BcmVhTGlnaHQ9ZnVuY3Rpb24oYSxiKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiQXJlYUxpZ2h0XCI7dGhpcy5ub3JtYWw9bmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKTt0aGlzLnJpZ2h0PW5ldyBUSFJFRS5WZWN0b3IzKDEsMCwwKTt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLmhlaWdodD10aGlzLndpZHRoPTE7dGhpcy5jb25zdGFudEF0dGVudWF0aW9uPTEuNTt0aGlzLmxpbmVhckF0dGVudWF0aW9uPS41O3RoaXMucXVhZHJhdGljQXR0ZW51YXRpb249LjF9O1RIUkVFLkFyZWFMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLkFyZWFMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQXJlYUxpZ2h0O1xuVEhSRUUuRGlyZWN0aW9uYWxMaWdodD1mdW5jdGlvbihhLGIpe1RIUkVFLkxpZ2h0LmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJEaXJlY3Rpb25hbExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5zZXQoMCwxLDApO3RoaXMudGFyZ2V0PW5ldyBUSFJFRS5PYmplY3QzRDt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLm9ubHlTaGFkb3c9dGhpcy5jYXN0U2hhZG93PSExO3RoaXMuc2hhZG93Q2FtZXJhTmVhcj01MDt0aGlzLnNoYWRvd0NhbWVyYUZhcj01RTM7dGhpcy5zaGFkb3dDYW1lcmFMZWZ0PS01MDA7dGhpcy5zaGFkb3dDYW1lcmFUb3A9dGhpcy5zaGFkb3dDYW1lcmFSaWdodD01MDA7dGhpcy5zaGFkb3dDYW1lcmFCb3R0b209LTUwMDt0aGlzLnNoYWRvd0NhbWVyYVZpc2libGU9ITE7dGhpcy5zaGFkb3dCaWFzPTA7dGhpcy5zaGFkb3dEYXJrbmVzcz0uNTt0aGlzLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcFdpZHRoPTUxMjt0aGlzLnNoYWRvd0Nhc2NhZGU9ITE7XG50aGlzLnNoYWRvd0Nhc2NhZGVPZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjMoMCwwLC0xRTMpO3RoaXMuc2hhZG93Q2FzY2FkZUNvdW50PTI7dGhpcy5zaGFkb3dDYXNjYWRlQmlhcz1bMCwwLDBdO3RoaXMuc2hhZG93Q2FzY2FkZVdpZHRoPVs1MTIsNTEyLDUxMl07dGhpcy5zaGFkb3dDYXNjYWRlSGVpZ2h0PVs1MTIsNTEyLDUxMl07dGhpcy5zaGFkb3dDYXNjYWRlTmVhclo9Wy0xLC45OSwuOTk4XTt0aGlzLnNoYWRvd0Nhc2NhZGVGYXJaPVsuOTksLjk5OCwxXTt0aGlzLnNoYWRvd0Nhc2NhZGVBcnJheT1bXTt0aGlzLnNoYWRvd01hdHJpeD10aGlzLnNoYWRvd0NhbWVyYT10aGlzLnNoYWRvd01hcFNpemU9dGhpcy5zaGFkb3dNYXA9bnVsbH07VEhSRUUuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaWdodC5wcm90b3R5cGUpO1RIUkVFLkRpcmVjdGlvbmFsTGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkRpcmVjdGlvbmFsTGlnaHQ7XG5USFJFRS5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS50YXJnZXQ9dGhpcy50YXJnZXQuY2xvbmUoKTthLmludGVuc2l0eT10aGlzLmludGVuc2l0eTthLmNhc3RTaGFkb3c9dGhpcy5jYXN0U2hhZG93O2Eub25seVNoYWRvdz10aGlzLm9ubHlTaGFkb3c7YS5zaGFkb3dDYW1lcmFOZWFyPXRoaXMuc2hhZG93Q2FtZXJhTmVhcjthLnNoYWRvd0NhbWVyYUZhcj10aGlzLnNoYWRvd0NhbWVyYUZhcjthLnNoYWRvd0NhbWVyYUxlZnQ9dGhpcy5zaGFkb3dDYW1lcmFMZWZ0O2Euc2hhZG93Q2FtZXJhUmlnaHQ9dGhpcy5zaGFkb3dDYW1lcmFSaWdodDthLnNoYWRvd0NhbWVyYVRvcD10aGlzLnNoYWRvd0NhbWVyYVRvcDthLnNoYWRvd0NhbWVyYUJvdHRvbT10aGlzLnNoYWRvd0NhbWVyYUJvdHRvbTthLnNoYWRvd0NhbWVyYVZpc2libGU9XG50aGlzLnNoYWRvd0NhbWVyYVZpc2libGU7YS5zaGFkb3dCaWFzPXRoaXMuc2hhZG93QmlhczthLnNoYWRvd0RhcmtuZXNzPXRoaXMuc2hhZG93RGFya25lc3M7YS5zaGFkb3dNYXBXaWR0aD10aGlzLnNoYWRvd01hcFdpZHRoO2Euc2hhZG93TWFwSGVpZ2h0PXRoaXMuc2hhZG93TWFwSGVpZ2h0O2Euc2hhZG93Q2FzY2FkZT10aGlzLnNoYWRvd0Nhc2NhZGU7YS5zaGFkb3dDYXNjYWRlT2Zmc2V0LmNvcHkodGhpcy5zaGFkb3dDYXNjYWRlT2Zmc2V0KTthLnNoYWRvd0Nhc2NhZGVDb3VudD10aGlzLnNoYWRvd0Nhc2NhZGVDb3VudDthLnNoYWRvd0Nhc2NhZGVCaWFzPXRoaXMuc2hhZG93Q2FzY2FkZUJpYXMuc2xpY2UoMCk7YS5zaGFkb3dDYXNjYWRlV2lkdGg9dGhpcy5zaGFkb3dDYXNjYWRlV2lkdGguc2xpY2UoMCk7YS5zaGFkb3dDYXNjYWRlSGVpZ2h0PXRoaXMuc2hhZG93Q2FzY2FkZUhlaWdodC5zbGljZSgwKTthLnNoYWRvd0Nhc2NhZGVOZWFyWj10aGlzLnNoYWRvd0Nhc2NhZGVOZWFyWi5zbGljZSgwKTtcbmEuc2hhZG93Q2FzY2FkZUZhclo9dGhpcy5zaGFkb3dDYXNjYWRlRmFyWi5zbGljZSgwKTtyZXR1cm4gYX07VEhSRUUuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKGEpe2E9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7YS5vYmplY3QuY29sb3I9dGhpcy5jb2xvci5nZXRIZXgoKTthLm9iamVjdC5pbnRlbnNpdHk9dGhpcy5pbnRlbnNpdHk7cmV0dXJuIGF9O1RIUkVFLkhlbWlzcGhlcmVMaWdodD1mdW5jdGlvbihhLGIsYyl7VEhSRUUuTGlnaHQuY2FsbCh0aGlzLGEpO3RoaXMudHlwZT1cIkhlbWlzcGhlcmVMaWdodFwiO3RoaXMucG9zaXRpb24uc2V0KDAsMTAwLDApO3RoaXMuZ3JvdW5kQ29sb3I9bmV3IFRIUkVFLkNvbG9yKGIpO3RoaXMuaW50ZW5zaXR5PXZvaWQgMCE9PWM/YzoxfTtUSFJFRS5IZW1pc3BoZXJlTGlnaHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGlnaHQucHJvdG90eXBlKTtcblRIUkVFLkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSGVtaXNwaGVyZUxpZ2h0O1RIUkVFLkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5ncm91bmRDb2xvci5jb3B5KHRoaXMuZ3JvdW5kQ29sb3IpO2EuaW50ZW5zaXR5PXRoaXMuaW50ZW5zaXR5O3JldHVybiBhfTtUSFJFRS5IZW1pc3BoZXJlTGlnaHQucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbihhKXthPVRIUkVFLk9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO2Eub2JqZWN0LmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7YS5vYmplY3QuZ3JvdW5kQ29sb3I9dGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTtyZXR1cm4gYX07XG5USFJFRS5Qb2ludExpZ2h0PWZ1bmN0aW9uKGEsYixjLGQpe1RIUkVFLkxpZ2h0LmNhbGwodGhpcyxhKTt0aGlzLnR5cGU9XCJQb2ludExpZ2h0XCI7dGhpcy5pbnRlbnNpdHk9dm9pZCAwIT09Yj9iOjE7dGhpcy5kaXN0YW5jZT12b2lkIDAhPT1jP2M6MDt0aGlzLmRlY2F5PXZvaWQgMCE9PWQ/ZDoxfTtUSFJFRS5Qb2ludExpZ2h0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpZ2h0LnByb3RvdHlwZSk7VEhSRUUuUG9pbnRMaWdodC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUG9pbnRMaWdodDtUSFJFRS5Qb2ludExpZ2h0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5Qb2ludExpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5pbnRlbnNpdHk9dGhpcy5pbnRlbnNpdHk7YS5kaXN0YW5jZT10aGlzLmRpc3RhbmNlO2EuZGVjYXk9dGhpcy5kZWNheTtyZXR1cm4gYX07XG5USFJFRS5Qb2ludExpZ2h0LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpO2Eub2JqZWN0LmludGVuc2l0eT10aGlzLmludGVuc2l0eTthLm9iamVjdC5kaXN0YW5jZT10aGlzLmRpc3RhbmNlO2Eub2JqZWN0LmRlY2F5PXRoaXMuZGVjYXk7cmV0dXJuIGF9O1xuVEhSRUUuU3BvdExpZ2h0PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtUSFJFRS5MaWdodC5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiU3BvdExpZ2h0XCI7dGhpcy5wb3NpdGlvbi5zZXQoMCwxLDApO3RoaXMudGFyZ2V0PW5ldyBUSFJFRS5PYmplY3QzRDt0aGlzLmludGVuc2l0eT12b2lkIDAhPT1iP2I6MTt0aGlzLmRpc3RhbmNlPXZvaWQgMCE9PWM/YzowO3RoaXMuYW5nbGU9dm9pZCAwIT09ZD9kOk1hdGguUEkvMzt0aGlzLmV4cG9uZW50PXZvaWQgMCE9PWU/ZToxMDt0aGlzLmRlY2F5PXZvaWQgMCE9PWY/ZjoxO3RoaXMub25seVNoYWRvdz10aGlzLmNhc3RTaGFkb3c9ITE7dGhpcy5zaGFkb3dDYW1lcmFOZWFyPTUwO3RoaXMuc2hhZG93Q2FtZXJhRmFyPTVFMzt0aGlzLnNoYWRvd0NhbWVyYUZvdj01MDt0aGlzLnNoYWRvd0NhbWVyYVZpc2libGU9ITE7dGhpcy5zaGFkb3dCaWFzPTA7dGhpcy5zaGFkb3dEYXJrbmVzcz0uNTt0aGlzLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcFdpZHRoPVxuNTEyO3RoaXMuc2hhZG93TWF0cml4PXRoaXMuc2hhZG93Q2FtZXJhPXRoaXMuc2hhZG93TWFwU2l6ZT10aGlzLnNoYWRvd01hcD1udWxsfTtUSFJFRS5TcG90TGlnaHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGlnaHQucHJvdG90eXBlKTtUSFJFRS5TcG90TGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwb3RMaWdodDtcblRIUkVFLlNwb3RMaWdodC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuU3BvdExpZ2h0O1RIUkVFLkxpZ2h0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS50YXJnZXQ9dGhpcy50YXJnZXQuY2xvbmUoKTthLmludGVuc2l0eT10aGlzLmludGVuc2l0eTthLmRpc3RhbmNlPXRoaXMuZGlzdGFuY2U7YS5hbmdsZT10aGlzLmFuZ2xlO2EuZXhwb25lbnQ9dGhpcy5leHBvbmVudDthLmRlY2F5PXRoaXMuZGVjYXk7YS5jYXN0U2hhZG93PXRoaXMuY2FzdFNoYWRvdzthLm9ubHlTaGFkb3c9dGhpcy5vbmx5U2hhZG93O2Euc2hhZG93Q2FtZXJhTmVhcj10aGlzLnNoYWRvd0NhbWVyYU5lYXI7YS5zaGFkb3dDYW1lcmFGYXI9dGhpcy5zaGFkb3dDYW1lcmFGYXI7YS5zaGFkb3dDYW1lcmFGb3Y9dGhpcy5zaGFkb3dDYW1lcmFGb3Y7YS5zaGFkb3dDYW1lcmFWaXNpYmxlPXRoaXMuc2hhZG93Q2FtZXJhVmlzaWJsZTthLnNoYWRvd0JpYXM9dGhpcy5zaGFkb3dCaWFzO1xuYS5zaGFkb3dEYXJrbmVzcz10aGlzLnNoYWRvd0RhcmtuZXNzO2Euc2hhZG93TWFwV2lkdGg9dGhpcy5zaGFkb3dNYXBXaWR0aDthLnNoYWRvd01hcEhlaWdodD10aGlzLnNoYWRvd01hcEhlaWdodDtyZXR1cm4gYX07VEhSRUUuU3BvdExpZ2h0LnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7YT1USFJFRS5PYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpO2Eub2JqZWN0LmludGVuc2l0eT10aGlzLmludGVuc2l0eTthLm9iamVjdC5kaXN0YW5jZT10aGlzLmRpc3RhbmNlO2Eub2JqZWN0LmFuZ2xlPXRoaXMuYW5nbGU7YS5vYmplY3QuZXhwb25lbnQ9dGhpcy5leHBvbmVudDthLm9iamVjdC5kZWNheT10aGlzLmRlY2F5O3JldHVybiBhfTtcblRIUkVFLkNhY2hlPXtmaWxlczp7fSxhZGQ6ZnVuY3Rpb24oYSxiKXt0aGlzLmZpbGVzW2FdPWJ9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5maWxlc1thXX0scmVtb3ZlOmZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLmZpbGVzW2FdfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuZmlsZXM9e319fTtUSFJFRS5Mb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5zdGF0dXNEb21FbGVtZW50PSh0aGlzLnNob3dTdGF0dXM9YSk/VEhSRUUuTG9hZGVyLnByb3RvdHlwZS5hZGRTdGF0dXNFbGVtZW50KCk6bnVsbDt0aGlzLmltYWdlTG9hZGVyPW5ldyBUSFJFRS5JbWFnZUxvYWRlcjt0aGlzLm9uTG9hZFN0YXJ0PWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZFByb2dyZXNzPWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZENvbXBsZXRlPWZ1bmN0aW9uKCl7fX07XG5USFJFRS5Mb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Mb2FkZXIsY3Jvc3NPcmlnaW46dm9pZCAwLGFkZFN0YXR1c0VsZW1lbnQ6ZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Euc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiO2Euc3R5bGUucmlnaHQ9XCIwcHhcIjthLnN0eWxlLnRvcD1cIjBweFwiO2Euc3R5bGUuZm9udFNpemU9XCIwLjhlbVwiO2Euc3R5bGUudGV4dEFsaWduPVwibGVmdFwiO2Euc3R5bGUuYmFja2dyb3VuZD1cInJnYmEoMCwwLDAsMC4yNSlcIjthLnN0eWxlLmNvbG9yPVwiI2ZmZlwiO2Euc3R5bGUud2lkdGg9XCIxMjBweFwiO2Euc3R5bGUucGFkZGluZz1cIjAuNWVtIDAuNWVtIDAuNWVtIDAuNWVtXCI7YS5zdHlsZS56SW5kZXg9MUUzO2EuaW5uZXJIVE1MPVwiTG9hZGluZyAuLi5cIjtyZXR1cm4gYX0sdXBkYXRlUHJvZ3Jlc3M6ZnVuY3Rpb24oYSl7dmFyIGI9XCJMb2FkZWQgXCIsYj1hLnRvdGFsP2IrKCgxMDAqYS5sb2FkZWQvYS50b3RhbCkudG9GaXhlZCgwKStcblwiJVwiKTpiKygoYS5sb2FkZWQvMTAyNCkudG9GaXhlZCgyKStcIiBLQlwiKTt0aGlzLnN0YXR1c0RvbUVsZW1lbnQuaW5uZXJIVE1MPWJ9LGV4dHJhY3RVcmxCYXNlOmZ1bmN0aW9uKGEpe2E9YS5zcGxpdChcIi9cIik7aWYoMT09PWEubGVuZ3RoKXJldHVyblwiLi9cIjthLnBvcCgpO3JldHVybiBhLmpvaW4oXCIvXCIpK1wiL1wifSxpbml0TWF0ZXJpYWxzOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPVtdLGQ9MDtkPGEubGVuZ3RoOysrZCljW2RdPXRoaXMuY3JlYXRlTWF0ZXJpYWwoYVtkXSxiKTtyZXR1cm4gY30sbmVlZHNUYW5nZW50czpmdW5jdGlvbihhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspaWYoYVtiXWluc3RhbmNlb2YgVEhSRUUuU2hhZGVyTWF0ZXJpYWwpcmV0dXJuITA7cmV0dXJuITF9LGNyZWF0ZU1hdGVyaWFsOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXthPU1hdGgubG9nKGEpL01hdGguTE4yO3JldHVybiBNYXRoLnBvdygyLE1hdGgucm91bmQoYSkpfWZ1bmN0aW9uIGQoYSxcbmQsZSxnLGgsayxyKXt2YXIgdj1iK2UsdSx4PVRIUkVFLkxvYWRlci5IYW5kbGVycy5nZXQodik7bnVsbCE9PXg/dT14LmxvYWQodik6KHU9bmV3IFRIUkVFLlRleHR1cmUseD1mLmltYWdlTG9hZGVyLHguY3Jvc3NPcmlnaW49Zi5jcm9zc09yaWdpbix4LmxvYWQodixmdW5jdGlvbihhKXtpZighMT09PVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEud2lkdGgpfHwhMT09PVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEuaGVpZ2h0KSl7dmFyIGI9YyhhLndpZHRoKSxkPWMoYS5oZWlnaHQpLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtlLndpZHRoPWI7ZS5oZWlnaHQ9ZDtlLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoYSwwLDAsYixkKTt1LmltYWdlPWV9ZWxzZSB1LmltYWdlPWE7dS5uZWVkc1VwZGF0ZT0hMH0pKTt1LnNvdXJjZUZpbGU9ZTtnJiYodS5yZXBlYXQuc2V0KGdbMF0sZ1sxXSksMSE9PWdbMF0mJih1LndyYXBTPVRIUkVFLlJlcGVhdFdyYXBwaW5nKSxcbjEhPT1nWzFdJiYodS53cmFwVD1USFJFRS5SZXBlYXRXcmFwcGluZykpO2gmJnUub2Zmc2V0LnNldChoWzBdLGhbMV0pO2smJihlPXtyZXBlYXQ6VEhSRUUuUmVwZWF0V3JhcHBpbmcsbWlycm9yOlRIUkVFLk1pcnJvcmVkUmVwZWF0V3JhcHBpbmd9LHZvaWQgMCE9PWVba1swXV0mJih1LndyYXBTPWVba1swXV0pLHZvaWQgMCE9PWVba1sxXV0mJih1LndyYXBUPWVba1sxXV0pKTtyJiYodS5hbmlzb3Ryb3B5PXIpO2FbZF09dX1mdW5jdGlvbiBlKGEpe3JldHVybigyNTUqYVswXTw8MTYpKygyNTUqYVsxXTw8OCkrMjU1KmFbMl19dmFyIGY9dGhpcyxnPVwiTWVzaExhbWJlcnRNYXRlcmlhbFwiLGg9e2NvbG9yOjE1NjU4NzM0LG9wYWNpdHk6MSxtYXA6bnVsbCxsaWdodE1hcDpudWxsLG5vcm1hbE1hcDpudWxsLGJ1bXBNYXA6bnVsbCx3aXJlZnJhbWU6ITF9O2lmKGEuc2hhZGluZyl7dmFyIGs9YS5zaGFkaW5nLnRvTG93ZXJDYXNlKCk7XCJwaG9uZ1wiPT09az9nPVwiTWVzaFBob25nTWF0ZXJpYWxcIjpcblwiYmFzaWNcIj09PWsmJihnPVwiTWVzaEJhc2ljTWF0ZXJpYWxcIil9dm9pZCAwIT09YS5ibGVuZGluZyYmdm9pZCAwIT09VEhSRUVbYS5ibGVuZGluZ10mJihoLmJsZW5kaW5nPVRIUkVFW2EuYmxlbmRpbmddKTt2b2lkIDAhPT1hLnRyYW5zcGFyZW50JiYoaC50cmFuc3BhcmVudD1hLnRyYW5zcGFyZW50KTt2b2lkIDAhPT1hLm9wYWNpdHkmJjE+YS5vcGFjaXR5JiYoaC50cmFuc3BhcmVudD0hMCk7dm9pZCAwIT09YS5kZXB0aFRlc3QmJihoLmRlcHRoVGVzdD1hLmRlcHRoVGVzdCk7dm9pZCAwIT09YS5kZXB0aFdyaXRlJiYoaC5kZXB0aFdyaXRlPWEuZGVwdGhXcml0ZSk7dm9pZCAwIT09YS52aXNpYmxlJiYoaC52aXNpYmxlPWEudmlzaWJsZSk7dm9pZCAwIT09YS5mbGlwU2lkZWQmJihoLnNpZGU9VEhSRUUuQmFja1NpZGUpO3ZvaWQgMCE9PWEuZG91YmxlU2lkZWQmJihoLnNpZGU9VEhSRUUuRG91YmxlU2lkZSk7dm9pZCAwIT09YS53aXJlZnJhbWUmJihoLndpcmVmcmFtZT1hLndpcmVmcmFtZSk7XG52b2lkIDAhPT1hLnZlcnRleENvbG9ycyYmKFwiZmFjZVwiPT09YS52ZXJ0ZXhDb2xvcnM/aC52ZXJ0ZXhDb2xvcnM9VEhSRUUuRmFjZUNvbG9yczphLnZlcnRleENvbG9ycyYmKGgudmVydGV4Q29sb3JzPVRIUkVFLlZlcnRleENvbG9ycykpO2EuY29sb3JEaWZmdXNlP2guY29sb3I9ZShhLmNvbG9yRGlmZnVzZSk6YS5EYmdDb2xvciYmKGguY29sb3I9YS5EYmdDb2xvcik7YS5jb2xvclNwZWN1bGFyJiYoaC5zcGVjdWxhcj1lKGEuY29sb3JTcGVjdWxhcikpO2EuY29sb3JFbWlzc2l2ZSYmKGguZW1pc3NpdmU9ZShhLmNvbG9yRW1pc3NpdmUpKTt2b2lkIDAhPT1hLnRyYW5zcGFyZW5jeSYmKFRIUkVFLndhcm4oXCJUSFJFRS5Mb2FkZXI6IHRyYW5zcGFyZW5jeSBoYXMgYmVlbiByZW5hbWVkIHRvIG9wYWNpdHlcIiksYS5vcGFjaXR5PWEudHJhbnNwYXJlbmN5KTt2b2lkIDAhPT1hLm9wYWNpdHkmJihoLm9wYWNpdHk9YS5vcGFjaXR5KTthLnNwZWN1bGFyQ29lZiYmKGguc2hpbmluZXNzPWEuc3BlY3VsYXJDb2VmKTtcbmEubWFwRGlmZnVzZSYmYiYmZChoLFwibWFwXCIsYS5tYXBEaWZmdXNlLGEubWFwRGlmZnVzZVJlcGVhdCxhLm1hcERpZmZ1c2VPZmZzZXQsYS5tYXBEaWZmdXNlV3JhcCxhLm1hcERpZmZ1c2VBbmlzb3Ryb3B5KTthLm1hcExpZ2h0JiZiJiZkKGgsXCJsaWdodE1hcFwiLGEubWFwTGlnaHQsYS5tYXBMaWdodFJlcGVhdCxhLm1hcExpZ2h0T2Zmc2V0LGEubWFwTGlnaHRXcmFwLGEubWFwTGlnaHRBbmlzb3Ryb3B5KTthLm1hcEFPJiZiJiZkKGgsXCJhb01hcFwiLGEubWFwQU8sYS5tYXBBT1JlcGVhdCxhLm1hcEFPT2Zmc2V0LGEubWFwQU9XcmFwLGEubWFwQU9Bbmlzb3Ryb3B5KTthLm1hcEJ1bXAmJmImJmQoaCxcImJ1bXBNYXBcIixhLm1hcEJ1bXAsYS5tYXBCdW1wUmVwZWF0LGEubWFwQnVtcE9mZnNldCxhLm1hcEJ1bXBXcmFwLGEubWFwQnVtcEFuaXNvdHJvcHkpO2EubWFwTm9ybWFsJiZiJiZkKGgsXCJub3JtYWxNYXBcIixhLm1hcE5vcm1hbCxhLm1hcE5vcm1hbFJlcGVhdCxhLm1hcE5vcm1hbE9mZnNldCxcbmEubWFwTm9ybWFsV3JhcCxhLm1hcE5vcm1hbEFuaXNvdHJvcHkpO2EubWFwU3BlY3VsYXImJmImJmQoaCxcInNwZWN1bGFyTWFwXCIsYS5tYXBTcGVjdWxhcixhLm1hcFNwZWN1bGFyUmVwZWF0LGEubWFwU3BlY3VsYXJPZmZzZXQsYS5tYXBTcGVjdWxhcldyYXAsYS5tYXBTcGVjdWxhckFuaXNvdHJvcHkpO2EubWFwQWxwaGEmJmImJmQoaCxcImFscGhhTWFwXCIsYS5tYXBBbHBoYSxhLm1hcEFscGhhUmVwZWF0LGEubWFwQWxwaGFPZmZzZXQsYS5tYXBBbHBoYVdyYXAsYS5tYXBBbHBoYUFuaXNvdHJvcHkpO2EubWFwQnVtcFNjYWxlJiYoaC5idW1wU2NhbGU9YS5tYXBCdW1wU2NhbGUpO2EubWFwTm9ybWFsRmFjdG9yJiYoaC5ub3JtYWxTY2FsZT1uZXcgVEhSRUUuVmVjdG9yMihhLm1hcE5vcm1hbEZhY3RvcixhLm1hcE5vcm1hbEZhY3RvcikpO2c9bmV3IFRIUkVFW2ddKGgpO3ZvaWQgMCE9PWEuRGJnTmFtZSYmKGcubmFtZT1hLkRiZ05hbWUpO3JldHVybiBnfX07XG5USFJFRS5Mb2FkZXIuSGFuZGxlcnM9e2hhbmRsZXJzOltdLGFkZDpmdW5jdGlvbihhLGIpe3RoaXMuaGFuZGxlcnMucHVzaChhLGIpfSxnZXQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz10aGlzLmhhbmRsZXJzLmxlbmd0aDtiPGM7Yis9Mil7dmFyIGQ9dGhpcy5oYW5kbGVyc1tiKzFdO2lmKHRoaXMuaGFuZGxlcnNbYl0udGVzdChhKSlyZXR1cm4gZH1yZXR1cm4gbnVsbH19O1RIUkVFLlhIUkxvYWRlcj1mdW5jdGlvbihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOlRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcn07XG5USFJFRS5YSFJMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5YSFJMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9VEhSRUUuQ2FjaGUuZ2V0KGEpO3ZvaWQgMCE9PWY/YiYmYihmKTooZj1uZXcgWE1MSHR0cFJlcXVlc3QsZi5vcGVuKFwiR0VUXCIsYSwhMCksZi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKGMpe1RIUkVFLkNhY2hlLmFkZChhLHRoaXMucmVzcG9uc2UpO2ImJmIodGhpcy5yZXNwb25zZSk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LCExKSx2b2lkIDAhPT1jJiZmLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLGZ1bmN0aW9uKGEpe2MoYSl9LCExKSx2b2lkIDAhPT1kJiZmLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGZ1bmN0aW9uKGEpe2QoYSl9LCExKSx2b2lkIDAhPT10aGlzLmNyb3NzT3JpZ2luJiYoZi5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2luKSx2b2lkIDAhPT10aGlzLnJlc3BvbnNlVHlwZSYmKGYucmVzcG9uc2VUeXBlPVxudGhpcy5yZXNwb25zZVR5cGUpLGYuc2VuZChudWxsKSxlLm1hbmFnZXIuaXRlbVN0YXJ0KGEpKX0sc2V0UmVzcG9uc2VUeXBlOmZ1bmN0aW9uKGEpe3RoaXMucmVzcG9uc2VUeXBlPWF9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YX19O1RIUkVFLkltYWdlTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcblRIUkVFLkltYWdlTG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuSW1hZ2VMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9VEhSRUUuQ2FjaGUuZ2V0KGEpO2lmKHZvaWQgMCE9PWYpYihmKTtlbHNlIHJldHVybiBmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksZi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKGMpe1RIUkVFLkNhY2hlLmFkZChhLHRoaXMpO2ImJmIodGhpcyk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LCExKSx2b2lkIDAhPT1jJiZmLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLGZ1bmN0aW9uKGEpe2MoYSl9LCExKSx2b2lkIDAhPT1kJiZmLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGZ1bmN0aW9uKGEpe2QoYSl9LCExKSx2b2lkIDAhPT10aGlzLmNyb3NzT3JpZ2luJiYoZi5jcm9zc09yaWdpbj10aGlzLmNyb3NzT3JpZ2luKSxmLnNyYz1hLGUubWFuYWdlci5pdGVtU3RhcnQoYSksZn0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1cbmF9fTtUSFJFRS5KU09OTG9hZGVyPWZ1bmN0aW9uKGEpe1RIUkVFLkxvYWRlci5jYWxsKHRoaXMsYSk7dGhpcy53aXRoQ3JlZGVudGlhbHM9ITF9O1RIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTG9hZGVyLnByb3RvdHlwZSk7VEhSRUUuSlNPTkxvYWRlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSlNPTkxvYWRlcjtUSFJFRS5KU09OTG9hZGVyLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEsYixjKXtjPWMmJlwic3RyaW5nXCI9PT10eXBlb2YgYz9jOnRoaXMuZXh0cmFjdFVybEJhc2UoYSk7dGhpcy5vbkxvYWRTdGFydCgpO3RoaXMubG9hZEFqYXhKU09OKHRoaXMsYSxiLGMpfTtcblRIUkVFLkpTT05Mb2FkZXIucHJvdG90eXBlLmxvYWRBamF4SlNPTj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPW5ldyBYTUxIdHRwUmVxdWVzdCxnPTA7Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZihmLnJlYWR5U3RhdGU9PT1mLkRPTkUpaWYoMjAwPT09Zi5zdGF0dXN8fDA9PT1mLnN0YXR1cyl7aWYoZi5yZXNwb25zZVRleHQpe3ZhciBoPUpTT04ucGFyc2UoZi5yZXNwb25zZVRleHQpLGs9aC5tZXRhZGF0YTtpZih2b2lkIDAhPT1rKXtpZihcIm9iamVjdFwiPT09ay50eXBlKXtUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2IrXCIgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLk9iamVjdExvYWRlciBpbnN0ZWFkLlwiKTtyZXR1cm59aWYoXCJzY2VuZVwiPT09ay50eXBlKXtUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2IrXCIgc2VlbXMgdG8gYmUgYSBTY2VuZS4gVXNlIFRIUkVFLlNjZW5lTG9hZGVyIGluc3RlYWQuXCIpO3JldHVybn19aD1hLnBhcnNlKGgsXG5kKTtjKGguZ2VvbWV0cnksaC5tYXRlcmlhbHMpfWVsc2UgVEhSRUUuZXJyb3IoXCJUSFJFRS5KU09OTG9hZGVyOiBcIitiK1wiIHNlZW1zIHRvIGJlIHVucmVhY2hhYmxlIG9yIHRoZSBmaWxlIGlzIGVtcHR5LlwiKTthLm9uTG9hZENvbXBsZXRlKCl9ZWxzZSBUSFJFRS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IENvdWxkbid0IGxvYWQgXCIrYitcIiAoXCIrZi5zdGF0dXMrXCIpXCIpO2Vsc2UgZi5yZWFkeVN0YXRlPT09Zi5MT0FESU5HP2UmJigwPT09ZyYmKGc9Zi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtTGVuZ3RoXCIpKSxlKHt0b3RhbDpnLGxvYWRlZDpmLnJlc3BvbnNlVGV4dC5sZW5ndGh9KSk6Zi5yZWFkeVN0YXRlPT09Zi5IRUFERVJTX1JFQ0VJVkVEJiZ2b2lkIDAhPT1lJiYoZz1mLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1MZW5ndGhcIikpfTtmLm9wZW4oXCJHRVRcIixiLCEwKTtmLndpdGhDcmVkZW50aWFscz10aGlzLndpdGhDcmVkZW50aWFscztmLnNlbmQobnVsbCl9O1xuVEhSRUUuSlNPTkxvYWRlci5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgVEhSRUUuR2VvbWV0cnksZD12b2lkIDAhPT1hLnNjYWxlPzEvYS5zY2FsZToxOyhmdW5jdGlvbihiKXt2YXIgZCxnLGgsayxsLHAsbixtLHMsdCxyLHYsdSx4PWEuZmFjZXM7cD1hLnZlcnRpY2VzO3ZhciB6PWEubm9ybWFscyx3PWEuY29sb3JzLEY9MDtpZih2b2lkIDAhPT1hLnV2cyl7Zm9yKGQ9MDtkPGEudXZzLmxlbmd0aDtkKyspYS51dnNbZF0ubGVuZ3RoJiZGKys7Zm9yKGQ9MDtkPEY7ZCsrKWMuZmFjZVZlcnRleFV2c1tkXT1bXX1rPTA7Zm9yKGw9cC5sZW5ndGg7azxsOylkPW5ldyBUSFJFRS5WZWN0b3IzLGQueD1wW2srK10qYixkLnk9cFtrKytdKmIsZC56PXBbaysrXSpiLGMudmVydGljZXMucHVzaChkKTtrPTA7Zm9yKGw9eC5sZW5ndGg7azxsOylpZihiPXhbaysrXSxzPWImMSxoPWImMixkPWImOCxuPWImMTYsdD1iJjMyLHA9YiY2NCxiJj0xMjgscyl7cz1uZXcgVEhSRUUuRmFjZTM7XG5zLmE9eFtrXTtzLmI9eFtrKzFdO3MuYz14W2srM107cj1uZXcgVEhSRUUuRmFjZTM7ci5hPXhbaysxXTtyLmI9eFtrKzJdO3IuYz14W2srM107ays9NDtoJiYoaD14W2srK10scy5tYXRlcmlhbEluZGV4PWgsci5tYXRlcmlhbEluZGV4PWgpO2g9Yy5mYWNlcy5sZW5ndGg7aWYoZClmb3IoZD0wO2Q8RjtkKyspZm9yKHY9YS51dnNbZF0sYy5mYWNlVmVydGV4VXZzW2RdW2hdPVtdLGMuZmFjZVZlcnRleFV2c1tkXVtoKzFdPVtdLGc9MDs0Pmc7ZysrKW09eFtrKytdLHU9dlsyKm1dLG09dlsyKm0rMV0sdT1uZXcgVEhSRUUuVmVjdG9yMih1LG0pLDIhPT1nJiZjLmZhY2VWZXJ0ZXhVdnNbZF1baF0ucHVzaCh1KSwwIT09ZyYmYy5mYWNlVmVydGV4VXZzW2RdW2grMV0ucHVzaCh1KTtuJiYobj0zKnhbaysrXSxzLm5vcm1hbC5zZXQoeltuKytdLHpbbisrXSx6W25dKSxyLm5vcm1hbC5jb3B5KHMubm9ybWFsKSk7aWYodClmb3IoZD0wOzQ+ZDtkKyspbj0zKnhbaysrXSx0PW5ldyBUSFJFRS5WZWN0b3IzKHpbbisrXSxcbnpbbisrXSx6W25dKSwyIT09ZCYmcy52ZXJ0ZXhOb3JtYWxzLnB1c2godCksMCE9PWQmJnIudmVydGV4Tm9ybWFscy5wdXNoKHQpO3AmJihwPXhbaysrXSxwPXdbcF0scy5jb2xvci5zZXRIZXgocCksci5jb2xvci5zZXRIZXgocCkpO2lmKGIpZm9yKGQ9MDs0PmQ7ZCsrKXA9eFtrKytdLHA9d1twXSwyIT09ZCYmcy52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgVEhSRUUuQ29sb3IocCkpLDAhPT1kJiZyLnZlcnRleENvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcihwKSk7Yy5mYWNlcy5wdXNoKHMpO2MuZmFjZXMucHVzaChyKX1lbHNle3M9bmV3IFRIUkVFLkZhY2UzO3MuYT14W2srK107cy5iPXhbaysrXTtzLmM9eFtrKytdO2gmJihoPXhbaysrXSxzLm1hdGVyaWFsSW5kZXg9aCk7aD1jLmZhY2VzLmxlbmd0aDtpZihkKWZvcihkPTA7ZDxGO2QrKylmb3Iodj1hLnV2c1tkXSxjLmZhY2VWZXJ0ZXhVdnNbZF1baF09W10sZz0wOzM+ZztnKyspbT14W2srK10sdT12WzIqbV0sbT12WzIqbSsxXSxcbnU9bmV3IFRIUkVFLlZlY3RvcjIodSxtKSxjLmZhY2VWZXJ0ZXhVdnNbZF1baF0ucHVzaCh1KTtuJiYobj0zKnhbaysrXSxzLm5vcm1hbC5zZXQoeltuKytdLHpbbisrXSx6W25dKSk7aWYodClmb3IoZD0wOzM+ZDtkKyspbj0zKnhbaysrXSx0PW5ldyBUSFJFRS5WZWN0b3IzKHpbbisrXSx6W24rK10seltuXSkscy52ZXJ0ZXhOb3JtYWxzLnB1c2godCk7cCYmKHA9eFtrKytdLHMuY29sb3Iuc2V0SGV4KHdbcF0pKTtpZihiKWZvcihkPTA7Mz5kO2QrKylwPXhbaysrXSxzLnZlcnRleENvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcih3W3BdKSk7Yy5mYWNlcy5wdXNoKHMpfX0pKGQpOyhmdW5jdGlvbigpe3ZhciBiPXZvaWQgMCE9PWEuaW5mbHVlbmNlc1BlclZlcnRleD9hLmluZmx1ZW5jZXNQZXJWZXJ0ZXg6MjtpZihhLnNraW5XZWlnaHRzKWZvcih2YXIgZD0wLGc9YS5za2luV2VpZ2h0cy5sZW5ndGg7ZDxnO2QrPWIpYy5za2luV2VpZ2h0cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3I0KGEuc2tpbldlaWdodHNbZF0sXG4xPGI/YS5za2luV2VpZ2h0c1tkKzFdOjAsMjxiP2Euc2tpbldlaWdodHNbZCsyXTowLDM8Yj9hLnNraW5XZWlnaHRzW2QrM106MCkpO2lmKGEuc2tpbkluZGljZXMpZm9yKGQ9MCxnPWEuc2tpbkluZGljZXMubGVuZ3RoO2Q8ZztkKz1iKWMuc2tpbkluZGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yNChhLnNraW5JbmRpY2VzW2RdLDE8Yj9hLnNraW5JbmRpY2VzW2QrMV06MCwyPGI/YS5za2luSW5kaWNlc1tkKzJdOjAsMzxiP2Euc2tpbkluZGljZXNbZCszXTowKSk7Yy5ib25lcz1hLmJvbmVzO2MuYm9uZXMmJjA8Yy5ib25lcy5sZW5ndGgmJihjLnNraW5XZWlnaHRzLmxlbmd0aCE9PWMuc2tpbkluZGljZXMubGVuZ3RofHxjLnNraW5JbmRpY2VzLmxlbmd0aCE9PWMudmVydGljZXMubGVuZ3RoKSYmVEhSRUUud2FybihcIlRIUkVFLkpTT05Mb2FkZXI6IFdoZW4gc2tpbm5pbmcsIG51bWJlciBvZiB2ZXJ0aWNlcyAoXCIrYy52ZXJ0aWNlcy5sZW5ndGgrXCIpLCBza2luSW5kaWNlcyAoXCIrXG5jLnNraW5JbmRpY2VzLmxlbmd0aCtcIiksIGFuZCBza2luV2VpZ2h0cyAoXCIrYy5za2luV2VpZ2h0cy5sZW5ndGgrXCIpIHNob3VsZCBtYXRjaC5cIik7Yy5hbmltYXRpb249YS5hbmltYXRpb247Yy5hbmltYXRpb25zPWEuYW5pbWF0aW9uc30pKCk7KGZ1bmN0aW9uKGIpe2lmKHZvaWQgMCE9PWEubW9ycGhUYXJnZXRzKXt2YXIgZCxnLGgsayxsLHA7ZD0wO2ZvcihnPWEubW9ycGhUYXJnZXRzLmxlbmd0aDtkPGc7ZCsrKWZvcihjLm1vcnBoVGFyZ2V0c1tkXT17fSxjLm1vcnBoVGFyZ2V0c1tkXS5uYW1lPWEubW9ycGhUYXJnZXRzW2RdLm5hbWUsYy5tb3JwaFRhcmdldHNbZF0udmVydGljZXM9W10sbD1jLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcyxwPWEubW9ycGhUYXJnZXRzW2RdLnZlcnRpY2VzLGg9MCxrPXAubGVuZ3RoO2g8aztoKz0zKXt2YXIgbj1uZXcgVEhSRUUuVmVjdG9yMztuLng9cFtoXSpiO24ueT1wW2grMV0qYjtuLno9cFtoKzJdKmI7bC5wdXNoKG4pfX1pZih2b2lkIDAhPT1cbmEubW9ycGhDb2xvcnMpZm9yKGQ9MCxnPWEubW9ycGhDb2xvcnMubGVuZ3RoO2Q8ZztkKyspZm9yKGMubW9ycGhDb2xvcnNbZF09e30sYy5tb3JwaENvbG9yc1tkXS5uYW1lPWEubW9ycGhDb2xvcnNbZF0ubmFtZSxjLm1vcnBoQ29sb3JzW2RdLmNvbG9ycz1bXSxrPWMubW9ycGhDb2xvcnNbZF0uY29sb3JzLGw9YS5tb3JwaENvbG9yc1tkXS5jb2xvcnMsYj0wLGg9bC5sZW5ndGg7YjxoO2IrPTMpcD1uZXcgVEhSRUUuQ29sb3IoMTY3NTUyMDApLHAuc2V0UkdCKGxbYl0sbFtiKzFdLGxbYisyXSksay5wdXNoKHApfSkoZCk7Yy5jb21wdXRlRmFjZU5vcm1hbHMoKTtjLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2lmKHZvaWQgMD09PWEubWF0ZXJpYWxzfHwwPT09YS5tYXRlcmlhbHMubGVuZ3RoKXJldHVybntnZW9tZXRyeTpjfTtkPXRoaXMuaW5pdE1hdGVyaWFscyhhLm1hdGVyaWFscyxiKTt0aGlzLm5lZWRzVGFuZ2VudHMoZCkmJmMuY29tcHV0ZVRhbmdlbnRzKCk7cmV0dXJue2dlb21ldHJ5OmMsXG5tYXRlcmlhbHM6ZH19O1RIUkVFLkxvYWRpbmdNYW5hZ2VyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU9MCxmPTA7dGhpcy5vbkxvYWQ9YTt0aGlzLm9uUHJvZ3Jlc3M9Yjt0aGlzLm9uRXJyb3I9Yzt0aGlzLml0ZW1TdGFydD1mdW5jdGlvbihhKXtmKyt9O3RoaXMuaXRlbUVuZD1mdW5jdGlvbihhKXtlKys7aWYodm9pZCAwIT09ZC5vblByb2dyZXNzKWQub25Qcm9ncmVzcyhhLGUsZik7aWYoZT09PWYmJnZvaWQgMCE9PWQub25Mb2FkKWQub25Mb2FkKCl9fTtUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI9bmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyO1RIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcblRIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQnVmZmVyR2VvbWV0cnlMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9bmV3IFRIUkVFLlhIUkxvYWRlcihlLm1hbmFnZXIpO2Yuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zi5sb2FkKGEsZnVuY3Rpb24oYSl7YihlLnBhcnNlKEpTT04ucGFyc2UoYSkpKX0sYyxkKX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfSxwYXJzZTpmdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnksYz1hLmRhdGEuYXR0cmlidXRlcyxkO2ZvcihkIGluIGMpe3ZhciBlPWNbZF0sZj1uZXcgc2VsZltlLnR5cGVdKGUuYXJyYXkpO2IuYWRkQXR0cmlidXRlKGQsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShmLGUuaXRlbVNpemUpKX1jPWEuZGF0YS5vZmZzZXRzO3ZvaWQgMCE9PWMmJihiLm9mZnNldHM9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSkpO1xuYT1hLmRhdGEuYm91bmRpbmdTcGhlcmU7dm9pZCAwIT09YSYmKGM9bmV3IFRIUkVFLlZlY3RvcjMsdm9pZCAwIT09YS5jZW50ZXImJmMuZnJvbUFycmF5KGEuY2VudGVyKSxiLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUoYyxhLnJhZGl1cykpO3JldHVybiBifX07VEhSRUUuTWF0ZXJpYWxMb2FkZXI9ZnVuY3Rpb24oYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTpUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXJ9O1xuVEhSRUUuTWF0ZXJpYWxMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRlcmlhbExvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMsZj1uZXcgVEhSRUUuWEhSTG9hZGVyKGUubWFuYWdlcik7Zi5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtmLmxvYWQoYSxmdW5jdGlvbihhKXtiKGUucGFyc2UoSlNPTi5wYXJzZShhKSkpfSxjLGQpfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRVthLnR5cGVdO3ZvaWQgMCE9PWEuY29sb3ImJmIuY29sb3Iuc2V0SGV4KGEuY29sb3IpO3ZvaWQgMCE9PWEuZW1pc3NpdmUmJmIuZW1pc3NpdmUuc2V0SGV4KGEuZW1pc3NpdmUpO3ZvaWQgMCE9PWEuc3BlY3VsYXImJmIuc3BlY3VsYXIuc2V0SGV4KGEuc3BlY3VsYXIpO3ZvaWQgMCE9PWEuc2hpbmluZXNzJiYoYi5zaGluaW5lc3M9YS5zaGluaW5lc3MpO1xudm9pZCAwIT09YS51bmlmb3JtcyYmKGIudW5pZm9ybXM9YS51bmlmb3Jtcyk7dm9pZCAwIT09YS52ZXJ0ZXhTaGFkZXImJihiLnZlcnRleFNoYWRlcj1hLnZlcnRleFNoYWRlcik7dm9pZCAwIT09YS5mcmFnbWVudFNoYWRlciYmKGIuZnJhZ21lbnRTaGFkZXI9YS5mcmFnbWVudFNoYWRlcik7dm9pZCAwIT09YS52ZXJ0ZXhDb2xvcnMmJihiLnZlcnRleENvbG9ycz1hLnZlcnRleENvbG9ycyk7dm9pZCAwIT09YS5zaGFkaW5nJiYoYi5zaGFkaW5nPWEuc2hhZGluZyk7dm9pZCAwIT09YS5ibGVuZGluZyYmKGIuYmxlbmRpbmc9YS5ibGVuZGluZyk7dm9pZCAwIT09YS5zaWRlJiYoYi5zaWRlPWEuc2lkZSk7dm9pZCAwIT09YS5vcGFjaXR5JiYoYi5vcGFjaXR5PWEub3BhY2l0eSk7dm9pZCAwIT09YS50cmFuc3BhcmVudCYmKGIudHJhbnNwYXJlbnQ9YS50cmFuc3BhcmVudCk7dm9pZCAwIT09YS53aXJlZnJhbWUmJihiLndpcmVmcmFtZT1hLndpcmVmcmFtZSk7dm9pZCAwIT09YS5hbHBoYVRlc3QmJlxuKGIuYWxwaGFUZXN0PWEuYWxwaGFUZXN0KTt2b2lkIDAhPT1hLnNpemUmJihiLnNpemU9YS5zaXplKTt2b2lkIDAhPT1hLnNpemVBdHRlbnVhdGlvbiYmKGIuc2l6ZUF0dGVudWF0aW9uPWEuc2l6ZUF0dGVudWF0aW9uKTtpZih2b2lkIDAhPT1hLm1hdGVyaWFscylmb3IodmFyIGM9MCxkPWEubWF0ZXJpYWxzLmxlbmd0aDtjPGQ7YysrKWIubWF0ZXJpYWxzLnB1c2godGhpcy5wYXJzZShhLm1hdGVyaWFsc1tjXSkpO3JldHVybiBifX07VEhSRUUuT2JqZWN0TG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO3RoaXMudGV4dHVyZVBhdGg9XCJcIn07XG5USFJFRS5PYmplY3RMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5PYmplY3RMb2FkZXIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXtcIlwiPT09dGhpcy50ZXh0dXJlUGF0aCYmKHRoaXMudGV4dHVyZVBhdGg9YS5zdWJzdHJpbmcoMCxhLmxhc3RJbmRleE9mKFwiL1wiKSsxKSk7dmFyIGU9dGhpcyxmPW5ldyBUSFJFRS5YSFJMb2FkZXIoZS5tYW5hZ2VyKTtmLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO2YubG9hZChhLGZ1bmN0aW9uKGEpe2UucGFyc2UoSlNPTi5wYXJzZShhKSxiKX0sYyxkKX0sc2V0VGV4dHVyZVBhdGg6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0dXJlUGF0aD1hfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWF9LHBhcnNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5wYXJzZUdlb21ldHJpZXMoYS5nZW9tZXRyaWVzKSxkPXRoaXMucGFyc2VJbWFnZXMoYS5pbWFnZXMsZnVuY3Rpb24oKXt2b2lkIDAhPT1iJiZiKGUpfSksXG5kPXRoaXMucGFyc2VUZXh0dXJlcyhhLnRleHR1cmVzLGQpLGQ9dGhpcy5wYXJzZU1hdGVyaWFscyhhLm1hdGVyaWFscyxkKSxlPXRoaXMucGFyc2VPYmplY3QoYS5vYmplY3QsYyxkKTt2b2lkIDAhPT1hLmltYWdlcyYmMCE9PWEuaW1hZ2VzLmxlbmd0aHx8dm9pZCAwPT09Ynx8YihlKTtyZXR1cm4gZX0scGFyc2VHZW9tZXRyaWVzOmZ1bmN0aW9uKGEpe3ZhciBiPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBjPW5ldyBUSFJFRS5KU09OTG9hZGVyLGQ9bmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5TG9hZGVyLGU9MCxmPWEubGVuZ3RoO2U8ZjtlKyspe3ZhciBnLGg9YVtlXTtzd2l0Y2goaC50eXBlKXtjYXNlIFwiUGxhbmVHZW9tZXRyeVwiOmNhc2UgXCJQbGFuZUJ1ZmZlckdlb21ldHJ5XCI6Zz1uZXcgVEhSRUVbaC50eXBlXShoLndpZHRoLGguaGVpZ2h0LGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzKTticmVhaztjYXNlIFwiQm94R2VvbWV0cnlcIjpjYXNlIFwiQ3ViZUdlb21ldHJ5XCI6Zz1cbm5ldyBUSFJFRS5Cb3hHZW9tZXRyeShoLndpZHRoLGguaGVpZ2h0LGguZGVwdGgsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMsaC5kZXB0aFNlZ21lbnRzKTticmVhaztjYXNlIFwiQ2lyY2xlR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5DaXJjbGVHZW9tZXRyeShoLnJhZGl1cyxoLnNlZ21lbnRzKTticmVhaztjYXNlIFwiQ3lsaW5kZXJHZW9tZXRyeVwiOmc9bmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoaC5yYWRpdXNUb3AsaC5yYWRpdXNCb3R0b20saC5oZWlnaHQsaC5yYWRpYWxTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzLGgub3BlbkVuZGVkKTticmVhaztjYXNlIFwiU3BoZXJlR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShoLnJhZGl1cyxoLndpZHRoU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLnBoaVN0YXJ0LGgucGhpTGVuZ3RoLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiSWNvc2FoZWRyb25HZW9tZXRyeVwiOmc9bmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoaC5yYWRpdXMsXG5oLmRldGFpbCk7YnJlYWs7Y2FzZSBcIlRvcnVzR2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5KGgucmFkaXVzLGgudHViZSxoLnJhZGlhbFNlZ21lbnRzLGgudHVidWxhclNlZ21lbnRzLGguYXJjKTticmVhaztjYXNlIFwiVG9ydXNLbm90R2VvbWV0cnlcIjpnPW5ldyBUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeShoLnJhZGl1cyxoLnR1YmUsaC5yYWRpYWxTZWdtZW50cyxoLnR1YnVsYXJTZWdtZW50cyxoLnAsaC5xLGguaGVpZ2h0U2NhbGUpO2JyZWFrO2Nhc2UgXCJCdWZmZXJHZW9tZXRyeVwiOmc9ZC5wYXJzZShoKTticmVhaztjYXNlIFwiR2VvbWV0cnlcIjpnPWMucGFyc2UoaC5kYXRhKS5nZW9tZXRyeTticmVhaztjYXNlIFwiVGV4dEdlb21ldHJ5XCI6Zz1uZXcgVEhSRUUuVGV4dEdlb21ldHJ5KGgudGV4dCxoLmRhdGEpfWcudXVpZD1oLnV1aWQ7dm9pZCAwIT09aC5uYW1lJiYoZy5uYW1lPWgubmFtZSk7YltoLnV1aWRdPWd9cmV0dXJuIGJ9LHBhcnNlTWF0ZXJpYWxzOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz17fTtpZih2b2lkIDAhPT1hKWZvcih2YXIgZD1mdW5jdGlvbihhKXt2b2lkIDA9PT1iW2FdJiZUSFJFRS53YXJuKFwiVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZVwiLGEpO3JldHVybiBiW2FdfSxlPW5ldyBUSFJFRS5NYXRlcmlhbExvYWRlcixmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1hW2ZdLGs9ZS5wYXJzZShoKTtrLnV1aWQ9aC51dWlkO3ZvaWQgMCE9PWgubmFtZSYmKGsubmFtZT1oLm5hbWUpO3ZvaWQgMCE9PWgubWFwJiYoay5tYXA9ZChoLm1hcCkpO3ZvaWQgMCE9PWguYnVtcE1hcCYmKGsuYnVtcE1hcD1kKGguYnVtcE1hcCksdm9pZCAwIT09aC5idW1wU2NhbGUmJihrLmJ1bXBTY2FsZT1oLmJ1bXBTY2FsZSkpO3ZvaWQgMCE9PWguYWxwaGFNYXAmJihrLmFscGhhTWFwPWQoaC5hbHBoYU1hcCkpO3ZvaWQgMCE9PWguZW52TWFwJiYoay5lbnZNYXA9ZChoLmVudk1hcCkpO3ZvaWQgMCE9PWgubm9ybWFsTWFwJiYoay5ub3JtYWxNYXA9XG5kKGgubm9ybWFsTWFwKSx2b2lkIDAhPT1oLm5vcm1hbFNjYWxlJiYoay5ub3JtYWxTY2FsZT1uZXcgVEhSRUUuVmVjdG9yMihoLm5vcm1hbFNjYWxlLGgubm9ybWFsU2NhbGUpKSk7dm9pZCAwIT09aC5saWdodE1hcCYmKGsubGlnaHRNYXA9ZChoLmxpZ2h0TWFwKSx2b2lkIDAhPT1oLmxpZ2h0TWFwSW50ZW5zaXR5JiYoay5saWdodE1hcEludGVuc2l0eT1oLmxpZ2h0TWFwSW50ZW5zaXR5KSk7dm9pZCAwIT09aC5hb01hcCYmKGsuYW9NYXA9ZChoLmFvTWFwKSx2b2lkIDAhPT1oLmFvTWFwSW50ZW5zaXR5JiYoay5hb01hcEludGVuc2l0eT1oLmFvTWFwSW50ZW5zaXR5KSk7dm9pZCAwIT09aC5zcGVjdWxhck1hcCYmKGsuc3BlY3VsYXJNYXA9ZChoLnNwZWN1bGFyTWFwKSk7Y1toLnV1aWRdPWt9cmV0dXJuIGN9LHBhcnNlSW1hZ2VzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPXt9O2lmKHZvaWQgMCE9PWEmJjA8YS5sZW5ndGgpe3ZhciBlPW5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlcihiKSxcbmY9bmV3IFRIUkVFLkltYWdlTG9hZGVyKGUpO2Yuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zm9yKHZhciBlPWZ1bmN0aW9uKGEpe2MubWFuYWdlci5pdGVtU3RhcnQoYSk7cmV0dXJuIGYubG9hZChhLGZ1bmN0aW9uKCl7Yy5tYW5hZ2VyLml0ZW1FbmQoYSl9KX0sZz0wLGg9YS5sZW5ndGg7ZzxoO2crKyl7dmFyIGs9YVtnXSxsPS9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdChrLnVybCk/ay51cmw6Yy50ZXh0dXJlUGF0aCtrLnVybDtkW2sudXVpZF09ZShsKX19cmV0dXJuIGR9LHBhcnNlVGV4dHVyZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz17fTtpZih2b2lkIDAhPT1hKWZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTt2b2lkIDA9PT1mLmltYWdlJiZUSFJFRS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXI6IE5vIFwiaW1hZ2VcIiBzcGVmaWNpZWQgZm9yJyxmLnV1aWQpO3ZvaWQgMD09PWJbZi5pbWFnZV0mJlRIUkVFLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZVwiLFxuZi5pbWFnZSk7dmFyIGc9bmV3IFRIUkVFLlRleHR1cmUoYltmLmltYWdlXSk7Zy5uZWVkc1VwZGF0ZT0hMDtnLnV1aWQ9Zi51dWlkO3ZvaWQgMCE9PWYubmFtZSYmKGcubmFtZT1mLm5hbWUpO3ZvaWQgMCE9PWYucmVwZWF0JiYoZy5yZXBlYXQ9bmV3IFRIUkVFLlZlY3RvcjIoZi5yZXBlYXRbMF0sZi5yZXBlYXRbMV0pKTt2b2lkIDAhPT1mLm1pbkZpbHRlciYmKGcubWluRmlsdGVyPVRIUkVFW2YubWluRmlsdGVyXSk7dm9pZCAwIT09Zi5tYWdGaWx0ZXImJihnLm1hZ0ZpbHRlcj1USFJFRVtmLm1hZ0ZpbHRlcl0pO3ZvaWQgMCE9PWYuYW5pc290cm9weSYmKGcuYW5pc290cm9weT1mLmFuaXNvdHJvcHkpO2Yud3JhcCBpbnN0YW5jZW9mIEFycmF5JiYoZy53cmFwUz1USFJFRVtmLndyYXBbMF1dLGcud3JhcFQ9VEhSRUVbZi53cmFwWzFdXSk7Y1tmLnV1aWRdPWd9cmV0dXJuIGN9LHBhcnNlT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKGIsXG5jLGQpe3ZhciBlO2U9ZnVuY3Rpb24oYSl7dm9pZCAwPT09Y1thXSYmVEhSRUUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5XCIsYSk7cmV0dXJuIGNbYV19O3ZhciBmPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWRbYV0mJlRIUkVFLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbFwiLGEpO3JldHVybiBkW2FdfTtzd2l0Y2goYi50eXBlKXtjYXNlIFwiU2NlbmVcIjplPW5ldyBUSFJFRS5TY2VuZTticmVhaztjYXNlIFwiUGVyc3BlY3RpdmVDYW1lcmFcIjplPW5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShiLmZvdixiLmFzcGVjdCxiLm5lYXIsYi5mYXIpO2JyZWFrO2Nhc2UgXCJPcnRob2dyYXBoaWNDYW1lcmFcIjplPW5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoYi5sZWZ0LGIucmlnaHQsYi50b3AsYi5ib3R0b20sYi5uZWFyLGIuZmFyKTticmVhaztjYXNlIFwiQW1iaWVudExpZ2h0XCI6ZT1uZXcgVEhSRUUuQW1iaWVudExpZ2h0KGIuY29sb3IpO1xuYnJlYWs7Y2FzZSBcIkRpcmVjdGlvbmFsTGlnaHRcIjplPW5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KGIuY29sb3IsYi5pbnRlbnNpdHkpO2JyZWFrO2Nhc2UgXCJQb2ludExpZ2h0XCI6ZT1uZXcgVEhSRUUuUG9pbnRMaWdodChiLmNvbG9yLGIuaW50ZW5zaXR5LGIuZGlzdGFuY2UsYi5kZWNheSk7YnJlYWs7Y2FzZSBcIlNwb3RMaWdodFwiOmU9bmV3IFRIUkVFLlNwb3RMaWdodChiLmNvbG9yLGIuaW50ZW5zaXR5LGIuZGlzdGFuY2UsYi5hbmdsZSxiLmV4cG9uZW50LGIuZGVjYXkpO2JyZWFrO2Nhc2UgXCJIZW1pc3BoZXJlTGlnaHRcIjplPW5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoYi5jb2xvcixiLmdyb3VuZENvbG9yLGIuaW50ZW5zaXR5KTticmVhaztjYXNlIFwiTWVzaFwiOmU9bmV3IFRIUkVFLk1lc2goZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiTGluZVwiOmU9bmV3IFRIUkVFLkxpbmUoZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpLGIubW9kZSk7YnJlYWs7XG5jYXNlIFwiUG9pbnRDbG91ZFwiOmU9bmV3IFRIUkVFLlBvaW50Q2xvdWQoZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiU3ByaXRlXCI6ZT1uZXcgVEhSRUUuU3ByaXRlKGYoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJHcm91cFwiOmU9bmV3IFRIUkVFLkdyb3VwO2JyZWFrO2RlZmF1bHQ6ZT1uZXcgVEhSRUUuT2JqZWN0M0R9ZS51dWlkPWIudXVpZDt2b2lkIDAhPT1iLm5hbWUmJihlLm5hbWU9Yi5uYW1lKTt2b2lkIDAhPT1iLm1hdHJpeD8oYS5mcm9tQXJyYXkoYi5tYXRyaXgpLGEuZGVjb21wb3NlKGUucG9zaXRpb24sZS5xdWF0ZXJuaW9uLGUuc2NhbGUpKToodm9pZCAwIT09Yi5wb3NpdGlvbiYmZS5wb3NpdGlvbi5mcm9tQXJyYXkoYi5wb3NpdGlvbiksdm9pZCAwIT09Yi5yb3RhdGlvbiYmZS5yb3RhdGlvbi5mcm9tQXJyYXkoYi5yb3RhdGlvbiksdm9pZCAwIT09Yi5zY2FsZSYmZS5zY2FsZS5mcm9tQXJyYXkoYi5zY2FsZSkpO3ZvaWQgMCE9PWIuY2FzdFNoYWRvdyYmXG4oZS5jYXN0U2hhZG93PWIuY2FzdFNoYWRvdyk7dm9pZCAwIT09Yi5yZWNlaXZlU2hhZG93JiYoZS5yZWNlaXZlU2hhZG93PWIucmVjZWl2ZVNoYWRvdyk7dm9pZCAwIT09Yi52aXNpYmxlJiYoZS52aXNpYmxlPWIudmlzaWJsZSk7dm9pZCAwIT09Yi51c2VyRGF0YSYmKGUudXNlckRhdGE9Yi51c2VyRGF0YSk7aWYodm9pZCAwIT09Yi5jaGlsZHJlbilmb3IodmFyIGcgaW4gYi5jaGlsZHJlbillLmFkZCh0aGlzLnBhcnNlT2JqZWN0KGIuY2hpbGRyZW5bZ10sYyxkKSk7cmV0dXJuIGV9fSgpfTtUSFJFRS5UZXh0dXJlTG9hZGVyPWZ1bmN0aW9uKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6VEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyfTtcblRIUkVFLlRleHR1cmVMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5UZXh0dXJlTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IFRIUkVFLkltYWdlTG9hZGVyKHRoaXMubWFuYWdlcik7ZS5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtlLmxvYWQoYSxmdW5jdGlvbihhKXthPW5ldyBUSFJFRS5UZXh0dXJlKGEpO2EubmVlZHNVcGRhdGU9ITA7dm9pZCAwIT09YiYmYihhKX0sYyxkKX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfX07VEhSRUUuRGF0YVRleHR1cmVMb2FkZXI9VEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlcj1mdW5jdGlvbigpe3RoaXMuX3BhcnNlcj1udWxsfTtcblRIUkVFLkJpbmFyeVRleHR1cmVMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPW5ldyBUSFJFRS5EYXRhVGV4dHVyZSxnPW5ldyBUSFJFRS5YSFJMb2FkZXI7Zy5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtnLmxvYWQoYSxmdW5jdGlvbihhKXtpZihhPWUuX3BhcnNlcihhKSl2b2lkIDAhPT1hLmltYWdlP2YuaW1hZ2U9YS5pbWFnZTp2b2lkIDAhPT1hLmRhdGEmJihmLmltYWdlLndpZHRoPWEud2lkdGgsZi5pbWFnZS5oZWlnaHQ9YS5oZWlnaHQsZi5pbWFnZS5kYXRhPWEuZGF0YSksZi53cmFwUz12b2lkIDAhPT1hLndyYXBTP2Eud3JhcFM6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZyxmLndyYXBUPXZvaWQgMCE9PWEud3JhcFQ/YS53cmFwVDpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLGYubWFnRmlsdGVyPXZvaWQgMCE9PWEubWFnRmlsdGVyP2EubWFnRmlsdGVyOlxuVEhSRUUuTGluZWFyRmlsdGVyLGYubWluRmlsdGVyPXZvaWQgMCE9PWEubWluRmlsdGVyP2EubWluRmlsdGVyOlRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcixmLmFuaXNvdHJvcHk9dm9pZCAwIT09YS5hbmlzb3Ryb3B5P2EuYW5pc290cm9weToxLHZvaWQgMCE9PWEuZm9ybWF0JiYoZi5mb3JtYXQ9YS5mb3JtYXQpLHZvaWQgMCE9PWEudHlwZSYmKGYudHlwZT1hLnR5cGUpLHZvaWQgMCE9PWEubWlwbWFwcyYmKGYubWlwbWFwcz1hLm1pcG1hcHMpLDE9PT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKSxmLm5lZWRzVXBkYXRlPSEwLGImJmIoZixhKX0sYyxkKTtyZXR1cm4gZn19O1RIUkVFLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyPWZ1bmN0aW9uKCl7dGhpcy5fcGFyc2VyPW51bGx9O1xuVEhSRUUuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5Db21wcmVzc2VkVGV4dHVyZUxvYWRlcixsb2FkOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLGU9W10sZj1uZXcgVEhSRUUuQ29tcHJlc3NlZFRleHR1cmU7Zi5pbWFnZT1lO3ZhciBnPW5ldyBUSFJFRS5YSFJMb2FkZXI7Zy5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtpZihhIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBoPTA7Yz1mdW5jdGlvbihjKXtnLmxvYWQoYVtjXSxmdW5jdGlvbihhKXthPWQuX3BhcnNlcihhLCEwKTtlW2NdPXt3aWR0aDphLndpZHRoLGhlaWdodDphLmhlaWdodCxmb3JtYXQ6YS5mb3JtYXQsbWlwbWFwczphLm1pcG1hcHN9O2grPTE7Nj09PWgmJigxPT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKSxmLmZvcm1hdD1hLmZvcm1hdCxmLm5lZWRzVXBkYXRlPSEwLGImJmIoZikpfSl9O2Zvcih2YXIgaz0wLGw9XG5hLmxlbmd0aDtrPGw7KytrKWMoayl9ZWxzZSBnLmxvYWQoYSxmdW5jdGlvbihhKXthPWQuX3BhcnNlcihhLCEwKTtpZihhLmlzQ3ViZW1hcClmb3IodmFyIGM9YS5taXBtYXBzLmxlbmd0aC9hLm1pcG1hcENvdW50LGc9MDtnPGM7ZysrKXtlW2ddPXttaXBtYXBzOltdfTtmb3IodmFyIGg9MDtoPGEubWlwbWFwQ291bnQ7aCsrKWVbZ10ubWlwbWFwcy5wdXNoKGEubWlwbWFwc1tnKmEubWlwbWFwQ291bnQraF0pLGVbZ10uZm9ybWF0PWEuZm9ybWF0LGVbZ10ud2lkdGg9YS53aWR0aCxlW2ddLmhlaWdodD1hLmhlaWdodH1lbHNlIGYuaW1hZ2Uud2lkdGg9YS53aWR0aCxmLmltYWdlLmhlaWdodD1hLmhlaWdodCxmLm1pcG1hcHM9YS5taXBtYXBzOzE9PT1hLm1pcG1hcENvdW50JiYoZi5taW5GaWx0ZXI9VEhSRUUuTGluZWFyRmlsdGVyKTtmLmZvcm1hdD1hLmZvcm1hdDtmLm5lZWRzVXBkYXRlPSEwO2ImJmIoZil9KTtyZXR1cm4gZn19O1xuVEhSRUUuTWF0ZXJpYWw9ZnVuY3Rpb24oKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOlRIUkVFLk1hdGVyaWFsSWRDb3VudCsrfSk7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5uYW1lPVwiXCI7dGhpcy50eXBlPVwiTWF0ZXJpYWxcIjt0aGlzLnNpZGU9VEhSRUUuRnJvbnRTaWRlO3RoaXMub3BhY2l0eT0xO3RoaXMudHJhbnNwYXJlbnQ9ITE7dGhpcy5ibGVuZGluZz1USFJFRS5Ob3JtYWxCbGVuZGluZzt0aGlzLmJsZW5kU3JjPVRIUkVFLlNyY0FscGhhRmFjdG9yO3RoaXMuYmxlbmREc3Q9VEhSRUUuT25lTWludXNTcmNBbHBoYUZhY3Rvcjt0aGlzLmJsZW5kRXF1YXRpb249VEhSRUUuQWRkRXF1YXRpb247dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGE9dGhpcy5ibGVuZERzdEFscGhhPXRoaXMuYmxlbmRTcmNBbHBoYT1udWxsO3RoaXMuY29sb3JXcml0ZT10aGlzLmRlcHRoV3JpdGU9dGhpcy5kZXB0aFRlc3Q9ITA7dGhpcy5wb2x5Z29uT2Zmc2V0PVxuITE7dGhpcy5vdmVyZHJhdz10aGlzLmFscGhhVGVzdD10aGlzLnBvbHlnb25PZmZzZXRVbml0cz10aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I9MDt0aGlzLl9uZWVkc1VwZGF0ZT10aGlzLnZpc2libGU9ITB9O1xuVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5NYXRlcmlhbCxnZXQgbmVlZHNVcGRhdGUoKXtyZXR1cm4gdGhpcy5fbmVlZHNVcGRhdGV9LHNldCBuZWVkc1VwZGF0ZShhKXshMD09PWEmJnRoaXMudXBkYXRlKCk7dGhpcy5fbmVlZHNVcGRhdGU9YX0sc2V0VmFsdWVzOmZ1bmN0aW9uKGEpe2lmKHZvaWQgMCE9PWEpZm9yKHZhciBiIGluIGEpe3ZhciBjPWFbYl07aWYodm9pZCAwPT09YylUSFJFRS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6ICdcIitiK1wiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiKTtlbHNlIGlmKGIgaW4gdGhpcyl7dmFyIGQ9dGhpc1tiXTtkIGluc3RhbmNlb2YgVEhSRUUuQ29sb3I/ZC5zZXQoYyk6ZCBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjMmJmMgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzP2QuY29weShjKTp0aGlzW2JdPVwib3ZlcmRyYXdcIj09Yj9OdW1iZXIoYyk6Y319fSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT17bWV0YWRhdGE6e3ZlcnNpb246NC40LFxudHlwZTpcIk1hdGVyaWFsXCIsZ2VuZXJhdG9yOlwiTWF0ZXJpYWwudG9KU09OXCJ9fTthLnR5cGU9dGhpcy50eXBlO2EudXVpZD10aGlzLnV1aWQ7XCJcIiE9PXRoaXMubmFtZSYmKGEubmFtZT10aGlzLm5hbWUpOzE+dGhpcy5vcGFjaXR5JiYoYS5vcGFjaXR5PXRoaXMub3BhY2l0eSk7ITEhPT10aGlzLnRyYW5zcGFyZW50JiYoYS50cmFuc3BhcmVudD10aGlzLnRyYW5zcGFyZW50KTshMSE9PXRoaXMud2lyZWZyYW1lJiYoYS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWUpO3JldHVybiBhfSxjbG9uZTpmdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTWF0ZXJpYWwpO2EubmFtZT10aGlzLm5hbWU7YS5zaWRlPXRoaXMuc2lkZTthLm9wYWNpdHk9dGhpcy5vcGFjaXR5O2EudHJhbnNwYXJlbnQ9dGhpcy50cmFuc3BhcmVudDthLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmc7YS5ibGVuZFNyYz10aGlzLmJsZW5kU3JjO2EuYmxlbmREc3Q9dGhpcy5ibGVuZERzdDthLmJsZW5kRXF1YXRpb249XG50aGlzLmJsZW5kRXF1YXRpb247YS5ibGVuZFNyY0FscGhhPXRoaXMuYmxlbmRTcmNBbHBoYTthLmJsZW5kRHN0QWxwaGE9dGhpcy5ibGVuZERzdEFscGhhO2EuYmxlbmRFcXVhdGlvbkFscGhhPXRoaXMuYmxlbmRFcXVhdGlvbkFscGhhO2EuZGVwdGhUZXN0PXRoaXMuZGVwdGhUZXN0O2EuZGVwdGhXcml0ZT10aGlzLmRlcHRoV3JpdGU7YS5wb2x5Z29uT2Zmc2V0PXRoaXMucG9seWdvbk9mZnNldDthLnBvbHlnb25PZmZzZXRGYWN0b3I9dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yO2EucG9seWdvbk9mZnNldFVuaXRzPXRoaXMucG9seWdvbk9mZnNldFVuaXRzO2EuYWxwaGFUZXN0PXRoaXMuYWxwaGFUZXN0O2Eub3ZlcmRyYXc9dGhpcy5vdmVyZHJhdzthLnZpc2libGU9dGhpcy52aXNpYmxlO3JldHVybiBhfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJ1cGRhdGVcIn0pfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fTtcblRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5NYXRlcmlhbElkQ291bnQ9MDtUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbD1mdW5jdGlvbihhKXtUSFJFRS5NYXRlcmlhbC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVCYXNpY01hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMubGluZXdpZHRoPTE7dGhpcy5saW5lam9pbj10aGlzLmxpbmVjYXA9XCJyb3VuZFwiO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMuZm9nPSEwO3RoaXMuc2V0VmFsdWVzKGEpfTtUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MaW5lQmFzaWNNYXRlcmlhbDtcblRIUkVFLkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLmxpbmV3aWR0aD10aGlzLmxpbmV3aWR0aDthLmxpbmVjYXA9dGhpcy5saW5lY2FwO2EubGluZWpvaW49dGhpcy5saW5lam9pbjthLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9yczthLmZvZz10aGlzLmZvZztyZXR1cm4gYX07XG5USFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lRGFzaGVkTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5zY2FsZT10aGlzLmxpbmV3aWR0aD0xO3RoaXMuZGFzaFNpemU9Mzt0aGlzLmdhcFNpemU9MTt0aGlzLnZlcnRleENvbG9ycz0hMTt0aGlzLmZvZz0hMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWw7XG5USFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkxpbmVEYXNoZWRNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLmxpbmV3aWR0aD10aGlzLmxpbmV3aWR0aDthLnNjYWxlPXRoaXMuc2NhbGU7YS5kYXNoU2l6ZT10aGlzLmRhc2hTaXplO2EuZ2FwU2l6ZT10aGlzLmdhcFNpemU7YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5mb2c9dGhpcy5mb2c7cmV0dXJuIGF9O1xuVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9dGhpcy5saWdodE1hcD10aGlzLm1hcD1udWxsO3RoaXMuY29tYmluZT1USFJFRS5NdWx0aXBseU9wZXJhdGlvbjt0aGlzLnJlZmxlY3Rpdml0eT0xO3RoaXMucmVmcmFjdGlvblJhdGlvPS45ODt0aGlzLmZvZz0hMDt0aGlzLnNoYWRpbmc9VEhSRUUuU21vb3RoU2hhZGluZzt0aGlzLndpcmVmcmFtZT0hMTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD0xO3RoaXMud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lY2FwPVwicm91bmRcIjt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuc2V0VmFsdWVzKGEpfTtcblRIUkVFLk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hCYXNpY01hdGVyaWFsO1xuVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EubWFwPXRoaXMubWFwO2EubGlnaHRNYXA9dGhpcy5saWdodE1hcDthLnNwZWN1bGFyTWFwPXRoaXMuc3BlY3VsYXJNYXA7YS5hbHBoYU1hcD10aGlzLmFscGhhTWFwO2EuZW52TWFwPXRoaXMuZW52TWFwO2EuY29tYmluZT10aGlzLmNvbWJpbmU7YS5yZWZsZWN0aXZpdHk9dGhpcy5yZWZsZWN0aXZpdHk7YS5yZWZyYWN0aW9uUmF0aW89dGhpcy5yZWZyYWN0aW9uUmF0aW87YS5mb2c9dGhpcy5mb2c7YS5zaGFkaW5nPXRoaXMuc2hhZGluZzthLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZTthLndpcmVmcmFtZUxpbmV3aWR0aD10aGlzLndpcmVmcmFtZUxpbmV3aWR0aDthLndpcmVmcmFtZUxpbmVjYXA9dGhpcy53aXJlZnJhbWVMaW5lY2FwO1xuYS53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVqb2luO2EudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzO2Euc2tpbm5pbmc9dGhpcy5za2lubmluZzthLm1vcnBoVGFyZ2V0cz10aGlzLm1vcnBoVGFyZ2V0cztyZXR1cm4gYX07VEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPVRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7dGhpcy52ZXJ0ZXhDb2xvcnMhPT1USFJFRS5Ob0NvbG9ycyYmKGEudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzKTt0aGlzLmJsZW5kaW5nIT09VEhSRUUuTm9ybWFsQmxlbmRpbmcmJihhLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmcpO3RoaXMuc2lkZSE9PVRIUkVFLkZyb250U2lkZSYmKGEuc2lkZT10aGlzLnNpZGUpO3JldHVybiBhfTtcblRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoTGFtYmVydE1hdGVyaWFsXCI7dGhpcy5jb2xvcj1uZXcgVEhSRUUuQ29sb3IoMTY3NzcyMTUpO3RoaXMuZW1pc3NpdmU9bmV3IFRIUkVFLkNvbG9yKDApO3RoaXMud3JhcEFyb3VuZD0hMTt0aGlzLndyYXBSR0I9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpO3RoaXMuZW52TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5zcGVjdWxhck1hcD10aGlzLmxpZ2h0TWFwPXRoaXMubWFwPW51bGw7dGhpcy5jb21iaW5lPVRIUkVFLk11bHRpcGx5T3BlcmF0aW9uO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XG5cInJvdW5kXCI7dGhpcy52ZXJ0ZXhDb2xvcnM9VEhSRUUuTm9Db2xvcnM7dGhpcy5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz0hMTt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5USFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EuZW1pc3NpdmUuY29weSh0aGlzLmVtaXNzaXZlKTthLndyYXBBcm91bmQ9dGhpcy53cmFwQXJvdW5kO2Eud3JhcFJHQi5jb3B5KHRoaXMud3JhcFJHQik7YS5tYXA9dGhpcy5tYXA7YS5saWdodE1hcD10aGlzLmxpZ2h0TWFwO2Euc3BlY3VsYXJNYXA9dGhpcy5zcGVjdWxhck1hcDthLmFscGhhTWFwPXRoaXMuYWxwaGFNYXA7YS5lbnZNYXA9dGhpcy5lbnZNYXA7YS5jb21iaW5lPXRoaXMuY29tYmluZTthLnJlZmxlY3Rpdml0eT10aGlzLnJlZmxlY3Rpdml0eTthLnJlZnJhY3Rpb25SYXRpbz10aGlzLnJlZnJhY3Rpb25SYXRpbzthLmZvZz10aGlzLmZvZzthLnNoYWRpbmc9dGhpcy5zaGFkaW5nO2Eud2lyZWZyYW1lPVxudGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7YS53aXJlZnJhbWVMaW5lY2FwPXRoaXMud2lyZWZyYW1lTGluZWNhcDthLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWpvaW47YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5za2lubmluZz10aGlzLnNraW5uaW5nO2EubW9ycGhUYXJnZXRzPXRoaXMubW9ycGhUYXJnZXRzO2EubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhOb3JtYWxzO3JldHVybiBhfTtcblRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPVRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7YS5lbWlzc2l2ZT10aGlzLmVtaXNzaXZlLmdldEhleCgpO3RoaXMudmVydGV4Q29sb3JzIT09VEhSRUUuTm9Db2xvcnMmJihhLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9ycyk7dGhpcy5zaGFkaW5nIT09VEhSRUUuU21vb3RoU2hhZGluZyYmKGEuc2hhZGluZz10aGlzLnNoYWRpbmcpO3RoaXMuYmxlbmRpbmchPT1USFJFRS5Ob3JtYWxCbGVuZGluZyYmKGEuYmxlbmRpbmc9dGhpcy5ibGVuZGluZyk7dGhpcy5zaWRlIT09VEhSRUUuRnJvbnRTaWRlJiYoYS5zaWRlPXRoaXMuc2lkZSk7cmV0dXJuIGF9O1xuVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoUGhvbmdNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KTt0aGlzLmVtaXNzaXZlPW5ldyBUSFJFRS5Db2xvcigwKTt0aGlzLnNwZWN1bGFyPW5ldyBUSFJFRS5Db2xvcigxMTE4NDgxKTt0aGlzLnNoaW5pbmVzcz0zMDt0aGlzLndyYXBBcm91bmQ9dGhpcy5tZXRhbD0hMTt0aGlzLndyYXBSR0I9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpO3RoaXMubGlnaHRNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PTE7dGhpcy5hb01hcD1udWxsO3RoaXMuYW9NYXBJbnRlbnNpdHk9MTt0aGlzLmJ1bXBNYXA9bnVsbDt0aGlzLmJ1bXBTY2FsZT0xO3RoaXMubm9ybWFsTWFwPW51bGw7dGhpcy5ub3JtYWxTY2FsZT1uZXcgVEhSRUUuVmVjdG9yMigxLDEpO3RoaXMuZW52TWFwPXRoaXMuYWxwaGFNYXA9dGhpcy5zcGVjdWxhck1hcD1cbm51bGw7dGhpcy5jb21iaW5lPVRIUkVFLk11bHRpcGx5T3BlcmF0aW9uO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMuZm9nPSEwO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMudmVydGV4Q29sb3JzPVRIUkVFLk5vQ29sb3JzO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsO1xuVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EuZW1pc3NpdmUuY29weSh0aGlzLmVtaXNzaXZlKTthLnNwZWN1bGFyLmNvcHkodGhpcy5zcGVjdWxhcik7YS5zaGluaW5lc3M9dGhpcy5zaGluaW5lc3M7YS5tZXRhbD10aGlzLm1ldGFsO2Eud3JhcEFyb3VuZD10aGlzLndyYXBBcm91bmQ7YS53cmFwUkdCLmNvcHkodGhpcy53cmFwUkdCKTthLm1hcD10aGlzLm1hcDthLmxpZ2h0TWFwPXRoaXMubGlnaHRNYXA7YS5saWdodE1hcEludGVuc2l0eT10aGlzLmxpZ2h0TWFwSW50ZW5zaXR5O2EuYW9NYXA9dGhpcy5hb01hcDthLmFvTWFwSW50ZW5zaXR5PXRoaXMuYW9NYXBJbnRlbnNpdHk7YS5idW1wTWFwPXRoaXMuYnVtcE1hcDthLmJ1bXBTY2FsZT10aGlzLmJ1bXBTY2FsZTtcbmEubm9ybWFsTWFwPXRoaXMubm9ybWFsTWFwO2Eubm9ybWFsU2NhbGUuY29weSh0aGlzLm5vcm1hbFNjYWxlKTthLnNwZWN1bGFyTWFwPXRoaXMuc3BlY3VsYXJNYXA7YS5hbHBoYU1hcD10aGlzLmFscGhhTWFwO2EuZW52TWFwPXRoaXMuZW52TWFwO2EuY29tYmluZT10aGlzLmNvbWJpbmU7YS5yZWZsZWN0aXZpdHk9dGhpcy5yZWZsZWN0aXZpdHk7YS5yZWZyYWN0aW9uUmF0aW89dGhpcy5yZWZyYWN0aW9uUmF0aW87YS5mb2c9dGhpcy5mb2c7YS5zaGFkaW5nPXRoaXMuc2hhZGluZzthLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZTthLndpcmVmcmFtZUxpbmV3aWR0aD10aGlzLndpcmVmcmFtZUxpbmV3aWR0aDthLndpcmVmcmFtZUxpbmVjYXA9dGhpcy53aXJlZnJhbWVMaW5lY2FwO2Eud2lyZWZyYW1lTGluZWpvaW49dGhpcy53aXJlZnJhbWVMaW5lam9pbjthLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9yczthLnNraW5uaW5nPXRoaXMuc2tpbm5pbmc7YS5tb3JwaFRhcmdldHM9XG50aGlzLm1vcnBoVGFyZ2V0czthLm1vcnBoTm9ybWFscz10aGlzLm1vcnBoTm9ybWFscztyZXR1cm4gYX07XG5USFJFRS5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EuY29sb3I9dGhpcy5jb2xvci5nZXRIZXgoKTthLmVtaXNzaXZlPXRoaXMuZW1pc3NpdmUuZ2V0SGV4KCk7YS5zcGVjdWxhcj10aGlzLnNwZWN1bGFyLmdldEhleCgpO2Euc2hpbmluZXNzPXRoaXMuc2hpbmluZXNzO3RoaXMudmVydGV4Q29sb3JzIT09VEhSRUUuTm9Db2xvcnMmJihhLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9ycyk7dGhpcy5zaGFkaW5nIT09VEhSRUUuU21vb3RoU2hhZGluZyYmKGEuc2hhZGluZz10aGlzLnNoYWRpbmcpO3RoaXMuYmxlbmRpbmchPT1USFJFRS5Ob3JtYWxCbGVuZGluZyYmKGEuYmxlbmRpbmc9dGhpcy5ibGVuZGluZyk7dGhpcy5zaWRlIT09VEhSRUUuRnJvbnRTaWRlJiYoYS5zaWRlPXRoaXMuc2lkZSk7cmV0dXJuIGF9O1xuVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoRGVwdGhNYXRlcmlhbFwiO3RoaXMud2lyZWZyYW1lPXRoaXMubW9ycGhUYXJnZXRzPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsO1xuVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7cmV0dXJuIGF9O1RIUkVFLk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1USFJFRS5NYXRlcmlhbC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7dGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKTt0aGlzLnNpZGUhPT1USFJFRS5Gcm9udFNpZGUmJihhLnNpZGU9dGhpcy5zaWRlKTtyZXR1cm4gYX07XG5USFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzLGEpO3RoaXMudHlwZT1cIk1lc2hOb3JtYWxNYXRlcmlhbFwiO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy5tb3JwaFRhcmdldHM9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUpO1RIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsO1xuVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWw7VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTthLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZTthLndpcmVmcmFtZUxpbmV3aWR0aD10aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtyZXR1cm4gYX07VEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1USFJFRS5NYXRlcmlhbC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7dGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKTt0aGlzLnNpZGUhPT1USFJFRS5Gcm9udFNpZGUmJihhLnNpZGU9dGhpcy5zaWRlKTtyZXR1cm4gYX07XG5USFJFRS5NZXNoRmFjZU1hdGVyaWFsPWZ1bmN0aW9uKGEpe3RoaXMudXVpZD1USFJFRS5NYXRoLmdlbmVyYXRlVVVJRCgpO3RoaXMudHlwZT1cIk1lc2hGYWNlTWF0ZXJpYWxcIjt0aGlzLm1hdGVyaWFscz1hIGluc3RhbmNlb2YgQXJyYXk/YTpbXX07XG5USFJFRS5NZXNoRmFjZU1hdGVyaWFsLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTWVzaEZhY2VNYXRlcmlhbCx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT1USFJFRS5NYXRlcmlhbC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS5tYXRlcmlhbHM9W107Zm9yKHZhciBiPTAsYz10aGlzLm1hdGVyaWFscy5sZW5ndGg7YjxjO2IrKylhLm1hdGVyaWFscy5wdXNoKHRoaXMubWF0ZXJpYWxzW2JdLnRvSlNPTigpKTtyZXR1cm4gYX0sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9bmV3IFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwsYj0wO2I8dGhpcy5tYXRlcmlhbHMubGVuZ3RoO2IrKylhLm1hdGVyaWFscy5wdXNoKHRoaXMubWF0ZXJpYWxzW2JdLmNsb25lKCkpO3JldHVybiBhfX07XG5USFJFRS5Qb2ludENsb3VkTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuTWF0ZXJpYWwuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2ludENsb3VkTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5tYXA9bnVsbDt0aGlzLnNpemU9MTt0aGlzLnNpemVBdHRlbnVhdGlvbj0hMDt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLmZvZz0hMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2ludENsb3VkTWF0ZXJpYWw7XG5USFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbDtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuY29sb3IuY29weSh0aGlzLmNvbG9yKTthLm1hcD10aGlzLm1hcDthLnNpemU9dGhpcy5zaXplO2Euc2l6ZUF0dGVudWF0aW9uPXRoaXMuc2l6ZUF0dGVudWF0aW9uO2EudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzO2EuZm9nPXRoaXMuZm9nO3JldHVybiBhfTtcblRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9VEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2Euc2l6ZT10aGlzLnNpemU7YS5zaXplQXR0ZW51YXRpb249dGhpcy5zaXplQXR0ZW51YXRpb247YS5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpO3RoaXMudmVydGV4Q29sb3JzIT09VEhSRUUuTm9Db2xvcnMmJihhLnZlcnRleENvbG9ycz10aGlzLnZlcnRleENvbG9ycyk7dGhpcy5ibGVuZGluZyE9PVRIUkVFLk5vcm1hbEJsZW5kaW5nJiYoYS5ibGVuZGluZz10aGlzLmJsZW5kaW5nKTtyZXR1cm4gYX07VEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsKGEpfTtcblRIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsKGEpfTtcblRIUkVFLlNoYWRlck1hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2hhZGVyTWF0ZXJpYWxcIjt0aGlzLmRlZmluZXM9e307dGhpcy51bmlmb3Jtcz17fTt0aGlzLmF0dHJpYnV0ZXM9bnVsbDt0aGlzLnZlcnRleFNoYWRlcj1cInZvaWQgbWFpbigpIHtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiO3RoaXMuZnJhZ21lbnRTaGFkZXI9XCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO3RoaXMuc2hhZGluZz1USFJFRS5TbW9vdGhTaGFkaW5nO3RoaXMubGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLmxpZ2h0cz10aGlzLmZvZz0hMTt0aGlzLnZlcnRleENvbG9ycz1USFJFRS5Ob0NvbG9yczt0aGlzLm1vcnBoTm9ybWFscz1cbnRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzPXtjb2xvcjpbMSwxLDFdLHV2OlswLDBdLHV2MjpbMCwwXX07dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lPXZvaWQgMDt0aGlzLnNldFZhbHVlcyhhKX07VEhSRUUuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlKTtUSFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU2hhZGVyTWF0ZXJpYWw7XG5USFJFRS5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKTtUSFJFRS5NYXRlcmlhbC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuZnJhZ21lbnRTaGFkZXI9dGhpcy5mcmFnbWVudFNoYWRlcjthLnZlcnRleFNoYWRlcj10aGlzLnZlcnRleFNoYWRlcjthLnVuaWZvcm1zPVRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUodGhpcy51bmlmb3Jtcyk7YS5hdHRyaWJ1dGVzPXRoaXMuYXR0cmlidXRlczthLmRlZmluZXM9dGhpcy5kZWZpbmVzO2Euc2hhZGluZz10aGlzLnNoYWRpbmc7YS53aXJlZnJhbWU9dGhpcy53aXJlZnJhbWU7YS53aXJlZnJhbWVMaW5ld2lkdGg9dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7YS5mb2c9dGhpcy5mb2c7YS5saWdodHM9dGhpcy5saWdodHM7YS52ZXJ0ZXhDb2xvcnM9dGhpcy52ZXJ0ZXhDb2xvcnM7YS5za2lubmluZz10aGlzLnNraW5uaW5nO2EubW9ycGhUYXJnZXRzPVxudGhpcy5tb3JwaFRhcmdldHM7YS5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaE5vcm1hbHM7cmV0dXJuIGF9O1RIUkVFLlNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1USFJFRS5NYXRlcmlhbC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS51bmlmb3Jtcz10aGlzLnVuaWZvcm1zO2EudmVydGV4U2hhZGVyPXRoaXMudmVydGV4U2hhZGVyO2EuZnJhZ21lbnRTaGFkZXI9dGhpcy5mcmFnbWVudFNoYWRlcjtyZXR1cm4gYX07VEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7VEhSRUUuU2hhZGVyTWF0ZXJpYWwuY2FsbCh0aGlzLGEpO3RoaXMudHlwZT1cIlJhd1NoYWRlck1hdGVyaWFsXCJ9O1RIUkVFLlJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLlNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlJhd1NoYWRlck1hdGVyaWFsO1xuVEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlJhd1NoYWRlck1hdGVyaWFsO1RIUkVFLlNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7cmV0dXJuIGF9O1RIUkVFLlNwcml0ZU1hdGVyaWFsPWZ1bmN0aW9uKGEpe1RIUkVFLk1hdGVyaWFsLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSk7dGhpcy5tYXA9bnVsbDt0aGlzLnJvdGF0aW9uPTA7dGhpcy5mb2c9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9O1RIUkVFLlNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZSk7VEhSRUUuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwcml0ZU1hdGVyaWFsO1xuVEhSRUUuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlNwcml0ZU1hdGVyaWFsO1RIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7YS5jb2xvci5jb3B5KHRoaXMuY29sb3IpO2EubWFwPXRoaXMubWFwO2Eucm90YXRpb249dGhpcy5yb3RhdGlvbjthLmZvZz10aGlzLmZvZztyZXR1cm4gYX07VEhSRUUuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPVRIUkVFLk1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLmNvbG9yPXRoaXMuY29sb3IuZ2V0SGV4KCk7cmV0dXJuIGF9O1xuVEhSRUUuVGV4dHVyZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpUSFJFRS5UZXh0dXJlSWRDb3VudCsrfSk7dGhpcy51dWlkPVRIUkVFLk1hdGguZ2VuZXJhdGVVVUlEKCk7dGhpcy5zb3VyY2VGaWxlPXRoaXMubmFtZT1cIlwiO3RoaXMuaW1hZ2U9dm9pZCAwIT09YT9hOlRIUkVFLlRleHR1cmUuREVGQVVMVF9JTUFHRTt0aGlzLm1pcG1hcHM9W107dGhpcy5tYXBwaW5nPXZvaWQgMCE9PWI/YjpUSFJFRS5UZXh0dXJlLkRFRkFVTFRfTUFQUElORzt0aGlzLndyYXBTPXZvaWQgMCE9PWM/YzpUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO3RoaXMud3JhcFQ9dm9pZCAwIT09ZD9kOlRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7dGhpcy5tYWdGaWx0ZXI9dm9pZCAwIT09ZT9lOlRIUkVFLkxpbmVhckZpbHRlcjt0aGlzLm1pbkZpbHRlcj12b2lkIDAhPT1mP2Y6VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO1xudGhpcy5hbmlzb3Ryb3B5PXZvaWQgMCE9PWs/azoxO3RoaXMuZm9ybWF0PXZvaWQgMCE9PWc/ZzpUSFJFRS5SR0JBRm9ybWF0O3RoaXMudHlwZT12b2lkIDAhPT1oP2g6VEhSRUUuVW5zaWduZWRCeXRlVHlwZTt0aGlzLm9mZnNldD1uZXcgVEhSRUUuVmVjdG9yMigwLDApO3RoaXMucmVwZWF0PW5ldyBUSFJFRS5WZWN0b3IyKDEsMSk7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITA7dGhpcy5wcmVtdWx0aXBseUFscGhhPSExO3RoaXMuZmxpcFk9ITA7dGhpcy51bnBhY2tBbGlnbm1lbnQ9NDt0aGlzLl9uZWVkc1VwZGF0ZT0hMTt0aGlzLm9uVXBkYXRlPW51bGx9O1RIUkVFLlRleHR1cmUuREVGQVVMVF9JTUFHRT12b2lkIDA7VEhSRUUuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc9VEhSRUUuVVZNYXBwaW5nO1xuVEhSRUUuVGV4dHVyZS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOlRIUkVFLlRleHR1cmUsZ2V0IG5lZWRzVXBkYXRlKCl7cmV0dXJuIHRoaXMuX25lZWRzVXBkYXRlfSxzZXQgbmVlZHNVcGRhdGUoYSl7ITA9PT1hJiZ0aGlzLnVwZGF0ZSgpO3RoaXMuX25lZWRzVXBkYXRlPWF9LGNsb25lOmZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5UZXh0dXJlKTthLmltYWdlPXRoaXMuaW1hZ2U7YS5taXBtYXBzPXRoaXMubWlwbWFwcy5zbGljZSgwKTthLm1hcHBpbmc9dGhpcy5tYXBwaW5nO2Eud3JhcFM9dGhpcy53cmFwUzthLndyYXBUPXRoaXMud3JhcFQ7YS5tYWdGaWx0ZXI9dGhpcy5tYWdGaWx0ZXI7YS5taW5GaWx0ZXI9dGhpcy5taW5GaWx0ZXI7YS5hbmlzb3Ryb3B5PXRoaXMuYW5pc290cm9weTthLmZvcm1hdD10aGlzLmZvcm1hdDthLnR5cGU9dGhpcy50eXBlO2Eub2Zmc2V0LmNvcHkodGhpcy5vZmZzZXQpO2EucmVwZWF0LmNvcHkodGhpcy5yZXBlYXQpO2EuZ2VuZXJhdGVNaXBtYXBzPVxudGhpcy5nZW5lcmF0ZU1pcG1hcHM7YS5wcmVtdWx0aXBseUFscGhhPXRoaXMucHJlbXVsdGlwbHlBbHBoYTthLmZsaXBZPXRoaXMuZmxpcFk7YS51bnBhY2tBbGlnbm1lbnQ9dGhpcy51bnBhY2tBbGlnbm1lbnQ7cmV0dXJuIGF9LHVwZGF0ZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcInVwZGF0ZVwifSl9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19O1RIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUuYXBwbHkoVEhSRUUuVGV4dHVyZS5wcm90b3R5cGUpO1RIUkVFLlRleHR1cmVJZENvdW50PTA7VEhSRUUuQ3ViZVRleHR1cmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2I9dm9pZCAwIT09Yj9iOlRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZztUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5pbWFnZXM9YX07XG5USFJFRS5DdWJlVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7VEhSRUUuQ3ViZVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkN1YmVUZXh0dXJlO1RIUkVFLkN1YmVUZXh0dXJlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5DdWJlVGV4dHVyZSk7VEhSRUUuVGV4dHVyZS5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO2EuaW1hZ2VzPXRoaXMuaW1hZ2VzO3JldHVybiBhfTtUSFJFRS5Db21wcmVzc2VkVGV4dHVyZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayxsLHApe1RIUkVFLlRleHR1cmUuY2FsbCh0aGlzLG51bGwsZixnLGgsayxsLGQsZSxwKTt0aGlzLmltYWdlPXt3aWR0aDpiLGhlaWdodDpjfTt0aGlzLm1pcG1hcHM9YTt0aGlzLmdlbmVyYXRlTWlwbWFwcz10aGlzLmZsaXBZPSExfTtUSFJFRS5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7XG5USFJFRS5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ29tcHJlc3NlZFRleHR1cmU7VEhSRUUuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkNvbXByZXNzZWRUZXh0dXJlO1RIUkVFLlRleHR1cmUucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07VEhSRUUuRGF0YVRleHR1cmU9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGssbCxwKXtUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxudWxsLGYsZyxoLGssbCxkLGUscCk7dGhpcy5pbWFnZT17ZGF0YTphLHdpZHRoOmIsaGVpZ2h0OmN9fTtUSFJFRS5EYXRhVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7VEhSRUUuRGF0YVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkRhdGFUZXh0dXJlO1xuVEhSRUUuRGF0YVRleHR1cmUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLkRhdGFUZXh0dXJlO1RIUkVFLlRleHR1cmUucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07VEhSRUUuVmlkZW9UZXh0dXJlPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtUSFJFRS5UZXh0dXJlLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITE7dmFyIGw9dGhpcyxwPWZ1bmN0aW9uKCl7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHApO2EucmVhZHlTdGF0ZT09PWEuSEFWRV9FTk9VR0hfREFUQSYmKGwubmVlZHNVcGRhdGU9ITApfTtwKCl9O1RIUkVFLlZpZGVvVGV4dHVyZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5UZXh0dXJlLnByb3RvdHlwZSk7VEhSRUUuVmlkZW9UZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5WaWRlb1RleHR1cmU7XG5USFJFRS5Hcm91cD1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiR3JvdXBcIn07VEhSRUUuR3JvdXAucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5Hcm91cC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3JvdXA7VEhSRUUuUG9pbnRDbG91ZD1mdW5jdGlvbihhLGIpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUG9pbnRDbG91ZFwiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5HZW9tZXRyeTt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuUG9pbnRDbG91ZE1hdGVyaWFsKHtjb2xvcjoxNjc3NzIxNSpNYXRoLnJhbmRvbSgpfSl9O1RIUkVFLlBvaW50Q2xvdWQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5Qb2ludENsb3VkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Qb2ludENsb3VkO1xuVEhSRUUuUG9pbnRDbG91ZC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5NYXRyaXg0LGI9bmV3IFRIUkVFLlJheTtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2YXIgZT10aGlzLGY9ZS5nZW9tZXRyeSxnPWMucGFyYW1zLlBvaW50Q2xvdWQudGhyZXNob2xkO2EuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTtiLmNvcHkoYy5yYXkpLmFwcGx5TWF0cml4NChhKTtpZihudWxsPT09Zi5ib3VuZGluZ0JveHx8ITEhPT1iLmlzSW50ZXJzZWN0aW9uQm94KGYuYm91bmRpbmdCb3gpKXt2YXIgaD1nLygodGhpcy5zY2FsZS54K3RoaXMuc2NhbGUueSt0aGlzLnNjYWxlLnopLzMpLGs9bmV3IFRIUkVFLlZlY3RvcjMsZz1mdW5jdGlvbihhLGYpe3ZhciBnPWIuZGlzdGFuY2VUb1BvaW50KGEpO2lmKGc8aCl7dmFyIGs9Yi5jbG9zZXN0UG9pbnRUb1BvaW50KGEpO2suYXBwbHlNYXRyaXg0KGUubWF0cml4V29ybGQpO3ZhciBtPWMucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGspO1xuZC5wdXNoKHtkaXN0YW5jZTptLGRpc3RhbmNlVG9SYXk6Zyxwb2ludDprLmNsb25lKCksaW5kZXg6ZixmYWNlOm51bGwsb2JqZWN0OmV9KX19O2lmKGYgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSl7dmFyIGw9Zi5hdHRyaWJ1dGVzLHA9bC5wb3NpdGlvbi5hcnJheTtpZih2b2lkIDAhPT1sLmluZGV4KXt2YXIgbD1sLmluZGV4LmFycmF5LG49Zi5vZmZzZXRzOzA9PT1uLmxlbmd0aCYmKG49W3tzdGFydDowLGNvdW50OmwubGVuZ3RoLGluZGV4OjB9XSk7Zm9yKHZhciBtPTAscz1uLmxlbmd0aDttPHM7KyttKWZvcih2YXIgdD1uW21dLnN0YXJ0LHI9blttXS5pbmRleCxmPXQsdD10K25bbV0uY291bnQ7Zjx0O2YrKyl7dmFyIHY9citsW2ZdO2suZnJvbUFycmF5KHAsMyp2KTtnKGssdil9fWVsc2UgZm9yKGw9cC5sZW5ndGgvMyxmPTA7ZjxsO2YrKylrLnNldChwWzMqZl0scFszKmYrMV0scFszKmYrMl0pLGcoayxmKX1lbHNlIGZvcihrPXRoaXMuZ2VvbWV0cnkudmVydGljZXMsXG5mPTA7ZjxrLmxlbmd0aDtmKyspZyhrW2ZdLGYpfX19KCk7VEhSRUUuUG9pbnRDbG91ZC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLlBvaW50Q2xvdWQodGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07XG5USFJFRS5Qb2ludENsb3VkLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7dmFyIGI9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7dm9pZCAwPT09YS5nZW9tZXRyaWVzW3RoaXMuZ2VvbWV0cnkudXVpZF0mJihhLmdlb21ldHJpZXNbdGhpcy5nZW9tZXRyeS51dWlkXT10aGlzLmdlb21ldHJ5LnRvSlNPTigpKTt2b2lkIDA9PT1hLm1hdGVyaWFsc1t0aGlzLm1hdGVyaWFsLnV1aWRdJiYoYS5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbC51dWlkXT10aGlzLm1hdGVyaWFsLnRvSlNPTigpKTtiLm9iamVjdC5nZW9tZXRyeT10aGlzLmdlb21ldHJ5LnV1aWQ7Yi5vYmplY3QubWF0ZXJpYWw9dGhpcy5tYXRlcmlhbC51dWlkO3JldHVybiBifTtcblRIUkVFLlBhcnRpY2xlU3lzdGVtPWZ1bmN0aW9uKGEsYil7VEhSRUUud2FybihcIlRIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRDbG91ZC5cIik7cmV0dXJuIG5ldyBUSFJFRS5Qb2ludENsb3VkKGEsYil9O1RIUkVFLkxpbmU9ZnVuY3Rpb24oYSxiLGMpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGluZVwiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5HZW9tZXRyeTt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWI/YjpuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KTt0aGlzLm1vZGU9dm9pZCAwIT09Yz9jOlRIUkVFLkxpbmVTdHJpcH07VEhSRUUuTGluZVN0cmlwPTA7VEhSRUUuTGluZVBpZWNlcz0xO1RIUkVFLkxpbmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcblRIUkVFLkxpbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkxpbmU7XG5USFJFRS5MaW5lLnByb3RvdHlwZS5yYXljYXN0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQsYj1uZXcgVEhSRUUuUmF5LGM9bmV3IFRIUkVFLlNwaGVyZTtyZXR1cm4gZnVuY3Rpb24oZCxlKXt2YXIgZj1kLmxpbmVQcmVjaXNpb24sZj1mKmYsZz10aGlzLmdlb21ldHJ5O251bGw9PT1nLmJvdW5kaW5nU3BoZXJlJiZnLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2MuY29weShnLmJvdW5kaW5nU3BoZXJlKTtjLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTtpZighMSE9PWQucmF5LmlzSW50ZXJzZWN0aW9uU3BoZXJlKGMpKXthLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCk7Yi5jb3B5KGQucmF5KS5hcHBseU1hdHJpeDQoYSk7dmFyIGg9bmV3IFRIUkVFLlZlY3RvcjMsaz1uZXcgVEhSRUUuVmVjdG9yMyxsPW5ldyBUSFJFRS5WZWN0b3IzLHA9bmV3IFRIUkVFLlZlY3RvcjMsbj10aGlzLm1vZGU9PT1USFJFRS5MaW5lU3RyaXA/MToyO2lmKGcgaW5zdGFuY2VvZlxuVEhSRUUuQnVmZmVyR2VvbWV0cnkpe3ZhciBtPWcuYXR0cmlidXRlcztpZih2b2lkIDAhPT1tLmluZGV4KXt2YXIgcz1tLmluZGV4LmFycmF5LG09bS5wb3NpdGlvbi5hcnJheSx0PWcub2Zmc2V0czswPT09dC5sZW5ndGgmJih0PVt7c3RhcnQ6MCxjb3VudDpzLmxlbmd0aCxpbmRleDowfV0pO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWZvcih2YXIgdj10W3JdLnN0YXJ0LHU9dFtyXS5jb3VudCx4PXRbcl0uaW5kZXgsZz12O2c8dit1LTE7Zys9bil7dmFyIHo9eCtzW2crMV07aC5mcm9tQXJyYXkobSwzKih4K3NbZ10pKTtrLmZyb21BcnJheShtLDMqeik7ej1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoaCxrLHAsbCk7ej5mfHwoej1iLm9yaWdpbi5kaXN0YW5jZVRvKHApLHo8ZC5uZWFyfHx6PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnoscG9pbnQ6bC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpnLG9mZnNldEluZGV4OnIsZmFjZTpudWxsLGZhY2VJbmRleDpudWxsLFxub2JqZWN0OnRoaXN9KSl9fWVsc2UgZm9yKG09bS5wb3NpdGlvbi5hcnJheSxnPTA7ZzxtLmxlbmd0aC8zLTE7Zys9biloLmZyb21BcnJheShtLDMqZyksay5mcm9tQXJyYXkobSwzKmcrMyksej1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoaCxrLHAsbCksej5mfHwoej1iLm9yaWdpbi5kaXN0YW5jZVRvKHApLHo8ZC5uZWFyfHx6PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnoscG9pbnQ6bC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX1lbHNlIGlmKGcgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlmb3IoaD1nLnZlcnRpY2VzLGs9aC5sZW5ndGgsZz0wO2c8ay0xO2crPW4pej1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoaFtnXSxoW2crMV0scCxsKSx6PmZ8fCh6PWIub3JpZ2luLmRpc3RhbmNlVG8ocCksejxkLm5lYXJ8fHo+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6eixwb2ludDpsLmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxuaW5kZXg6ZyxmYWNlOm51bGwsZmFjZUluZGV4Om51bGwsb2JqZWN0OnRoaXN9KSl9fX0oKTtUSFJFRS5MaW5lLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuTGluZSh0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwsdGhpcy5tb2RlKSk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07XG5USFJFRS5MaW5lLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7dmFyIGI9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7Yi5vYmplY3QubW9kZT10aGlzLm1vZGU7dm9pZCAwPT09YS5nZW9tZXRyaWVzW3RoaXMuZ2VvbWV0cnkudXVpZF0mJihhLmdlb21ldHJpZXNbdGhpcy5nZW9tZXRyeS51dWlkXT10aGlzLmdlb21ldHJ5LnRvSlNPTigpKTt2b2lkIDA9PT1hLm1hdGVyaWFsc1t0aGlzLm1hdGVyaWFsLnV1aWRdJiYoYS5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbC51dWlkXT10aGlzLm1hdGVyaWFsLnRvSlNPTigpKTtiLm9iamVjdC5nZW9tZXRyeT10aGlzLmdlb21ldHJ5LnV1aWQ7Yi5vYmplY3QubWF0ZXJpYWw9dGhpcy5tYXRlcmlhbC51dWlkO3JldHVybiBifTtcblRIUkVFLk1lc2g9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hcIjt0aGlzLmdlb21ldHJ5PXZvaWQgMCE9PWE/YTpuZXcgVEhSRUUuR2VvbWV0cnk7dGhpcy5tYXRlcmlhbD12b2lkIDAhPT1iP2I6bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjoxNjc3NzIxNSpNYXRoLnJhbmRvbSgpfSk7dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKX07VEhSRUUuTWVzaC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLk1lc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLk1lc2g7XG5USFJFRS5NZXNoLnByb3RvdHlwZS51cGRhdGVNb3JwaFRhcmdldHM9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyYmMDx0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgpe3RoaXMubW9ycGhUYXJnZXRCYXNlPS0xO3RoaXMubW9ycGhUYXJnZXRGb3JjZWRPcmRlcj1bXTt0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcz1bXTt0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeT17fTtmb3IodmFyIGE9MCxiPXRoaXMuZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aDthPGI7YSsrKXRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goMCksdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbdGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHNbYV0ubmFtZV09YX19O1xuVEhSRUUuTWVzaC5wcm90b3R5cGUuZ2V0TW9ycGhUYXJnZXRJbmRleEJ5TmFtZT1mdW5jdGlvbihhKXtpZih2b2lkIDAhPT10aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVthXSlyZXR1cm4gdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbYV07VEhSRUUud2FybihcIlRIUkVFLk1lc2guZ2V0TW9ycGhUYXJnZXRJbmRleEJ5TmFtZTogbW9ycGggdGFyZ2V0IFwiK2ErXCIgZG9lcyBub3QgZXhpc3QuIFJldHVybmluZyAwLlwiKTtyZXR1cm4gMH07XG5USFJFRS5NZXNoLnByb3RvdHlwZS5yYXljYXN0PWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQsYj1uZXcgVEhSRUUuUmF5LGM9bmV3IFRIUkVFLlNwaGVyZSxkPW5ldyBUSFJFRS5WZWN0b3IzLGU9bmV3IFRIUkVFLlZlY3RvcjMsZj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZyxoKXt2YXIgaz10aGlzLmdlb21ldHJ5O251bGw9PT1rLmJvdW5kaW5nU3BoZXJlJiZrLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2MuY29weShrLmJvdW5kaW5nU3BoZXJlKTtjLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTtpZighMSE9PWcucmF5LmlzSW50ZXJzZWN0aW9uU3BoZXJlKGMpJiYoYS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpLGIuY29weShnLnJheSkuYXBwbHlNYXRyaXg0KGEpLG51bGw9PT1rLmJvdW5kaW5nQm94fHwhMSE9PWIuaXNJbnRlcnNlY3Rpb25Cb3goay5ib3VuZGluZ0JveCkpKWlmKGsgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSl7dmFyIGw9XG50aGlzLm1hdGVyaWFsO2lmKHZvaWQgMCE9PWwpe3ZhciBwPWsuYXR0cmlidXRlcyxuLG0scz1nLnByZWNpc2lvbjtpZih2b2lkIDAhPT1wLmluZGV4KXt2YXIgdD1wLmluZGV4LmFycmF5LHI9cC5wb3NpdGlvbi5hcnJheSx2PWsub2Zmc2V0czswPT09di5sZW5ndGgmJih2PVt7c3RhcnQ6MCxjb3VudDp0Lmxlbmd0aCxpbmRleDowfV0pO2Zvcih2YXIgdT0wLHg9di5sZW5ndGg7dTx4OysrdSlmb3IodmFyIHA9dlt1XS5zdGFydCx6PXZbdV0uaW5kZXgsaz1wLHc9cCt2W3VdLmNvdW50O2s8dztrKz0zKXtwPXordFtrXTtuPXordFtrKzFdO209eit0W2srMl07ZC5mcm9tQXJyYXkociwzKnApO2UuZnJvbUFycmF5KHIsMypuKTtmLmZyb21BcnJheShyLDMqbSk7dmFyIEY9bC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yi5pbnRlcnNlY3RUcmlhbmdsZShmLGUsZCwhMCk6Yi5pbnRlcnNlY3RUcmlhbmdsZShkLGUsZixsLnNpZGUhPT1USFJFRS5Eb3VibGVTaWRlKTtpZihudWxsIT09Ril7Ri5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XG52YXIgRz1nLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhGKTtHPHN8fEc8Zy5uZWFyfHxHPmcuZmFyfHxoLnB1c2goe2Rpc3RhbmNlOkcscG9pbnQ6RixmYWNlOm5ldyBUSFJFRS5GYWNlMyhwLG4sbSxUSFJFRS5UcmlhbmdsZS5ub3JtYWwoZCxlLGYpKSxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pfX19ZWxzZSBmb3Iocj1wLnBvc2l0aW9uLmFycmF5LHQ9az0wLHc9ci5sZW5ndGg7azx3O2srPTMsdCs9OSlwPWssbj1rKzEsbT1rKzIsZC5mcm9tQXJyYXkocix0KSxlLmZyb21BcnJheShyLHQrMyksZi5mcm9tQXJyYXkocix0KzYpLEY9bC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yi5pbnRlcnNlY3RUcmlhbmdsZShmLGUsZCwhMCk6Yi5pbnRlcnNlY3RUcmlhbmdsZShkLGUsZixsLnNpZGUhPT1USFJFRS5Eb3VibGVTaWRlKSxudWxsIT09RiYmKEYuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLEc9Zy5yYXkub3JpZ2luLmRpc3RhbmNlVG8oRiksRzxzfHxHPGcubmVhcnx8Rz5cbmcuZmFyfHxoLnB1c2goe2Rpc3RhbmNlOkcscG9pbnQ6RixmYWNlOm5ldyBUSFJFRS5GYWNlMyhwLG4sbSxUSFJFRS5UcmlhbmdsZS5ub3JtYWwoZCxlLGYpKSxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX19ZWxzZSBpZihrIGluc3RhbmNlb2YgVEhSRUUuR2VvbWV0cnkpZm9yKHQ9dGhpcy5tYXRlcmlhbCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwscj0hMD09PXQ/dGhpcy5tYXRlcmlhbC5tYXRlcmlhbHM6bnVsbCxzPWcucHJlY2lzaW9uLHY9ay52ZXJ0aWNlcyx1PTAseD1rLmZhY2VzLmxlbmd0aDt1PHg7dSsrKWlmKHo9ay5mYWNlc1t1XSxsPSEwPT09dD9yW3oubWF0ZXJpYWxJbmRleF06dGhpcy5tYXRlcmlhbCx2b2lkIDAhPT1sKXtwPXZbei5hXTtuPXZbei5iXTttPXZbei5jXTtpZighMD09PWwubW9ycGhUYXJnZXRzKXtGPWsubW9ycGhUYXJnZXRzO0c9dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM7ZC5zZXQoMCwwLDApO2Uuc2V0KDAsMCwwKTtmLnNldCgwLFxuMCwwKTtmb3IodmFyIHc9MCx5PUYubGVuZ3RoO3c8eTt3Kyspe3ZhciBJPUdbd107aWYoMCE9PUkpe3ZhciBCPUZbd10udmVydGljZXM7ZC54Kz0oQlt6LmFdLngtcC54KSpJO2QueSs9KEJbei5hXS55LXAueSkqSTtkLnorPShCW3ouYV0uei1wLnopKkk7ZS54Kz0oQlt6LmJdLngtbi54KSpJO2UueSs9KEJbei5iXS55LW4ueSkqSTtlLnorPShCW3ouYl0uei1uLnopKkk7Zi54Kz0oQlt6LmNdLngtbS54KSpJO2YueSs9KEJbei5jXS55LW0ueSkqSTtmLnorPShCW3ouY10uei1tLnopKkl9fWQuYWRkKHApO2UuYWRkKG4pO2YuYWRkKG0pO3A9ZDtuPWU7bT1mfUY9bC5zaWRlPT09VEhSRUUuQmFja1NpZGU/Yi5pbnRlcnNlY3RUcmlhbmdsZShtLG4scCwhMCk6Yi5pbnRlcnNlY3RUcmlhbmdsZShwLG4sbSxsLnNpZGUhPT1USFJFRS5Eb3VibGVTaWRlKTtudWxsIT09RiYmKEYuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLEc9Zy5yYXkub3JpZ2luLmRpc3RhbmNlVG8oRiksRzxzfHxcbkc8Zy5uZWFyfHxHPmcuZmFyfHxoLnB1c2goe2Rpc3RhbmNlOkcscG9pbnQ6RixmYWNlOnosZmFjZUluZGV4OnUsb2JqZWN0OnRoaXN9KSl9fX0oKTtUSFJFRS5NZXNoLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCkpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSxiKTtyZXR1cm4gYX07XG5USFJFRS5NZXNoLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7dmFyIGI9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7dm9pZCAwPT09YS5nZW9tZXRyaWVzW3RoaXMuZ2VvbWV0cnkudXVpZF0mJihhLmdlb21ldHJpZXNbdGhpcy5nZW9tZXRyeS51dWlkXT10aGlzLmdlb21ldHJ5LnRvSlNPTigpKTt2b2lkIDA9PT1hLm1hdGVyaWFsc1t0aGlzLm1hdGVyaWFsLnV1aWRdJiYoYS5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbC51dWlkXT10aGlzLm1hdGVyaWFsLnRvSlNPTigpKTtiLm9iamVjdC5nZW9tZXRyeT10aGlzLmdlb21ldHJ5LnV1aWQ7Yi5vYmplY3QubWF0ZXJpYWw9dGhpcy5tYXRlcmlhbC51dWlkO3JldHVybiBifTtUSFJFRS5Cb25lPWZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQm9uZVwiO3RoaXMuc2tpbj1hfTtUSFJFRS5Cb25lLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7XG5USFJFRS5Cb25lLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb25lO1xuVEhSRUUuU2tlbGV0b249ZnVuY3Rpb24oYSxiLGMpe3RoaXMudXNlVmVydGV4VGV4dHVyZT12b2lkIDAhPT1jP2M6ITA7dGhpcy5pZGVudGl0eU1hdHJpeD1uZXcgVEhSRUUuTWF0cml4NDthPWF8fFtdO3RoaXMuYm9uZXM9YS5zbGljZSgwKTt0aGlzLnVzZVZlcnRleFRleHR1cmU/KHRoaXMuYm9uZVRleHR1cmVIZWlnaHQ9dGhpcy5ib25lVGV4dHVyZVdpZHRoPWE9MjU2PHRoaXMuYm9uZXMubGVuZ3RoPzY0OjY0PHRoaXMuYm9uZXMubGVuZ3RoPzMyOjE2PHRoaXMuYm9uZXMubGVuZ3RoPzE2OjgsdGhpcy5ib25lTWF0cmljZXM9bmV3IEZsb2F0MzJBcnJheSh0aGlzLmJvbmVUZXh0dXJlV2lkdGgqdGhpcy5ib25lVGV4dHVyZUhlaWdodCo0KSx0aGlzLmJvbmVUZXh0dXJlPW5ldyBUSFJFRS5EYXRhVGV4dHVyZSh0aGlzLmJvbmVNYXRyaWNlcyx0aGlzLmJvbmVUZXh0dXJlV2lkdGgsdGhpcy5ib25lVGV4dHVyZUhlaWdodCxUSFJFRS5SR0JBRm9ybWF0LFRIUkVFLkZsb2F0VHlwZSksXG50aGlzLmJvbmVUZXh0dXJlLm1pbkZpbHRlcj1USFJFRS5OZWFyZXN0RmlsdGVyLHRoaXMuYm9uZVRleHR1cmUubWFnRmlsdGVyPVRIUkVFLk5lYXJlc3RGaWx0ZXIsdGhpcy5ib25lVGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM9ITEsdGhpcy5ib25lVGV4dHVyZS5mbGlwWT0hMSk6dGhpcy5ib25lTWF0cmljZXM9bmV3IEZsb2F0MzJBcnJheSgxNip0aGlzLmJvbmVzLmxlbmd0aCk7aWYodm9pZCAwPT09Yil0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7ZWxzZSBpZih0aGlzLmJvbmVzLmxlbmd0aD09PWIubGVuZ3RoKXRoaXMuYm9uZUludmVyc2VzPWIuc2xpY2UoMCk7ZWxzZSBmb3IoVEhSRUUud2FybihcIlRIUkVFLlNrZWxldG9uIGJvbkludmVyc2VzIGlzIHRoZSB3cm9uZyBsZW5ndGguXCIpLHRoaXMuYm9uZUludmVyc2VzPVtdLGI9MCxhPXRoaXMuYm9uZXMubGVuZ3RoO2I8YTtiKyspdGhpcy5ib25lSW52ZXJzZXMucHVzaChuZXcgVEhSRUUuTWF0cml4NCl9O1xuVEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLmNhbGN1bGF0ZUludmVyc2VzPWZ1bmN0aW9uKCl7dGhpcy5ib25lSW52ZXJzZXM9W107Zm9yKHZhciBhPTAsYj10aGlzLmJvbmVzLmxlbmd0aDthPGI7YSsrKXt2YXIgYz1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLmJvbmVzW2FdJiZjLmdldEludmVyc2UodGhpcy5ib25lc1thXS5tYXRyaXhXb3JsZCk7dGhpcy5ib25lSW52ZXJzZXMucHVzaChjKX19O1xuVEhSRUUuU2tlbGV0b24ucHJvdG90eXBlLnBvc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wLGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKykoYT10aGlzLmJvbmVzW2JdKSYmYS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKHRoaXMuYm9uZUludmVyc2VzW2JdKTtiPTA7Zm9yKGM9dGhpcy5ib25lcy5sZW5ndGg7YjxjO2IrKylpZihhPXRoaXMuYm9uZXNbYl0pYS5wYXJlbnQ/KGEubWF0cml4LmdldEludmVyc2UoYS5wYXJlbnQubWF0cml4V29ybGQpLGEubWF0cml4Lm11bHRpcGx5KGEubWF0cml4V29ybGQpKTphLm1hdHJpeC5jb3B5KGEubWF0cml4V29ybGQpLGEubWF0cml4LmRlY29tcG9zZShhLnBvc2l0aW9uLGEucXVhdGVybmlvbixhLnNjYWxlKX07XG5USFJFRS5Ta2VsZXRvbi5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLk1hdHJpeDQ7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsYz10aGlzLmJvbmVzLmxlbmd0aDtiPGM7YisrKWEubXVsdGlwbHlNYXRyaWNlcyh0aGlzLmJvbmVzW2JdP3RoaXMuYm9uZXNbYl0ubWF0cml4V29ybGQ6dGhpcy5pZGVudGl0eU1hdHJpeCx0aGlzLmJvbmVJbnZlcnNlc1tiXSksYS5mbGF0dGVuVG9BcnJheU9mZnNldCh0aGlzLmJvbmVNYXRyaWNlcywxNipiKTt0aGlzLnVzZVZlcnRleFRleHR1cmUmJih0aGlzLmJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlPSEwKX19KCk7XG5USFJFRS5Ta2lubmVkTWVzaD1mdW5jdGlvbihhLGIsYyl7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJTa2lubmVkTWVzaFwiO3RoaXMuYmluZE1vZGU9XCJhdHRhY2hlZFwiO3RoaXMuYmluZE1hdHJpeD1uZXcgVEhSRUUuTWF0cml4NDt0aGlzLmJpbmRNYXRyaXhJbnZlcnNlPW5ldyBUSFJFRS5NYXRyaXg0O2E9W107aWYodGhpcy5nZW9tZXRyeSYmdm9pZCAwIT09dGhpcy5nZW9tZXRyeS5ib25lcyl7Zm9yKHZhciBkLGUsZixnLGg9MCxrPXRoaXMuZ2VvbWV0cnkuYm9uZXMubGVuZ3RoO2g8azsrK2gpZD10aGlzLmdlb21ldHJ5LmJvbmVzW2hdLGU9ZC5wb3MsZj1kLnJvdHEsZz1kLnNjbCxiPW5ldyBUSFJFRS5Cb25lKHRoaXMpLGEucHVzaChiKSxiLm5hbWU9ZC5uYW1lLGIucG9zaXRpb24uc2V0KGVbMF0sZVsxXSxlWzJdKSxiLnF1YXRlcm5pb24uc2V0KGZbMF0sZlsxXSxmWzJdLGZbM10pLHZvaWQgMCE9PWc/Yi5zY2FsZS5zZXQoZ1swXSxnWzFdLGdbMl0pOmIuc2NhbGUuc2V0KDEsXG4xLDEpO2g9MDtmb3Ioaz10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtoPGs7KytoKWQ9dGhpcy5nZW9tZXRyeS5ib25lc1toXSwtMSE9PWQucGFyZW50P2FbZC5wYXJlbnRdLmFkZChhW2hdKTp0aGlzLmFkZChhW2hdKX10aGlzLm5vcm1hbGl6ZVNraW5XZWlnaHRzKCk7dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7dGhpcy5iaW5kKG5ldyBUSFJFRS5Ta2VsZXRvbihhLHZvaWQgMCxjKSl9O1RIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Ta2lubmVkTWVzaC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU2tpbm5lZE1lc2g7VEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYSxiKXt0aGlzLnNrZWxldG9uPWE7dm9pZCAwPT09YiYmKHRoaXMudXBkYXRlTWF0cml4V29ybGQoITApLGI9dGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5iaW5kTWF0cml4LmNvcHkoYik7dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKGIpfTtcblRIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZS5wb3NlPWZ1bmN0aW9uKCl7dGhpcy5za2VsZXRvbi5wb3NlKCl9O1RIUkVFLlNraW5uZWRNZXNoLnByb3RvdHlwZS5ub3JtYWxpemVTa2luV2VpZ2h0cz1mdW5jdGlvbigpe2lmKHRoaXMuZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5HZW9tZXRyeSlmb3IodmFyIGE9MDthPHRoaXMuZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoO2ErKyl7dmFyIGI9dGhpcy5nZW9tZXRyeS5za2luV2VpZ2h0c1thXSxjPTEvYi5sZW5ndGhNYW5oYXR0YW4oKTtJbmZpbml0eSE9PWM/Yi5tdWx0aXBseVNjYWxhcihjKTpiLnNldCgxKX19O1xuVEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKGEpe1RIUkVFLk1lc2gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcywhMCk7XCJhdHRhY2hlZFwiPT09dGhpcy5iaW5kTW9kZT90aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCk6XCJkZXRhY2hlZFwiPT09dGhpcy5iaW5kTW9kZT90aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UodGhpcy5iaW5kTWF0cml4KTpUSFJFRS53YXJuKFwiVEhSRUUuU2tpbm5lZE1lc2ggdW5yZWNrb2duaXplZCBiaW5kTW9kZTogXCIrdGhpcy5iaW5kTW9kZSl9O1xuVEhSRUUuU2tpbm5lZE1lc2gucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5Ta2lubmVkTWVzaCh0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwsdGhpcy51c2VWZXJ0ZXhUZXh0dXJlKSk7VEhSRUUuTWVzaC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzLGEpO3JldHVybiBhfTtUSFJFRS5Nb3JwaEFuaW1NZXNoPWZ1bmN0aW9uKGEsYil7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJNb3JwaEFuaW1NZXNoXCI7dGhpcy5kdXJhdGlvbj0xRTM7dGhpcy5taXJyb3JlZExvb3A9ITE7dGhpcy5jdXJyZW50S2V5ZnJhbWU9dGhpcy5sYXN0S2V5ZnJhbWU9dGhpcy50aW1lPTA7dGhpcy5kaXJlY3Rpb249MTt0aGlzLmRpcmVjdGlvbkJhY2t3YXJkcz0hMTt0aGlzLnNldEZyYW1lUmFuZ2UoMCx0aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgtMSl9O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWVzaC5wcm90b3R5cGUpO1xuVEhSRUUuTW9ycGhBbmltTWVzaC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTW9ycGhBbmltTWVzaDtUSFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5zZXRGcmFtZVJhbmdlPWZ1bmN0aW9uKGEsYil7dGhpcy5zdGFydEtleWZyYW1lPWE7dGhpcy5lbmRLZXlmcmFtZT1iO3RoaXMubGVuZ3RoPXRoaXMuZW5kS2V5ZnJhbWUtdGhpcy5zdGFydEtleWZyYW1lKzF9O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnNldERpcmVjdGlvbkZvcndhcmQ9ZnVuY3Rpb24oKXt0aGlzLmRpcmVjdGlvbj0xO3RoaXMuZGlyZWN0aW9uQmFja3dhcmRzPSExfTtUSFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5zZXREaXJlY3Rpb25CYWNrd2FyZD1mdW5jdGlvbigpe3RoaXMuZGlyZWN0aW9uPS0xO3RoaXMuZGlyZWN0aW9uQmFja3dhcmRzPSEwfTtcblRIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnBhcnNlQW5pbWF0aW9ucz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2VvbWV0cnk7YS5hbmltYXRpb25zfHwoYS5hbmltYXRpb25zPXt9KTtmb3IodmFyIGIsYz1hLmFuaW1hdGlvbnMsZD0vKFthLXpdKylfPyhcXGQrKS8sZT0wLGY9YS5tb3JwaFRhcmdldHMubGVuZ3RoO2U8ZjtlKyspe3ZhciBnPWEubW9ycGhUYXJnZXRzW2VdLm5hbWUubWF0Y2goZCk7aWYoZyYmMTxnLmxlbmd0aCl7Zz1nWzFdO2NbZ118fChjW2ddPXtzdGFydDpJbmZpbml0eSxlbmQ6LUluZmluaXR5fSk7dmFyIGg9Y1tnXTtlPGguc3RhcnQmJihoLnN0YXJ0PWUpO2U+aC5lbmQmJihoLmVuZD1lKTtifHwoYj1nKX19YS5maXJzdEFuaW1hdGlvbj1ifTtcblRIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbkxhYmVsPWZ1bmN0aW9uKGEsYixjKXt0aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnN8fCh0aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnM9e30pO3RoaXMuZ2VvbWV0cnkuYW5pbWF0aW9uc1thXT17c3RhcnQ6YixlbmQ6Y319O1RIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnBsYXlBbmltYXRpb249ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdlb21ldHJ5LmFuaW1hdGlvbnNbYV07Yz8odGhpcy5zZXRGcmFtZVJhbmdlKGMuc3RhcnQsYy5lbmQpLHRoaXMuZHVyYXRpb249KGMuZW5kLWMuc3RhcnQpL2IqMUUzLHRoaXMudGltZT0wKTpUSFJFRS53YXJuKFwiVEhSRUUuTW9ycGhBbmltTWVzaDogYW5pbWF0aW9uW1wiK2ErXCJdIHVuZGVmaW5lZCBpbiAucGxheUFuaW1hdGlvbigpXCIpfTtcblRIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLnVwZGF0ZUFuaW1hdGlvbj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmR1cmF0aW9uL3RoaXMubGVuZ3RoO3RoaXMudGltZSs9dGhpcy5kaXJlY3Rpb24qYTtpZih0aGlzLm1pcnJvcmVkTG9vcCl7aWYodGhpcy50aW1lPnRoaXMuZHVyYXRpb258fDA+dGhpcy50aW1lKXRoaXMuZGlyZWN0aW9uKj0tMSx0aGlzLnRpbWU+dGhpcy5kdXJhdGlvbiYmKHRoaXMudGltZT10aGlzLmR1cmF0aW9uLHRoaXMuZGlyZWN0aW9uQmFja3dhcmRzPSEwKSwwPnRoaXMudGltZSYmKHRoaXMudGltZT0wLHRoaXMuZGlyZWN0aW9uQmFja3dhcmRzPSExKX1lbHNlIHRoaXMudGltZSU9dGhpcy5kdXJhdGlvbiwwPnRoaXMudGltZSYmKHRoaXMudGltZSs9dGhpcy5kdXJhdGlvbik7YT10aGlzLnN0YXJ0S2V5ZnJhbWUrVEhSRUUuTWF0aC5jbGFtcChNYXRoLmZsb29yKHRoaXMudGltZS9iKSwwLHRoaXMubGVuZ3RoLTEpO2EhPT10aGlzLmN1cnJlbnRLZXlmcmFtZSYmXG4odGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbdGhpcy5sYXN0S2V5ZnJhbWVdPTAsdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbdGhpcy5jdXJyZW50S2V5ZnJhbWVdPTEsdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbYV09MCx0aGlzLmxhc3RLZXlmcmFtZT10aGlzLmN1cnJlbnRLZXlmcmFtZSx0aGlzLmN1cnJlbnRLZXlmcmFtZT1hKTtiPXRoaXMudGltZSViL2I7dGhpcy5kaXJlY3Rpb25CYWNrd2FyZHMmJihiPTEtYik7dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbdGhpcy5jdXJyZW50S2V5ZnJhbWVdPWI7dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbdGhpcy5sYXN0S2V5ZnJhbWVdPTEtYn07XG5USFJFRS5Nb3JwaEFuaW1NZXNoLnByb3RvdHlwZS5pbnRlcnBvbGF0ZVRhcmdldHM9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD10aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyxlPTAsZj1kLmxlbmd0aDtlPGY7ZSsrKWRbZV09MDstMTxhJiYoZFthXT0xLWMpOy0xPGImJihkW2JdPWMpfTtcblRIUkVFLk1vcnBoQW5pbU1lc2gucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5Nb3JwaEFuaW1NZXNoKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCkpO2EuZHVyYXRpb249dGhpcy5kdXJhdGlvbjthLm1pcnJvcmVkTG9vcD10aGlzLm1pcnJvcmVkTG9vcDthLnRpbWU9dGhpcy50aW1lO2EubGFzdEtleWZyYW1lPXRoaXMubGFzdEtleWZyYW1lO2EuY3VycmVudEtleWZyYW1lPXRoaXMuY3VycmVudEtleWZyYW1lO2EuZGlyZWN0aW9uPXRoaXMuZGlyZWN0aW9uO2EuZGlyZWN0aW9uQmFja3dhcmRzPXRoaXMuZGlyZWN0aW9uQmFja3dhcmRzO1RIUkVFLk1lc2gucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtyZXR1cm4gYX07VEhSRUUuTE9EPWZ1bmN0aW9uKCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLm9iamVjdHM9W119O1RIUkVFLkxPRC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1xuVEhSRUUuTE9ELnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5MT0Q7VEhSRUUuTE9ELnByb3RvdHlwZS5hZGRMZXZlbD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO2I9TWF0aC5hYnMoYik7Zm9yKHZhciBjPTA7Yzx0aGlzLm9iamVjdHMubGVuZ3RoJiYhKGI8dGhpcy5vYmplY3RzW2NdLmRpc3RhbmNlKTtjKyspO3RoaXMub2JqZWN0cy5zcGxpY2UoYywwLHtkaXN0YW5jZTpiLG9iamVjdDphfSk7dGhpcy5hZGQoYSl9O1RIUkVFLkxPRC5wcm90b3R5cGUuZ2V0T2JqZWN0Rm9yRGlzdGFuY2U9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTEsYz10aGlzLm9iamVjdHMubGVuZ3RoO2I8YyYmIShhPHRoaXMub2JqZWN0c1tiXS5kaXN0YW5jZSk7YisrKTtyZXR1cm4gdGhpcy5vYmplY3RzW2ItMV0ub2JqZWN0fTtcblRIUkVFLkxPRC5wcm90b3R5cGUucmF5Y2FzdD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3ZhciBkPWIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGEpO3RoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoZCkucmF5Y2FzdChiLGMpfX0oKTtcblRIUkVFLkxPRC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjMsYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYyl7aWYoMTx0aGlzLm9iamVjdHMubGVuZ3RoKXthLnNldEZyb21NYXRyaXhQb3NpdGlvbihjLm1hdHJpeFdvcmxkKTtiLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKTtjPWEuZGlzdGFuY2VUbyhiKTt0aGlzLm9iamVjdHNbMF0ub2JqZWN0LnZpc2libGU9ITA7Zm9yKHZhciBkPTEsZT10aGlzLm9iamVjdHMubGVuZ3RoO2Q8ZTtkKyspaWYoYz49dGhpcy5vYmplY3RzW2RdLmRpc3RhbmNlKXRoaXMub2JqZWN0c1tkLTFdLm9iamVjdC52aXNpYmxlPSExLHRoaXMub2JqZWN0c1tkXS5vYmplY3QudmlzaWJsZT0hMDtlbHNlIGJyZWFrO2Zvcig7ZDxlO2QrKyl0aGlzLm9iamVjdHNbZF0ub2JqZWN0LnZpc2libGU9ITF9fX0oKTtcblRIUkVFLkxPRC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9bmV3IFRIUkVFLkxPRCk7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyxhKTtmb3IodmFyIGI9MCxjPXRoaXMub2JqZWN0cy5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9dGhpcy5vYmplY3RzW2JdLm9iamVjdC5jbG9uZSgpO2QudmlzaWJsZT0wPT09YjthLmFkZExldmVsKGQsdGhpcy5vYmplY3RzW2JdLmRpc3RhbmNlKX1yZXR1cm4gYX07XG5USFJFRS5TcHJpdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVWludDE2QXJyYXkoWzAsMSwyLDAsMiwzXSksYj1uZXcgRmxvYXQzMkFycmF5KFstLjUsLS41LDAsLjUsLS41LDAsLjUsLjUsMCwtLjUsLjUsMF0pLGM9bmV3IEZsb2F0MzJBcnJheShbMCwwLDEsMCwxLDEsMCwxXSksZD1uZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnk7ZC5hZGRBdHRyaWJ1dGUoXCJpbmRleFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSwxKSk7ZC5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYiwzKSk7ZC5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYywyKSk7cmV0dXJuIGZ1bmN0aW9uKGEpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlXCI7dGhpcy5nZW9tZXRyeT1kO3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09YT9hOm5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbH19KCk7XG5USFJFRS5TcHJpdGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5TcHJpdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNwcml0ZTtUSFJFRS5TcHJpdGUucHJvdG90eXBlLnJheWNhc3Q9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYixjKXthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKTt2YXIgZD1iLnJheS5kaXN0YW5jZVRvUG9pbnQoYSk7ZD50aGlzLnNjYWxlLnh8fGMucHVzaCh7ZGlzdGFuY2U6ZCxwb2ludDp0aGlzLnBvc2l0aW9uLGZhY2U6bnVsbCxvYmplY3Q6dGhpc30pfX0oKTtUSFJFRS5TcHJpdGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPW5ldyBUSFJFRS5TcHJpdGUodGhpcy5tYXRlcmlhbCkpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7cmV0dXJuIGF9O1xuVEhSRUUuU3ByaXRlLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oYSl7dmFyIGI9VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7dm9pZCAwPT09YS5tYXRlcmlhbHNbdGhpcy5tYXRlcmlhbC51dWlkXSYmKGEubWF0ZXJpYWxzW3RoaXMubWF0ZXJpYWwudXVpZF09dGhpcy5tYXRlcmlhbC50b0pTT04oKSk7Yi5vYmplY3QubWF0ZXJpYWw9dGhpcy5tYXRlcmlhbC51dWlkO3JldHVybiBifTtUSFJFRS5QYXJ0aWNsZT1USFJFRS5TcHJpdGU7VEhSRUUuTGVuc0ZsYXJlPWZ1bmN0aW9uKGEsYixjLGQsZSl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLmxlbnNGbGFyZXM9W107dGhpcy5wb3NpdGlvblNjcmVlbj1uZXcgVEhSRUUuVmVjdG9yMzt0aGlzLmN1c3RvbVVwZGF0ZUNhbGxiYWNrPXZvaWQgMDt2b2lkIDAhPT1hJiZ0aGlzLmFkZChhLGIsYyxkLGUpfTtUSFJFRS5MZW5zRmxhcmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcblRIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGVuc0ZsYXJlO1RIUkVFLkxlbnNGbGFyZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2b2lkIDA9PT1iJiYoYj0tMSk7dm9pZCAwPT09YyYmKGM9MCk7dm9pZCAwPT09ZiYmKGY9MSk7dm9pZCAwPT09ZSYmKGU9bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KSk7dm9pZCAwPT09ZCYmKGQ9VEhSRUUuTm9ybWFsQmxlbmRpbmcpO2M9TWF0aC5taW4oYyxNYXRoLm1heCgwLGMpKTt0aGlzLmxlbnNGbGFyZXMucHVzaCh7dGV4dHVyZTphLHNpemU6YixkaXN0YW5jZTpjLHg6MCx5OjAsejowLHNjYWxlOjEscm90YXRpb246MSxvcGFjaXR5OmYsY29sb3I6ZSxibGVuZGluZzpkfSl9O1xuVEhSRUUuTGVuc0ZsYXJlLnByb3RvdHlwZS51cGRhdGVMZW5zRmxhcmVzPWZ1bmN0aW9uKCl7dmFyIGEsYj10aGlzLmxlbnNGbGFyZXMubGVuZ3RoLGMsZD0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLngsZT0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLnk7Zm9yKGE9MDthPGI7YSsrKWM9dGhpcy5sZW5zRmxhcmVzW2FdLGMueD10aGlzLnBvc2l0aW9uU2NyZWVuLngrZCpjLmRpc3RhbmNlLGMueT10aGlzLnBvc2l0aW9uU2NyZWVuLnkrZSpjLmRpc3RhbmNlLGMud2FudGVkUm90YXRpb249Yy54Kk1hdGguUEkqLjI1LGMucm90YXRpb24rPS4yNSooYy53YW50ZWRSb3RhdGlvbi1jLnJvdGF0aW9uKX07VEhSRUUuU2NlbmU9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNjZW5lXCI7dGhpcy5vdmVycmlkZU1hdGVyaWFsPXRoaXMuZm9nPW51bGw7dGhpcy5hdXRvVXBkYXRlPSEwfTtUSFJFRS5TY2VuZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1xuVEhSRUUuU2NlbmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNjZW5lO1RIUkVFLlNjZW5lLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbihhKXt2b2lkIDA9PT1hJiYoYT1uZXcgVEhSRUUuU2NlbmUpO1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMsYSk7bnVsbCE9PXRoaXMuZm9nJiYoYS5mb2c9dGhpcy5mb2cuY2xvbmUoKSk7bnVsbCE9PXRoaXMub3ZlcnJpZGVNYXRlcmlhbCYmKGEub3ZlcnJpZGVNYXRlcmlhbD10aGlzLm92ZXJyaWRlTWF0ZXJpYWwuY2xvbmUoKSk7YS5hdXRvVXBkYXRlPXRoaXMuYXV0b1VwZGF0ZTthLm1hdHJpeEF1dG9VcGRhdGU9dGhpcy5tYXRyaXhBdXRvVXBkYXRlO3JldHVybiBhfTtUSFJFRS5Gb2c9ZnVuY3Rpb24oYSxiLGMpe3RoaXMubmFtZT1cIlwiO3RoaXMuY29sb3I9bmV3IFRIUkVFLkNvbG9yKGEpO3RoaXMubmVhcj12b2lkIDAhPT1iP2I6MTt0aGlzLmZhcj12b2lkIDAhPT1jP2M6MUUzfTtcblRIUkVFLkZvZy5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkZvZyh0aGlzLmNvbG9yLmdldEhleCgpLHRoaXMubmVhcix0aGlzLmZhcil9O1RIUkVFLkZvZ0V4cDI9ZnVuY3Rpb24oYSxiKXt0aGlzLm5hbWU9XCJcIjt0aGlzLmNvbG9yPW5ldyBUSFJFRS5Db2xvcihhKTt0aGlzLmRlbnNpdHk9dm9pZCAwIT09Yj9iOjIuNUUtNH07VEhSRUUuRm9nRXhwMi5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFRIUkVFLkZvZ0V4cDIodGhpcy5jb2xvci5nZXRIZXgoKSx0aGlzLmRlbnNpdHkpfTtUSFJFRS5TaGFkZXJDaHVuaz17fTtUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5hbHBoYXRlc3RfZnJhZ21lbnQ9XCIjaWZkZWYgQUxQSEFURVNUXFxuXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsuYW9tYXBfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0FPTUFQXFxuXFxuXFx0b3V0Z29pbmdMaWdodCAqPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5hb21hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9BT01BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuYnVtcG1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYnVtcE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGJ1bXBTY2FsZTtcXG5cXG5cXHQvLyBEZXJpdmF0aXZlIG1hcHMgLSBidW1wIG1hcHBpbmcgdW5wYXJhbWV0cml6ZWQgc3VyZmFjZXMgYnkgTW9ydGVuIE1pa2tlbHNlblxcblxcdC8vIGh0dHA6Ly9tbWlra2Vsc2VuM2QuYmxvZ3Nwb3Quc2svMjAxMS8wNy9kZXJpdmF0aXZlLW1hcHMuaHRtbFxcblxcblxcdC8vIEV2YWx1YXRlIHRoZSBkZXJpdmF0aXZlIG9mIHRoZSBoZWlnaHQgdy5yLnQuIHNjcmVlbi1zcGFjZSB1c2luZyBmb3J3YXJkIGRpZmZlcmVuY2luZyAobGlzdGluZyAyKVxcblxcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcXG5cXHRcXHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XFxuXFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xcblxcdFxcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcblxcdH1cXG5cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5ICkge1xcblxcblxcdFxcdHZlYzMgdlNpZ21hWCA9IGRGZHgoIHN1cmZfcG9zICk7XFxuXFx0XFx0dmVjMyB2U2lnbWFZID0gZEZkeSggc3VyZl9wb3MgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcdFxcdC8vIG5vcm1hbGl6ZWRcXG5cXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICk7XFxuXFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9DT0xPUlxcblxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfQ09MT1JcXG5cXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleD1cIiNpZmRlZiBVU0VfQ09MT1JcXG5cXG5cXHR2Q29sb3IueHl6ID0gaW5wdXRUb0xpbmVhciggY29sb3IueHl6ICk7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uPVwiI2RlZmluZSBQSSAzLjE0MTU5XFxuI2RlZmluZSBQSTIgNi4yODMxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuXFxuZmxvYXQgc3F1YXJlKCBpbiBmbG9hdCBhICkgeyByZXR1cm4gYSphOyB9XFxudmVjMiAgc3F1YXJlKCBpbiB2ZWMyIGEgKSAgeyByZXR1cm4gdmVjMiggYS54KmEueCwgYS55KmEueSApOyB9XFxudmVjMyAgc3F1YXJlKCBpbiB2ZWMzIGEgKSAgeyByZXR1cm4gdmVjMyggYS54KmEueCwgYS55KmEueSwgYS56KmEueiApOyB9XFxudmVjNCAgc3F1YXJlKCBpbiB2ZWM0IGEgKSAgeyByZXR1cm4gdmVjNCggYS54KmEueCwgYS55KmEueSwgYS56KmEueiwgYS53KmEudyApOyB9XFxuZmxvYXQgc2F0dXJhdGUoIGluIGZsb2F0IGEgKSB7IHJldHVybiBjbGFtcCggYSwgMC4wLCAxLjAgKTsgfVxcbnZlYzIgIHNhdHVyYXRlKCBpbiB2ZWMyIGEgKSAgeyByZXR1cm4gY2xhbXAoIGEsIDAuMCwgMS4wICk7IH1cXG52ZWMzICBzYXR1cmF0ZSggaW4gdmVjMyBhICkgIHsgcmV0dXJuIGNsYW1wKCBhLCAwLjAsIDEuMCApOyB9XFxudmVjNCAgc2F0dXJhdGUoIGluIHZlYzQgYSApICB7IHJldHVybiBjbGFtcCggYSwgMC4wLCAxLjAgKTsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGluIGZsb2F0IGEgKSB7IHJldHVybiBhOyB9XFxuZmxvYXQgYXZlcmFnZSggaW4gdmVjMiBhICkgIHsgcmV0dXJuICggYS54ICsgYS55KSAqIDAuNTsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGluIHZlYzMgYSApICB7IHJldHVybiAoIGEueCArIGEueSArIGEueikgLyAzLjA7IH1cXG5mbG9hdCBhdmVyYWdlKCBpbiB2ZWM0IGEgKSAgeyByZXR1cm4gKCBhLnggKyBhLnkgKyBhLnogKyBhLncpICogMC4yNTsgfVxcbmZsb2F0IHdoaXRlQ29tcGxpbWVudCggaW4gZmxvYXQgYSApIHsgcmV0dXJuIHNhdHVyYXRlKCAxLjAgLSBhICk7IH1cXG52ZWMyICB3aGl0ZUNvbXBsaW1lbnQoIGluIHZlYzIgYSApICB7IHJldHVybiBzYXR1cmF0ZSggdmVjMigxLjApIC0gYSApOyB9XFxudmVjMyAgd2hpdGVDb21wbGltZW50KCBpbiB2ZWMzIGEgKSAgeyByZXR1cm4gc2F0dXJhdGUoIHZlYzMoMS4wKSAtIGEgKTsgfVxcbnZlYzQgIHdoaXRlQ29tcGxpbWVudCggaW4gdmVjNCBhICkgIHsgcmV0dXJuIHNhdHVyYXRlKCB2ZWM0KDEuMCkgLSBhICk7IH1cXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKSApLnh5eiApO1xcbn1cXG4vLyBodHRwOi8vZW4ud2lraWJvb2tzLm9yZy93aWtpL0dMU0xfUHJvZ3JhbW1pbmcvQXBwbHlpbmdfTWF0cml4X1RyYW5zZm9ybWF0aW9uc1xcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBub3JtYWwsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggbm9ybWFsLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG52ZWMzIHByb2plY3RPblBsYW5lKGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludC1wb2ludE9uUGxhbmUgKTtcXG5cXHRyZXR1cm4gcG9pbnQgLSBkaXN0YW5jZSAqIHBsYW5lTm9ybWFsO1xcbn1cXG5mbG9hdCBzaWRlT2ZQbGFuZSggaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcXG59XFxudmVjMyBsaW5lUGxhbmVJbnRlcnNlY3QoIGluIHZlYzMgcG9pbnRPbkxpbmUsIGluIHZlYzMgbGluZURpcmVjdGlvbiwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHBvaW50T25MaW5lICsgbGluZURpcmVjdGlvbiAqICggZG90KCBwbGFuZU5vcm1hbCwgcG9pbnRPblBsYW5lIC0gcG9pbnRPbkxpbmUgKSAvIGRvdCggcGxhbmVOb3JtYWwsIGxpbmVEaXJlY3Rpb24gKSApO1xcbn1cXG5mbG9hdCBjYWxjTGlnaHRBdHRlbnVhdGlvbiggZmxvYXQgbGlnaHREaXN0YW5jZSwgZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFx0aWYgKCBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcblxcdCAgcmV0dXJuIHBvdyggc2F0dXJhdGUoIDEuMCAtIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0fVxcblxcdHJldHVybiAxLjA7XFxufVxcblxcbnZlYzMgaW5wdXRUb0xpbmVhciggaW4gdmVjMyBhICkge1xcbiNpZmRlZiBHQU1NQV9JTlBVVFxcblxcdHJldHVybiBwb3coIGEsIHZlYzMoIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApICk7XFxuI2Vsc2VcXG5cXHRyZXR1cm4gYTtcXG4jZW5kaWZcXG59XFxudmVjMyBsaW5lYXJUb091dHB1dCggaW4gdmVjMyBhICkge1xcbiNpZmRlZiBHQU1NQV9PVVRQVVRcXG5cXHRyZXR1cm4gcG93KCBhLCB2ZWMzKCAxLjAgLyBmbG9hdCggR0FNTUFfRkFDVE9SICkgKSApO1xcbiNlbHNlXFxuXFx0cmV0dXJuIGE7XFxuI2VuZGlmXFxufVxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogc2tpbm5lZDtcXG5cXG4jZWxpZiBkZWZpbmVkKCBVU0VfTU9SUEhUQVJHRVRTIClcXG5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBtb3JwaGVkLCAxLjAgKTtcXG5cXG4jZWxzZVxcblxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXG4jZW5kaWZcXG5cXG5nbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblwiO1RIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRub3JtYWxfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdHZlYzMgb2JqZWN0Tm9ybWFsID0gc2tpbm5lZE5vcm1hbC54eXo7XFxuXFxuI2VsaWYgZGVmaW5lZCggVVNFX01PUlBITk9STUFMUyApXFxuXFxuXFx0dmVjMyBvYmplY3ROb3JtYWwgPSBtb3JwaGVkTm9ybWFsO1xcblxcbiNlbHNlXFxuXFxuXFx0dmVjMyBvYmplY3ROb3JtYWwgPSBub3JtYWw7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIEZMSVBfU0lERURcXG5cXG5cXHRvYmplY3ROb3JtYWwgPSAtb2JqZWN0Tm9ybWFsO1xcblxcbiNlbmRpZlxcblxcbnZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiBvYmplY3ROb3JtYWw7XFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcblxcdFxcdC8vIFRyYW5zZm9ybWluZyBOb3JtYWwgVmVjdG9ycyB3aXRoIHRoZSBJbnZlcnNlIFRyYW5zZm9ybWF0aW9uXFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFxuXFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdGZsb2F0IGZsaXBOb3JtYWwgPSAoIC0xLjAgKyAyLjAgKiBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZmxpcE5vcm1hbCA9IDEuMDtcXG5cXHQjZW5kaWZcXG5cXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBmbGlwTm9ybWFsICogdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRzYW1wbGVVVi55ID0gc2F0dXJhdGUoIGZsaXBOb3JtYWwgKiByZWZsZWN0VmVjLnkgKiAwLjUgKyAwLjUgKTtcXG5cXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggZmxpcE5vcm1hbCAqIHJlZmxlY3RWZWMueiwgZmxpcE5vcm1hbCAqIHJlZmxlY3RWZWMueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViApO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX1NQSEVSRSApXFxuXFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IGZsaXBOb3JtYWwgKiBub3JtYWxpemUoKHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSkueHl6ICsgdmVjMygwLjAsMC4wLDEuMCkpO1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcXG5cXHQjZW5kaWZcXG5cXG5cXHRlbnZDb2xvci54eXogPSBpbnB1dFRvTGluZWFyKCBlbnZDb2xvci54eXogKTtcXG5cXG5cXHQjaWZkZWYgRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXFxuXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgb3V0Z29pbmdMaWdodCAqIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19NSVggKVxcblxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19BREQgKVxcblxcblxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZW52Q29sb3IueHl6ICogc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IHJlZmxlY3Rpdml0eTtcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcblxcdCNlbmRpZlxcblxcbiNlbmRpZlxcblwiO1RIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgISBkZWZpbmVkKCBVU0VfQlVNUE1BUCApICYmICEgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmVudm1hcF92ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmICEgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSAmJiAhIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIFBIT05HIClcXG5cXG5cXHR2ZWMzIHdvcmxkTm9ybWFsID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBvYmplY3ROb3JtYWwsIG1vZGVsTWF0cml4ICk7XFxuXFxuXFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggd29ybGRQb3NpdGlvbi54eXogLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcblxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFxuXFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudD1cIiNpZmRlZiBVU0VfRk9HXFxuXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdEZXB0aEVYVCAvIGdsX0ZyYWdDb29yZC53O1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0ZmxvYXQgZGVwdGggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53O1xcblxcblxcdCNlbmRpZlxcblxcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IGV4cDIoIC0gc3F1YXJlKCBmb2dEZW5zaXR5ICkgKiBzcXVhcmUoIGRlcHRoICkgKiBMT0cyICk7XFxuXFx0XFx0Zm9nRmFjdG9yID0gd2hpdGVDb21wbGltZW50KCBmb2dGYWN0b3IgKTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcXG5cXG5cXHQjZW5kaWZcXG5cXHRcXG5cXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XFxuXFxuI2VuZGlmXCI7XG5USFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfRk9HXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXG5cXHQjZWxzZVxcblxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci54eXogKiB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcbiNlbmRpZlwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRzX2xhbWJlcnRfcGFyc192ZXJ0ZXg9XCJ1bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIE1BWF9ESVJfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIE1BWF9ESVJfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9IRU1JX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3JbIE1BWF9IRU1JX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvclsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodERpcmVjdGlvblsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRDb2xvclsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBwb2ludExpZ2h0UG9zaXRpb25bIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHBvaW50TGlnaHREaXN0YW5jZVsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRMaWdodERlY2F5WyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9TUE9UX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0Q29sb3JbIE1BWF9TUE9UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHRQb3NpdGlvblsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodERpcmVjdGlvblsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHREaXN0YW5jZVsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHRBbmdsZUNvc1sgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHRFeHBvbmVudFsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBzcG90TGlnaHREZWNheVsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIFdSQVBfQVJPVU5EXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHdyYXBSR0I7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfbGFtYmVydF92ZXJ0ZXg9XCJ2TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcblxcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XFxuXFxuI2VuZGlmXFxuXFxudHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcbmZvciggaW50IGkgPSAwOyBpIDwgTUFYX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0dmVjMyBkaXJWZWN0b3IgPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIHRyYW5zZm9ybWVkTm9ybWFsLCBkaXJWZWN0b3IgKTtcXG5cXHR2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XFxuXFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdHZlYzMgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0JhY2sgPSB2ZWMzKCBtYXgoIC1kb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdHZlYzMgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0hhbGZCYWNrID0gdmVjMyggbWF4KCAtMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICkgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdIYWxmID0gdmVjMyggbWF4KCAwLjUgKiBkb3RQcm9kdWN0ICsgMC41LCAwLjAgKSApO1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcgPSBtaXgoIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmcsIGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdIYWxmLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdGRpcmVjdGlvbmFsTGlnaHRXZWlnaHRpbmdCYWNrID0gbWl4KCBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nQmFjaywgZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0hhbGZCYWNrLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0dkxpZ2h0RnJvbnQgKz0gZGlyZWN0aW9uYWxMaWdodENvbG9yWyBpIF0gKiBkaXJlY3Rpb25hbExpZ2h0V2VpZ2h0aW5nO1xcblxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHR2TGlnaHRCYWNrICs9IGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdICogZGlyZWN0aW9uYWxMaWdodFdlaWdodGluZ0JhY2s7XFxuXFxuXFx0I2VuZGlmXFxuXFxufVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfUE9JTlRfTElHSFRTID4gMFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSwgMS4wICk7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gbFBvc2l0aW9uLnh5eiAtIG12UG9zaXRpb24ueHl6O1xcblxcblxcdFxcdGZsb2F0IGF0dGVudWF0aW9uID0gY2FsY0xpZ2h0QXR0ZW51YXRpb24oIGxlbmd0aCggbFZlY3RvciApLCBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSwgcG9pbnRMaWdodERlY2F5WyBpIF0gKTtcXG5cXG5cXHRcXHRsVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgZG90UHJvZHVjdCA9IGRvdCggdHJhbnNmb3JtZWROb3JtYWwsIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHR2ZWMzIHBvaW50TGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XFxuXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdHZlYzMgcG9pbnRMaWdodFdlaWdodGluZ0JhY2sgPSB2ZWMzKCBtYXgoIC1kb3RQcm9kdWN0LCAwLjAgKSApO1xcblxcblxcdFxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdFxcdHZlYzMgcG9pbnRMaWdodFdlaWdodGluZ0hhbGZCYWNrID0gdmVjMyggbWF4KCAtMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICkgKTtcXG5cXG5cXHRcXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHRcXHR2ZWMzIHBvaW50TGlnaHRXZWlnaHRpbmdIYWxmID0gdmVjMyggbWF4KCAwLjUgKiBkb3RQcm9kdWN0ICsgMC41LCAwLjAgKSApO1xcblxcdFxcdFxcdHBvaW50TGlnaHRXZWlnaHRpbmcgPSBtaXgoIHBvaW50TGlnaHRXZWlnaHRpbmcsIHBvaW50TGlnaHRXZWlnaHRpbmdIYWxmLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdFxcdHBvaW50TGlnaHRXZWlnaHRpbmdCYWNrID0gbWl4KCBwb2ludExpZ2h0V2VpZ2h0aW5nQmFjaywgcG9pbnRMaWdodFdlaWdodGluZ0hhbGZCYWNrLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludExpZ2h0V2VpZ2h0aW5nICogYXR0ZW51YXRpb247XFxuXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludExpZ2h0V2VpZ2h0aW5nQmFjayAqIGF0dGVudWF0aW9uO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzQgbFBvc2l0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIHNwb3RMaWdodFBvc2l0aW9uWyBpIF0sIDEuMCApO1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IGxQb3NpdGlvbi54eXogLSBtdlBvc2l0aW9uLnh5ejtcXG5cXG5cXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gZG90KCBzcG90TGlnaHREaXJlY3Rpb25bIGkgXSwgbm9ybWFsaXplKCBzcG90TGlnaHRQb3NpdGlvblsgaSBdIC0gd29ybGRQb3NpdGlvbi54eXogKSApO1xcblxcblxcdFxcdGlmICggc3BvdEVmZmVjdCA+IHNwb3RMaWdodEFuZ2xlQ29zWyBpIF0gKSB7XFxuXFxuXFx0XFx0XFx0c3BvdEVmZmVjdCA9IG1heCggcG93KCBtYXgoIHNwb3RFZmZlY3QsIDAuMCApLCBzcG90TGlnaHRFeHBvbmVudFsgaSBdICksIDAuMCApO1xcblxcblxcdFxcdFxcdGZsb2F0IGF0dGVudWF0aW9uID0gY2FsY0xpZ2h0QXR0ZW51YXRpb24oIGxlbmd0aCggbFZlY3RvciApLCBzcG90TGlnaHREaXN0YW5jZVsgaSBdLCBzcG90TGlnaHREZWNheVsgaSBdICk7XFxuXFxuXFx0XFx0XFx0bFZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcblxcdFxcdFxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIHRyYW5zZm9ybWVkTm9ybWFsLCBsVmVjdG9yICk7XFxuXFx0XFx0XFx0dmVjMyBzcG90TGlnaHRXZWlnaHRpbmcgPSB2ZWMzKCBtYXgoIGRvdFByb2R1Y3QsIDAuMCApICk7XFxuXFxuXFx0XFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdFxcdHZlYzMgc3BvdExpZ2h0V2VpZ2h0aW5nQmFjayA9IHZlYzMoIG1heCggLWRvdFByb2R1Y3QsIDAuMCApICk7XFxuXFxuXFx0XFx0XFx0XFx0I2lmZGVmIFdSQVBfQVJPVU5EXFxuXFxuXFx0XFx0XFx0XFx0XFx0dmVjMyBzcG90TGlnaHRXZWlnaHRpbmdIYWxmQmFjayA9IHZlYzMoIG1heCggLTAuNSAqIGRvdFByb2R1Y3QgKyAwLjUsIDAuMCApICk7XFxuXFxuXFx0XFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0I2lmZGVmIFdSQVBfQVJPVU5EXFxuXFxuXFx0XFx0XFx0XFx0dmVjMyBzcG90TGlnaHRXZWlnaHRpbmdIYWxmID0gdmVjMyggbWF4KCAwLjUgKiBkb3RQcm9kdWN0ICsgMC41LCAwLjAgKSApO1xcblxcdFxcdFxcdFxcdHNwb3RMaWdodFdlaWdodGluZyA9IG1peCggc3BvdExpZ2h0V2VpZ2h0aW5nLCBzcG90TGlnaHRXZWlnaHRpbmdIYWxmLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcblxcdFxcdFxcdFxcdFxcdHNwb3RMaWdodFdlaWdodGluZ0JhY2sgPSBtaXgoIHNwb3RMaWdodFdlaWdodGluZ0JhY2ssIHNwb3RMaWdodFdlaWdodGluZ0hhbGZCYWNrLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0dkxpZ2h0RnJvbnQgKz0gc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RMaWdodFdlaWdodGluZyAqIGF0dGVudWF0aW9uICogc3BvdEVmZmVjdDtcXG5cXG5cXHRcXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0XFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzcG90TGlnaHRDb2xvclsgaSBdICogc3BvdExpZ2h0V2VpZ2h0aW5nQmFjayAqIGF0dGVudWF0aW9uICogc3BvdEVmZmVjdDtcXG5cXG5cXHRcXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR9XFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIHRyYW5zZm9ybWVkTm9ybWFsLCBsVmVjdG9yICk7XFxuXFxuXFx0XFx0ZmxvYXQgaGVtaURpZmZ1c2VXZWlnaHQgPSAwLjUgKiBkb3RQcm9kdWN0ICsgMC41O1xcblxcdFxcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0QmFjayA9IC0wLjUgKiBkb3RQcm9kdWN0ICsgMC41O1xcblxcblxcdFxcdHZMaWdodEZyb250ICs9IG1peCggaGVtaXNwaGVyZUxpZ2h0R3JvdW5kQ29sb3JbIGkgXSwgaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3JbIGkgXSwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcXG5cXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBtaXgoIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBpIF0sIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBpIF0sIGhlbWlEaWZmdXNlV2VpZ2h0QmFjayApO1xcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cXG52TGlnaHRGcm9udCArPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFxuXFx0dkxpZ2h0QmFjayArPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19waG9uZ19mcmFnbWVudD1cIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIC0xLjAgKyAyLjAgKiBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSApO1xcblxcblxcdCNlbmRpZlxcblxcbiNlbHNlXFxuXFxuXFx0dmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyB2aWV3UG9zaXRpb24gPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsICk7XFxuXFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpICk7XFxuXFxuI2VuZGlmXFxuXFxudmVjMyB0b3RhbERpZmZ1c2VMaWdodCA9IHZlYzMoIDAuMCApO1xcbnZlYzMgdG90YWxTcGVjdWxhckxpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFxuI2lmIE1BWF9QT0lOVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWM0IGxQb3NpdGlvbiA9IHZpZXdNYXRyaXggKiB2ZWM0KCBwb2ludExpZ2h0UG9zaXRpb25bIGkgXSwgMS4wICk7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gbFBvc2l0aW9uLnh5eiArIHZWaWV3UG9zaXRpb24ueHl6O1xcblxcblxcdFxcdGZsb2F0IGF0dGVudWF0aW9uID0gY2FsY0xpZ2h0QXR0ZW51YXRpb24oIGxlbmd0aCggbFZlY3RvciApLCBwb2ludExpZ2h0RGlzdGFuY2VbIGkgXSwgcG9pbnRMaWdodERlY2F5WyBpIF0gKTtcXG5cXG5cXHRcXHRsVmVjdG9yID0gbm9ybWFsaXplKCBsVmVjdG9yICk7XFxuXFxuXFx0XFx0Ly8gZGlmZnVzZVxcblxcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3QgPSBkb3QoIG5vcm1hbCwgbFZlY3RvciApO1xcblxcblxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdGZsb2F0IHBvaW50RGlmZnVzZVdlaWdodEZ1bGwgPSBtYXgoIGRvdFByb2R1Y3QsIDAuMCApO1xcblxcdFxcdFxcdGZsb2F0IHBvaW50RGlmZnVzZVdlaWdodEhhbGYgPSBtYXgoIDAuNSAqIGRvdFByb2R1Y3QgKyAwLjUsIDAuMCApO1xcblxcblxcdFxcdFxcdHZlYzMgcG9pbnREaWZmdXNlV2VpZ2h0ID0gbWl4KCB2ZWMzKCBwb2ludERpZmZ1c2VXZWlnaHRGdWxsICksIHZlYzMoIHBvaW50RGlmZnVzZVdlaWdodEhhbGYgKSwgd3JhcFJHQiApO1xcblxcblxcdFxcdCNlbHNlXFxuXFxuXFx0XFx0XFx0ZmxvYXQgcG9pbnREaWZmdXNlV2VpZ2h0ID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR0b3RhbERpZmZ1c2VMaWdodCArPSBwb2ludExpZ2h0Q29sb3JbIGkgXSAqIHBvaW50RGlmZnVzZVdlaWdodCAqIGF0dGVudWF0aW9uO1xcblxcblxcdFxcdFxcdFxcdC8vIHNwZWN1bGFyXFxuXFxuXFx0XFx0dmVjMyBwb2ludEhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKyB2aWV3UG9zaXRpb24gKTtcXG5cXHRcXHRmbG9hdCBwb2ludERvdE5vcm1hbEhhbGYgPSBtYXgoIGRvdCggbm9ybWFsLCBwb2ludEhhbGZWZWN0b3IgKSwgMC4wICk7XFxuXFx0XFx0ZmxvYXQgcG9pbnRTcGVjdWxhcldlaWdodCA9IHNwZWN1bGFyU3RyZW5ndGggKiBtYXgoIHBvdyggcG9pbnREb3ROb3JtYWxIYWxmLCBzaGluaW5lc3MgKSwgMC4wICk7XFxuXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJOb3JtYWxpemF0aW9uID0gKCBzaGluaW5lc3MgKyAyLjAgKSAvIDguMDtcXG5cXG5cXHRcXHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhciArIHZlYzMoIDEuMCAtIHNwZWN1bGFyICkgKiBwb3coIG1heCggMS4wIC0gZG90KCBsVmVjdG9yLCBwb2ludEhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogcG9pbnRMaWdodENvbG9yWyBpIF0gKiBwb2ludFNwZWN1bGFyV2VpZ2h0ICogcG9pbnREaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcGVjdWxhck5vcm1hbGl6YXRpb247XFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfU1BPVF9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTUFYX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcblxcdFxcdHZlYzQgbFBvc2l0aW9uID0gdmlld01hdHJpeCAqIHZlYzQoIHNwb3RMaWdodFBvc2l0aW9uWyBpIF0sIDEuMCApO1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IGxQb3NpdGlvbi54eXogKyB2Vmlld1Bvc2l0aW9uLnh5ejtcXG5cXG5cXHRcXHRmbG9hdCBhdHRlbnVhdGlvbiA9IGNhbGNMaWdodEF0dGVudWF0aW9uKCBsZW5ndGgoIGxWZWN0b3IgKSwgc3BvdExpZ2h0RGlzdGFuY2VbIGkgXSwgc3BvdExpZ2h0RGVjYXlbIGkgXSApO1xcblxcblxcdFxcdGxWZWN0b3IgPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gZG90KCBzcG90TGlnaHREaXJlY3Rpb25bIGkgXSwgbm9ybWFsaXplKCBzcG90TGlnaHRQb3NpdGlvblsgaSBdIC0gdldvcmxkUG9zaXRpb24gKSApO1xcblxcblxcdFxcdGlmICggc3BvdEVmZmVjdCA+IHNwb3RMaWdodEFuZ2xlQ29zWyBpIF0gKSB7XFxuXFxuXFx0XFx0XFx0c3BvdEVmZmVjdCA9IG1heCggcG93KCBtYXgoIHNwb3RFZmZlY3QsIDAuMCApLCBzcG90TGlnaHRFeHBvbmVudFsgaSBdICksIDAuMCApO1xcblxcblxcdFxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcXG5cXG5cXHRcXHRcXHQjaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzcG90RGlmZnVzZVdlaWdodEZ1bGwgPSBtYXgoIGRvdFByb2R1Y3QsIDAuMCApO1xcblxcdFxcdFxcdFxcdGZsb2F0IHNwb3REaWZmdXNlV2VpZ2h0SGFsZiA9IG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICk7XFxuXFxuXFx0XFx0XFx0XFx0dmVjMyBzcG90RGlmZnVzZVdlaWdodCA9IG1peCggdmVjMyggc3BvdERpZmZ1c2VXZWlnaHRGdWxsICksIHZlYzMoIHNwb3REaWZmdXNlV2VpZ2h0SGFsZiApLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzcG90RGlmZnVzZVdlaWdodCA9IG1heCggZG90UHJvZHVjdCwgMC4wICk7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0XFx0dG90YWxEaWZmdXNlTGlnaHQgKz0gc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3REaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcG90RWZmZWN0O1xcblxcblxcdFxcdFxcdC8vIHNwZWN1bGFyXFxuXFxuXFx0XFx0XFx0dmVjMyBzcG90SGFsZlZlY3RvciA9IG5vcm1hbGl6ZSggbFZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdFxcdGZsb2F0IHNwb3REb3ROb3JtYWxIYWxmID0gbWF4KCBkb3QoIG5vcm1hbCwgc3BvdEhhbGZWZWN0b3IgKSwgMC4wICk7XFxuXFx0XFx0XFx0ZmxvYXQgc3BvdFNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBzcG90RG90Tm9ybWFsSGFsZiwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdFxcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wICkgLyA4LjA7XFxuXFxuXFx0XFx0XFx0dmVjMyBzY2hsaWNrID0gc3BlY3VsYXIgKyB2ZWMzKCAxLjAgLSBzcGVjdWxhciApICogcG93KCBtYXgoIDEuMCAtIGRvdCggbFZlY3Rvciwgc3BvdEhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogc3BvdExpZ2h0Q29sb3JbIGkgXSAqIHNwb3RTcGVjdWxhcldlaWdodCAqIHNwb3REaWZmdXNlV2VpZ2h0ICogYXR0ZW51YXRpb24gKiBzcGVjdWxhck5vcm1hbGl6YXRpb24gKiBzcG90RWZmZWN0O1xcblxcblxcdFxcdH1cXG5cXG5cXHR9XFxuXFxuI2VuZGlmXFxuXFxuI2lmIE1BWF9ESVJfTElHSFRTID4gMFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjMyBkaXJWZWN0b3IgPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIGRpcmVjdGlvbmFsTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGRpclZlY3RvciApO1xcblxcblxcdFxcdCNpZmRlZiBXUkFQX0FST1VORFxcblxcblxcdFxcdFxcdGZsb2F0IGRpckRpZmZ1c2VXZWlnaHRGdWxsID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXHRcXHRcXHRmbG9hdCBkaXJEaWZmdXNlV2VpZ2h0SGFsZiA9IG1heCggMC41ICogZG90UHJvZHVjdCArIDAuNSwgMC4wICk7XFxuXFxuXFx0XFx0XFx0dmVjMyBkaXJEaWZmdXNlV2VpZ2h0ID0gbWl4KCB2ZWMzKCBkaXJEaWZmdXNlV2VpZ2h0RnVsbCApLCB2ZWMzKCBkaXJEaWZmdXNlV2VpZ2h0SGFsZiApLCB3cmFwUkdCICk7XFxuXFxuXFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRmbG9hdCBkaXJEaWZmdXNlV2VpZ2h0ID0gbWF4KCBkb3RQcm9kdWN0LCAwLjAgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHR0b3RhbERpZmZ1c2VMaWdodCArPSBkaXJlY3Rpb25hbExpZ2h0Q29sb3JbIGkgXSAqIGRpckRpZmZ1c2VXZWlnaHQ7XFxuXFxuXFx0XFx0Ly8gc3BlY3VsYXJcXG5cXG5cXHRcXHR2ZWMzIGRpckhhbGZWZWN0b3IgPSBub3JtYWxpemUoIGRpclZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGRpckRvdE5vcm1hbEhhbGYgPSBtYXgoIGRvdCggbm9ybWFsLCBkaXJIYWxmVmVjdG9yICksIDAuMCApO1xcblxcdFxcdGZsb2F0IGRpclNwZWN1bGFyV2VpZ2h0ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBkaXJEb3ROb3JtYWxIYWxmLCBzaGluaW5lc3MgKSwgMC4wICk7XFxuXFxuXFx0XFx0LypcXG5cXHRcXHQvLyBmcmVzbmVsIHRlcm0gZnJvbSBza2luIHNoYWRlclxcblxcdFxcdGNvbnN0IGZsb2F0IEYwID0gMC4xMjg7XFxuXFxuXFx0XFx0ZmxvYXQgYmFzZSA9IDEuMCAtIGRvdCggdmlld1Bvc2l0aW9uLCBkaXJIYWxmVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgZXhwb25lbnRpYWwgPSBwb3coIGJhc2UsIDUuMCApO1xcblxcblxcdFxcdGZsb2F0IGZyZXNuZWwgPSBleHBvbmVudGlhbCArIEYwICogKCAxLjAgLSBleHBvbmVudGlhbCApO1xcblxcdFxcdCovXFxuXFxuXFx0XFx0LypcXG5cXHRcXHQvLyBmcmVzbmVsIHRlcm0gZnJvbSBmcmVzbmVsIHNoYWRlclxcblxcdFxcdGNvbnN0IGZsb2F0IG1GcmVzbmVsQmlhcyA9IDAuMDg7XFxuXFx0XFx0Y29uc3QgZmxvYXQgbUZyZXNuZWxTY2FsZSA9IDAuMztcXG5cXHRcXHRjb25zdCBmbG9hdCBtRnJlc25lbFBvd2VyID0gNS4wO1xcblxcblxcdFxcdGZsb2F0IGZyZXNuZWwgPSBtRnJlc25lbEJpYXMgKyBtRnJlc25lbFNjYWxlICogcG93KCAxLjAgKyBkb3QoIG5vcm1hbGl6ZSggLXZpZXdQb3NpdGlvbiApLCBub3JtYWwgKSwgbUZyZXNuZWxQb3dlciApO1xcblxcdFxcdCovXFxuXFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJOb3JtYWxpemF0aW9uID0gKCBzaGluaW5lc3MgKyAyLjAgKSAvIDguMDtcXG5cXG5cXHRcXHQvLyBcXHRcXHRkaXJTcGVjdWxhciArPSBzcGVjdWxhciAqIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgaSBdICogZGlyU3BlY3VsYXJXZWlnaHQgKiBkaXJEaWZmdXNlV2VpZ2h0ICogc3BlY3VsYXJOb3JtYWxpemF0aW9uICogZnJlc25lbDtcXG5cXG5cXHRcXHR2ZWMzIHNjaGxpY2sgPSBzcGVjdWxhciArIHZlYzMoIDEuMCAtIHNwZWN1bGFyICkgKiBwb3coIG1heCggMS4wIC0gZG90KCBkaXJWZWN0b3IsIGRpckhhbGZWZWN0b3IgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHRvdGFsU3BlY3VsYXJMaWdodCArPSBzY2hsaWNrICogZGlyZWN0aW9uYWxMaWdodENvbG9yWyBpIF0gKiBkaXJTcGVjdWxhcldlaWdodCAqIGRpckRpZmZ1c2VXZWlnaHQgKiBzcGVjdWxhck5vcm1hbGl6YXRpb247XFxuXFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZiBNQVhfSEVNSV9MSUdIVFMgPiAwXFxuXFxuXFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBoZW1pc3BoZXJlTGlnaHREaXJlY3Rpb25bIGkgXSwgdmlld01hdHJpeCApO1xcblxcblxcdFxcdC8vIGRpZmZ1c2VcXG5cXG5cXHRcXHRmbG9hdCBkb3RQcm9kdWN0ID0gZG90KCBub3JtYWwsIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdFByb2R1Y3QgKyAwLjU7XFxuXFxuXFx0XFx0dmVjMyBoZW1pQ29sb3IgPSBtaXgoIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBpIF0sIGhlbWlzcGhlcmVMaWdodFNreUNvbG9yWyBpIF0sIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFxuXFx0XFx0dG90YWxEaWZmdXNlTGlnaHQgKz0gaGVtaUNvbG9yO1xcblxcblxcdFxcdC8vIHNwZWN1bGFyIChza3kgbGlnaHQpXFxuXFxuXFx0XFx0dmVjMyBoZW1pSGFsZlZlY3RvclNreSA9IG5vcm1hbGl6ZSggbFZlY3RvciArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEb3ROb3JtYWxIYWxmU2t5ID0gMC41ICogZG90KCBub3JtYWwsIGhlbWlIYWxmVmVjdG9yU2t5ICkgKyAwLjU7XFxuXFx0XFx0ZmxvYXQgaGVtaVNwZWN1bGFyV2VpZ2h0U2t5ID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBtYXgoIGhlbWlEb3ROb3JtYWxIYWxmU2t5LCAwLjAgKSwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdC8vIHNwZWN1bGFyIChncm91bmQgbGlnaHQpXFxuXFxuXFx0XFx0dmVjMyBsVmVjdG9yR3JvdW5kID0gLWxWZWN0b3I7XFxuXFxuXFx0XFx0dmVjMyBoZW1pSGFsZlZlY3Rvckdyb3VuZCA9IG5vcm1hbGl6ZSggbFZlY3Rvckdyb3VuZCArIHZpZXdQb3NpdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEb3ROb3JtYWxIYWxmR3JvdW5kID0gMC41ICogZG90KCBub3JtYWwsIGhlbWlIYWxmVmVjdG9yR3JvdW5kICkgKyAwLjU7XFxuXFx0XFx0ZmxvYXQgaGVtaVNwZWN1bGFyV2VpZ2h0R3JvdW5kID0gc3BlY3VsYXJTdHJlbmd0aCAqIG1heCggcG93KCBtYXgoIGhlbWlEb3ROb3JtYWxIYWxmR3JvdW5kLCAwLjAgKSwgc2hpbmluZXNzICksIDAuMCApO1xcblxcblxcdFxcdGZsb2F0IGRvdFByb2R1Y3RHcm91bmQgPSBkb3QoIG5vcm1hbCwgbFZlY3Rvckdyb3VuZCApO1xcblxcblxcdFxcdGZsb2F0IHNwZWN1bGFyTm9ybWFsaXphdGlvbiA9ICggc2hpbmluZXNzICsgMi4wICkgLyA4LjA7XFxuXFxuXFx0XFx0dmVjMyBzY2hsaWNrU2t5ID0gc3BlY3VsYXIgKyB2ZWMzKCAxLjAgLSBzcGVjdWxhciApICogcG93KCBtYXgoIDEuMCAtIGRvdCggbFZlY3RvciwgaGVtaUhhbGZWZWN0b3JTa3kgKSwgMC4wICksIDUuMCApO1xcblxcdFxcdHZlYzMgc2NobGlja0dyb3VuZCA9IHNwZWN1bGFyICsgdmVjMyggMS4wIC0gc3BlY3VsYXIgKSAqIHBvdyggbWF4KCAxLjAgLSBkb3QoIGxWZWN0b3JHcm91bmQsIGhlbWlIYWxmVmVjdG9yR3JvdW5kICksIDAuMCApLCA1LjAgKTtcXG5cXHRcXHR0b3RhbFNwZWN1bGFyTGlnaHQgKz0gaGVtaUNvbG9yICogc3BlY3VsYXJOb3JtYWxpemF0aW9uICogKCBzY2hsaWNrU2t5ICogaGVtaVNwZWN1bGFyV2VpZ2h0U2t5ICogbWF4KCBkb3RQcm9kdWN0LCAwLjAgKSArIHNjaGxpY2tHcm91bmQgKiBoZW1pU3BlY3VsYXJXZWlnaHRHcm91bmQgKiBtYXgoIGRvdFByb2R1Y3RHcm91bmQsIDAuMCApICk7XFxuXFxuXFx0fVxcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBNRVRBTFxcblxcblxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdG90YWxEaWZmdXNlTGlnaHQgKyBhbWJpZW50TGlnaHRDb2xvciApICogc3BlY3VsYXIgKyB0b3RhbFNwZWN1bGFyTGlnaHQgKyBlbWlzc2l2ZTtcXG5cXG4jZWxzZVxcblxcblxcdG91dGdvaW5nTGlnaHQgKz0gZGlmZnVzZUNvbG9yLnJnYiAqICggdG90YWxEaWZmdXNlTGlnaHQgKyBhbWJpZW50TGlnaHRDb2xvciApICsgdG90YWxTcGVjdWxhckxpZ2h0ICsgZW1pc3NpdmU7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD1cInVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXG4jaWYgTUFYX0RJUl9MSUdIVFMgPiAwXFxuXFxuXFx0dW5pZm9ybSB2ZWMzIGRpcmVjdGlvbmFsTGlnaHRDb2xvclsgTUFYX0RJUl9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvblsgTUFYX0RJUl9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX0hFTUlfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBoZW1pc3BoZXJlTGlnaHRTa3lDb2xvclsgTUFYX0hFTUlfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIGhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uWyBNQVhfSEVNSV9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1BPSU5UX0xJR0hUUyA+IDBcXG5cXG5cXHR1bmlmb3JtIHZlYzMgcG9pbnRMaWdodENvbG9yWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFxuXFx0dW5pZm9ybSB2ZWMzIHBvaW50TGlnaHRQb3NpdGlvblsgTUFYX1BPSU5UX0xJR0hUUyBdO1xcblxcdHVuaWZvcm0gZmxvYXQgcG9pbnRMaWdodERpc3RhbmNlWyBNQVhfUE9JTlRfTElHSFRTIF07XFxuXFx0dW5pZm9ybSBmbG9hdCBwb2ludExpZ2h0RGVjYXlbIE1BWF9QT0lOVF9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMFxcblxcblxcdHVuaWZvcm0gdmVjMyBzcG90TGlnaHRDb2xvclsgTUFYX1NQT1RfTElHSFRTIF07XFxuXFx0dW5pZm9ybSB2ZWMzIHNwb3RMaWdodFBvc2l0aW9uWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BvdExpZ2h0RGlyZWN0aW9uWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodEFuZ2xlQ29zWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodEV4cG9uZW50WyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodERpc3RhbmNlWyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNwb3RMaWdodERlY2F5WyBNQVhfU1BPVF9MSUdIVFMgXTtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgV1JBUF9BUk9VTkRcXG5cXG5cXHR1bmlmb3JtIHZlYzMgd3JhcFJHQjtcXG5cXG4jZW5kaWZcXG5cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc192ZXJ0ZXg9XCIjaWYgTUFYX1NQT1RfTElHSFRTID4gMCB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXG4jZW5kaWZcXG5cIjtUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfdmVydGV4PVwiI2lmIE1BWF9TUE9UX0xJR0hUUyA+IDAgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxpbmVhcl90b19nYW1tYV9mcmFnbWVudD1cIlxcblxcdG91dGdvaW5nTGlnaHQgPSBsaW5lYXJUb091dHB1dCggb3V0Z29pbmdMaWdodCApO1xcblwiO1RIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50PVwiI2lmIGRlZmluZWQoVVNFX0xPR0RFUFRIQlVGKSAmJiBkZWZpbmVkKFVTRV9MT0dERVBUSEJVRl9FWFQpXFxuXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gbG9nMih2RnJhZ0RlcHRoKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjU7XFxuXFxuI2VuZGlmXCI7XG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcblxcdFxcdCNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGVcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg9XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFxuXFx0I2VuZGlmXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleD1cIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXG5cXHRnbF9Qb3NpdGlvbi56ID0gbG9nMihtYXgoIEVQU0lMT04sIGdsX1Bvc2l0aW9uLncgKyAxLjAgKSkgKiBsb2dEZXB0aEJ1ZkZDO1xcblxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFxuI2Vsc2VcXG5cXG5cXHRcXHRnbF9Qb3NpdGlvbi56ID0gKGdsX1Bvc2l0aW9uLnogLSAxLjApICogZ2xfUG9zaXRpb24udztcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtcblRIUkVFLlNoYWRlckNodW5rLm1hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTUFQXFxuXFxuXFx0dmVjNCB0ZXhlbENvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVdiApO1xcblxcblxcdHRleGVsQ29sb3IueHl6ID0gaW5wdXRUb0xpbmVhciggdGV4ZWxDb2xvci54eXogKTtcXG5cXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfTUFQXFxuXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9mcmFnbWVudD1cIiNpZmRlZiBVU0VfTUFQXFxuXFxuXFx0ZGlmZnVzZUNvbG9yICo9IHRleHR1cmUyRCggbWFwLCB2ZWMyKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSApICogb2Zmc2V0UmVwZWF0Lnp3ICsgb2Zmc2V0UmVwZWF0Lnh5ICk7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfTUFQXFxuXFxuXFx0dW5pZm9ybSB2ZWM0IG9mZnNldFJlcGVhdDtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuXFxuI2VuZGlmXFxuXCI7VEhSRUUuU2hhZGVyQ2h1bmsubW9ycGhub3JtYWxfdmVydGV4PVwiI2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHR2ZWMzIG1vcnBoZWROb3JtYWwgPSB2ZWMzKCAwLjAgKTtcXG5cXG5cXHRtb3JwaGVkTm9ybWFsICs9ICggbW9ycGhOb3JtYWwwIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRtb3JwaGVkTm9ybWFsICs9ICggbW9ycGhOb3JtYWwxIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRtb3JwaGVkTm9ybWFsICs9ICggbW9ycGhOb3JtYWwyIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHRtb3JwaGVkTm9ybWFsICs9ICggbW9ycGhOb3JtYWwzIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG5cXG5cXHRtb3JwaGVkTm9ybWFsICs9IG5vcm1hbDtcXG5cXG4jZW5kaWZcIjtcblRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcblxcdHZlYzMgbW9ycGhlZCA9IHZlYzMoIDAuMCApO1xcblxcdG1vcnBoZWQgKz0gKCBtb3JwaFRhcmdldDAgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0MSAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRtb3JwaGVkICs9ICggbW9ycGhUYXJnZXQyIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdG1vcnBoZWQgKz0gKCBtb3JwaFRhcmdldDMgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0NCAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHRtb3JwaGVkICs9ICggbW9ycGhUYXJnZXQ1IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xcblxcdG1vcnBoZWQgKz0gKCBtb3JwaFRhcmdldDYgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0bW9ycGhlZCArPSAoIG1vcnBoVGFyZ2V0NyAtIHBvc2l0aW9uICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDcgXTtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHRtb3JwaGVkICs9IHBvc2l0aW9uO1xcblxcbiNlbmRpZlwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsubm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ9XCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuXFxuXFx0Ly8gUGVyLVBpeGVsIFRhbmdlbnQgU3BhY2UgTm9ybWFsIE1hcHBpbmdcXG5cXHQvLyBodHRwOi8vaGFja3NvZmxpZmUuYmxvZ3Nwb3QuY2gvMjAwOS8xMS9wZXItcGl4ZWwtdGFuZ2VudC1zcGFjZS1ub3JtYWwtbWFwcGluZy5odG1sXFxuXFxuXFx0dmVjMyBwZXJ0dXJiTm9ybWFsMkFyYiggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSApIHtcXG5cXG5cXHRcXHR2ZWMzIHEwID0gZEZkeCggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMzIHExID0gZEZkeSggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHZVdi5zdCApO1xcblxcdFxcdHZlYzIgc3QxID0gZEZkeSggdlV2LnN0ICk7XFxuXFxuXFx0XFx0dmVjMyBTID0gbm9ybWFsaXplKCBxMCAqIHN0MS50IC0gcTEgKiBzdDAudCApO1xcblxcdFxcdHZlYzMgVCA9IG5vcm1hbGl6ZSggLXEwICogc3QxLnMgKyBxMSAqIHN0MC5zICk7XFxuXFx0XFx0dmVjMyBOID0gbm9ybWFsaXplKCBzdXJmX25vcm0gKTtcXG5cXG5cXHRcXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdFxcdG1hcE4ueHkgPSBub3JtYWxTY2FsZSAqIG1hcE4ueHk7XFxuXFx0XFx0bWF0MyB0c24gPSBtYXQzKCBTLCBULCBOICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggdHNuICogbWFwTiApO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudD1cIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFxuXFx0I2lmZGVmIFNIQURPV01BUF9ERUJVR1xcblxcblxcdFxcdHZlYzMgZnJ1c3R1bUNvbG9yc1szXTtcXG5cXHRcXHRmcnVzdHVtQ29sb3JzWzBdID0gdmVjMyggMS4wLCAwLjUsIDAuMCApO1xcblxcdFxcdGZydXN0dW1Db2xvcnNbMV0gPSB2ZWMzKCAwLjAsIDEuMCwgMC44ICk7XFxuXFx0XFx0ZnJ1c3R1bUNvbG9yc1syXSA9IHZlYzMoIDAuMCwgMC41LCAxLjAgKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG5cXHQjaWZkZWYgU0hBRE9XTUFQX0NBU0NBREVcXG5cXG5cXHRcXHRpbnQgaW5GcnVzdHVtQ291bnQgPSAwO1xcblxcblxcdCNlbmRpZlxcblxcblxcdGZsb2F0IGZEZXB0aDtcXG5cXHR2ZWMzIHNoYWRvd0NvbG9yID0gdmVjMyggMS4wICk7XFxuXFxuXFx0Zm9yKCBpbnQgaSA9IDA7IGkgPCBNQVhfU0hBRE9XUzsgaSArKyApIHtcXG5cXG5cXHRcXHR2ZWMzIHNoYWRvd0Nvb3JkID0gdlNoYWRvd0Nvb3JkWyBpIF0ueHl6IC8gdlNoYWRvd0Nvb3JkWyBpIF0udztcXG5cXG5cXHRcXHRcXHRcXHQvLyBpZiAoIHNvbWV0aGluZyAmJiBzb21ldGhpbmcgKSBicmVha3MgQVRJIE9wZW5HTCBzaGFkZXIgY29tcGlsZXJcXG5cXHRcXHRcXHRcXHQvLyBpZiAoIGFsbCggc29tZXRoaW5nLCBzb21ldGhpbmcgKSApIHVzaW5nIHRoaXMgaW5zdGVhZFxcblxcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFxuXFx0XFx0XFx0XFx0Ly8gZG9uJ3Qgc2hhZG93IHBpeGVscyBvdXRzaWRlIG9mIGxpZ2h0IGZydXN0dW1cXG5cXHRcXHRcXHRcXHQvLyB1c2UganVzdCBmaXJzdCBmcnVzdHVtIChmb3IgY2FzY2FkZXMpXFxuXFx0XFx0XFx0XFx0Ly8gZG9uJ3Qgc2hhZG93IHBpeGVscyBiZWhpbmQgZmFyIHBsYW5lIG9mIGxpZ2h0IGZydXN0dW1cXG5cXG5cXHRcXHQjaWZkZWYgU0hBRE9XTUFQX0NBU0NBREVcXG5cXG5cXHRcXHRcXHRpbkZydXN0dW1Db3VudCArPSBpbnQoIGluRnJ1c3R1bSApO1xcblxcdFxcdFxcdGJ2ZWMzIGZydXN0dW1UZXN0VmVjID0gYnZlYzMoIGluRnJ1c3R1bSwgaW5GcnVzdHVtQ291bnQgPT0gMSwgc2hhZG93Q29vcmQueiA8PSAxLjAgKTtcXG5cXG5cXHRcXHQjZWxzZVxcblxcblxcdFxcdFxcdGJ2ZWMyIGZydXN0dW1UZXN0VmVjID0gYnZlYzIoIGluRnJ1c3R1bSwgc2hhZG93Q29vcmQueiA8PSAxLjAgKTtcXG5cXG5cXHRcXHQjZW5kaWZcXG5cXG5cXHRcXHRib29sIGZydXN0dW1UZXN0ID0gYWxsKCBmcnVzdHVtVGVzdFZlYyApO1xcblxcblxcdFxcdGlmICggZnJ1c3R1bVRlc3QgKSB7XFxuXFxuXFx0XFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzWyBpIF07XFxuXFxuXFx0XFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApXFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gUGVyY2VudGFnZS1jbG9zZSBmaWx0ZXJpbmdcXG5cXHRcXHRcXHRcXHRcXHRcXHQvLyAoOSBwaXhlbCBrZXJuZWwpXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gaHR0cDovL2ZhYmllbnNhbmdsYXJkLm5ldC9zaGFkb3dtYXBwaW5nUENGL1xcblxcblxcdFxcdFxcdFxcdGZsb2F0IHNoYWRvdyA9IDAuMDtcXG5cXG5cXHRcXHQvKlxcblxcdFxcdFxcdFxcdFxcdFxcdC8vIG5lc3RlZCBsb29wcyBicmVha3Mgc2hhZGVyIGNvbXBpbGVyIC8gdmFsaWRhdG9yIG9uIHNvbWUgQVRJIGNhcmRzIHdoZW4gdXNpbmcgT3BlbkdMXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gbXVzdCBlbnJvbGwgbG9vcCBtYW51YWxseVxcblxcblxcdFxcdFxcdFxcdGZvciAoIGZsb2F0IHkgPSAtMS4yNTsgeSA8PSAxLjI1OyB5ICs9IDEuMjUgKVxcblxcdFxcdFxcdFxcdFxcdGZvciAoIGZsb2F0IHggPSAtMS4yNTsgeCA8PSAxLjI1OyB4ICs9IDEuMjUgKSB7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0dmVjNCByZ2JhRGVwdGggPSB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCB2ZWMyKCB4ICogeFBpeGVsT2Zmc2V0LCB5ICogeVBpeGVsT2Zmc2V0ICkgKyBzaGFkb3dDb29yZC54eSApO1xcblxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdC8vIGRvZXNuJ3Qgc2VlbSB0byBwcm9kdWNlIGFueSBub3RpY2VhYmxlIHZpc3VhbCBkaWZmZXJlbmNlIGNvbXBhcmVkIHRvIHNpbXBsZSB0ZXh0dXJlMkQgbG9va3VwXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0Ly92ZWM0IHJnYmFEZXB0aCA9IHRleHR1cmUyRFByb2ooIHNoYWRvd01hcFsgaSBdLCB2ZWM0KCB2U2hhZG93Q29vcmRbIGkgXS53ICogKCB2ZWMyKCB4ICogeFBpeGVsT2Zmc2V0LCB5ICogeVBpeGVsT2Zmc2V0ICkgKyBzaGFkb3dDb29yZC54eSApLCAwLjA1LCB2U2hhZG93Q29vcmRbIGkgXS53ICkgKTtcXG5cXG5cXHRcXHRcXHRcXHRcXHRcXHRmbG9hdCBmRGVwdGggPSB1bnBhY2tEZXB0aCggcmdiYURlcHRoICk7XFxuXFxuXFx0XFx0XFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRzaGFkb3cgKz0gMS4wO1xcblxcblxcdFxcdFxcdFxcdH1cXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3cgLz0gOS4wO1xcblxcblxcdFxcdCovXFxuXFxuXFx0XFx0XFx0XFx0Y29uc3QgZmxvYXQgc2hhZG93RGVsdGEgPSAxLjAgLyA5LjA7XFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgeFBpeGVsT2Zmc2V0ID0gMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLng7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgeVBpeGVsT2Zmc2V0ID0gMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLnk7XFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgwID0gLTEuMjUgKiB4UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHkwID0gLTEuMjUgKiB5UGl4ZWxPZmZzZXQ7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgxID0gMS4yNSAqIHhQaXhlbE9mZnNldDtcXG5cXHRcXHRcXHRcXHRmbG9hdCBkeTEgPSAxLjI1ICogeVBpeGVsT2Zmc2V0O1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MCApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gc2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gc2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0ZkRlcHRoID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSApICk7XFxuXFx0XFx0XFx0XFx0aWYgKCBmRGVwdGggPCBzaGFkb3dDb29yZC56ICkgc2hhZG93ICs9IHNoYWRvd0RlbHRhO1xcblxcblxcdFxcdFxcdFxcdGZEZXB0aCA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGlmICggZkRlcHRoIDwgc2hhZG93Q29vcmQueiApIHNoYWRvdyArPSBzaGFkb3dEZWx0YTtcXG5cXG5cXHRcXHRcXHRcXHRmRGVwdGggPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApICkgKTtcXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKSBzaGFkb3cgKz0gc2hhZG93RGVsdGE7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93Q29sb3IgPSBzaGFkb3dDb2xvciAqIHZlYzMoICggMS4wIC0gc2hhZG93RGFya25lc3NbIGkgXSAqIHNoYWRvdyApICk7XFxuXFxuXFx0XFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcblxcdFxcdFxcdFxcdFxcdFxcdC8vIFBlcmNlbnRhZ2UtY2xvc2UgZmlsdGVyaW5nXFxuXFx0XFx0XFx0XFx0XFx0XFx0Ly8gKDkgcGl4ZWwga2VybmVsKVxcblxcdFxcdFxcdFxcdFxcdFxcdC8vIGh0dHA6Ly9mYWJpZW5zYW5nbGFyZC5uZXQvc2hhZG93bWFwcGluZ1BDRi9cXG5cXG5cXHRcXHRcXHRcXHRmbG9hdCBzaGFkb3cgPSAwLjA7XFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgeFBpeGVsT2Zmc2V0ID0gMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLng7XFxuXFx0XFx0XFx0XFx0ZmxvYXQgeVBpeGVsT2Zmc2V0ID0gMS4wIC8gc2hhZG93TWFwU2l6ZVsgaSBdLnk7XFxuXFxuXFx0XFx0XFx0XFx0ZmxvYXQgZHgwID0gLTEuMCAqIHhQaXhlbE9mZnNldDtcXG5cXHRcXHRcXHRcXHRmbG9hdCBkeTAgPSAtMS4wICogeVBpeGVsT2Zmc2V0O1xcblxcdFxcdFxcdFxcdGZsb2F0IGR4MSA9IDEuMCAqIHhQaXhlbE9mZnNldDtcXG5cXHRcXHRcXHRcXHRmbG9hdCBkeTEgPSAxLjAgKiB5UGl4ZWxPZmZzZXQ7XFxuXFxuXFx0XFx0XFx0XFx0bWF0MyBzaGFkb3dLZXJuZWw7XFxuXFx0XFx0XFx0XFx0bWF0MyBkZXB0aEtlcm5lbDtcXG5cXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFswXVswXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzBdWzFdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbMF1bMl0gPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApICkgKTtcXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFsxXVswXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzFdWzFdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICkgKTtcXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFsxXVsyXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICkgKSApO1xcblxcdFxcdFxcdFxcdGRlcHRoS2VybmVsWzJdWzBdID0gdW5wYWNrRGVwdGgoIHRleHR1cmUyRCggc2hhZG93TWFwWyBpIF0sIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSApICk7XFxuXFx0XFx0XFx0XFx0ZGVwdGhLZXJuZWxbMl1bMV0gPSB1bnBhY2tEZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dNYXBbIGkgXSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApICkgKTtcXG5cXHRcXHRcXHRcXHRkZXB0aEtlcm5lbFsyXVsyXSA9IHVucGFja0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICkgKSApO1xcblxcblxcdFxcdFxcdFxcdHZlYzMgc2hhZG93WiA9IHZlYzMoIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbMF0gPSB2ZWMzKGxlc3NUaGFuKGRlcHRoS2VybmVsWzBdLCBzaGFkb3daICkpO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFswXSAqPSB2ZWMzKDAuMjUpO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFsxXSA9IHZlYzMobGVzc1RoYW4oZGVwdGhLZXJuZWxbMV0sIHNoYWRvd1ogKSk7XFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWzFdICo9IHZlYzMoMC4yNSk7XFxuXFxuXFx0XFx0XFx0XFx0c2hhZG93S2VybmVsWzJdID0gdmVjMyhsZXNzVGhhbihkZXB0aEtlcm5lbFsyXSwgc2hhZG93WiApKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbMl0gKj0gdmVjMygwLjI1KTtcXG5cXG5cXHRcXHRcXHRcXHR2ZWMyIGZyYWN0aW9uYWxDb29yZCA9IDEuMCAtIGZyYWN0KCBzaGFkb3dDb29yZC54eSAqIHNoYWRvd01hcFNpemVbaV0ueHkgKTtcXG5cXG5cXHRcXHRcXHRcXHRzaGFkb3dLZXJuZWxbMF0gPSBtaXgoIHNoYWRvd0tlcm5lbFsxXSwgc2hhZG93S2VybmVsWzBdLCBmcmFjdGlvbmFsQ29vcmQueCApO1xcblxcdFxcdFxcdFxcdHNoYWRvd0tlcm5lbFsxXSA9IG1peCggc2hhZG93S2VybmVsWzJdLCBzaGFkb3dLZXJuZWxbMV0sIGZyYWN0aW9uYWxDb29yZC54ICk7XFxuXFxuXFx0XFx0XFx0XFx0dmVjNCBzaGFkb3dWYWx1ZXM7XFxuXFx0XFx0XFx0XFx0c2hhZG93VmFsdWVzLnggPSBtaXgoIHNoYWRvd0tlcm5lbFswXVsxXSwgc2hhZG93S2VybmVsWzBdWzBdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcdFxcdFxcdFxcdHNoYWRvd1ZhbHVlcy55ID0gbWl4KCBzaGFkb3dLZXJuZWxbMF1bMl0sIHNoYWRvd0tlcm5lbFswXVsxXSwgZnJhY3Rpb25hbENvb3JkLnkgKTtcXG5cXHRcXHRcXHRcXHRzaGFkb3dWYWx1ZXMueiA9IG1peCggc2hhZG93S2VybmVsWzFdWzFdLCBzaGFkb3dLZXJuZWxbMV1bMF0sIGZyYWN0aW9uYWxDb29yZC55ICk7XFxuXFx0XFx0XFx0XFx0c2hhZG93VmFsdWVzLncgPSBtaXgoIHNoYWRvd0tlcm5lbFsxXVsyXSwgc2hhZG93S2VybmVsWzFdWzFdLCBmcmFjdGlvbmFsQ29vcmQueSApO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvdyA9IGRvdCggc2hhZG93VmFsdWVzLCB2ZWM0KCAxLjAgKSApO1xcblxcblxcdFxcdFxcdFxcdHNoYWRvd0NvbG9yID0gc2hhZG93Q29sb3IgKiB2ZWMzKCAoIDEuMCAtIHNoYWRvd0RhcmtuZXNzWyBpIF0gKiBzaGFkb3cgKSApO1xcblxcblxcdFxcdFxcdCNlbHNlXFxuXFxuXFx0XFx0XFx0XFx0dmVjNCByZ2JhRGVwdGggPSB0ZXh0dXJlMkQoIHNoYWRvd01hcFsgaSBdLCBzaGFkb3dDb29yZC54eSApO1xcblxcdFxcdFxcdFxcdGZsb2F0IGZEZXB0aCA9IHVucGFja0RlcHRoKCByZ2JhRGVwdGggKTtcXG5cXG5cXHRcXHRcXHRcXHRpZiAoIGZEZXB0aCA8IHNoYWRvd0Nvb3JkLnogKVxcblxcblxcdFxcdC8vIHNwb3Qgd2l0aCBtdWx0aXBsZSBzaGFkb3dzIGlzIGRhcmtlclxcblxcblxcdFxcdFxcdFxcdFxcdHNoYWRvd0NvbG9yID0gc2hhZG93Q29sb3IgKiB2ZWMzKCAxLjAgLSBzaGFkb3dEYXJrbmVzc1sgaSBdICk7XFxuXFxuXFx0XFx0Ly8gc3BvdCB3aXRoIG11bHRpcGxlIHNoYWRvd3MgaGFzIHRoZSBzYW1lIGNvbG9yIGFzIHNpbmdsZSBzaGFkb3cgc3BvdFxcblxcblxcdFxcdC8vIFxcdFxcdFxcdFxcdFxcdHNoYWRvd0NvbG9yID0gbWluKCBzaGFkb3dDb2xvciwgdmVjMyggc2hhZG93RGFya25lc3NbIGkgXSApICk7XFxuXFxuXFx0XFx0XFx0I2VuZGlmXFxuXFxuXFx0XFx0fVxcblxcblxcblxcdFxcdCNpZmRlZiBTSEFET1dNQVBfREVCVUdcXG5cXG5cXHRcXHRcXHQjaWZkZWYgU0hBRE9XTUFQX0NBU0NBREVcXG5cXG5cXHRcXHRcXHRcXHRpZiAoIGluRnJ1c3R1bSAmJiBpbkZydXN0dW1Db3VudCA9PSAxICkgb3V0Z29pbmdMaWdodCAqPSBmcnVzdHVtQ29sb3JzWyBpIF07XFxuXFxuXFx0XFx0XFx0I2Vsc2VcXG5cXG5cXHRcXHRcXHRcXHRpZiAoIGluRnJ1c3R1bSApIG91dGdvaW5nTGlnaHQgKj0gZnJ1c3R1bUNvbG9yc1sgaSBdO1xcblxcblxcdFxcdFxcdCNlbmRpZlxcblxcblxcdFxcdCNlbmRpZlxcblxcblxcdH1cXG5cXG5cXHQvLyBOT1RFOiBJIGFtIHVuc3VyZSBpZiB0aGlzIGlzIGNvcnJlY3QgaW4gbGluZWFyIHNwYWNlLiAgLWJob3VzdG9uLCBEZWMgMjksIDIwMTRcXG5cXHRzaGFkb3dDb2xvciA9IGlucHV0VG9MaW5lYXIoIHNoYWRvd0NvbG9yICk7XFxuXFxuXFx0b3V0Z29pbmdMaWdodCA9IG91dGdvaW5nTGlnaHQgKiBzaGFkb3dDb2xvcjtcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PVwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGFkb3dNYXBbIE1BWF9TSEFET1dTIF07XFxuXFx0dW5pZm9ybSB2ZWMyIHNoYWRvd01hcFNpemVbIE1BWF9TSEFET1dTIF07XFxuXFxuXFx0dW5pZm9ybSBmbG9hdCBzaGFkb3dEYXJrbmVzc1sgTUFYX1NIQURPV1MgXTtcXG5cXHR1bmlmb3JtIGZsb2F0IHNoYWRvd0JpYXNbIE1BWF9TSEFET1dTIF07XFxuXFxuXFx0dmFyeWluZyB2ZWM0IHZTaGFkb3dDb29yZFsgTUFYX1NIQURPV1MgXTtcXG5cXG5cXHRmbG9hdCB1bnBhY2tEZXB0aCggY29uc3QgaW4gdmVjNCByZ2JhX2RlcHRoICkge1xcblxcblxcdFxcdGNvbnN0IHZlYzQgYml0X3NoaWZ0ID0gdmVjNCggMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICogMjU2LjAgKSwgMS4wIC8gKCAyNTYuMCAqIDI1Ni4wICksIDEuMCAvIDI1Ni4wLCAxLjAgKTtcXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGRvdCggcmdiYV9kZXB0aCwgYml0X3NoaWZ0ICk7XFxuXFx0XFx0cmV0dXJuIGRlcHRoO1xcblxcblxcdH1cXG5cXG4jZW5kaWZcIjtcblRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFxuXFx0dmFyeWluZyB2ZWM0IHZTaGFkb3dDb29yZFsgTUFYX1NIQURPV1MgXTtcXG5cXHR1bmlmb3JtIG1hdDQgc2hhZG93TWF0cml4WyBNQVhfU0hBRE9XUyBdO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcblxcdGZvciggaW50IGkgPSAwOyBpIDwgTUFYX1NIQURPV1M7IGkgKysgKSB7XFxuXFxuXFx0XFx0dlNoYWRvd0Nvb3JkWyBpIF0gPSBzaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFxuXFx0fVxcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleD1cIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXG5cXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcXG5cXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcXG5cXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcXG5cXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcXG5cXG4jZW5kaWZcIjtcblRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4PVwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVXaWR0aDtcXG5cXHRcXHR1bmlmb3JtIGludCBib25lVGV4dHVyZUhlaWdodDtcXG5cXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFxuXFx0XFx0XFx0ZmxvYXQgaiA9IGkgKiA0LjA7XFxuXFx0XFx0XFx0ZmxvYXQgeCA9IG1vZCggaiwgZmxvYXQoIGJvbmVUZXh0dXJlV2lkdGggKSApO1xcblxcdFxcdFxcdGZsb2F0IHkgPSBmbG9vciggaiAvIGZsb2F0KCBib25lVGV4dHVyZVdpZHRoICkgKTtcXG5cXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVdpZHRoICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVIZWlnaHQgKTtcXG5cXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXG5cXHRcXHR9XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZUdsb2JhbE1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZUdsb2JhbE1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXG5cXHRcXHR9XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay5za2lubmluZ192ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0I2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggbW9ycGhlZCwgMS4wICk7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcblxcdCNlbmRpZlxcblxcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHNraW5uZWQgID0gYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkO1xcblxcbiNlbmRpZlxcblwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5vcm1hbF92ZXJ0ZXg9XCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFxuXFx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueSAqIGJvbmVNYXRZO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0VztcXG5cXHRza2luTWF0cml4ICA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFxuXFx0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXG5cXHR2ZWM0IHNraW5uZWROb3JtYWwgPSBza2luTWF0cml4ICogdmVjNCggbW9ycGhlZE5vcm1hbCwgMC4wICk7XFxuXFxuXFx0I2Vsc2VcXG5cXG5cXHR2ZWM0IHNraW5uZWROb3JtYWwgPSBza2luTWF0cml4ICogdmVjNCggbm9ybWFsLCAwLjAgKTtcXG5cXG5cXHQjZW5kaWZcXG5cXG4jZW5kaWZcXG5cIjtcblRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX2ZyYWdtZW50PVwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG5cXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG5cXG4jZWxzZVxcblxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD1cIiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay51djJfcGFyc19mcmFnbWVudD1cIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcblxcbiNlbmRpZlwiO1xuVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3BhcnNfdmVydGV4PVwiI2lmIGRlZmluZWQoIFVTRV9MSUdIVE1BUCApIHx8IGRlZmluZWQoIFVTRV9BT01BUCApXFxuXFxuXFx0YXR0cmlidXRlIHZlYzIgdXYyO1xcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnV2Ml92ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXG5cXHR2VXYyID0gdXYyO1xcblxcbiNlbmRpZlwiO1RIUkVFLlNoYWRlckNodW5rLnV2X3BhcnNfZnJhZ21lbnQ9XCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApXFxuXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG5cXG4jZW5kaWZcIjtUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX3ZlcnRleD1cIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcXG5cXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcblxcdHVuaWZvcm0gdmVjNCBvZmZzZXRSZXBlYXQ7XFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5TaGFkZXJDaHVuay51dl92ZXJ0ZXg9XCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApXFxuXFxuXFx0dlV2ID0gdXYgKiBvZmZzZXRSZXBlYXQuencgKyBvZmZzZXRSZXBlYXQueHk7XFxuXFxuI2VuZGlmXCI7VEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4PVwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIExBTUJFUlQgKSB8fCBkZWZpbmVkICggVVNFX1NIQURPV01BUCApXFxuXFxuXFx0I2lmZGVmIFVTRV9TS0lOTklOR1xcblxcblxcdFxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogc2tpbm5lZDtcXG5cXG5cXHQjZWxpZiBkZWZpbmVkKCBVU0VfTU9SUEhUQVJHRVRTIClcXG5cXG5cXHRcXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIG1vcnBoZWQsIDEuMCApO1xcblxcblxcdCNlbHNlXFxuXFxuXFx0XFx0dmVjNCB3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFxuXFx0I2VuZGlmXFxuXFxuI2VuZGlmXFxuXCI7XG5USFJFRS5Vbmlmb3Jtc1V0aWxzPXttZXJnZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9e30sYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD10aGlzLmNsb25lKGFbY10pLGU7Zm9yKGUgaW4gZCliW2VdPWRbZV19cmV0dXJuIGJ9LGNsb25lOmZ1bmN0aW9uKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSl7YltjXT17fTtmb3IodmFyIGQgaW4gYVtjXSl7dmFyIGU9YVtjXVtkXTtiW2NdW2RdPWUgaW5zdGFuY2VvZiBUSFJFRS5Db2xvcnx8ZSBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjJ8fGUgaW5zdGFuY2VvZiBUSFJFRS5WZWN0b3IzfHxlIGluc3RhbmNlb2YgVEhSRUUuVmVjdG9yNHx8ZSBpbnN0YW5jZW9mIFRIUkVFLk1hdHJpeDN8fGUgaW5zdGFuY2VvZiBUSFJFRS5NYXRyaXg0fHxlIGluc3RhbmNlb2YgVEhSRUUuVGV4dHVyZT9lLmNsb25lKCk6ZSBpbnN0YW5jZW9mIEFycmF5P2Uuc2xpY2UoKTplfX1yZXR1cm4gYn19O1xuVEhSRUUuVW5pZm9ybXNMaWI9e2NvbW1vbjp7ZGlmZnVzZTp7dHlwZTpcImNcIix2YWx1ZTpuZXcgVEhSRUUuQ29sb3IoMTU2NTg3MzQpfSxvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9LG1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxvZmZzZXRSZXBlYXQ6e3R5cGU6XCJ2NFwiLHZhbHVlOm5ldyBUSFJFRS5WZWN0b3I0KDAsMCwxLDEpfSxsaWdodE1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxsaWdodE1hcEludGVuc2l0eTp7dHlwZTpcImZcIix2YWx1ZToxfSxhb01hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxhb01hcEludGVuc2l0eTp7dHlwZTpcImZcIix2YWx1ZToxfSxzcGVjdWxhck1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxhbHBoYU1hcDp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxlbnZNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sZmxpcEVudk1hcDp7dHlwZTpcImZcIix2YWx1ZTotMX0scmVmbGVjdGl2aXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9LHJlZnJhY3Rpb25SYXRpbzp7dHlwZTpcImZcIixcbnZhbHVlOi45OH0sbW9ycGhUYXJnZXRJbmZsdWVuY2VzOnt0eXBlOlwiZlwiLHZhbHVlOjB9fSxidW1wOntidW1wTWFwOnt0eXBlOlwidFwiLHZhbHVlOm51bGx9LGJ1bXBTY2FsZTp7dHlwZTpcImZcIix2YWx1ZToxfX0sbm9ybWFsbWFwOntub3JtYWxNYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sbm9ybWFsU2NhbGU6e3R5cGU6XCJ2MlwiLHZhbHVlOm5ldyBUSFJFRS5WZWN0b3IyKDEsMSl9fSxmb2c6e2ZvZ0RlbnNpdHk6e3R5cGU6XCJmXCIsdmFsdWU6Mi41RS00fSxmb2dOZWFyOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGZvZ0Zhcjp7dHlwZTpcImZcIix2YWx1ZToyRTN9LGZvZ0NvbG9yOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigxNjc3NzIxNSl9fSxsaWdodHM6e2FtYmllbnRMaWdodENvbG9yOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0sZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LGRpcmVjdGlvbmFsTGlnaHRDb2xvcjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LFxuaGVtaXNwaGVyZUxpZ2h0RGlyZWN0aW9uOnt0eXBlOlwiZnZcIix2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxoZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvcjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHRDb2xvcjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHRQb3NpdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHBvaW50TGlnaHREaXN0YW5jZTp7dHlwZTpcImZ2MVwiLHZhbHVlOltdfSxwb2ludExpZ2h0RGVjYXk6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc3BvdExpZ2h0Q29sb3I6e3R5cGU6XCJmdlwiLHZhbHVlOltdfSxzcG90TGlnaHRQb3NpdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHNwb3RMaWdodERpcmVjdGlvbjp7dHlwZTpcImZ2XCIsdmFsdWU6W119LHNwb3RMaWdodERpc3RhbmNlOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNwb3RMaWdodEFuZ2xlQ29zOnt0eXBlOlwiZnYxXCIsdmFsdWU6W119LHNwb3RMaWdodEV4cG9uZW50Ont0eXBlOlwiZnYxXCIsXG52YWx1ZTpbXX0sc3BvdExpZ2h0RGVjYXk6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX19LHBhcnRpY2xlOntwc0NvbG9yOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigxNTY1ODczNCl9LG9wYWNpdHk6e3R5cGU6XCJmXCIsdmFsdWU6MX0sc2l6ZTp7dHlwZTpcImZcIix2YWx1ZToxfSxzY2FsZTp7dHlwZTpcImZcIix2YWx1ZToxfSxtYXA6e3R5cGU6XCJ0XCIsdmFsdWU6bnVsbH0sb2Zmc2V0UmVwZWF0Ont0eXBlOlwidjRcIix2YWx1ZTpuZXcgVEhSRUUuVmVjdG9yNCgwLDAsMSwxKX0sZm9nRGVuc2l0eTp7dHlwZTpcImZcIix2YWx1ZToyLjVFLTR9LGZvZ05lYXI6e3R5cGU6XCJmXCIsdmFsdWU6MX0sZm9nRmFyOnt0eXBlOlwiZlwiLHZhbHVlOjJFM30sZm9nQ29sb3I6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDE2Nzc3MjE1KX19LHNoYWRvd21hcDp7c2hhZG93TWFwOnt0eXBlOlwidHZcIix2YWx1ZTpbXX0sc2hhZG93TWFwU2l6ZTp7dHlwZTpcInYydlwiLHZhbHVlOltdfSxzaGFkb3dCaWFzOnt0eXBlOlwiZnYxXCIsXG52YWx1ZTpbXX0sc2hhZG93RGFya25lc3M6e3R5cGU6XCJmdjFcIix2YWx1ZTpbXX0sc2hhZG93TWF0cml4Ont0eXBlOlwibTR2XCIsdmFsdWU6W119fX07XG5USFJFRS5TaGFkZXJMaWI9e2Jhc2ljOnt1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtUSFJFRS5Vbmlmb3Jtc0xpYi5jb21tb24sVEhSRUUuVW5pZm9ybXNMaWIuZm9nLFRIUkVFLlVuaWZvcm1zTGliLnNoYWRvd21hcF0pLHZlcnRleFNoYWRlcjpbVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLnV2X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLnV2X3ZlcnRleCxcblRIUkVFLlNoYWRlckNodW5rLnV2Ml92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleCxcIlxcdCNpZmRlZiBVU0VfRU5WTUFQXCIsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGhub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5ub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRub3JtYWxfdmVydGV4LFwiXFx0I2VuZGlmXCIsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XCIsXG5USFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYW9tYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcInZvaWQgbWFpbigpIHtcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcIixcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hbHBoYXRlc3RfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfZnJhZ21lbnQsXCJcXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcIixUSFJFRS5TaGFkZXJDaHVuay5hb21hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodG1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxpbmVhcl90b19nYW1tYV9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfZnJhZ21lbnQsXCJcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcbn1cIl0uam9pbihcIlxcblwiKX0sXG5sYW1iZXJ0Ont1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtUSFJFRS5Vbmlmb3Jtc0xpYi5jb21tb24sVEhSRUUuVW5pZm9ybXNMaWIuZm9nLFRIUkVFLlVuaWZvcm1zTGliLmxpZ2h0cyxUSFJFRS5Vbmlmb3Jtc0xpYi5zaGFkb3dtYXAse2VtaXNzaXZlOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigwKX0sd3JhcFJHQjp7dHlwZTpcInYzXCIsdmFsdWU6bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpfX1dKSx2ZXJ0ZXhTaGFkZXI6W1wiI2RlZmluZSBMQU1CRVJUXFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsudXZfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfbGFtYmVydF9wYXJzX3ZlcnRleCxcblRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay51dl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGhub3JtYWxfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5iYXNlX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0bm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfdmVydGV4LFxuVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLndvcmxkcG9zX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0c19sYW1iZXJ0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZMaWdodEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG4jZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay51dl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2Ml9wYXJzX2ZyYWdtZW50LFxuVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGFtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5hb21hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxuVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxcIlxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRpZiAoIGdsX0Zyb250RmFjaW5nIClcXG5cXHRcXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci5yZ2IgKiB2TGlnaHRGcm9udCArIGVtaXNzaXZlO1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci5yZ2IgKiB2TGlnaHRCYWNrICsgZW1pc3NpdmU7XFxuXFx0I2Vsc2VcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGRpZmZ1c2VDb2xvci5yZ2IgKiB2TGlnaHRGcm9udCArIGVtaXNzaXZlO1xcblxcdCNlbmRpZlwiLFRIUkVFLlNoYWRlckNodW5rLmFvbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxpZ2h0bWFwX2ZyYWdtZW50LFxuVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LHBob25nOnt1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLm1lcmdlKFtUSFJFRS5Vbmlmb3Jtc0xpYi5jb21tb24sVEhSRUUuVW5pZm9ybXNMaWIuYnVtcCxUSFJFRS5Vbmlmb3Jtc0xpYi5ub3JtYWxtYXAsVEhSRUUuVW5pZm9ybXNMaWIuZm9nLFRIUkVFLlVuaWZvcm1zTGliLmxpZ2h0cyxUSFJFRS5Vbmlmb3Jtc0xpYi5zaGFkb3dtYXAse2VtaXNzaXZlOnt0eXBlOlwiY1wiLHZhbHVlOm5ldyBUSFJFRS5Db2xvcigwKX0sc3BlY3VsYXI6e3R5cGU6XCJjXCIsdmFsdWU6bmV3IFRIUkVFLkNvbG9yKDExMTg0ODEpfSxcbnNoaW5pbmVzczp7dHlwZTpcImZcIix2YWx1ZTozMH0sd3JhcFJHQjp7dHlwZTpcInYzXCIsdmFsdWU6bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDEpfX1dKSx2ZXJ0ZXhTaGFkZXI6W1wiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsudXZfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmVudm1hcF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XCIsVEhSRUUuU2hhZGVyQ2h1bmsudXZfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnV2Ml92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLm1vcnBobm9ybWFsX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5vcm1hbF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXCIjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2tpbm5pbmdfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmRlZmF1bHRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcblwiXFx0dlZpZXdQb3NpdGlvbiA9IC1tdlBvc2l0aW9uLnh5ejtcIixUSFJFRS5TaGFkZXJDaHVuay53b3JsZHBvc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1wiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnV2X3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsudXYyX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX3BhcnNfZnJhZ21lbnQsXG5USFJFRS5TaGFkZXJDaHVuay5hbHBoYW1hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFvbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5lbnZtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5mb2dfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zaGFkb3dtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5idW1wbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1wiLFxuVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhbWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmFscGhhdGVzdF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5zcGVjdWxhcm1hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saWdodHNfcGhvbmdfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYW9tYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsubGlnaHRtYXBfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZW52bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5saW5lYXJfdG9fZ2FtbWFfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuZm9nX2ZyYWdtZW50LFwiXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG59XCJdLmpvaW4oXCJcXG5cIil9LFxucGFydGljbGVfYmFzaWM6e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1RIUkVFLlVuaWZvcm1zTGliLnBhcnRpY2xlLFRIUkVFLlVuaWZvcm1zTGliLnNoYWRvd21hcF0pLHZlcnRleFNoYWRlcjpbXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfcGFyc192ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX3BhcnNfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbG9yX3ZlcnRleCxcIlxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGdsX1BvaW50U2l6ZSA9IHNpemUgKiAoIHNjYWxlIC8gbGVuZ3RoKCBtdlBvc2l0aW9uLnh5eiApICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRnbF9Qb2ludFNpemUgPSBzaXplO1xcblxcdCNlbmRpZlxcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCIsXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsud29ybGRwb3NfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSB2ZWMzIHBzQ29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLnNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBwc0NvbG9yLCBvcGFjaXR5ICk7XCIsXG5USFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9mcmFnbWVudCxUSFJFRS5TaGFkZXJDaHVuay5tYXBfcGFydGljbGVfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuYWxwaGF0ZXN0X2ZyYWdtZW50LFwiXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XCIsVEhSRUUuU2hhZGVyQ2h1bmsuc2hhZG93bWFwX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19mcmFnbWVudCxcIlxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxufVwiXS5qb2luKFwiXFxuXCIpfSxkYXNoZWQ6e3VuaWZvcm1zOlRIUkVFLlVuaWZvcm1zVXRpbHMubWVyZ2UoW1RIUkVFLlVuaWZvcm1zTGliLmNvbW1vbixUSFJFRS5Vbmlmb3Jtc0xpYi5mb2cse3NjYWxlOnt0eXBlOlwiZlwiLHZhbHVlOjF9LGRhc2hTaXplOnt0eXBlOlwiZlwiLHZhbHVlOjF9LHRvdGFsU2l6ZTp7dHlwZTpcImZcIix2YWx1ZToyfX1dKSxcbnZlcnRleFNoYWRlcjpbXCJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl92ZXJ0ZXgsXCJcXHR2TGluZURpc3RhbmNlID0gc2NhbGUgKiBsaW5lRGlzdGFuY2U7XFxuXFx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIGZsb2F0IGRhc2hTaXplO1xcbnVuaWZvcm0gZmxvYXQgdG90YWxTaXplO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcIixcblRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5jb2xvcl9wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmZvZ19wYXJzX2ZyYWdtZW50LFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxuXFx0aWYgKCBtb2QoIHZMaW5lRGlzdGFuY2UsIHRvdGFsU2l6ZSApID4gZGFzaFNpemUgKSB7XFxuXFx0XFx0ZGlzY2FyZDtcXG5cXHR9XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsVEhSRUUuU2hhZGVyQ2h1bmsuY29sb3JfZnJhZ21lbnQsXCJcXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcIixUSFJFRS5TaGFkZXJDaHVuay5mb2dfZnJhZ21lbnQsXCJcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcbn1cIl0uam9pbihcIlxcblwiKX0sXG5kZXB0aDp7dW5pZm9ybXM6e21OZWFyOnt0eXBlOlwiZlwiLHZhbHVlOjF9LG1GYXI6e3R5cGU6XCJmXCIsdmFsdWU6MkUzfSxvcGFjaXR5Ont0eXBlOlwiZlwiLHZhbHVlOjF9fSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsuZGVmYXVsdF92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4LFwifVwiXS5qb2luKFwiXFxuXCIpLGZyYWdtZW50U2hhZGVyOltcInVuaWZvcm0gZmxvYXQgbU5lYXI7XFxudW5pZm9ybSBmbG9hdCBtRmFyO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblwidm9pZCBtYWluKCkge1wiLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFwiXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHRmbG9hdCBkZXB0aCA9IGdsX0ZyYWdEZXB0aEVYVCAvIGdsX0ZyYWdDb29yZC53O1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZGVwdGggPSBnbF9GcmFnQ29vcmQueiAvIGdsX0ZyYWdDb29yZC53O1xcblxcdCNlbmRpZlxcblxcdGZsb2F0IGNvbG9yID0gMS4wIC0gc21vb3Roc3RlcCggbU5lYXIsIG1GYXIsIGRlcHRoICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggdmVjMyggY29sb3IgKSwgb3BhY2l0eSApO1xcbn1cIl0uam9pbihcIlxcblwiKX0sbm9ybWFsOnt1bmlmb3Jtczp7b3BhY2l0eTp7dHlwZTpcImZcIix2YWx1ZToxfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2Tm9ybWFsO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcblwidm9pZCBtYWluKCkge1xcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1wiLFRIUkVFLlNoYWRlckNodW5rLm1vcnBodGFyZ2V0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1wiLFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIDAuNSAqIG5vcm1hbGl6ZSggdk5vcm1hbCApICsgMC41LCBvcGFjaXR5ICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJ9XCJdLmpvaW4oXCJcXG5cIil9LGN1YmU6e3VuaWZvcm1zOnt0Q3ViZTp7dHlwZTpcInRcIix2YWx1ZTpudWxsfSxcbnRGbGlwOnt0eXBlOlwiZlwiLHZhbHVlOi0xfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcIixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1widW5pZm9ybSBzYW1wbGVyQ3ViZSB0Q3ViZTtcXG51bmlmb3JtIGZsb2F0IHRGbGlwO1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblwidm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGRQb3NpdGlvbi54LCB2V29ybGRQb3NpdGlvbi55eiApICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXCJ9XCJdLmpvaW4oXCJcXG5cIil9LGVxdWlyZWN0Ont1bmlmb3Jtczp7dEVxdWlyZWN0Ont0eXBlOlwidFwiLHZhbHVlOm51bGx9LHRGbGlwOnt0eXBlOlwiZlwiLHZhbHVlOi0xfX0sdmVydGV4U2hhZGVyOltcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcIixUSFJFRS5TaGFkZXJDaHVuay5jb21tb24sVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXCJ2b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcIixcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCxcIn1cIl0uam9pbihcIlxcblwiKSxmcmFnbWVudFNoYWRlcjpbXCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XCIsVEhSRUUuU2hhZGVyQ2h1bmsuY29tbW9uLFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXCJ2b2lkIG1haW4oKSB7XFxudmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uICk7XFxudmVjMiBzYW1wbGVVVjtcXG5zYW1wbGVVVi55ID0gc2F0dXJhdGUoIHRGbGlwICogZGlyZWN0aW9uLnkgKiAtMC41ICsgMC41ICk7XFxuc2FtcGxlVVYueCA9IGF0YW4oIGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XCIsVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQsXG5cIn1cIl0uam9pbihcIlxcblwiKX0sZGVwdGhSR0JBOnt1bmlmb3Jtczp7fSx2ZXJ0ZXhTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5tb3JwaHRhcmdldF9wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5za2lubmluZ19wYXJzX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcInZvaWQgbWFpbigpIHtcIixUSFJFRS5TaGFkZXJDaHVuay5za2luYmFzZV92ZXJ0ZXgsVEhSRUUuU2hhZGVyQ2h1bmsubW9ycGh0YXJnZXRfdmVydGV4LFRIUkVFLlNoYWRlckNodW5rLnNraW5uaW5nX3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5kZWZhdWx0X3ZlcnRleCxUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl92ZXJ0ZXgsXCJ9XCJdLmpvaW4oXCJcXG5cIiksZnJhZ21lbnRTaGFkZXI6W1RIUkVFLlNoYWRlckNodW5rLmNvbW1vbixUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFwidmVjNCBwYWNrX2RlcHRoKCBjb25zdCBpbiBmbG9hdCBkZXB0aCApIHtcXG5cXHRjb25zdCB2ZWM0IGJpdF9zaGlmdCA9IHZlYzQoIDI1Ni4wICogMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAsIDEuMCApO1xcblxcdGNvbnN0IHZlYzQgYml0X21hc2sgPSB2ZWM0KCAwLjAsIDEuMCAvIDI1Ni4wLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAgKTtcXG5cXHR2ZWM0IHJlcyA9IG1vZCggZGVwdGggKiBiaXRfc2hpZnQgKiB2ZWM0KCAyNTUgKSwgdmVjNCggMjU2ICkgKSAvIHZlYzQoIDI1NSApO1xcblxcdHJlcyAtPSByZXMueHh5eiAqIGJpdF9tYXNrO1xcblxcdHJldHVybiByZXM7XFxufVxcbnZvaWQgbWFpbigpIHtcIixcblRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX2ZyYWdtZW50LFwiXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHRnbF9GcmFnRGF0YVsgMCBdID0gcGFja19kZXB0aCggZ2xfRnJhZ0RlcHRoRVhUICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRnbF9GcmFnRGF0YVsgMCBdID0gcGFja19kZXB0aCggZ2xfRnJhZ0Nvb3JkLnogKTtcXG5cXHQjZW5kaWZcXG59XCJdLmpvaW4oXCJcXG5cIil9fTtcblRIUkVFLldlYkdMUmVuZGVyZXI9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIsYyxkKXt2YXIgZTtpZihjIGluc3RhbmNlb2YgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkmJihlPVouZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSxudWxsPT09ZSkpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKTtyZXR1cm59dmFyIGY9Yy5hdHRyaWJ1dGVzLGc9Yi5hdHRyaWJ1dGVzO2I9Yi5hdHRyaWJ1dGVzS2V5cztmb3IodmFyIGg9MCxrPWIubGVuZ3RoO2g8aztoKyspe3ZhciBtPWJbaF0sbD1nW21dO2lmKDA8PWwpe3ZhciBwPWZbbV07aWYodm9pZCAwIT09cClpZihtPXAuaXRlbVNpemUsVS5lbmFibGVBdHRyaWJ1dGUobCkscCBpbnN0YW5jZW9mXG5USFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSl7dmFyIG49cC5kYXRhLHU9bi5zdHJpZGUscz1wLm9mZnNldDtxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIscC5kYXRhLmJ1ZmZlcik7cS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGwsbSxxLkZMT0FULCExLHUqbi5hcnJheS5CWVRFU19QRVJfRUxFTUVOVCwoZCp1K3MpKm4uYXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO2lmKG4gaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlcil7aWYobnVsbD09PWUpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7cmV0dXJufWUudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGwsbi5tZXNoUGVyQXR0cmlidXRlKTt2b2lkIDA9PT1jLm1heEluc3RhbmNlZENvdW50JiZcbihjLm1heEluc3RhbmNlZENvdW50PW4uYXJyYXkubGVuZ3RoL24uc3RyaWRlKm4ubWVzaFBlckF0dHJpYnV0ZSl9fWVsc2V7aWYocS5iaW5kQnVmZmVyKHEuQVJSQVlfQlVGRkVSLHAuYnVmZmVyKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIobCxtLHEuRkxPQVQsITEsMCxkKm0qNCkscCBpbnN0YW5jZW9mIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSl7aWYobnVsbD09PWUpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7cmV0dXJufWUudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKGwscC5tZXNoUGVyQXR0cmlidXRlKTt2b2lkIDA9PT1jLm1heEluc3RhbmNlZENvdW50JiYoYy5tYXhJbnN0YW5jZWRDb3VudD1wLmFycmF5Lmxlbmd0aC9wLml0ZW1TaXplKlxucC5tZXNoUGVyQXR0cmlidXRlKX19ZWxzZSB2b2lkIDAhPT1hLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMmJigyPT09YS5kZWZhdWx0QXR0cmlidXRlVmFsdWVzW21dLmxlbmd0aD9xLnZlcnRleEF0dHJpYjJmdihsLGEuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1ttXSk6Mz09PWEuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1ttXS5sZW5ndGgmJnEudmVydGV4QXR0cmliM2Z2KGwsYS5kZWZhdWx0QXR0cmlidXRlVmFsdWVzW21dKSl9fVUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKX1mdW5jdGlvbiBjKGEsYil7cmV0dXJuIGEub2JqZWN0LnJlbmRlck9yZGVyIT09Yi5vYmplY3QucmVuZGVyT3JkZXI/YS5vYmplY3QucmVuZGVyT3JkZXItYi5vYmplY3QucmVuZGVyT3JkZXI6YS5tYXRlcmlhbC5pZCE9PWIubWF0ZXJpYWwuaWQ/YS5tYXRlcmlhbC5pZC1iLm1hdGVyaWFsLmlkOmEueiE9PWIuej9hLnotYi56OmEuaWQtYi5pZH1mdW5jdGlvbiBkKGEsYil7cmV0dXJuIGEub2JqZWN0LnJlbmRlck9yZGVyIT09XG5iLm9iamVjdC5yZW5kZXJPcmRlcj9hLm9iamVjdC5yZW5kZXJPcmRlci1iLm9iamVjdC5yZW5kZXJPcmRlcjphLnohPT1iLno/Yi56LWEuejphLmlkLWIuaWR9ZnVuY3Rpb24gZShhLGIpe3JldHVybiBiWzBdLWFbMF19ZnVuY3Rpb24gZihhKXtpZighMSE9PWEudmlzaWJsZSl7aWYoIShhIGluc3RhbmNlb2YgVEhSRUUuU2NlbmV8fGEgaW5zdGFuY2VvZiBUSFJFRS5Hcm91cCkpaWYobmEuaW5pdChhKSxhIGluc3RhbmNlb2YgVEhSRUUuTGlnaHQpSy5wdXNoKGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLlNwcml0ZSlpYS5wdXNoKGEpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkxlbnNGbGFyZSlRLnB1c2goYSk7ZWxzZXt2YXIgYj1uYS5vYmplY3RzW2EuaWRdO2lmKGImJighMT09PWEuZnJ1c3R1bUN1bGxlZHx8ITA9PT1PYS5pbnRlcnNlY3RzT2JqZWN0KGEpKSlmb3IodmFyIGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPWJbY10sZz1lLGg9Zy5vYmplY3Qsaz1cbmcuYnVmZmVyLG09aC5nZW9tZXRyeSxoPWgubWF0ZXJpYWw7aCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWw/KGg9aC5tYXRlcmlhbHNbbSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5PzA6ay5tYXRlcmlhbEluZGV4XSxnLm1hdGVyaWFsPWgsaC50cmFuc3BhcmVudD9YLnB1c2goZyk6RC5wdXNoKGcpKTpoJiYoZy5tYXRlcmlhbD1oLGgudHJhbnNwYXJlbnQ/WC5wdXNoKGcpOkQucHVzaChnKSk7ZS5yZW5kZXI9ITA7ITA9PT1QLnNvcnRPYmplY3RzJiYob2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEubWF0cml4V29ybGQpLG9hLmFwcGx5UHJvamVjdGlvbihIYSksZS56PW9hLnopfX1jPTA7Zm9yKGQ9YS5jaGlsZHJlbi5sZW5ndGg7YzxkO2MrKylmKGEuY2hpbGRyZW5bY10pfX1mdW5jdGlvbiBnKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9MCxoPWEubGVuZ3RoO2c8aDtnKyspe2Y9YVtnXTt2YXIgaz1mLm9iamVjdCxtPWYuYnVmZmVyO3MoayxiKTtpZihlKWY9XG5lO2Vsc2V7Zj1mLm1hdGVyaWFsO2lmKCFmKWNvbnRpbnVlO2woZil9UC5zZXRNYXRlcmlhbEZhY2VzKGYpO20gaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeT9QLnJlbmRlckJ1ZmZlckRpcmVjdChiLGMsZCxmLG0sayk6UC5yZW5kZXJCdWZmZXIoYixjLGQsZixtLGspfX1mdW5jdGlvbiBoKGEsYixjLGQsZSxmKXtmb3IodmFyIGcsaD0wLGs9YS5sZW5ndGg7aDxrO2grKyl7Zz1hW2hdO3ZhciBtPWcub2JqZWN0O2lmKG0udmlzaWJsZSl7aWYoZilnPWY7ZWxzZXtnPWdbYl07aWYoIWcpY29udGludWU7bChnKX1QLnJlbmRlckltbWVkaWF0ZU9iamVjdChjLGQsZSxnLG0pfX19ZnVuY3Rpb24gayhhKXt2YXIgYj1hLm9iamVjdC5tYXRlcmlhbDtiLnRyYW5zcGFyZW50PyhhLnRyYW5zcGFyZW50PWIsYS5vcGFxdWU9bnVsbCk6KGEub3BhcXVlPWIsYS50cmFuc3BhcmVudD1udWxsKX1mdW5jdGlvbiBsKGEpeyEwPT09YS50cmFuc3BhcmVudD9VLnNldEJsZW5kaW5nKGEuYmxlbmRpbmcsXG5hLmJsZW5kRXF1YXRpb24sYS5ibGVuZFNyYyxhLmJsZW5kRHN0LGEuYmxlbmRFcXVhdGlvbkFscGhhLGEuYmxlbmRTcmNBbHBoYSxhLmJsZW5kRHN0QWxwaGEpOlUuc2V0QmxlbmRpbmcoVEhSRUUuTm9CbGVuZGluZyk7VS5zZXREZXB0aFRlc3QoYS5kZXB0aFRlc3QpO1Uuc2V0RGVwdGhXcml0ZShhLmRlcHRoV3JpdGUpO1Uuc2V0Q29sb3JXcml0ZShhLmNvbG9yV3JpdGUpO1Uuc2V0UG9seWdvbk9mZnNldChhLnBvbHlnb25PZmZzZXQsYS5wb2x5Z29uT2Zmc2V0RmFjdG9yLGEucG9seWdvbk9mZnNldFVuaXRzKX1mdW5jdGlvbiBwKGEsYixjLGQsZSl7dmFyIGYsZyxoLGs7cGE9MDtpZihkLm5lZWRzVXBkYXRlKXtkLnByb2dyYW0mJkZiKGQpO2QuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixHYik7dmFyIGw9VGJbZC50eXBlXTtpZihsKXt2YXIgcD1USFJFRS5TaGFkZXJMaWJbbF07ZC5fX3dlYmdsU2hhZGVyPXt1bmlmb3JtczpUSFJFRS5Vbmlmb3Jtc1V0aWxzLmNsb25lKHAudW5pZm9ybXMpLFxudmVydGV4U2hhZGVyOnAudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOnAuZnJhZ21lbnRTaGFkZXJ9fWVsc2UgZC5fX3dlYmdsU2hhZGVyPXt1bmlmb3JtczpkLnVuaWZvcm1zLHZlcnRleFNoYWRlcjpkLnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjpkLmZyYWdtZW50U2hhZGVyfTtmb3IodmFyIHU9MCxzPTAseD0wLHo9MCx5PTAsRz1iLmxlbmd0aDt5PEc7eSsrKXt2YXIgQj1iW3ldO0Iub25seVNoYWRvd3x8ITE9PT1CLnZpc2libGV8fChCIGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCYmdSsrLEIgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludExpZ2h0JiZzKyssQiBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodCYmeCsrLEIgaW5zdGFuY2VvZiBUSFJFRS5IZW1pc3BoZXJlTGlnaHQmJnorKyl9Zj11O2c9cztoPXg7az16O2Zvcih2YXIgSSxFPTAsRD0wLEo9Yi5sZW5ndGg7RDxKO0QrKyl7dmFyIEw9YltEXTtMLmNhc3RTaGFkb3cmJihMIGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0JiZcbkUrKyxMIGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCYmIUwuc2hhZG93Q2FzY2FkZSYmRSsrKX1JPUU7dmFyIEs7aWYoZWImJmUmJmUuc2tlbGV0b24mJmUuc2tlbGV0b24udXNlVmVydGV4VGV4dHVyZSlLPTEwMjQ7ZWxzZXt2YXIgTT1xLmdldFBhcmFtZXRlcihxLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTKSxIPU1hdGguZmxvb3IoKE0tMjApLzQpO3ZvaWQgMCE9PWUmJmUgaW5zdGFuY2VvZiBUSFJFRS5Ta2lubmVkTWVzaCYmKEg9TWF0aC5taW4oZS5za2VsZXRvbi5ib25lcy5sZW5ndGgsSCksSDxlLnNrZWxldG9uLmJvbmVzLmxlbmd0aCYmVEhSRUUud2FybihcIldlYkdMUmVuZGVyZXI6IHRvbyBtYW55IGJvbmVzIC0gXCIrZS5za2VsZXRvbi5ib25lcy5sZW5ndGgrXCIsIHRoaXMgR1BVIHN1cHBvcnRzIGp1c3QgXCIrSCtcIiAodHJ5IE9wZW5HTCBpbnN0ZWFkIG9mIEFOR0xFKVwiKSk7Sz1IfXZhciBOPXtwcmVjaXNpb246QyxzdXBwb3J0c1ZlcnRleFRleHR1cmVzOmZiLFxubWFwOiEhZC5tYXAsZW52TWFwOiEhZC5lbnZNYXAsZW52TWFwTW9kZTpkLmVudk1hcCYmZC5lbnZNYXAubWFwcGluZyxsaWdodE1hcDohIWQubGlnaHRNYXAsYW9NYXA6ISFkLmFvTWFwLGJ1bXBNYXA6ISFkLmJ1bXBNYXAsbm9ybWFsTWFwOiEhZC5ub3JtYWxNYXAsc3BlY3VsYXJNYXA6ISFkLnNwZWN1bGFyTWFwLGFscGhhTWFwOiEhZC5hbHBoYU1hcCxjb21iaW5lOmQuY29tYmluZSx2ZXJ0ZXhDb2xvcnM6ZC52ZXJ0ZXhDb2xvcnMsZm9nOmMsdXNlRm9nOmQuZm9nLGZvZ0V4cDpjIGluc3RhbmNlb2YgVEhSRUUuRm9nRXhwMixmbGF0U2hhZGluZzpkLnNoYWRpbmc9PT1USFJFRS5GbGF0U2hhZGluZyxzaXplQXR0ZW51YXRpb246ZC5zaXplQXR0ZW51YXRpb24sbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjpBLHNraW5uaW5nOmQuc2tpbm5pbmcsbWF4Qm9uZXM6Syx1c2VWZXJ0ZXhUZXh0dXJlOmViJiZlJiZlLnNrZWxldG9uJiZlLnNrZWxldG9uLnVzZVZlcnRleFRleHR1cmUsbW9ycGhUYXJnZXRzOmQubW9ycGhUYXJnZXRzLFxubW9ycGhOb3JtYWxzOmQubW9ycGhOb3JtYWxzLG1heE1vcnBoVGFyZ2V0czpQLm1heE1vcnBoVGFyZ2V0cyxtYXhNb3JwaE5vcm1hbHM6UC5tYXhNb3JwaE5vcm1hbHMsbWF4RGlyTGlnaHRzOmYsbWF4UG9pbnRMaWdodHM6ZyxtYXhTcG90TGlnaHRzOmgsbWF4SGVtaUxpZ2h0czprLG1heFNoYWRvd3M6SSxzaGFkb3dNYXBFbmFibGVkOm1hLmVuYWJsZWQmJmUucmVjZWl2ZVNoYWRvdyYmMDxJLHNoYWRvd01hcFR5cGU6bWEudHlwZSxzaGFkb3dNYXBEZWJ1ZzptYS5kZWJ1ZyxzaGFkb3dNYXBDYXNjYWRlOm1hLmNhc2NhZGUsYWxwaGFUZXN0OmQuYWxwaGFUZXN0LG1ldGFsOmQubWV0YWwsd3JhcEFyb3VuZDpkLndyYXBBcm91bmQsZG91YmxlU2lkZWQ6ZC5zaWRlPT09VEhSRUUuRG91YmxlU2lkZSxmbGlwU2lkZWQ6ZC5zaWRlPT09VEhSRUUuQmFja1NpZGV9LE89W107bD9PLnB1c2gobCk6KE8ucHVzaChkLmZyYWdtZW50U2hhZGVyKSxPLnB1c2goZC52ZXJ0ZXhTaGFkZXIpKTtpZih2b2lkIDAhPT1cbmQuZGVmaW5lcylmb3IodmFyIFIgaW4gZC5kZWZpbmVzKU8ucHVzaChSKSxPLnB1c2goZC5kZWZpbmVzW1JdKTtmb3IoUiBpbiBOKU8ucHVzaChSKSxPLnB1c2goTltSXSk7Zm9yKHZhciBRPU8uam9pbigpLHFhLFU9MCx4YT1hYS5sZW5ndGg7VTx4YTtVKyspe3ZhciBYPWFhW1VdO2lmKFguY29kZT09PVEpe3FhPVg7cWEudXNlZFRpbWVzKys7YnJlYWt9fXZvaWQgMD09PXFhJiYocWE9bmV3IFRIUkVFLldlYkdMUHJvZ3JhbShQLFEsZCxOKSxhYS5wdXNoKHFhKSxQLmluZm8ubWVtb3J5LnByb2dyYW1zPWFhLmxlbmd0aCk7ZC5wcm9ncmFtPXFhO3ZhciBaPXFhLmF0dHJpYnV0ZXM7aWYoZC5tb3JwaFRhcmdldHMpe2QubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzPTA7Zm9yKHZhciB2YSx3YT1cIm1vcnBoVGFyZ2V0XCIsbGE9MDtsYTxQLm1heE1vcnBoVGFyZ2V0cztsYSsrKXZhPXdhK2xhLDA8PVpbdmFdJiZkLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cysrfWlmKGQubW9ycGhOb3JtYWxzKWZvcihkLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscz1cbjAsd2E9XCJtb3JwaE5vcm1hbFwiLGxhPTA7bGE8UC5tYXhNb3JwaE5vcm1hbHM7bGErKyl2YT13YStsYSwwPD1aW3ZhXSYmZC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMrKztkLnVuaWZvcm1zTGlzdD1bXTtmb3IodmFyIHlhIGluIGQuX193ZWJnbFNoYWRlci51bmlmb3Jtcyl7dmFyIGlhPWQucHJvZ3JhbS51bmlmb3Jtc1t5YV07aWEmJmQudW5pZm9ybXNMaXN0LnB1c2goW2QuX193ZWJnbFNoYWRlci51bmlmb3Jtc1t5YV0saWFdKX1kLm5lZWRzVXBkYXRlPSExfWQubW9ycGhUYXJnZXRzJiYhZS5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzJiYoZS5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzPW5ldyBGbG9hdDMyQXJyYXkoUC5tYXhNb3JwaFRhcmdldHMpKTt2YXIgemE9ITEsbmE9ITEsQWE9ITEsVGE9ZC5wcm9ncmFtLGVhPVRhLnVuaWZvcm1zLFM9ZC5fX3dlYmdsU2hhZGVyLnVuaWZvcm1zO1RhLmlkIT09Y2EmJihxLnVzZVByb2dyYW0oVGEucHJvZ3JhbSksY2E9VGEuaWQsXG5BYT1uYT16YT0hMCk7ZC5pZCE9PURhJiYoLTE9PT1EYSYmKEFhPSEwKSxEYT1kLmlkLG5hPSEwKTtpZih6YXx8YSE9PVYpcS51bmlmb3JtTWF0cml4NGZ2KGVhLnByb2plY3Rpb25NYXRyaXgsITEsYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzKSxBJiZxLnVuaWZvcm0xZihlYS5sb2dEZXB0aEJ1ZkZDLDIvKE1hdGgubG9nKGEuZmFyKzEpL01hdGguTE4yKSksYSE9PVYmJihWPWEpLChkIGluc3RhbmNlb2YgVEhSRUUuU2hhZGVyTWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbHx8ZC5lbnZNYXApJiZudWxsIT09ZWEuY2FtZXJhUG9zaXRpb24mJihvYS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYS5tYXRyaXhXb3JsZCkscS51bmlmb3JtM2YoZWEuY2FtZXJhUG9zaXRpb24sb2EueCxvYS55LG9hLnopKSwoZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mXG5USFJFRS5NZXNoQmFzaWNNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLlNoYWRlck1hdGVyaWFsfHxkLnNraW5uaW5nKSYmbnVsbCE9PWVhLnZpZXdNYXRyaXgmJnEudW5pZm9ybU1hdHJpeDRmdihlYS52aWV3TWF0cml4LCExLGEubWF0cml4V29ybGRJbnZlcnNlLmVsZW1lbnRzKTtpZihkLnNraW5uaW5nKWlmKGUuYmluZE1hdHJpeCYmbnVsbCE9PWVhLmJpbmRNYXRyaXgmJnEudW5pZm9ybU1hdHJpeDRmdihlYS5iaW5kTWF0cml4LCExLGUuYmluZE1hdHJpeC5lbGVtZW50cyksZS5iaW5kTWF0cml4SW52ZXJzZSYmbnVsbCE9PWVhLmJpbmRNYXRyaXhJbnZlcnNlJiZxLnVuaWZvcm1NYXRyaXg0ZnYoZWEuYmluZE1hdHJpeEludmVyc2UsITEsZS5iaW5kTWF0cml4SW52ZXJzZS5lbGVtZW50cyksZWImJmUuc2tlbGV0b24mJmUuc2tlbGV0b24udXNlVmVydGV4VGV4dHVyZSl7aWYobnVsbCE9PWVhLmJvbmVUZXh0dXJlKXt2YXIgT2E9bSgpO3EudW5pZm9ybTFpKGVhLmJvbmVUZXh0dXJlLFxuT2EpO1Auc2V0VGV4dHVyZShlLnNrZWxldG9uLmJvbmVUZXh0dXJlLE9hKX1udWxsIT09ZWEuYm9uZVRleHR1cmVXaWR0aCYmcS51bmlmb3JtMWkoZWEuYm9uZVRleHR1cmVXaWR0aCxlLnNrZWxldG9uLmJvbmVUZXh0dXJlV2lkdGgpO251bGwhPT1lYS5ib25lVGV4dHVyZUhlaWdodCYmcS51bmlmb3JtMWkoZWEuYm9uZVRleHR1cmVIZWlnaHQsZS5za2VsZXRvbi5ib25lVGV4dHVyZUhlaWdodCl9ZWxzZSBlLnNrZWxldG9uJiZlLnNrZWxldG9uLmJvbmVNYXRyaWNlcyYmbnVsbCE9PWVhLmJvbmVHbG9iYWxNYXRyaWNlcyYmcS51bmlmb3JtTWF0cml4NGZ2KGVhLmJvbmVHbG9iYWxNYXRyaWNlcywhMSxlLnNrZWxldG9uLmJvbmVNYXRyaWNlcyk7aWYobmEpe2MmJmQuZm9nJiYoUy5mb2dDb2xvci52YWx1ZT1jLmNvbG9yLGMgaW5zdGFuY2VvZiBUSFJFRS5Gb2c/KFMuZm9nTmVhci52YWx1ZT1jLm5lYXIsUy5mb2dGYXIudmFsdWU9Yy5mYXIpOmMgaW5zdGFuY2VvZiBUSFJFRS5Gb2dFeHAyJiZcbihTLmZvZ0RlbnNpdHkudmFsdWU9Yy5kZW5zaXR5KSk7aWYoZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsfHxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbHx8ZC5saWdodHMpe2lmKCRhKXt2YXIgQWE9ITAsZGEsc2EsYmEsSGE9MCxOYT0wLGdiPTAsSWEsWWEsWmEsUGEsaGIsZmE9SGIsaWI9ZmEuZGlyZWN0aW9uYWwuY29sb3JzLGpiPWZhLmRpcmVjdGlvbmFsLnBvc2l0aW9ucyxrYj1mYS5wb2ludC5jb2xvcnMsbGI9ZmEucG9pbnQucG9zaXRpb25zLGNiPWZhLnBvaW50LmRpc3RhbmNlcyxkYj1mYS5wb2ludC5kZWNheXMsbWI9ZmEuc3BvdC5jb2xvcnMsbmI9ZmEuc3BvdC5wb3NpdGlvbnMsQWI9ZmEuc3BvdC5kaXN0YW5jZXMsb2I9ZmEuc3BvdC5kaXJlY3Rpb25zLEJiPWZhLnNwb3QuYW5nbGVzQ29zLENiPWZhLnNwb3QuZXhwb25lbnRzLERiPWZhLnNwb3QuZGVjYXlzLHBiPWZhLmhlbWkuc2t5Q29sb3JzLHFiPWZhLmhlbWkuZ3JvdW5kQ29sb3JzLFxucmI9ZmEuaGVtaS5wb3NpdGlvbnMsVWE9MCxKYT0wLEJhPTAsUWE9MCxzYj0wLHRiPTAsdWI9MCxhYj0wLFZhPTAsV2E9MCxFYT0wLFJhPTA7ZGE9MDtmb3Ioc2E9Yi5sZW5ndGg7ZGE8c2E7ZGErKyliYT1iW2RhXSxiYS5vbmx5U2hhZG93fHwoSWE9YmEuY29sb3IsUGE9YmEuaW50ZW5zaXR5LGhiPWJhLmRpc3RhbmNlLGJhIGluc3RhbmNlb2YgVEhSRUUuQW1iaWVudExpZ2h0P2JhLnZpc2libGUmJihIYSs9SWEucixOYSs9SWEuZyxnYis9SWEuYik6YmEgaW5zdGFuY2VvZiBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0PyhzYis9MSxiYS52aXNpYmxlJiYoaGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGJhLm1hdHJpeFdvcmxkKSxvYS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYmEudGFyZ2V0Lm1hdHJpeFdvcmxkKSxoYS5zdWIob2EpLGhhLm5vcm1hbGl6ZSgpLFZhPTMqVWEsamJbVmErMF09aGEueCxqYltWYSsxXT1oYS55LGpiW1ZhKzJdPWhhLnosdChpYixWYSxJYSxQYSksVWErPTEpKTpiYSBpbnN0YW5jZW9mXG5USFJFRS5Qb2ludExpZ2h0Pyh0Yis9MSxiYS52aXNpYmxlJiYoV2E9MypKYSx0KGtiLFdhLElhLFBhKSxvYS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYmEubWF0cml4V29ybGQpLGxiW1dhKzBdPW9hLngsbGJbV2ErMV09b2EueSxsYltXYSsyXT1vYS56LGNiW0phXT1oYixkYltKYV09MD09PWJhLmRpc3RhbmNlPzA6YmEuZGVjYXksSmErPTEpKTpiYSBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodD8odWIrPTEsYmEudmlzaWJsZSYmKEVhPTMqQmEsdChtYixFYSxJYSxQYSksaGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGJhLm1hdHJpeFdvcmxkKSxuYltFYSswXT1oYS54LG5iW0VhKzFdPWhhLnksbmJbRWErMl09aGEueixBYltCYV09aGIsb2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGJhLnRhcmdldC5tYXRyaXhXb3JsZCksaGEuc3ViKG9hKSxoYS5ub3JtYWxpemUoKSxvYltFYSswXT1oYS54LG9iW0VhKzFdPWhhLnksb2JbRWErMl09aGEueixCYltCYV09TWF0aC5jb3MoYmEuYW5nbGUpLFxuQ2JbQmFdPWJhLmV4cG9uZW50LERiW0JhXT0wPT09YmEuZGlzdGFuY2U/MDpiYS5kZWNheSxCYSs9MSkpOmJhIGluc3RhbmNlb2YgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0JiYoYWIrPTEsYmEudmlzaWJsZSYmKGhhLnNldEZyb21NYXRyaXhQb3NpdGlvbihiYS5tYXRyaXhXb3JsZCksaGEubm9ybWFsaXplKCksUmE9MypRYSxyYltSYSswXT1oYS54LHJiW1JhKzFdPWhhLnkscmJbUmErMl09aGEueixZYT1iYS5jb2xvcixaYT1iYS5ncm91bmRDb2xvcix0KHBiLFJhLFlhLFBhKSx0KHFiLFJhLFphLFBhKSxRYSs9MSkpKTtkYT0zKlVhO2ZvcihzYT1NYXRoLm1heChpYi5sZW5ndGgsMypzYik7ZGE8c2E7ZGErKylpYltkYV09MDtkYT0zKkphO2ZvcihzYT1NYXRoLm1heChrYi5sZW5ndGgsMyp0Yik7ZGE8c2E7ZGErKylrYltkYV09MDtkYT0zKkJhO2ZvcihzYT1NYXRoLm1heChtYi5sZW5ndGgsMyp1Yik7ZGE8c2E7ZGErKyltYltkYV09MDtkYT0zKlFhO2ZvcihzYT1NYXRoLm1heChwYi5sZW5ndGgsXG4zKmFiKTtkYTxzYTtkYSsrKXBiW2RhXT0wO2RhPTMqUWE7Zm9yKHNhPU1hdGgubWF4KHFiLmxlbmd0aCwzKmFiKTtkYTxzYTtkYSsrKXFiW2RhXT0wO2ZhLmRpcmVjdGlvbmFsLmxlbmd0aD1VYTtmYS5wb2ludC5sZW5ndGg9SmE7ZmEuc3BvdC5sZW5ndGg9QmE7ZmEuaGVtaS5sZW5ndGg9UWE7ZmEuYW1iaWVudFswXT1IYTtmYS5hbWJpZW50WzFdPU5hO2ZhLmFtYmllbnRbMl09Z2I7JGE9ITF9aWYoQWEpe3ZhciBrYT1IYjtTLmFtYmllbnRMaWdodENvbG9yLnZhbHVlPWthLmFtYmllbnQ7Uy5kaXJlY3Rpb25hbExpZ2h0Q29sb3IudmFsdWU9a2EuZGlyZWN0aW9uYWwuY29sb3JzO1MuZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvbi52YWx1ZT1rYS5kaXJlY3Rpb25hbC5wb3NpdGlvbnM7Uy5wb2ludExpZ2h0Q29sb3IudmFsdWU9a2EucG9pbnQuY29sb3JzO1MucG9pbnRMaWdodFBvc2l0aW9uLnZhbHVlPWthLnBvaW50LnBvc2l0aW9ucztTLnBvaW50TGlnaHREaXN0YW5jZS52YWx1ZT1cbmthLnBvaW50LmRpc3RhbmNlcztTLnBvaW50TGlnaHREZWNheS52YWx1ZT1rYS5wb2ludC5kZWNheXM7Uy5zcG90TGlnaHRDb2xvci52YWx1ZT1rYS5zcG90LmNvbG9ycztTLnNwb3RMaWdodFBvc2l0aW9uLnZhbHVlPWthLnNwb3QucG9zaXRpb25zO1Muc3BvdExpZ2h0RGlzdGFuY2UudmFsdWU9a2Euc3BvdC5kaXN0YW5jZXM7Uy5zcG90TGlnaHREaXJlY3Rpb24udmFsdWU9a2Euc3BvdC5kaXJlY3Rpb25zO1Muc3BvdExpZ2h0QW5nbGVDb3MudmFsdWU9a2Euc3BvdC5hbmdsZXNDb3M7Uy5zcG90TGlnaHRFeHBvbmVudC52YWx1ZT1rYS5zcG90LmV4cG9uZW50cztTLnNwb3RMaWdodERlY2F5LnZhbHVlPWthLnNwb3QuZGVjYXlzO1MuaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3IudmFsdWU9a2EuaGVtaS5za3lDb2xvcnM7Uy5oZW1pc3BoZXJlTGlnaHRHcm91bmRDb2xvci52YWx1ZT1rYS5oZW1pLmdyb3VuZENvbG9ycztTLmhlbWlzcGhlcmVMaWdodERpcmVjdGlvbi52YWx1ZT1rYS5oZW1pLnBvc2l0aW9ucztcbm4oUywhMCl9ZWxzZSBuKFMsITEpfWlmKGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbHx8ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWx8fGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCl7Uy5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eTtTLmRpZmZ1c2UudmFsdWU9ZC5jb2xvcjtTLm1hcC52YWx1ZT1kLm1hcDtTLmxpZ2h0TWFwLnZhbHVlPWQubGlnaHRNYXA7Uy5saWdodE1hcEludGVuc2l0eS52YWx1ZT1kLmxpZ2h0TWFwSW50ZW5zaXR5O1MuYW9NYXAudmFsdWU9ZC5hb01hcDtTLmFvTWFwSW50ZW5zaXR5LnZhbHVlPWQuYW9NYXBJbnRlbnNpdHk7Uy5zcGVjdWxhck1hcC52YWx1ZT1kLnNwZWN1bGFyTWFwO1MuYWxwaGFNYXAudmFsdWU9ZC5hbHBoYU1hcDtkLmJ1bXBNYXAmJihTLmJ1bXBNYXAudmFsdWU9ZC5idW1wTWFwLFMuYnVtcFNjYWxlLnZhbHVlPWQuYnVtcFNjYWxlKTtkLm5vcm1hbE1hcCYmKFMubm9ybWFsTWFwLnZhbHVlPVxuZC5ub3JtYWxNYXAsUy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KGQubm9ybWFsU2NhbGUpKTt2YXIgRmE7ZC5tYXA/RmE9ZC5tYXA6ZC5zcGVjdWxhck1hcD9GYT1kLnNwZWN1bGFyTWFwOmQubm9ybWFsTWFwP0ZhPWQubm9ybWFsTWFwOmQuYnVtcE1hcD9GYT1kLmJ1bXBNYXA6ZC5hbHBoYU1hcCYmKEZhPWQuYWxwaGFNYXApO2lmKHZvaWQgMCE9PUZhKXt2YXIgSWI9RmEub2Zmc2V0LEpiPUZhLnJlcGVhdDtTLm9mZnNldFJlcGVhdC52YWx1ZS5zZXQoSWIueCxJYi55LEpiLngsSmIueSl9Uy5lbnZNYXAudmFsdWU9ZC5lbnZNYXA7Uy5mbGlwRW52TWFwLnZhbHVlPWQuZW52TWFwIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlPzE6LTE7Uy5yZWZsZWN0aXZpdHkudmFsdWU9ZC5yZWZsZWN0aXZpdHk7Uy5yZWZyYWN0aW9uUmF0aW8udmFsdWU9ZC5yZWZyYWN0aW9uUmF0aW99aWYoZCBpbnN0YW5jZW9mIFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKVMuZGlmZnVzZS52YWx1ZT1cbmQuY29sb3IsUy5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eTtlbHNlIGlmKGQgaW5zdGFuY2VvZiBUSFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwpUy5kaWZmdXNlLnZhbHVlPWQuY29sb3IsUy5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxTLmRhc2hTaXplLnZhbHVlPWQuZGFzaFNpemUsUy50b3RhbFNpemUudmFsdWU9ZC5kYXNoU2l6ZStkLmdhcFNpemUsUy5zY2FsZS52YWx1ZT1kLnNjYWxlO2Vsc2UgaWYoZCBpbnN0YW5jZW9mIFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCl7aWYoUy5wc0NvbG9yLnZhbHVlPWQuY29sb3IsUy5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSxTLnNpemUudmFsdWU9ZC5zaXplLFMuc2NhbGUudmFsdWU9Ri5oZWlnaHQvMixTLm1hcC52YWx1ZT1kLm1hcCxudWxsIT09ZC5tYXApe3ZhciBLYj1kLm1hcC5vZmZzZXQsTGI9ZC5tYXAucmVwZWF0O1Mub2Zmc2V0UmVwZWF0LnZhbHVlLnNldChLYi54LEtiLnksTGIueCxMYi55KX19ZWxzZSBkIGluc3RhbmNlb2YgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw/XG4oUy5zaGluaW5lc3MudmFsdWU9ZC5zaGluaW5lc3MsUy5lbWlzc2l2ZS52YWx1ZT1kLmVtaXNzaXZlLFMuc3BlY3VsYXIudmFsdWU9ZC5zcGVjdWxhcixkLndyYXBBcm91bmQmJlMud3JhcFJHQi52YWx1ZS5jb3B5KGQud3JhcFJHQikpOmQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsPyhTLmVtaXNzaXZlLnZhbHVlPWQuZW1pc3NpdmUsZC53cmFwQXJvdW5kJiZTLndyYXBSR0IudmFsdWUuY29weShkLndyYXBSR0IpKTpkIGluc3RhbmNlb2YgVEhSRUUuTWVzaERlcHRoTWF0ZXJpYWw/KFMubU5lYXIudmFsdWU9YS5uZWFyLFMubUZhci52YWx1ZT1hLmZhcixTLm9wYWNpdHkudmFsdWU9ZC5vcGFjaXR5KTpkIGluc3RhbmNlb2YgVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsJiYoUy5vcGFjaXR5LnZhbHVlPWQub3BhY2l0eSk7aWYoZS5yZWNlaXZlU2hhZG93JiYhZC5fc2hhZG93UGFzcyYmUy5zaGFkb3dNYXRyaXgpZm9yKHZhciBTYT0wLHZiPTAsRWI9Yi5sZW5ndGg7dmI8XG5FYjt2YisrKXt2YXIgQ2E9Ylt2Yl07Q2EuY2FzdFNoYWRvdyYmKENhIGluc3RhbmNlb2YgVEhSRUUuU3BvdExpZ2h0fHxDYSBpbnN0YW5jZW9mIFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQmJiFDYS5zaGFkb3dDYXNjYWRlKSYmKFMuc2hhZG93TWFwLnZhbHVlW1NhXT1DYS5zaGFkb3dNYXAsUy5zaGFkb3dNYXBTaXplLnZhbHVlW1NhXT1DYS5zaGFkb3dNYXBTaXplLFMuc2hhZG93TWF0cml4LnZhbHVlW1NhXT1DYS5zaGFkb3dNYXRyaXgsUy5zaGFkb3dEYXJrbmVzcy52YWx1ZVtTYV09Q2Euc2hhZG93RGFya25lc3MsUy5zaGFkb3dCaWFzLnZhbHVlW1NhXT1DYS5zaGFkb3dCaWFzLFNhKyspfWZvcih2YXIgd2I9ZC51bmlmb3Jtc0xpc3QsdGEsS2EsdWEsYmI9MCxVYj13Yi5sZW5ndGg7YmI8VWI7YmIrKyl7dmFyIFk9d2JbYmJdWzBdO2lmKCExIT09WS5uZWVkc1VwZGF0ZSl7dmFyIE1iPVkudHlwZSxUPVkudmFsdWUsJD13YltiYl1bMV07c3dpdGNoKE1iKXtjYXNlIFwiMWlcIjpxLnVuaWZvcm0xaSgkLFxuVCk7YnJlYWs7Y2FzZSBcIjFmXCI6cS51bmlmb3JtMWYoJCxUKTticmVhaztjYXNlIFwiMmZcIjpxLnVuaWZvcm0yZigkLFRbMF0sVFsxXSk7YnJlYWs7Y2FzZSBcIjNmXCI6cS51bmlmb3JtM2YoJCxUWzBdLFRbMV0sVFsyXSk7YnJlYWs7Y2FzZSBcIjRmXCI6cS51bmlmb3JtNGYoJCxUWzBdLFRbMV0sVFsyXSxUWzNdKTticmVhaztjYXNlIFwiMWl2XCI6cS51bmlmb3JtMWl2KCQsVCk7YnJlYWs7Y2FzZSBcIjNpdlwiOnEudW5pZm9ybTNpdigkLFQpO2JyZWFrO2Nhc2UgXCIxZnZcIjpxLnVuaWZvcm0xZnYoJCxUKTticmVhaztjYXNlIFwiMmZ2XCI6cS51bmlmb3JtMmZ2KCQsVCk7YnJlYWs7Y2FzZSBcIjNmdlwiOnEudW5pZm9ybTNmdigkLFQpO2JyZWFrO2Nhc2UgXCI0ZnZcIjpxLnVuaWZvcm00ZnYoJCxUKTticmVhaztjYXNlIFwiTWF0cml4M2Z2XCI6cS51bmlmb3JtTWF0cml4M2Z2KCQsITEsVCk7YnJlYWs7Y2FzZSBcIk1hdHJpeDRmdlwiOnEudW5pZm9ybU1hdHJpeDRmdigkLCExLFQpO2JyZWFrO2Nhc2UgXCJpXCI6cS51bmlmb3JtMWkoJCxcblQpO2JyZWFrO2Nhc2UgXCJmXCI6cS51bmlmb3JtMWYoJCxUKTticmVhaztjYXNlIFwidjJcIjpxLnVuaWZvcm0yZigkLFQueCxULnkpO2JyZWFrO2Nhc2UgXCJ2M1wiOnEudW5pZm9ybTNmKCQsVC54LFQueSxULnopO2JyZWFrO2Nhc2UgXCJ2NFwiOnEudW5pZm9ybTRmKCQsVC54LFQueSxULnosVC53KTticmVhaztjYXNlIFwiY1wiOnEudW5pZm9ybTNmKCQsVC5yLFQuZyxULmIpO2JyZWFrO2Nhc2UgXCJpdjFcIjpxLnVuaWZvcm0xaXYoJCxUKTticmVhaztjYXNlIFwiaXZcIjpxLnVuaWZvcm0zaXYoJCxUKTticmVhaztjYXNlIFwiZnYxXCI6cS51bmlmb3JtMWZ2KCQsVCk7YnJlYWs7Y2FzZSBcImZ2XCI6cS51bmlmb3JtM2Z2KCQsVCk7YnJlYWs7Y2FzZSBcInYydlwiOnZvaWQgMD09PVkuX2FycmF5JiYoWS5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgyKlQubGVuZ3RoKSk7Zm9yKHZhciBXPTAscmE9VC5sZW5ndGg7VzxyYTtXKyspdWE9MipXLFkuX2FycmF5W3VhKzBdPVRbV10ueCxZLl9hcnJheVt1YSsxXT1UW1ddLnk7XG5xLnVuaWZvcm0yZnYoJCxZLl9hcnJheSk7YnJlYWs7Y2FzZSBcInYzdlwiOnZvaWQgMD09PVkuX2FycmF5JiYoWS5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKlQubGVuZ3RoKSk7Vz0wO2ZvcihyYT1ULmxlbmd0aDtXPHJhO1crKyl1YT0zKlcsWS5fYXJyYXlbdWErMF09VFtXXS54LFkuX2FycmF5W3VhKzFdPVRbV10ueSxZLl9hcnJheVt1YSsyXT1UW1ddLno7cS51bmlmb3JtM2Z2KCQsWS5fYXJyYXkpO2JyZWFrO2Nhc2UgXCJ2NHZcIjp2b2lkIDA9PT1ZLl9hcnJheSYmKFkuX2FycmF5PW5ldyBGbG9hdDMyQXJyYXkoNCpULmxlbmd0aCkpO1c9MDtmb3IocmE9VC5sZW5ndGg7VzxyYTtXKyspdWE9NCpXLFkuX2FycmF5W3VhKzBdPVRbV10ueCxZLl9hcnJheVt1YSsxXT1UW1ddLnksWS5fYXJyYXlbdWErMl09VFtXXS56LFkuX2FycmF5W3VhKzNdPVRbV10udztxLnVuaWZvcm00ZnYoJCxZLl9hcnJheSk7YnJlYWs7Y2FzZSBcIm0zXCI6cS51bmlmb3JtTWF0cml4M2Z2KCQsITEsVC5lbGVtZW50cyk7XG5icmVhaztjYXNlIFwibTN2XCI6dm9pZCAwPT09WS5fYXJyYXkmJihZLl9hcnJheT1uZXcgRmxvYXQzMkFycmF5KDkqVC5sZW5ndGgpKTtXPTA7Zm9yKHJhPVQubGVuZ3RoO1c8cmE7VysrKVRbV10uZmxhdHRlblRvQXJyYXlPZmZzZXQoWS5fYXJyYXksOSpXKTtxLnVuaWZvcm1NYXRyaXgzZnYoJCwhMSxZLl9hcnJheSk7YnJlYWs7Y2FzZSBcIm00XCI6cS51bmlmb3JtTWF0cml4NGZ2KCQsITEsVC5lbGVtZW50cyk7YnJlYWs7Y2FzZSBcIm00dlwiOnZvaWQgMD09PVkuX2FycmF5JiYoWS5fYXJyYXk9bmV3IEZsb2F0MzJBcnJheSgxNipULmxlbmd0aCkpO1c9MDtmb3IocmE9VC5sZW5ndGg7VzxyYTtXKyspVFtXXS5mbGF0dGVuVG9BcnJheU9mZnNldChZLl9hcnJheSwxNipXKTtxLnVuaWZvcm1NYXRyaXg0ZnYoJCwhMSxZLl9hcnJheSk7YnJlYWs7Y2FzZSBcInRcIjp0YT1UO0thPW0oKTtxLnVuaWZvcm0xaSgkLEthKTtpZighdGEpY29udGludWU7aWYodGEgaW5zdGFuY2VvZiBUSFJFRS5DdWJlVGV4dHVyZXx8XG50YS5pbWFnZSBpbnN0YW5jZW9mIEFycmF5JiY2PT09dGEuaW1hZ2UubGVuZ3RoKXt2YXIgZ2E9dGEsTmI9S2E7aWYoNj09PWdhLmltYWdlLmxlbmd0aClpZihnYS5uZWVkc1VwZGF0ZSl7Z2EuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlfHwoZ2EuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIix4YiksZ2EuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlPXEuY3JlYXRlVGV4dHVyZSgpLFAuaW5mby5tZW1vcnkudGV4dHVyZXMrKyk7cS5hY3RpdmVUZXh0dXJlKHEuVEVYVFVSRTArTmIpO3EuYmluZFRleHR1cmUocS5URVhUVVJFX0NVQkVfTUFQLGdhLmltYWdlLl9fd2ViZ2xUZXh0dXJlQ3ViZSk7cS5waXhlbFN0b3JlaShxLlVOUEFDS19GTElQX1lfV0VCR0wsZ2EuZmxpcFkpO2Zvcih2YXIgT2I9Z2EgaW5zdGFuY2VvZiBUSFJFRS5Db21wcmVzc2VkVGV4dHVyZSx5Yj1nYS5pbWFnZVswXWluc3RhbmNlb2YgVEhSRUUuRGF0YVRleHR1cmUsTGE9W10samE9MDs2PmphO2phKyspTGFbamFdPVxuIVAuYXV0b1NjYWxlQ3ViZW1hcHN8fE9ifHx5Yj95Yj9nYS5pbWFnZVtqYV0uaW1hZ2U6Z2EuaW1hZ2VbamFdOnYoZ2EuaW1hZ2VbamFdLFZiKTt2YXIgUGI9TGFbMF0sUWI9VEhSRUUuTWF0aC5pc1Bvd2VyT2ZUd28oUGIud2lkdGgpJiZUSFJFRS5NYXRoLmlzUG93ZXJPZlR3byhQYi5oZWlnaHQpLEdhPXcoZ2EuZm9ybWF0KSx6Yj13KGdhLnR5cGUpO3IocS5URVhUVVJFX0NVQkVfTUFQLGdhLFFiKTtmb3IoamE9MDs2PmphO2phKyspaWYoT2IpZm9yKHZhciBNYSxSYj1MYVtqYV0ubWlwbWFwcyxYYT0wLFdiPVJiLmxlbmd0aDtYYTxXYjtYYSsrKU1hPVJiW1hhXSxnYS5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZnYS5mb3JtYXQhPT1USFJFRS5SR0JGb3JtYXQ/LTE8U2IoKS5pbmRleE9mKEdhKT9xLmNvbXByZXNzZWRUZXhJbWFnZTJEKHEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK2phLFhhLEdhLE1hLndpZHRoLE1hLmhlaWdodCwwLE1hLmRhdGEpOlRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAuc2V0Q3ViZVRleHR1cmUoKVwiKTpcbnEudGV4SW1hZ2UyRChxLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCtqYSxYYSxHYSxNYS53aWR0aCxNYS5oZWlnaHQsMCxHYSx6YixNYS5kYXRhKTtlbHNlIHliP3EudGV4SW1hZ2UyRChxLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCtqYSwwLEdhLExhW2phXS53aWR0aCxMYVtqYV0uaGVpZ2h0LDAsR2EsemIsTGFbamFdLmRhdGEpOnEudGV4SW1hZ2UyRChxLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCtqYSwwLEdhLEdhLHpiLExhW2phXSk7Z2EuZ2VuZXJhdGVNaXBtYXBzJiZRYiYmcS5nZW5lcmF0ZU1pcG1hcChxLlRFWFRVUkVfQ1VCRV9NQVApO2dhLm5lZWRzVXBkYXRlPSExO2lmKGdhLm9uVXBkYXRlKWdhLm9uVXBkYXRlKGdhKX1lbHNlIHEuYWN0aXZlVGV4dHVyZShxLlRFWFRVUkUwK05iKSxxLmJpbmRUZXh0dXJlKHEuVEVYVFVSRV9DVUJFX01BUCxnYS5pbWFnZS5fX3dlYmdsVGV4dHVyZUN1YmUpfWVsc2UgaWYodGEgaW5zdGFuY2VvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUpe3ZhciBYYj1cbnRhO3EuYWN0aXZlVGV4dHVyZShxLlRFWFRVUkUwK0thKTtxLmJpbmRUZXh0dXJlKHEuVEVYVFVSRV9DVUJFX01BUCxYYi5fX3dlYmdsVGV4dHVyZSl9ZWxzZSBQLnNldFRleHR1cmUodGEsS2EpO2JyZWFrO2Nhc2UgXCJ0dlwiOnZvaWQgMD09PVkuX2FycmF5JiYoWS5fYXJyYXk9W10pO1c9MDtmb3IocmE9WS52YWx1ZS5sZW5ndGg7VzxyYTtXKyspWS5fYXJyYXlbV109bSgpO3EudW5pZm9ybTFpdigkLFkuX2FycmF5KTtXPTA7Zm9yKHJhPVkudmFsdWUubGVuZ3RoO1c8cmE7VysrKXRhPVkudmFsdWVbV10sS2E9WS5fYXJyYXlbV10sdGEmJlAuc2V0VGV4dHVyZSh0YSxLYSk7YnJlYWs7ZGVmYXVsdDpUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5rbm93biB1bmlmb3JtIHR5cGU6IFwiK01iKX19fX1xLnVuaWZvcm1NYXRyaXg0ZnYoZWEubW9kZWxWaWV3TWF0cml4LCExLGUuX21vZGVsVmlld01hdHJpeC5lbGVtZW50cyk7ZWEubm9ybWFsTWF0cml4JiZxLnVuaWZvcm1NYXRyaXgzZnYoZWEubm9ybWFsTWF0cml4LFxuITEsZS5fbm9ybWFsTWF0cml4LmVsZW1lbnRzKTtudWxsIT09ZWEubW9kZWxNYXRyaXgmJnEudW5pZm9ybU1hdHJpeDRmdihlYS5tb2RlbE1hdHJpeCwhMSxlLm1hdHJpeFdvcmxkLmVsZW1lbnRzKTtyZXR1cm4gVGF9ZnVuY3Rpb24gbihhLGIpe2EuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGU9YjthLmRpcmVjdGlvbmFsTGlnaHRDb2xvci5uZWVkc1VwZGF0ZT1iO2EuZGlyZWN0aW9uYWxMaWdodERpcmVjdGlvbi5uZWVkc1VwZGF0ZT1iO2EucG9pbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlPWI7YS5wb2ludExpZ2h0UG9zaXRpb24ubmVlZHNVcGRhdGU9YjthLnBvaW50TGlnaHREaXN0YW5jZS5uZWVkc1VwZGF0ZT1iO2EucG9pbnRMaWdodERlY2F5Lm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHRDb2xvci5uZWVkc1VwZGF0ZT1iO2Euc3BvdExpZ2h0UG9zaXRpb24ubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodERpc3RhbmNlLm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHREaXJlY3Rpb24ubmVlZHNVcGRhdGU9XG5iO2Euc3BvdExpZ2h0QW5nbGVDb3MubmVlZHNVcGRhdGU9YjthLnNwb3RMaWdodEV4cG9uZW50Lm5lZWRzVXBkYXRlPWI7YS5zcG90TGlnaHREZWNheS5uZWVkc1VwZGF0ZT1iO2EuaGVtaXNwaGVyZUxpZ2h0U2t5Q29sb3IubmVlZHNVcGRhdGU9YjthLmhlbWlzcGhlcmVMaWdodEdyb3VuZENvbG9yLm5lZWRzVXBkYXRlPWI7YS5oZW1pc3BoZXJlTGlnaHREaXJlY3Rpb24ubmVlZHNVcGRhdGU9Yn1mdW5jdGlvbiBtKCl7dmFyIGE9cGE7YT49WWEmJlRIUkVFLndhcm4oXCJXZWJHTFJlbmRlcmVyOiB0cnlpbmcgdG8gdXNlIFwiK2ErXCIgdGV4dHVyZSB1bml0cyB3aGlsZSB0aGlzIEdQVSBzdXBwb3J0cyBvbmx5IFwiK1lhKTtwYSs9MTtyZXR1cm4gYX1mdW5jdGlvbiBzKGEsYil7YS5fbW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoYi5tYXRyaXhXb3JsZEludmVyc2UsYS5tYXRyaXhXb3JsZCk7YS5fbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeChhLl9tb2RlbFZpZXdNYXRyaXgpfVxuZnVuY3Rpb24gdChhLGIsYyxkKXthW2IrMF09Yy5yKmQ7YVtiKzFdPWMuZypkO2FbYisyXT1jLmIqZH1mdW5jdGlvbiByKGEsYixjKXtjPyhxLnRleFBhcmFtZXRlcmkoYSxxLlRFWFRVUkVfV1JBUF9TLHcoYi53cmFwUykpLHEudGV4UGFyYW1ldGVyaShhLHEuVEVYVFVSRV9XUkFQX1QsdyhiLndyYXBUKSkscS50ZXhQYXJhbWV0ZXJpKGEscS5URVhUVVJFX01BR19GSUxURVIsdyhiLm1hZ0ZpbHRlcikpLHEudGV4UGFyYW1ldGVyaShhLHEuVEVYVFVSRV9NSU5fRklMVEVSLHcoYi5taW5GaWx0ZXIpKSk6KHEudGV4UGFyYW1ldGVyaShhLHEuVEVYVFVSRV9XUkFQX1MscS5DTEFNUF9UT19FREdFKSxxLnRleFBhcmFtZXRlcmkoYSxxLlRFWFRVUkVfV1JBUF9ULHEuQ0xBTVBfVE9fRURHRSksYi53cmFwUz09PVRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcmJmIud3JhcFQ9PT1USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nfHxUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLndyYXBTIGFuZCBUZXh0dXJlLndyYXBUIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZy4gKCBcIitcbmIuc291cmNlRmlsZStcIiApXCIpLHEudGV4UGFyYW1ldGVyaShhLHEuVEVYVFVSRV9NQUdfRklMVEVSLHooYi5tYWdGaWx0ZXIpKSxxLnRleFBhcmFtZXRlcmkoYSxxLlRFWFRVUkVfTUlOX0ZJTFRFUix6KGIubWluRmlsdGVyKSksYi5taW5GaWx0ZXIhPT1USFJFRS5OZWFyZXN0RmlsdGVyJiZiLm1pbkZpbHRlciE9PVRIUkVFLkxpbmVhckZpbHRlciYmVEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4gKCBcIitiLnNvdXJjZUZpbGUrXCIgKVwiKSk7KGM9Wi5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIikpJiZiLnR5cGUhPT1USFJFRS5GbG9hdFR5cGUmJmIudHlwZSE9PVRIUkVFLkhhbGZGbG9hdFR5cGUmJigxPGIuYW5pc290cm9weXx8Yi5fX2N1cnJlbnRBbmlzb3Ryb3B5KSYmXG4ocS50ZXhQYXJhbWV0ZXJmKGEsYy5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxNYXRoLm1pbihiLmFuaXNvdHJvcHksUC5nZXRNYXhBbmlzb3Ryb3B5KCkpKSxiLl9fY3VycmVudEFuaXNvdHJvcHk9Yi5hbmlzb3Ryb3B5KX1mdW5jdGlvbiB2KGEsYil7aWYoYS53aWR0aD5ifHxhLmhlaWdodD5iKXt2YXIgYz1iL01hdGgubWF4KGEud2lkdGgsYS5oZWlnaHQpLGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtkLndpZHRoPU1hdGguZmxvb3IoYS53aWR0aCpjKTtkLmhlaWdodD1NYXRoLmZsb29yKGEuaGVpZ2h0KmMpO2QuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShhLDAsMCxhLndpZHRoLGEuaGVpZ2h0LDAsMCxkLndpZHRoLGQuaGVpZ2h0KTtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgdG9vIGJpZyAoXCIrYS53aWR0aCtcInhcIithLmhlaWdodCtcIikuIFJlc2l6ZWQgdG8gXCIrZC53aWR0aCtcInhcIitkLmhlaWdodCxhKTtyZXR1cm4gZH1yZXR1cm4gYX1cbmZ1bmN0aW9uIHUoYSxiKXtxLmJpbmRSZW5kZXJidWZmZXIocS5SRU5ERVJCVUZGRVIsYSk7Yi5kZXB0aEJ1ZmZlciYmIWIuc3RlbmNpbEJ1ZmZlcj8ocS5yZW5kZXJidWZmZXJTdG9yYWdlKHEuUkVOREVSQlVGRkVSLHEuREVQVEhfQ09NUE9ORU5UMTYsYi53aWR0aCxiLmhlaWdodCkscS5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihxLkZSQU1FQlVGRkVSLHEuREVQVEhfQVRUQUNITUVOVCxxLlJFTkRFUkJVRkZFUixhKSk6Yi5kZXB0aEJ1ZmZlciYmYi5zdGVuY2lsQnVmZmVyPyhxLnJlbmRlcmJ1ZmZlclN0b3JhZ2UocS5SRU5ERVJCVUZGRVIscS5ERVBUSF9TVEVOQ0lMLGIud2lkdGgsYi5oZWlnaHQpLHEuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIocS5GUkFNRUJVRkZFUixxLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxxLlJFTkRFUkJVRkZFUixhKSk6cS5yZW5kZXJidWZmZXJTdG9yYWdlKHEuUkVOREVSQlVGRkVSLHEuUkdCQTQsYi53aWR0aCxiLmhlaWdodCl9ZnVuY3Rpb24geChhKXthIGluc3RhbmNlb2ZcblRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0Q3ViZT8ocS5iaW5kVGV4dHVyZShxLlRFWFRVUkVfQ1VCRV9NQVAsYS5fX3dlYmdsVGV4dHVyZSkscS5nZW5lcmF0ZU1pcG1hcChxLlRFWFRVUkVfQ1VCRV9NQVApLHEuYmluZFRleHR1cmUocS5URVhUVVJFX0NVQkVfTUFQLG51bGwpKToocS5iaW5kVGV4dHVyZShxLlRFWFRVUkVfMkQsYS5fX3dlYmdsVGV4dHVyZSkscS5nZW5lcmF0ZU1pcG1hcChxLlRFWFRVUkVfMkQpLHEuYmluZFRleHR1cmUocS5URVhUVVJFXzJELG51bGwpKX1mdW5jdGlvbiB6KGEpe3JldHVybiBhPT09VEhSRUUuTmVhcmVzdEZpbHRlcnx8YT09PVRIUkVFLk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyfHxhPT09VEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcj9xLk5FQVJFU1Q6cS5MSU5FQVJ9ZnVuY3Rpb24gdyhhKXt2YXIgYjtpZihhPT09VEhSRUUuUmVwZWF0V3JhcHBpbmcpcmV0dXJuIHEuUkVQRUFUO2lmKGE9PT1USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nKXJldHVybiBxLkNMQU1QX1RPX0VER0U7XG5pZihhPT09VEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZylyZXR1cm4gcS5NSVJST1JFRF9SRVBFQVQ7aWYoYT09PVRIUkVFLk5lYXJlc3RGaWx0ZXIpcmV0dXJuIHEuTkVBUkVTVDtpZihhPT09VEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIpcmV0dXJuIHEuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVDtpZihhPT09VEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcilyZXR1cm4gcS5ORUFSRVNUX01JUE1BUF9MSU5FQVI7aWYoYT09PVRIUkVFLkxpbmVhckZpbHRlcilyZXR1cm4gcS5MSU5FQVI7aWYoYT09PVRIUkVFLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIpcmV0dXJuIHEuTElORUFSX01JUE1BUF9ORUFSRVNUO2lmKGE9PT1USFJFRS5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIpcmV0dXJuIHEuTElORUFSX01JUE1BUF9MSU5FQVI7aWYoYT09PVRIUkVFLlVuc2lnbmVkQnl0ZVR5cGUpcmV0dXJuIHEuVU5TSUdORURfQllURTtpZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDQ0NDRUeXBlKXJldHVybiBxLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ7XG5pZihhPT09VEhSRUUuVW5zaWduZWRTaG9ydDU1NTFUeXBlKXJldHVybiBxLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7aWYoYT09PVRIUkVFLlVuc2lnbmVkU2hvcnQ1NjVUeXBlKXJldHVybiBxLlVOU0lHTkVEX1NIT1JUXzVfNl81O2lmKGE9PT1USFJFRS5CeXRlVHlwZSlyZXR1cm4gcS5CWVRFO2lmKGE9PT1USFJFRS5TaG9ydFR5cGUpcmV0dXJuIHEuU0hPUlQ7aWYoYT09PVRIUkVFLlVuc2lnbmVkU2hvcnRUeXBlKXJldHVybiBxLlVOU0lHTkVEX1NIT1JUO2lmKGE9PT1USFJFRS5JbnRUeXBlKXJldHVybiBxLklOVDtpZihhPT09VEhSRUUuVW5zaWduZWRJbnRUeXBlKXJldHVybiBxLlVOU0lHTkVEX0lOVDtpZihhPT09VEhSRUUuRmxvYXRUeXBlKXJldHVybiBxLkZMT0FUO2I9Wi5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO2lmKG51bGwhPT1iJiZhPT09VEhSRUUuSGFsZkZsb2F0VHlwZSlyZXR1cm4gYi5IQUxGX0ZMT0FUX09FUztpZihhPT09VEhSRUUuQWxwaGFGb3JtYXQpcmV0dXJuIHEuQUxQSEE7XG5pZihhPT09VEhSRUUuUkdCRm9ybWF0KXJldHVybiBxLlJHQjtpZihhPT09VEhSRUUuUkdCQUZvcm1hdClyZXR1cm4gcS5SR0JBO2lmKGE9PT1USFJFRS5MdW1pbmFuY2VGb3JtYXQpcmV0dXJuIHEuTFVNSU5BTkNFO2lmKGE9PT1USFJFRS5MdW1pbmFuY2VBbHBoYUZvcm1hdClyZXR1cm4gcS5MVU1JTkFOQ0VfQUxQSEE7aWYoYT09PVRIUkVFLkFkZEVxdWF0aW9uKXJldHVybiBxLkZVTkNfQUREO2lmKGE9PT1USFJFRS5TdWJ0cmFjdEVxdWF0aW9uKXJldHVybiBxLkZVTkNfU1VCVFJBQ1Q7aWYoYT09PVRIUkVFLlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uKXJldHVybiBxLkZVTkNfUkVWRVJTRV9TVUJUUkFDVDtpZihhPT09VEhSRUUuWmVyb0ZhY3RvcilyZXR1cm4gcS5aRVJPO2lmKGE9PT1USFJFRS5PbmVGYWN0b3IpcmV0dXJuIHEuT05FO2lmKGE9PT1USFJFRS5TcmNDb2xvckZhY3RvcilyZXR1cm4gcS5TUkNfQ09MT1I7aWYoYT09PVRIUkVFLk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IpcmV0dXJuIHEuT05FX01JTlVTX1NSQ19DT0xPUjtcbmlmKGE9PT1USFJFRS5TcmNBbHBoYUZhY3RvcilyZXR1cm4gcS5TUkNfQUxQSEE7aWYoYT09PVRIUkVFLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IpcmV0dXJuIHEuT05FX01JTlVTX1NSQ19BTFBIQTtpZihhPT09VEhSRUUuRHN0QWxwaGFGYWN0b3IpcmV0dXJuIHEuRFNUX0FMUEhBO2lmKGE9PT1USFJFRS5PbmVNaW51c0RzdEFscGhhRmFjdG9yKXJldHVybiBxLk9ORV9NSU5VU19EU1RfQUxQSEE7aWYoYT09PVRIUkVFLkRzdENvbG9yRmFjdG9yKXJldHVybiBxLkRTVF9DT0xPUjtpZihhPT09VEhSRUUuT25lTWludXNEc3RDb2xvckZhY3RvcilyZXR1cm4gcS5PTkVfTUlOVVNfRFNUX0NPTE9SO2lmKGE9PT1USFJFRS5TcmNBbHBoYVNhdHVyYXRlRmFjdG9yKXJldHVybiBxLlNSQ19BTFBIQV9TQVRVUkFURTtiPVouZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIik7aWYobnVsbCE9PWIpe2lmKGE9PT1USFJFRS5SR0JfUzNUQ19EWFQxX0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuaWYoYT09PVRIUkVFLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtpZihhPT09VEhSRUUuUkdCQV9TM1RDX0RYVDNfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO2lmKGE9PT1USFJFRS5SR0JBX1MzVENfRFhUNV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFR9Yj1aLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKTtpZihudWxsIT09Yil7aWYoYT09PVRIUkVFLlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUc7aWYoYT09PVRIUkVFLlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0KXJldHVybiBiLkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7aWYoYT09PVRIUkVFLlJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdClyZXR1cm4gYi5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRztcbmlmKGE9PT1USFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQpcmV0dXJuIGIuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUd9Yj1aLmdldChcIkVYVF9ibGVuZF9taW5tYXhcIik7aWYobnVsbCE9PWIpe2lmKGE9PT1USFJFRS5NaW5FcXVhdGlvbilyZXR1cm4gYi5NSU5fRVhUO2lmKGE9PT1USFJFRS5NYXhFcXVhdGlvbilyZXR1cm4gYi5NQVhfRVhUfXJldHVybiAwfWNvbnNvbGUubG9nKFwiVEhSRUUuV2ViR0xSZW5kZXJlclwiLFRIUkVFLlJFVklTSU9OKTthPWF8fHt9O3ZhciBGPXZvaWQgMCE9PWEuY2FudmFzP2EuY2FudmFzOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksRz12b2lkIDAhPT1hLmNvbnRleHQ/YS5jb250ZXh0Om51bGwseT1GLndpZHRoLEk9Ri5oZWlnaHQsQj0xLEM9dm9pZCAwIT09YS5wcmVjaXNpb24/YS5wcmVjaXNpb246XCJoaWdocFwiLEU9dm9pZCAwIT09YS5hbHBoYT9hLmFscGhhOiExLEw9dm9pZCAwIT09YS5kZXB0aD9hLmRlcHRoOiEwLFxuTj12b2lkIDAhPT1hLnN0ZW5jaWw/YS5zdGVuY2lsOiEwLEg9dm9pZCAwIT09YS5hbnRpYWxpYXM/YS5hbnRpYWxpYXM6ITEsTz12b2lkIDAhPT1hLnByZW11bHRpcGxpZWRBbHBoYT9hLnByZW11bHRpcGxpZWRBbHBoYTohMCxNPXZvaWQgMCE9PWEucHJlc2VydmVEcmF3aW5nQnVmZmVyP2EucHJlc2VydmVEcmF3aW5nQnVmZmVyOiExLEE9dm9pZCAwIT09YS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP2EubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjohMSxKPW5ldyBUSFJFRS5Db2xvcigwKSxSPTAsSz1bXSxEPVtdLFg9W10saWE9W10sUT1bXTt0aGlzLmRvbUVsZW1lbnQ9Rjt0aGlzLmNvbnRleHQ9bnVsbDt0aGlzLnNvcnRPYmplY3RzPXRoaXMuYXV0b0NsZWFyU3RlbmNpbD10aGlzLmF1dG9DbGVhckRlcHRoPXRoaXMuYXV0b0NsZWFyQ29sb3I9dGhpcy5hdXRvQ2xlYXI9ITA7dGhpcy5nYW1tYUZhY3Rvcj0yO3RoaXMuZ2FtbWFPdXRwdXQ9dGhpcy5nYW1tYUlucHV0PSExO3RoaXMubWF4TW9ycGhUYXJnZXRzPVxuODt0aGlzLm1heE1vcnBoTm9ybWFscz00O3RoaXMuYXV0b1NjYWxlQ3ViZW1hcHM9ITA7dGhpcy5pbmZvPXttZW1vcnk6e3Byb2dyYW1zOjAsZ2VvbWV0cmllczowLHRleHR1cmVzOjB9LHJlbmRlcjp7Y2FsbHM6MCx2ZXJ0aWNlczowLGZhY2VzOjAscG9pbnRzOjB9fTt2YXIgUD10aGlzLGFhPVtdLGNhPW51bGwscWE9bnVsbCxEYT0tMSx4YT1cIlwiLFY9bnVsbCxwYT0wLHlhPTAsdmE9MCx3YT1GLndpZHRoLGxhPUYuaGVpZ2h0LHphPTAsQWE9MCxPYT1uZXcgVEhSRUUuRnJ1c3R1bSxIYT1uZXcgVEhSRUUuTWF0cml4NCxvYT1uZXcgVEhSRUUuVmVjdG9yMyxoYT1uZXcgVEhSRUUuVmVjdG9yMywkYT0hMCxIYj17YW1iaWVudDpbMCwwLDBdLGRpcmVjdGlvbmFsOntsZW5ndGg6MCxjb2xvcnM6W10scG9zaXRpb25zOltdfSxwb2ludDp7bGVuZ3RoOjAsY29sb3JzOltdLHBvc2l0aW9uczpbXSxkaXN0YW5jZXM6W10sZGVjYXlzOltdfSxzcG90OntsZW5ndGg6MCxjb2xvcnM6W10scG9zaXRpb25zOltdLFxuZGlzdGFuY2VzOltdLGRpcmVjdGlvbnM6W10sYW5nbGVzQ29zOltdLGV4cG9uZW50czpbXSxkZWNheXM6W119LGhlbWk6e2xlbmd0aDowLHNreUNvbG9yczpbXSxncm91bmRDb2xvcnM6W10scG9zaXRpb25zOltdfX0scTt0cnl7YT17YWxwaGE6RSxkZXB0aDpMLHN0ZW5jaWw6TixhbnRpYWxpYXM6SCxwcmVtdWx0aXBsaWVkQWxwaGE6TyxwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6TX07cT1HfHxGLmdldENvbnRleHQoXCJ3ZWJnbFwiLGEpfHxGLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixhKTtpZihudWxsPT09cSl7aWYobnVsbCE9PUYuZ2V0Q29udGV4dChcIndlYmdsXCIpKXRocm93XCJFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0IHdpdGggeW91ciBzZWxlY3RlZCBhdHRyaWJ1dGVzLlwiO3Rocm93XCJFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LlwiO31GLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xuWmEoKTtjYigpO25hLm9iamVjdHM9e319LCExKX1jYXRjaChBYil7VEhSRUUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBcIitBYil9dmFyIFU9bmV3IFRIUkVFLldlYkdMU3RhdGUocSx3KTt2b2lkIDA9PT1xLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCYmKHEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0PWZ1bmN0aW9uKCl7cmV0dXJue3JhbmdlTWluOjEscmFuZ2VNYXg6MSxwcmVjaXNpb246MX19KTt2YXIgWj1uZXcgVEhSRUUuV2ViR0xFeHRlbnNpb25zKHEpLG5hPW5ldyBUSFJFRS5XZWJHTE9iamVjdHMocSx0aGlzLmluZm8sWixmdW5jdGlvbihhLGIpe3JldHVybiBhLm1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuTWVzaEZhY2VNYXRlcmlhbD9hLm1hdGVyaWFsLm1hdGVyaWFsc1tiLm1hdGVyaWFsSW5kZXhdOmEubWF0ZXJpYWx9KTtaLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpO1ouZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyXCIpO1ouZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKTtcblouZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIik7Wi5nZXQoXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIik7Wi5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpO0EmJlouZ2V0KFwiRVhUX2ZyYWdfZGVwdGhcIik7dmFyIE5hPWZ1bmN0aW9uKGEsYixjLGQpeyEwPT09TyYmKGEqPWQsYio9ZCxjKj1kKTtxLmNsZWFyQ29sb3IoYSxiLGMsZCl9LGNiPWZ1bmN0aW9uKCl7cS5jbGVhckNvbG9yKDAsMCwwLDEpO3EuY2xlYXJEZXB0aCgxKTtxLmNsZWFyU3RlbmNpbCgwKTtxLmVuYWJsZShxLkRFUFRIX1RFU1QpO3EuZGVwdGhGdW5jKHEuTEVRVUFMKTtxLmZyb250RmFjZShxLkNDVyk7cS5jdWxsRmFjZShxLkJBQ0spO3EuZW5hYmxlKHEuQ1VMTF9GQUNFKTtxLmVuYWJsZShxLkJMRU5EKTtxLmJsZW5kRXF1YXRpb24ocS5GVU5DX0FERCk7cS5ibGVuZEZ1bmMocS5TUkNfQUxQSEEscS5PTkVfTUlOVVNfU1JDX0FMUEhBKTtxLnZpZXdwb3J0KHlhLHZhLHdhLGxhKTtOYShKLnIsXG5KLmcsSi5iLFIpfSxaYT1mdW5jdGlvbigpe1Y9Y2E9bnVsbDt4YT1cIlwiO0RhPS0xOyRhPSEwO1UucmVzZXQoKX07Y2IoKTt0aGlzLmNvbnRleHQ9cTt0aGlzLmV4dGVuc2lvbnM9Wjt0aGlzLnN0YXRlPVU7dmFyIG1hPW5ldyBUSFJFRS5XZWJHTFNoYWRvd01hcCh0aGlzLEssbmEpO3RoaXMuc2hhZG93TWFwPW1hO3ZhciBZYT1xLmdldFBhcmFtZXRlcihxLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxHPXEuZ2V0UGFyYW1ldGVyKHEuTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxCYj1xLmdldFBhcmFtZXRlcihxLk1BWF9URVhUVVJFX1NJWkUpLFZiPXEuZ2V0UGFyYW1ldGVyKHEuTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSksZmI9MDxHLGViPWZiJiZaLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLENiPVouZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKSxFPXEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KHEuVkVSVEVYX1NIQURFUixxLkhJR0hfRkxPQVQpLEc9cS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQocS5WRVJURVhfU0hBREVSLFxucS5NRURJVU1fRkxPQVQpLEw9cS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQocS5GUkFHTUVOVF9TSEFERVIscS5ISUdIX0ZMT0FUKTthPXEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KHEuRlJBR01FTlRfU0hBREVSLHEuTUVESVVNX0ZMT0FUKTt2YXIgU2I9ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1hKXJldHVybiBhO2E9W107aWYoWi5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIil8fFouZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIikpZm9yKHZhciBiPXEuZ2V0UGFyYW1ldGVyKHEuQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFMpLGM9MDtjPGIubGVuZ3RoO2MrKylhLnB1c2goYltjXSk7cmV0dXJuIGF9fSgpLEU9MDxFLnByZWNpc2lvbiYmMDxMLnByZWNpc2lvbixHPTA8Ry5wcmVjaXNpb24mJjA8YS5wcmVjaXNpb247XCJoaWdocFwiIT09Q3x8RXx8KEc/KEM9XCJtZWRpdW1wXCIsVEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IGhpZ2hwIG5vdCBzdXBwb3J0ZWQsIHVzaW5nIG1lZGl1bXAuXCIpKTpcbihDPVwibG93cFwiLFRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBoaWdocCBhbmQgbWVkaXVtcCBub3Qgc3VwcG9ydGVkLCB1c2luZyBsb3dwLlwiKSkpO1wibWVkaXVtcFwiIT09Q3x8R3x8KEM9XCJsb3dwXCIsVEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IG1lZGl1bXAgbm90IHN1cHBvcnRlZCwgdXNpbmcgbG93cC5cIikpO3ZhciBEYj1uZXcgVEhSRUUuU3ByaXRlUGx1Z2luKHRoaXMsaWEpLEViPW5ldyBUSFJFRS5MZW5zRmxhcmVQbHVnaW4odGhpcyxRKTt0aGlzLmdldENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gcX07dGhpcy5mb3JjZUNvbnRleHRMb3NzPWZ1bmN0aW9uKCl7Wi5nZXQoXCJXRUJHTF9sb3NlX2NvbnRleHRcIikubG9zZUNvbnRleHQoKX07dGhpcy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzPWZ1bmN0aW9uKCl7cmV0dXJuIGZifTt0aGlzLnN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzPWZ1bmN0aW9uKCl7cmV0dXJuIENifTt0aGlzLnN1cHBvcnRzRmxvYXRUZXh0dXJlcz1cbmZ1bmN0aW9uKCl7cmV0dXJuIFouZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRcIil9O3RoaXMuc3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlcz1mdW5jdGlvbigpe3JldHVybiBaLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIil9O3RoaXMuc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzPWZ1bmN0aW9uKCl7cmV0dXJuIFouZ2V0KFwiT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXCIpfTt0aGlzLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDPWZ1bmN0aW9uKCl7cmV0dXJuIFouZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil9O3RoaXMuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDPWZ1bmN0aW9uKCl7cmV0dXJuIFouZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfTt0aGlzLnN1cHBvcnRzQmxlbmRNaW5NYXg9ZnVuY3Rpb24oKXtyZXR1cm4gWi5nZXQoXCJFWFRfYmxlbmRfbWlubWF4XCIpfTt0aGlzLmdldE1heEFuaXNvdHJvcHk9ZnVuY3Rpb24oKXt2YXIgYTtcbnJldHVybiBmdW5jdGlvbigpe2lmKHZvaWQgMCE9PWEpcmV0dXJuIGE7dmFyIGI9Wi5nZXQoXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIik7cmV0dXJuIGE9bnVsbCE9PWI/cS5nZXRQYXJhbWV0ZXIoYi5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpOjB9fSgpO3RoaXMuZ2V0UHJlY2lzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O3RoaXMuZ2V0UGl4ZWxSYXRpbz1mdW5jdGlvbigpe3JldHVybiBCfTt0aGlzLnNldFBpeGVsUmF0aW89ZnVuY3Rpb24oYSl7Qj1hfTt0aGlzLmdldFNpemU9ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6eSxoZWlnaHQ6SX19O3RoaXMuc2V0U2l6ZT1mdW5jdGlvbihhLGIsYyl7eT1hO0k9YjtGLndpZHRoPWEqQjtGLmhlaWdodD1iKkI7ITEhPT1jJiYoRi5zdHlsZS53aWR0aD1hK1wicHhcIixGLnN0eWxlLmhlaWdodD1iK1wicHhcIik7dGhpcy5zZXRWaWV3cG9ydCgwLDAsYSxiKX07dGhpcy5zZXRWaWV3cG9ydD1mdW5jdGlvbihhLGIsYyxkKXt5YT1cbmEqQjt2YT1iKkI7d2E9YypCO2xhPWQqQjtxLnZpZXdwb3J0KHlhLHZhLHdhLGxhKX07dGhpcy5zZXRTY2lzc29yPWZ1bmN0aW9uKGEsYixjLGQpe3Euc2Npc3NvcihhKkIsYipCLGMqQixkKkIpfTt0aGlzLmVuYWJsZVNjaXNzb3JUZXN0PWZ1bmN0aW9uKGEpe2E/cS5lbmFibGUocS5TQ0lTU09SX1RFU1QpOnEuZGlzYWJsZShxLlNDSVNTT1JfVEVTVCl9O3RoaXMuZ2V0Q2xlYXJDb2xvcj1mdW5jdGlvbigpe3JldHVybiBKfTt0aGlzLnNldENsZWFyQ29sb3I9ZnVuY3Rpb24oYSxiKXtKLnNldChhKTtSPXZvaWQgMCE9PWI/YjoxO05hKEoucixKLmcsSi5iLFIpfTt0aGlzLmdldENsZWFyQWxwaGE9ZnVuY3Rpb24oKXtyZXR1cm4gUn07dGhpcy5zZXRDbGVhckFscGhhPWZ1bmN0aW9uKGEpe1I9YTtOYShKLnIsSi5nLEouYixSKX07dGhpcy5jbGVhcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9MDtpZih2b2lkIDA9PT1hfHxhKWR8PXEuQ09MT1JfQlVGRkVSX0JJVDtpZih2b2lkIDA9PT1ifHxcbmIpZHw9cS5ERVBUSF9CVUZGRVJfQklUO2lmKHZvaWQgMD09PWN8fGMpZHw9cS5TVEVOQ0lMX0JVRkZFUl9CSVQ7cS5jbGVhcihkKX07dGhpcy5jbGVhckNvbG9yPWZ1bmN0aW9uKCl7cS5jbGVhcihxLkNPTE9SX0JVRkZFUl9CSVQpfTt0aGlzLmNsZWFyRGVwdGg9ZnVuY3Rpb24oKXtxLmNsZWFyKHEuREVQVEhfQlVGRkVSX0JJVCl9O3RoaXMuY2xlYXJTdGVuY2lsPWZ1bmN0aW9uKCl7cS5jbGVhcihxLlNURU5DSUxfQlVGRkVSX0JJVCl9O3RoaXMuY2xlYXJUYXJnZXQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5zZXRSZW5kZXJUYXJnZXQoYSk7dGhpcy5jbGVhcihiLGMsZCl9O3RoaXMucmVzZXRHTFN0YXRlPVphO3ZhciB4Yj1mdW5jdGlvbihhKXthPWEudGFyZ2V0O2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIix4Yik7YS5pbWFnZSYmYS5pbWFnZS5fX3dlYmdsVGV4dHVyZUN1YmU/KHEuZGVsZXRlVGV4dHVyZShhLmltYWdlLl9fd2ViZ2xUZXh0dXJlQ3ViZSksZGVsZXRlIGEuaW1hZ2UuX193ZWJnbFRleHR1cmVDdWJlKTpcbnZvaWQgMCE9PWEuX193ZWJnbEluaXQmJihxLmRlbGV0ZVRleHR1cmUoYS5fX3dlYmdsVGV4dHVyZSksZGVsZXRlIGEuX193ZWJnbFRleHR1cmUsZGVsZXRlIGEuX193ZWJnbEluaXQpO1AuaW5mby5tZW1vcnkudGV4dHVyZXMtLX0sZGI9ZnVuY3Rpb24oYSl7YT1hLnRhcmdldDthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsZGIpO2lmKGEmJnZvaWQgMCE9PWEuX193ZWJnbFRleHR1cmUpe3EuZGVsZXRlVGV4dHVyZShhLl9fd2ViZ2xUZXh0dXJlKTtkZWxldGUgYS5fX3dlYmdsVGV4dHVyZTtpZihhIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlKWZvcih2YXIgYj0wOzY+YjtiKyspcS5kZWxldGVGcmFtZWJ1ZmZlcihhLl9fd2ViZ2xGcmFtZWJ1ZmZlcltiXSkscS5kZWxldGVSZW5kZXJidWZmZXIoYS5fX3dlYmdsUmVuZGVyYnVmZmVyW2JdKTtlbHNlIHEuZGVsZXRlRnJhbWVidWZmZXIoYS5fX3dlYmdsRnJhbWVidWZmZXIpLHEuZGVsZXRlUmVuZGVyYnVmZmVyKGEuX193ZWJnbFJlbmRlcmJ1ZmZlcik7XG5kZWxldGUgYS5fX3dlYmdsRnJhbWVidWZmZXI7ZGVsZXRlIGEuX193ZWJnbFJlbmRlcmJ1ZmZlcn1QLmluZm8ubWVtb3J5LnRleHR1cmVzLS19LEdiPWZ1bmN0aW9uKGEpe2E9YS50YXJnZXQ7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLEdiKTtGYihhKX0sRmI9ZnVuY3Rpb24oYSl7dmFyIGI9YS5wcm9ncmFtLnByb2dyYW07aWYodm9pZCAwIT09Yil7YS5wcm9ncmFtPXZvaWQgMDt2YXIgYyxkLGU9ITE7YT0wO2ZvcihjPWFhLmxlbmd0aDthPGM7YSsrKWlmKGQ9YWFbYV0sZC5wcm9ncmFtPT09Yil7ZC51c2VkVGltZXMtLTswPT09ZC51c2VkVGltZXMmJihlPSEwKTticmVha31pZighMD09PWUpe2U9W107YT0wO2ZvcihjPWFhLmxlbmd0aDthPGM7YSsrKWQ9YWFbYV0sZC5wcm9ncmFtIT09YiYmZS5wdXNoKGQpO2FhPWU7cS5kZWxldGVQcm9ncmFtKGIpO1AuaW5mby5tZW1vcnkucHJvZ3JhbXMtLX19fTt0aGlzLnJlbmRlckJ1ZmZlckltbWVkaWF0ZT1mdW5jdGlvbihhLFxuYixjKXtVLmluaXRBdHRyaWJ1dGVzKCk7YS5oYXNQb3NpdGlvbnMmJiFhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXImJihhLl9fd2ViZ2xWZXJ0ZXhCdWZmZXI9cS5jcmVhdGVCdWZmZXIoKSk7YS5oYXNOb3JtYWxzJiYhYS5fX3dlYmdsTm9ybWFsQnVmZmVyJiYoYS5fX3dlYmdsTm9ybWFsQnVmZmVyPXEuY3JlYXRlQnVmZmVyKCkpO2EuaGFzVXZzJiYhYS5fX3dlYmdsVXZCdWZmZXImJihhLl9fd2ViZ2xVdkJ1ZmZlcj1xLmNyZWF0ZUJ1ZmZlcigpKTthLmhhc0NvbG9ycyYmIWEuX193ZWJnbENvbG9yQnVmZmVyJiYoYS5fX3dlYmdsQ29sb3JCdWZmZXI9cS5jcmVhdGVCdWZmZXIoKSk7YS5oYXNQb3NpdGlvbnMmJihxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsYS5fX3dlYmdsVmVydGV4QnVmZmVyKSxxLmJ1ZmZlckRhdGEocS5BUlJBWV9CVUZGRVIsYS5wb3NpdGlvbkFycmF5LHEuRFlOQU1JQ19EUkFXKSxVLmVuYWJsZUF0dHJpYnV0ZShiLmF0dHJpYnV0ZXMucG9zaXRpb24pLHEudmVydGV4QXR0cmliUG9pbnRlcihiLmF0dHJpYnV0ZXMucG9zaXRpb24sXG4zLHEuRkxPQVQsITEsMCwwKSk7aWYoYS5oYXNOb3JtYWxzKXtxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsYS5fX3dlYmdsTm9ybWFsQnVmZmVyKTtpZighMT09PWMgaW5zdGFuY2VvZiBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCYmYy5zaGFkaW5nPT09VEhSRUUuRmxhdFNoYWRpbmcpe3ZhciBkLGUsZixnLGgsayxtLGwscCxuLHUscz0zKmEuY291bnQ7Zm9yKHU9MDt1PHM7dSs9OSluPWEubm9ybWFsQXJyYXksZD1uW3VdLGU9blt1KzFdLGY9blt1KzJdLGc9blt1KzNdLGs9blt1KzRdLGw9blt1KzVdLGg9blt1KzZdLG09blt1KzddLHA9blt1KzhdLGQ9KGQrZytoKS8zLGU9KGUrayttKS8zLGY9KGYrbCtwKS8zLG5bdV09ZCxuW3UrMV09ZSxuW3UrMl09ZixuW3UrM109ZCxuW3UrNF09ZSxuW3UrNV09ZixuW3UrNl09ZCxuW3UrN109ZSxuW3UrOF09Zn1xLmJ1ZmZlckRhdGEocS5BUlJBWV9CVUZGRVIsYS5ub3JtYWxBcnJheSxxLkRZTkFNSUNfRFJBVyk7VS5lbmFibGVBdHRyaWJ1dGUoYi5hdHRyaWJ1dGVzLm5vcm1hbCk7XG5xLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5hdHRyaWJ1dGVzLm5vcm1hbCwzLHEuRkxPQVQsITEsMCwwKX1hLmhhc1V2cyYmYy5tYXAmJihxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsYS5fX3dlYmdsVXZCdWZmZXIpLHEuYnVmZmVyRGF0YShxLkFSUkFZX0JVRkZFUixhLnV2QXJyYXkscS5EWU5BTUlDX0RSQVcpLFUuZW5hYmxlQXR0cmlidXRlKGIuYXR0cmlidXRlcy51dikscS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIuYXR0cmlidXRlcy51diwyLHEuRkxPQVQsITEsMCwwKSk7YS5oYXNDb2xvcnMmJmMudmVydGV4Q29sb3JzIT09VEhSRUUuTm9Db2xvcnMmJihxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsYS5fX3dlYmdsQ29sb3JCdWZmZXIpLHEuYnVmZmVyRGF0YShxLkFSUkFZX0JVRkZFUixhLmNvbG9yQXJyYXkscS5EWU5BTUlDX0RSQVcpLFUuZW5hYmxlQXR0cmlidXRlKGIuYXR0cmlidXRlcy5jb2xvcikscS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIuYXR0cmlidXRlcy5jb2xvcixcbjMscS5GTE9BVCwhMSwwLDApKTtVLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7cS5kcmF3QXJyYXlzKHEuVFJJQU5HTEVTLDAsYS5jb3VudCk7YS5jb3VudD0wfTt0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdD1mdW5jdGlvbihhLGMsZCxlLGYsZyl7aWYoITEhPT1lLnZpc2libGUpaWYobmEudXBkYXRlKGcpLGE9cChhLGMsZCxlLGcpLGM9ITEsZD1cImRpcmVjdF9cIitmLmlkK1wiX1wiK2EuaWQrXCJfXCIrKGUud2lyZWZyYW1lPzE6MCksZCE9PXhhJiYoeGE9ZCxjPSEwKSxjJiZVLmluaXRBdHRyaWJ1dGVzKCksZyBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpe2c9ITA9PT1lLndpcmVmcmFtZT9xLkxJTkVTOnEuVFJJQU5HTEVTO3ZhciBoPWYuYXR0cmlidXRlcy5pbmRleDtpZihoKXt2YXIgayxtO2guYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSYmWi5nZXQoXCJPRVNfZWxlbWVudF9pbmRleF91aW50XCIpPyhrPXEuVU5TSUdORURfSU5ULG09NCk6KGs9cS5VTlNJR05FRF9TSE9SVCxtPTIpO2Q9XG5mLm9mZnNldHM7aWYoMD09PWQubGVuZ3RoKXtjJiYoYihlLGEsZiwwKSxxLmJpbmRCdWZmZXIocS5FTEVNRU5UX0FSUkFZX0JVRkZFUixoLmJ1ZmZlcikpO2lmKGYgaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSYmMDxmLm1heEluc3RhbmNlZENvdW50KXt2YXIgbD1aLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7aWYobnVsbD09PWwpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKTtyZXR1cm59bC5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShnLGguYXJyYXkubGVuZ3RoLGssMCxmLm1heEluc3RhbmNlZENvdW50KX1lbHNlIHEuZHJhd0VsZW1lbnRzKGcsaC5hcnJheS5sZW5ndGgsaywwKTtQLmluZm8ucmVuZGVyLmNhbGxzKys7XG5QLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1oLmFycmF5Lmxlbmd0aDtQLmluZm8ucmVuZGVyLmZhY2VzKz1oLmFycmF5Lmxlbmd0aC8zfWVsc2V7Yz0hMDtmb3IodmFyIG49MCx1PWQubGVuZ3RoO248dTtuKyspe2w9ZFtuXS5pbmRleDtjJiYoYihlLGEsZixsKSxxLmJpbmRCdWZmZXIocS5FTEVNRU5UX0FSUkFZX0JVRkZFUixoLmJ1ZmZlcikpO2lmKGYgaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSYmMDxkW25dLmluc3RhbmNlcyl7bD1aLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7aWYobnVsbD09PWwpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKTticmVha31sLmRyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFKGcsXG5kW25dLmNvdW50LGssZFtuXS5zdGFydCptLGRbbl0uY291bnQsayxkW25dLmluc3RhbmNlcyl9ZWxzZSBxLmRyYXdFbGVtZW50cyhnLGRbbl0uY291bnQsayxkW25dLnN0YXJ0Km0pO1AuaW5mby5yZW5kZXIuY2FsbHMrKztQLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1kW25dLmNvdW50O1AuaW5mby5yZW5kZXIuZmFjZXMrPWRbbl0uY291bnQvM319fWVsc2V7YyYmYihlLGEsZiwwKTtlPWYuYXR0cmlidXRlcy5wb3NpdGlvbjtpZihmIGluc3RhbmNlb2YgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkmJjA8Zi5tYXhJbnN0YW5jZWRDb3VudCl7bD1aLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7aWYobnVsbD09PWwpe1RIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXR1cFZlcnRleEF0dHJpYnV0ZXM6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLlwiKTtcbnJldHVybn1lIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU/bC5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUoZywwLGUuZGF0YS5hcnJheS5sZW5ndGgvZS5kYXRhLnN0cmlkZSxmLm1heEluc3RhbmNlZENvdW50KTpsLmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRShnLDAsZS5hcnJheS5sZW5ndGgvZS5pdGVtU2l6ZSxmLm1heEluc3RhbmNlZENvdW50KX1lbHNlIGUgaW5zdGFuY2VvZiBUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT9xLmRyYXdBcnJheXMoZywwLGUuZGF0YS5hcnJheS5sZW5ndGgvZS5kYXRhLnN0cmlkZSk6cS5kcmF3QXJyYXlzKGcsMCxlLmFycmF5Lmxlbmd0aC9lLml0ZW1TaXplKTtQLmluZm8ucmVuZGVyLmNhbGxzKys7UC5pbmZvLnJlbmRlci52ZXJ0aWNlcys9ZS5hcnJheS5sZW5ndGgvZS5pdGVtU2l6ZTtQLmluZm8ucmVuZGVyLmZhY2VzKz1lLmFycmF5Lmxlbmd0aC8oMyplLml0ZW1TaXplKX19ZWxzZSBpZihnIGluc3RhbmNlb2ZcblRIUkVFLlBvaW50Q2xvdWQpaWYoZz1xLlBPSU5UUyxoPWYuYXR0cmlidXRlcy5pbmRleClpZihoLmFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkmJlouZ2V0KFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKT8oaz1xLlVOU0lHTkVEX0lOVCxtPTQpOihrPXEuVU5TSUdORURfU0hPUlQsbT0yKSxkPWYub2Zmc2V0cywwPT09ZC5sZW5ndGgpYyYmKGIoZSxhLGYsMCkscS5iaW5kQnVmZmVyKHEuRUxFTUVOVF9BUlJBWV9CVUZGRVIsaC5idWZmZXIpKSxxLmRyYXdFbGVtZW50cyhnLGguYXJyYXkubGVuZ3RoLGssMCksUC5pbmZvLnJlbmRlci5jYWxscysrLFAuaW5mby5yZW5kZXIucG9pbnRzKz1oLmFycmF5Lmxlbmd0aDtlbHNlIGZvcigxPGQubGVuZ3RoJiYoYz0hMCksbj0wLHU9ZC5sZW5ndGg7bjx1O24rKylsPWRbbl0uaW5kZXgsYyYmKGIoZSxhLGYsbCkscS5iaW5kQnVmZmVyKHEuRUxFTUVOVF9BUlJBWV9CVUZGRVIsaC5idWZmZXIpKSxxLmRyYXdFbGVtZW50cyhnLGRbbl0uY291bnQsXG5rLGRbbl0uc3RhcnQqbSksUC5pbmZvLnJlbmRlci5jYWxscysrLFAuaW5mby5yZW5kZXIucG9pbnRzKz1kW25dLmNvdW50O2Vsc2UgaWYoYyYmYihlLGEsZiwwKSxlPWYuYXR0cmlidXRlcy5wb3NpdGlvbixkPWYub2Zmc2V0cywwPT09ZC5sZW5ndGgpcS5kcmF3QXJyYXlzKGcsMCxlLmFycmF5Lmxlbmd0aC8zKSxQLmluZm8ucmVuZGVyLmNhbGxzKyssUC5pbmZvLnJlbmRlci5wb2ludHMrPWUuYXJyYXkubGVuZ3RoLzM7ZWxzZSBmb3Iobj0wLHU9ZC5sZW5ndGg7bjx1O24rKylxLmRyYXdBcnJheXMoZyxkW25dLmluZGV4LGRbbl0uY291bnQpLFAuaW5mby5yZW5kZXIuY2FsbHMrKyxQLmluZm8ucmVuZGVyLnBvaW50cys9ZFtuXS5jb3VudDtlbHNlIGlmKGcgaW5zdGFuY2VvZiBUSFJFRS5MaW5lKWlmKGc9Zy5tb2RlPT09VEhSRUUuTGluZVN0cmlwP3EuTElORV9TVFJJUDpxLkxJTkVTLFUuc2V0TGluZVdpZHRoKGUubGluZXdpZHRoKkIpLGg9Zi5hdHRyaWJ1dGVzLmluZGV4KWlmKGguYXJyYXkgaW5zdGFuY2VvZlxuVWludDMyQXJyYXk/KGs9cS5VTlNJR05FRF9JTlQsbT00KTooaz1xLlVOU0lHTkVEX1NIT1JULG09MiksZD1mLm9mZnNldHMsMD09PWQubGVuZ3RoKWMmJihiKGUsYSxmLDApLHEuYmluZEJ1ZmZlcihxLkVMRU1FTlRfQVJSQVlfQlVGRkVSLGguYnVmZmVyKSkscS5kcmF3RWxlbWVudHMoZyxoLmFycmF5Lmxlbmd0aCxrLDApLFAuaW5mby5yZW5kZXIuY2FsbHMrKyxQLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1oLmFycmF5Lmxlbmd0aDtlbHNlIGZvcigxPGQubGVuZ3RoJiYoYz0hMCksbj0wLHU9ZC5sZW5ndGg7bjx1O24rKylsPWRbbl0uaW5kZXgsYyYmKGIoZSxhLGYsbCkscS5iaW5kQnVmZmVyKHEuRUxFTUVOVF9BUlJBWV9CVUZGRVIsaC5idWZmZXIpKSxxLmRyYXdFbGVtZW50cyhnLGRbbl0uY291bnQsayxkW25dLnN0YXJ0Km0pLFAuaW5mby5yZW5kZXIuY2FsbHMrKyxQLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1kW25dLmNvdW50O2Vsc2UgaWYoYyYmYihlLGEsZiwwKSxlPWYuYXR0cmlidXRlcy5wb3NpdGlvbixcbmQ9Zi5vZmZzZXRzLDA9PT1kLmxlbmd0aClxLmRyYXdBcnJheXMoZywwLGUuYXJyYXkubGVuZ3RoLzMpLFAuaW5mby5yZW5kZXIuY2FsbHMrKyxQLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1lLmFycmF5Lmxlbmd0aC8zO2Vsc2UgZm9yKG49MCx1PWQubGVuZ3RoO248dTtuKyspcS5kcmF3QXJyYXlzKGcsZFtuXS5pbmRleCxkW25dLmNvdW50KSxQLmluZm8ucmVuZGVyLmNhbGxzKyssUC5pbmZvLnJlbmRlci52ZXJ0aWNlcys9ZFtuXS5jb3VudH07dGhpcy5yZW5kZXJCdWZmZXI9ZnVuY3Rpb24oYSxiLGMsZCxmLGcpe2lmKCExIT09ZC52aXNpYmxlKXtuYS51cGRhdGUoZyk7Yz1wKGEsYixjLGQsZyk7Yj1jLmF0dHJpYnV0ZXM7YT0hMTtjPWYuaWQrXCJfXCIrYy5pZCtcIl9cIisoZC53aXJlZnJhbWU/MTowKTtjIT09eGEmJih4YT1jLGE9ITApO2EmJlUuaW5pdEF0dHJpYnV0ZXMoKTtpZighZC5tb3JwaFRhcmdldHMmJjA8PWIucG9zaXRpb24pYSYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixcbmYuX193ZWJnbFZlcnRleEJ1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYi5wb3NpdGlvbikscS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIucG9zaXRpb24sMyxxLkZMT0FULCExLDAsMCkpO2Vsc2UgaWYoZy5tb3JwaFRhcmdldEJhc2Upe2M9ZC5wcm9ncmFtLmF0dHJpYnV0ZXM7LTEhPT1nLm1vcnBoVGFyZ2V0QmFzZSYmMDw9Yy5wb3NpdGlvbj8ocS5iaW5kQnVmZmVyKHEuQVJSQVlfQlVGRkVSLGYuX193ZWJnbE1vcnBoVGFyZ2V0c0J1ZmZlcnNbZy5tb3JwaFRhcmdldEJhc2VdKSxVLmVuYWJsZUF0dHJpYnV0ZShjLnBvc2l0aW9uKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYy5wb3NpdGlvbiwzLHEuRkxPQVQsITEsMCwwKSk6MDw9Yy5wb3NpdGlvbiYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIpLFUuZW5hYmxlQXR0cmlidXRlKGMucG9zaXRpb24pLHEudmVydGV4QXR0cmliUG9pbnRlcihjLnBvc2l0aW9uLDMscS5GTE9BVCwhMSwwLDApKTtcbmlmKGcubW9ycGhUYXJnZXRGb3JjZWRPcmRlci5sZW5ndGgpZm9yKHZhciBoPTAsaz1nLm1vcnBoVGFyZ2V0Rm9yY2VkT3JkZXIsbT1nLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyxsO2g8ZC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMmJmg8ay5sZW5ndGg7KWw9Y1tcIm1vcnBoVGFyZ2V0XCIraF0sMDw9bCYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xNb3JwaFRhcmdldHNCdWZmZXJzW2tbaF1dKSxVLmVuYWJsZUF0dHJpYnV0ZShsKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIobCwzLHEuRkxPQVQsITEsMCwwKSksbD1jW1wibW9ycGhOb3JtYWxcIitoXSwwPD1sJiZkLm1vcnBoTm9ybWFscyYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzW2tbaF1dKSxVLmVuYWJsZUF0dHJpYnV0ZShsKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIobCwzLHEuRkxPQVQsITEsMCwwKSksZy5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzW2hdPVxubVtrW2hdXSxoKys7ZWxzZXtrPVtdO209Zy5tb3JwaFRhcmdldEluZmx1ZW5jZXM7aD1nLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0czttLmxlbmd0aD5oLmxlbmd0aCYmKFRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBJbmZsdWVuY2VzIGFycmF5IGlzIGJpZ2dlciB0aGFuIG1vcnBoVGFyZ2V0cyBhcnJheS5cIiksbS5sZW5ndGg9aC5sZW5ndGgpO2g9MDtmb3IobD1tLmxlbmd0aDtoPGw7aCsrKWsucHVzaChbbVtoXSxoXSk7ay5sZW5ndGg+ZC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHM/KGsuc29ydChlKSxrLmxlbmd0aD1kLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyk6ay5sZW5ndGg+ZC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHM/ay5zb3J0KGUpOjA9PT1rLmxlbmd0aCYmay5wdXNoKFswLDBdKTtmb3IodmFyIGg9MCxuPWQubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzO2g8bjtoKyspaWYoa1toXSl7dmFyIHU9a1toXVsxXTtsPWNbXCJtb3JwaFRhcmdldFwiK2hdOzA8PWwmJlxuKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xNb3JwaFRhcmdldHNCdWZmZXJzW3VdKSxVLmVuYWJsZUF0dHJpYnV0ZShsKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIobCwzLHEuRkxPQVQsITEsMCwwKSk7bD1jW1wibW9ycGhOb3JtYWxcIitoXTswPD1sJiZkLm1vcnBoTm9ybWFscyYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzW3VdKSxVLmVuYWJsZUF0dHJpYnV0ZShsKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIobCwzLHEuRkxPQVQsITEsMCwwKSk7Zy5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzW2hdPW1bdV19ZWxzZSBnLl9fd2ViZ2xNb3JwaFRhcmdldEluZmx1ZW5jZXNbaF09MH1udWxsIT09ZC5wcm9ncmFtLnVuaWZvcm1zLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyYmcS51bmlmb3JtMWZ2KGQucHJvZ3JhbS51bmlmb3Jtcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMsZy5fX3dlYmdsTW9ycGhUYXJnZXRJbmZsdWVuY2VzKX1pZihhKXtpZihmLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdClmb3IoYz1cbjAsbT1mLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdC5sZW5ndGg7YzxtO2MrKylrPWYuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0W2NdLDA8PWJbay5idWZmZXIuYmVsb25nc1RvQXR0cmlidXRlXSYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixrLmJ1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYltrLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGVdKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYltrLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGVdLGsuc2l6ZSxxLkZMT0FULCExLDAsMCkpOzA8PWIuY29sb3ImJigwPGcuZ2VvbWV0cnkuY29sb3JzLmxlbmd0aHx8MDxnLmdlb21ldHJ5LmZhY2VzLmxlbmd0aD8ocS5iaW5kQnVmZmVyKHEuQVJSQVlfQlVGRkVSLGYuX193ZWJnbENvbG9yQnVmZmVyKSxVLmVuYWJsZUF0dHJpYnV0ZShiLmNvbG9yKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5jb2xvciwzLHEuRkxPQVQsITEsMCwwKSk6dm9pZCAwIT09ZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzJiZcbnEudmVydGV4QXR0cmliM2Z2KGIuY29sb3IsZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzLmNvbG9yKSk7MDw9Yi5ub3JtYWwmJihxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsZi5fX3dlYmdsTm9ybWFsQnVmZmVyKSxVLmVuYWJsZUF0dHJpYnV0ZShiLm5vcm1hbCkscS52ZXJ0ZXhBdHRyaWJQb2ludGVyKGIubm9ybWFsLDMscS5GTE9BVCwhMSwwLDApKTswPD1iLnRhbmdlbnQmJihxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsZi5fX3dlYmdsVGFuZ2VudEJ1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYi50YW5nZW50KSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYi50YW5nZW50LDQscS5GTE9BVCwhMSwwLDApKTswPD1iLnV2JiYoZy5nZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdPyhxLmJpbmRCdWZmZXIocS5BUlJBWV9CVUZGRVIsZi5fX3dlYmdsVVZCdWZmZXIpLFUuZW5hYmxlQXR0cmlidXRlKGIudXYpLHEudmVydGV4QXR0cmliUG9pbnRlcihiLnV2LDIscS5GTE9BVCwhMSwwLFxuMCkpOnZvaWQgMCE9PWQuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyYmcS52ZXJ0ZXhBdHRyaWIyZnYoYi51dixkLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMudXYpKTswPD1iLnV2MiYmKGcuZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sxXT8ocS5iaW5kQnVmZmVyKHEuQVJSQVlfQlVGRkVSLGYuX193ZWJnbFVWMkJ1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYi51djIpLHEudmVydGV4QXR0cmliUG9pbnRlcihiLnV2MiwyLHEuRkxPQVQsITEsMCwwKSk6dm9pZCAwIT09ZC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzJiZxLnZlcnRleEF0dHJpYjJmdihiLnV2MixkLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMudXYyKSk7ZC5za2lubmluZyYmMDw9Yi5za2luSW5kZXgmJjA8PWIuc2tpbldlaWdodCYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xTa2luSW5kaWNlc0J1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYi5za2luSW5kZXgpLHEudmVydGV4QXR0cmliUG9pbnRlcihiLnNraW5JbmRleCxcbjQscS5GTE9BVCwhMSwwLDApLHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xTa2luV2VpZ2h0c0J1ZmZlciksVS5lbmFibGVBdHRyaWJ1dGUoYi5za2luV2VpZ2h0KSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5za2luV2VpZ2h0LDQscS5GTE9BVCwhMSwwLDApKTswPD1iLmxpbmVEaXN0YW5jZSYmKHEuYmluZEJ1ZmZlcihxLkFSUkFZX0JVRkZFUixmLl9fd2ViZ2xMaW5lRGlzdGFuY2VCdWZmZXIpLFUuZW5hYmxlQXR0cmlidXRlKGIubGluZURpc3RhbmNlKSxxLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5saW5lRGlzdGFuY2UsMSxxLkZMT0FULCExLDAsMCkpfVUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtnIGluc3RhbmNlb2YgVEhSRUUuTWVzaD8oZz1mLl9fdHlwZUFycmF5PT09VWludDMyQXJyYXk/cS5VTlNJR05FRF9JTlQ6cS5VTlNJR05FRF9TSE9SVCxkLndpcmVmcmFtZT8oVS5zZXRMaW5lV2lkdGgoZC53aXJlZnJhbWVMaW5ld2lkdGgqQiksYSYmcS5iaW5kQnVmZmVyKHEuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG5mLl9fd2ViZ2xMaW5lQnVmZmVyKSxxLmRyYXdFbGVtZW50cyhxLkxJTkVTLGYuX193ZWJnbExpbmVDb3VudCxnLDApKTooYSYmcS5iaW5kQnVmZmVyKHEuRUxFTUVOVF9BUlJBWV9CVUZGRVIsZi5fX3dlYmdsRmFjZUJ1ZmZlcikscS5kcmF3RWxlbWVudHMocS5UUklBTkdMRVMsZi5fX3dlYmdsRmFjZUNvdW50LGcsMCkpLFAuaW5mby5yZW5kZXIuY2FsbHMrKyxQLmluZm8ucmVuZGVyLnZlcnRpY2VzKz1mLl9fd2ViZ2xGYWNlQ291bnQsUC5pbmZvLnJlbmRlci5mYWNlcys9Zi5fX3dlYmdsRmFjZUNvdW50LzMpOmcgaW5zdGFuY2VvZiBUSFJFRS5MaW5lPyhnPWcubW9kZT09PVRIUkVFLkxpbmVTdHJpcD9xLkxJTkVfU1RSSVA6cS5MSU5FUyxVLnNldExpbmVXaWR0aChkLmxpbmV3aWR0aCpCKSxxLmRyYXdBcnJheXMoZywwLGYuX193ZWJnbExpbmVDb3VudCksUC5pbmZvLnJlbmRlci5jYWxscysrKTpnIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRDbG91ZCYmKHEuZHJhd0FycmF5cyhxLlBPSU5UUyxcbjAsZi5fX3dlYmdsUGFydGljbGVDb3VudCksUC5pbmZvLnJlbmRlci5jYWxscysrLFAuaW5mby5yZW5kZXIucG9pbnRzKz1mLl9fd2ViZ2xQYXJ0aWNsZUNvdW50KX19O3RoaXMucmVuZGVyPWZ1bmN0aW9uKGEsYixlLG0pe2lmKCExPT09YiBpbnN0YW5jZW9mIFRIUkVFLkNhbWVyYSlUSFJFRS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyOiBjYW1lcmEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkNhbWVyYS5cIik7ZWxzZXt2YXIgcD1hLmZvZzt4YT1cIlwiO0RhPS0xO1Y9bnVsbDskYT0hMDshMD09PWEuYXV0b1VwZGF0ZSYmYS51cGRhdGVNYXRyaXhXb3JsZCgpO3ZvaWQgMD09PWIucGFyZW50JiZiLnVwZGF0ZU1hdHJpeFdvcmxkKCk7YS50cmF2ZXJzZShmdW5jdGlvbihhKXthIGluc3RhbmNlb2YgVEhSRUUuU2tpbm5lZE1lc2gmJmEuc2tlbGV0b24udXBkYXRlKCl9KTtiLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKGIubWF0cml4V29ybGQpO0hhLm11bHRpcGx5TWF0cmljZXMoYi5wcm9qZWN0aW9uTWF0cml4LFxuYi5tYXRyaXhXb3JsZEludmVyc2UpO09hLnNldEZyb21NYXRyaXgoSGEpO0subGVuZ3RoPTA7RC5sZW5ndGg9MDtYLmxlbmd0aD0wO2lhLmxlbmd0aD0wO1EubGVuZ3RoPTA7ZihhKTshMD09PVAuc29ydE9iamVjdHMmJihELnNvcnQoYyksWC5zb3J0KGQpKTttYS5yZW5kZXIoYSxiKTtQLmluZm8ucmVuZGVyLmNhbGxzPTA7UC5pbmZvLnJlbmRlci52ZXJ0aWNlcz0wO1AuaW5mby5yZW5kZXIuZmFjZXM9MDtQLmluZm8ucmVuZGVyLnBvaW50cz0wO3RoaXMuc2V0UmVuZGVyVGFyZ2V0KGUpOyh0aGlzLmF1dG9DbGVhcnx8bSkmJnRoaXMuY2xlYXIodGhpcy5hdXRvQ2xlYXJDb2xvcix0aGlzLmF1dG9DbGVhckRlcHRoLHRoaXMuYXV0b0NsZWFyU3RlbmNpbCk7bT0wO2Zvcih2YXIgbj1uYS5vYmplY3RzSW1tZWRpYXRlLmxlbmd0aDttPG47bSsrKXt2YXIgcT1uYS5vYmplY3RzSW1tZWRpYXRlW21dLHU9cS5vYmplY3Q7dS52aXNpYmxlJiYocyh1LGIpLGsocSkpfWEub3ZlcnJpZGVNYXRlcmlhbD9cbihtPWEub3ZlcnJpZGVNYXRlcmlhbCxsKG0pLGcoRCxiLEsscCxtKSxnKFgsYixLLHAsbSksaChuYS5vYmplY3RzSW1tZWRpYXRlLFwiXCIsYixLLHAsbSkpOihVLnNldEJsZW5kaW5nKFRIUkVFLk5vQmxlbmRpbmcpLGcoRCxiLEsscCxudWxsKSxoKG5hLm9iamVjdHNJbW1lZGlhdGUsXCJvcGFxdWVcIixiLEsscCxudWxsKSxnKFgsYixLLHAsbnVsbCksaChuYS5vYmplY3RzSW1tZWRpYXRlLFwidHJhbnNwYXJlbnRcIixiLEsscCxudWxsKSk7RGIucmVuZGVyKGEsYik7RWIucmVuZGVyKGEsYix6YSxBYSk7ZSYmZS5nZW5lcmF0ZU1pcG1hcHMmJmUubWluRmlsdGVyIT09VEhSRUUuTmVhcmVzdEZpbHRlciYmZS5taW5GaWx0ZXIhPT1USFJFRS5MaW5lYXJGaWx0ZXImJngoZSk7VS5zZXREZXB0aFRlc3QoITApO1Uuc2V0RGVwdGhXcml0ZSghMCk7VS5zZXRDb2xvcldyaXRlKCEwKX19O3RoaXMucmVuZGVySW1tZWRpYXRlT2JqZWN0PWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9cChhLGIsYyxkLFxuZSk7eGE9XCJcIjtQLnNldE1hdGVyaWFsRmFjZXMoZCk7ZS5pbW1lZGlhdGVSZW5kZXJDYWxsYmFjaz9lLmltbWVkaWF0ZVJlbmRlckNhbGxiYWNrKGYscSxPYSk6ZS5yZW5kZXIoZnVuY3Rpb24oYSl7UC5yZW5kZXJCdWZmZXJJbW1lZGlhdGUoYSxmLGQpfSl9O3ZhciBUYj17TWVzaERlcHRoTWF0ZXJpYWw6XCJkZXB0aFwiLE1lc2hOb3JtYWxNYXRlcmlhbDpcIm5vcm1hbFwiLE1lc2hCYXNpY01hdGVyaWFsOlwiYmFzaWNcIixNZXNoTGFtYmVydE1hdGVyaWFsOlwibGFtYmVydFwiLE1lc2hQaG9uZ01hdGVyaWFsOlwicGhvbmdcIixMaW5lQmFzaWNNYXRlcmlhbDpcImJhc2ljXCIsTGluZURhc2hlZE1hdGVyaWFsOlwiZGFzaGVkXCIsUG9pbnRDbG91ZE1hdGVyaWFsOlwicGFydGljbGVfYmFzaWNcIn07dGhpcy5zZXRGYWNlQ3VsbGluZz1mdW5jdGlvbihhLGIpe2E9PT1USFJFRS5DdWxsRmFjZU5vbmU/cS5kaXNhYmxlKHEuQ1VMTF9GQUNFKTooYj09PVRIUkVFLkZyb250RmFjZURpcmVjdGlvbkNXP3EuZnJvbnRGYWNlKHEuQ1cpOlxucS5mcm9udEZhY2UocS5DQ1cpLGE9PT1USFJFRS5DdWxsRmFjZUJhY2s/cS5jdWxsRmFjZShxLkJBQ0spOmE9PT1USFJFRS5DdWxsRmFjZUZyb250P3EuY3VsbEZhY2UocS5GUk9OVCk6cS5jdWxsRmFjZShxLkZST05UX0FORF9CQUNLKSxxLmVuYWJsZShxLkNVTExfRkFDRSkpfTt0aGlzLnNldE1hdGVyaWFsRmFjZXM9ZnVuY3Rpb24oYSl7VS5zZXREb3VibGVTaWRlZChhLnNpZGU9PT1USFJFRS5Eb3VibGVTaWRlKTtVLnNldEZsaXBTaWRlZChhLnNpZGU9PT1USFJFRS5CYWNrU2lkZSl9O3RoaXMudXBsb2FkVGV4dHVyZT1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEuX193ZWJnbEluaXQmJihhLl9fd2ViZ2xJbml0PSEwLGEuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIix4YiksYS5fX3dlYmdsVGV4dHVyZT1xLmNyZWF0ZVRleHR1cmUoKSxQLmluZm8ubWVtb3J5LnRleHR1cmVzKyspO3EuYWN0aXZlVGV4dHVyZShxLlRFWFRVUkUwK2IpO3EuYmluZFRleHR1cmUocS5URVhUVVJFXzJELFxuYS5fX3dlYmdsVGV4dHVyZSk7cS5waXhlbFN0b3JlaShxLlVOUEFDS19GTElQX1lfV0VCR0wsYS5mbGlwWSk7cS5waXhlbFN0b3JlaShxLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCxhLnByZW11bHRpcGx5QWxwaGEpO3EucGl4ZWxTdG9yZWkocS5VTlBBQ0tfQUxJR05NRU5ULGEudW5wYWNrQWxpZ25tZW50KTthLmltYWdlPXYoYS5pbWFnZSxCYik7dmFyIGM9YS5pbWFnZSxkPVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGMud2lkdGgpJiZUSFJFRS5NYXRoLmlzUG93ZXJPZlR3byhjLmhlaWdodCksZT13KGEuZm9ybWF0KSxmPXcoYS50eXBlKTtyKHEuVEVYVFVSRV8yRCxhLGQpO3ZhciBnPWEubWlwbWFwcztpZihhIGluc3RhbmNlb2YgVEhSRUUuRGF0YVRleHR1cmUpaWYoMDxnLmxlbmd0aCYmZCl7Zm9yKHZhciBoPTAsaz1nLmxlbmd0aDtoPGs7aCsrKWM9Z1toXSxxLnRleEltYWdlMkQocS5URVhUVVJFXzJELGgsZSxjLndpZHRoLGMuaGVpZ2h0LDAsZSxmLGMuZGF0YSk7XG5hLmdlbmVyYXRlTWlwbWFwcz0hMX1lbHNlIHEudGV4SW1hZ2UyRChxLlRFWFRVUkVfMkQsMCxlLGMud2lkdGgsYy5oZWlnaHQsMCxlLGYsYy5kYXRhKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBUSFJFRS5Db21wcmVzc2VkVGV4dHVyZSlmb3IoaD0wLGs9Zy5sZW5ndGg7aDxrO2grKyljPWdbaF0sYS5mb3JtYXQhPT1USFJFRS5SR0JBRm9ybWF0JiZhLmZvcm1hdCE9PVRIUkVFLlJHQkZvcm1hdD8tMTxTYigpLmluZGV4T2YoZSk/cS5jb21wcmVzc2VkVGV4SW1hZ2UyRChxLlRFWFRVUkVfMkQsaCxlLGMud2lkdGgsYy5oZWlnaHQsMCxjLmRhdGEpOlRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpXCIpOnEudGV4SW1hZ2UyRChxLlRFWFRVUkVfMkQsaCxlLGMud2lkdGgsYy5oZWlnaHQsMCxlLGYsYy5kYXRhKTtlbHNlIGlmKDA8Zy5sZW5ndGgmJmQpe2g9XG4wO2ZvcihrPWcubGVuZ3RoO2g8aztoKyspYz1nW2hdLHEudGV4SW1hZ2UyRChxLlRFWFRVUkVfMkQsaCxlLGUsZixjKTthLmdlbmVyYXRlTWlwbWFwcz0hMX1lbHNlIHEudGV4SW1hZ2UyRChxLlRFWFRVUkVfMkQsMCxlLGUsZixhLmltYWdlKTthLmdlbmVyYXRlTWlwbWFwcyYmZCYmcS5nZW5lcmF0ZU1pcG1hcChxLlRFWFRVUkVfMkQpO2EubmVlZHNVcGRhdGU9ITE7aWYoYS5vblVwZGF0ZSlhLm9uVXBkYXRlKGEpfTt0aGlzLnNldFRleHR1cmU9ZnVuY3Rpb24oYSxiKXshMD09PWEubmVlZHNVcGRhdGU/ITE9PT1hLmltYWdlLmNvbXBsZXRlP1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlXCIsYSk6UC51cGxvYWRUZXh0dXJlKGEsYik6KHEuYWN0aXZlVGV4dHVyZShxLlRFWFRVUkUwK2IpLHEuYmluZFRleHR1cmUocS5URVhUVVJFXzJELGEuX193ZWJnbFRleHR1cmUpKX07dGhpcy5zZXRSZW5kZXJUYXJnZXQ9XG5mdW5jdGlvbihhKXt2YXIgYj1hIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlO2lmKGEmJnZvaWQgMD09PWEuX193ZWJnbEZyYW1lYnVmZmVyKXt2b2lkIDA9PT1hLmRlcHRoQnVmZmVyJiYoYS5kZXB0aEJ1ZmZlcj0hMCk7dm9pZCAwPT09YS5zdGVuY2lsQnVmZmVyJiYoYS5zdGVuY2lsQnVmZmVyPSEwKTthLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsZGIpO2EuX193ZWJnbFRleHR1cmU9cS5jcmVhdGVUZXh0dXJlKCk7UC5pbmZvLm1lbW9yeS50ZXh0dXJlcysrO3ZhciBjPVRIUkVFLk1hdGguaXNQb3dlck9mVHdvKGEud2lkdGgpJiZUSFJFRS5NYXRoLmlzUG93ZXJPZlR3byhhLmhlaWdodCksZD13KGEuZm9ybWF0KSxlPXcoYS50eXBlKTtpZihiKXthLl9fd2ViZ2xGcmFtZWJ1ZmZlcj1bXTthLl9fd2ViZ2xSZW5kZXJidWZmZXI9W107cS5iaW5kVGV4dHVyZShxLlRFWFRVUkVfQ1VCRV9NQVAsYS5fX3dlYmdsVGV4dHVyZSk7cihxLlRFWFRVUkVfQ1VCRV9NQVAsXG5hLGMpO2Zvcih2YXIgZj0wOzY+ZjtmKyspe2EuX193ZWJnbEZyYW1lYnVmZmVyW2ZdPXEuY3JlYXRlRnJhbWVidWZmZXIoKTthLl9fd2ViZ2xSZW5kZXJidWZmZXJbZl09cS5jcmVhdGVSZW5kZXJidWZmZXIoKTtxLnRleEltYWdlMkQocS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grZiwwLGQsYS53aWR0aCxhLmhlaWdodCwwLGQsZSxudWxsKTt2YXIgZz1hLGg9cS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grZjtxLmJpbmRGcmFtZWJ1ZmZlcihxLkZSQU1FQlVGRkVSLGEuX193ZWJnbEZyYW1lYnVmZmVyW2ZdKTtxLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHEuRlJBTUVCVUZGRVIscS5DT0xPUl9BVFRBQ0hNRU5UMCxoLGcuX193ZWJnbFRleHR1cmUsMCk7dShhLl9fd2ViZ2xSZW5kZXJidWZmZXJbZl0sYSl9YS5nZW5lcmF0ZU1pcG1hcHMmJmMmJnEuZ2VuZXJhdGVNaXBtYXAocS5URVhUVVJFX0NVQkVfTUFQKX1lbHNlIGEuX193ZWJnbEZyYW1lYnVmZmVyPXEuY3JlYXRlRnJhbWVidWZmZXIoKSxcbmEuX193ZWJnbFJlbmRlcmJ1ZmZlcj1hLnNoYXJlRGVwdGhGcm9tP2Euc2hhcmVEZXB0aEZyb20uX193ZWJnbFJlbmRlcmJ1ZmZlcjpxLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpLHEuYmluZFRleHR1cmUocS5URVhUVVJFXzJELGEuX193ZWJnbFRleHR1cmUpLHIocS5URVhUVVJFXzJELGEsYykscS50ZXhJbWFnZTJEKHEuVEVYVFVSRV8yRCwwLGQsYS53aWR0aCxhLmhlaWdodCwwLGQsZSxudWxsKSxkPXEuVEVYVFVSRV8yRCxxLmJpbmRGcmFtZWJ1ZmZlcihxLkZSQU1FQlVGRkVSLGEuX193ZWJnbEZyYW1lYnVmZmVyKSxxLmZyYW1lYnVmZmVyVGV4dHVyZTJEKHEuRlJBTUVCVUZGRVIscS5DT0xPUl9BVFRBQ0hNRU5UMCxkLGEuX193ZWJnbFRleHR1cmUsMCksYS5zaGFyZURlcHRoRnJvbT9hLmRlcHRoQnVmZmVyJiYhYS5zdGVuY2lsQnVmZmVyP3EuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIocS5GUkFNRUJVRkZFUixxLkRFUFRIX0FUVEFDSE1FTlQscS5SRU5ERVJCVUZGRVIsYS5fX3dlYmdsUmVuZGVyYnVmZmVyKTpcbmEuZGVwdGhCdWZmZXImJmEuc3RlbmNpbEJ1ZmZlciYmcS5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihxLkZSQU1FQlVGRkVSLHEuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULHEuUkVOREVSQlVGRkVSLGEuX193ZWJnbFJlbmRlcmJ1ZmZlcik6dShhLl9fd2ViZ2xSZW5kZXJidWZmZXIsYSksYS5nZW5lcmF0ZU1pcG1hcHMmJmMmJnEuZ2VuZXJhdGVNaXBtYXAocS5URVhUVVJFXzJEKTtiP3EuYmluZFRleHR1cmUocS5URVhUVVJFX0NVQkVfTUFQLG51bGwpOnEuYmluZFRleHR1cmUocS5URVhUVVJFXzJELG51bGwpO3EuYmluZFJlbmRlcmJ1ZmZlcihxLlJFTkRFUkJVRkZFUixudWxsKTtxLmJpbmRGcmFtZWJ1ZmZlcihxLkZSQU1FQlVGRkVSLG51bGwpfWE/KGI9Yj9hLl9fd2ViZ2xGcmFtZWJ1ZmZlclthLmFjdGl2ZUN1YmVGYWNlXTphLl9fd2ViZ2xGcmFtZWJ1ZmZlcixjPWEud2lkdGgsYT1hLmhlaWdodCxlPWQ9MCk6KGI9bnVsbCxjPXdhLGE9bGEsZD15YSxlPXZhKTtiIT09cWEmJlxuKHEuYmluZEZyYW1lYnVmZmVyKHEuRlJBTUVCVUZGRVIsYikscS52aWV3cG9ydChkLGUsYyxhKSxxYT1iKTt6YT1jO0FhPWF9O3RoaXMucmVhZFJlbmRlclRhcmdldFBpeGVscz1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoIShhIGluc3RhbmNlb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQpKVRIUkVFLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LlwiKTtlbHNlIGlmKGEuX193ZWJnbEZyYW1lYnVmZmVyKWlmKGEuZm9ybWF0IT09VEhSRUUuUkdCQUZvcm1hdClUSFJFRS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIGZvcm1hdC4gcmVhZFBpeGVscyBjYW4gcmVhZCBvbmx5IFJHQkEgZm9ybWF0LlwiKTtlbHNle3ZhciBnPSExO2EuX193ZWJnbEZyYW1lYnVmZmVyIT09cWEmJlxuKHEuYmluZEZyYW1lYnVmZmVyKHEuRlJBTUVCVUZGRVIsYS5fX3dlYmdsRnJhbWVidWZmZXIpLGc9ITApO3EuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhxLkZSQU1FQlVGRkVSKT09PXEuRlJBTUVCVUZGRVJfQ09NUExFVEU/cS5yZWFkUGl4ZWxzKGIsYyxkLGUscS5SR0JBLHEuVU5TSUdORURfQllURSxmKTpUSFJFRS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVhZFBpeGVscyBmcm9tIHJlbmRlclRhcmdldCBmYWlsZWQuIEZyYW1lYnVmZmVyIG5vdCBjb21wbGV0ZS5cIik7ZyYmcS5iaW5kRnJhbWVidWZmZXIocS5GUkFNRUJVRkZFUixxYSl9fTt0aGlzLmluaXRNYXRlcmlhbD1mdW5jdGlvbigpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuaW5pdE1hdGVyaWFsKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9O3RoaXMuYWRkUHJlUGx1Z2luPWZ1bmN0aW9uKCl7VEhSRUUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5hZGRQcmVQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLlwiKX07XG50aGlzLmFkZFBvc3RQbHVnaW49ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLlwiKX07dGhpcy51cGRhdGVTaGFkb3dNYXA9ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHtzaGFkb3dNYXBFbmFibGVkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbWEuZW5hYmxlZH0sc2V0OmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwRW5hYmxlZCBpcyBub3cgLnNoYWRvd01hcC5lbmFibGVkLlwiKTttYS5lbmFibGVkPWF9fSxzaGFkb3dNYXBUeXBlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbWEudHlwZX0sc2V0OmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwVHlwZSBpcyBub3cgLnNoYWRvd01hcC50eXBlLlwiKTtcbm1hLnR5cGU9YX19LHNoYWRvd01hcEN1bGxGYWNlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbWEuY3VsbEZhY2V9LHNldDpmdW5jdGlvbihhKXtUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEN1bGxGYWNlIGlzIG5vdyAuc2hhZG93TWFwLmN1bGxGYWNlLlwiKTttYS5jdWxsRmFjZT1hfX0sc2hhZG93TWFwRGVidWc6e2dldDpmdW5jdGlvbigpe3JldHVybiBtYS5kZWJ1Z30sc2V0OmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwRGVidWcgaXMgbm93IC5zaGFkb3dNYXAuZGVidWcuXCIpO21hLmRlYnVnPWF9fSxzaGFkb3dNYXBDYXNjYWRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbWEuY2FzY2FkZX0sc2V0OmZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ2FzY2FkZSBpcyBub3cgLnNoYWRvd01hcC5jYXNjYWRlLlwiKTttYS5jYXNjYWRlPWF9fX0pfTtcblRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0PWZ1bmN0aW9uKGEsYixjKXt0aGlzLndpZHRoPWE7dGhpcy5oZWlnaHQ9YjtjPWN8fHt9O3RoaXMud3JhcFM9dm9pZCAwIT09Yy53cmFwUz9jLndyYXBTOlRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7dGhpcy53cmFwVD12b2lkIDAhPT1jLndyYXBUP2Mud3JhcFQ6VEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZzt0aGlzLm1hZ0ZpbHRlcj12b2lkIDAhPT1jLm1hZ0ZpbHRlcj9jLm1hZ0ZpbHRlcjpUSFJFRS5MaW5lYXJGaWx0ZXI7dGhpcy5taW5GaWx0ZXI9dm9pZCAwIT09Yy5taW5GaWx0ZXI/Yy5taW5GaWx0ZXI6VEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyO3RoaXMuYW5pc290cm9weT12b2lkIDAhPT1jLmFuaXNvdHJvcHk/Yy5hbmlzb3Ryb3B5OjE7dGhpcy5vZmZzZXQ9bmV3IFRIUkVFLlZlY3RvcjIoMCwwKTt0aGlzLnJlcGVhdD1uZXcgVEhSRUUuVmVjdG9yMigxLDEpO3RoaXMuZm9ybWF0PXZvaWQgMCE9PWMuZm9ybWF0P2MuZm9ybWF0OlxuVEhSRUUuUkdCQUZvcm1hdDt0aGlzLnR5cGU9dm9pZCAwIT09Yy50eXBlP2MudHlwZTpUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlO3RoaXMuZGVwdGhCdWZmZXI9dm9pZCAwIT09Yy5kZXB0aEJ1ZmZlcj9jLmRlcHRoQnVmZmVyOiEwO3RoaXMuc3RlbmNpbEJ1ZmZlcj12b2lkIDAhPT1jLnN0ZW5jaWxCdWZmZXI/Yy5zdGVuY2lsQnVmZmVyOiEwO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPSEwO3RoaXMuc2hhcmVEZXB0aEZyb209dm9pZCAwIT09Yy5zaGFyZURlcHRoRnJvbT9jLnNoYXJlRGVwdGhGcm9tOm51bGx9O1xuVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5XZWJHTFJlbmRlclRhcmdldCxzZXRTaXplOmZ1bmN0aW9uKGEsYil7dGhpcy53aWR0aD1hO3RoaXMuaGVpZ2h0PWJ9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0KHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpO2Eud3JhcFM9dGhpcy53cmFwUzthLndyYXBUPXRoaXMud3JhcFQ7YS5tYWdGaWx0ZXI9dGhpcy5tYWdGaWx0ZXI7YS5taW5GaWx0ZXI9dGhpcy5taW5GaWx0ZXI7YS5hbmlzb3Ryb3B5PXRoaXMuYW5pc290cm9weTthLm9mZnNldC5jb3B5KHRoaXMub2Zmc2V0KTthLnJlcGVhdC5jb3B5KHRoaXMucmVwZWF0KTthLmZvcm1hdD10aGlzLmZvcm1hdDthLnR5cGU9dGhpcy50eXBlO2EuZGVwdGhCdWZmZXI9dGhpcy5kZXB0aEJ1ZmZlcjthLnN0ZW5jaWxCdWZmZXI9dGhpcy5zdGVuY2lsQnVmZmVyO2EuZ2VuZXJhdGVNaXBtYXBzPXRoaXMuZ2VuZXJhdGVNaXBtYXBzO1xuYS5zaGFyZURlcHRoRnJvbT10aGlzLnNoYXJlRGVwdGhGcm9tO3JldHVybiBhfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fTtUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlLmFwcGx5KFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlPWZ1bmN0aW9uKGEsYixjKXtUSFJFRS5XZWJHTFJlbmRlclRhcmdldC5jYWxsKHRoaXMsYSxiLGMpO3RoaXMuYWN0aXZlQ3ViZUZhY2U9MH07VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7VEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU7XG5USFJFRS5XZWJHTEJ1ZmZlcnM9ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShiKXt2YXIgYz1iLmdlb21ldHJ5O2I9Yi5tYXRlcmlhbDt2YXIgZD1jLnZlcnRpY2VzLmxlbmd0aDtpZihiLmF0dHJpYnV0ZXMpe3ZvaWQgMD09PWMuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0JiYoYy5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3Q9W10pO2Zvcih2YXIgZSBpbiBiLmF0dHJpYnV0ZXMpe3ZhciBsPWIuYXR0cmlidXRlc1tlXTtpZighbC5fX3dlYmdsSW5pdGlhbGl6ZWR8fGwuY3JlYXRlVW5pcXVlQnVmZmVycyl7bC5fX3dlYmdsSW5pdGlhbGl6ZWQ9ITA7dmFyIHA9MTtcInYyXCI9PT1sLnR5cGU/cD0yOlwidjNcIj09PWwudHlwZT9wPTM6XCJ2NFwiPT09bC50eXBlP3A9NDpcImNcIj09PWwudHlwZSYmKHA9Myk7bC5zaXplPXA7bC5hcnJheT1uZXcgRmxvYXQzMkFycmF5KGQqcCk7bC5idWZmZXI9YS5jcmVhdGVCdWZmZXIoKTtsLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGU9ZTtsLm5lZWRzVXBkYXRlPVxuITB9Yy5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QucHVzaChsKX19fXRoaXMuaW5pdFBvaW50Q2xvdWRCdWZmZXJzPWZ1bmN0aW9uKGMsZCl7aWYodm9pZCAwPT09Yy5fX3dlYmdsVmVydGV4QnVmZmVyKXtjLl9fd2ViZ2xWZXJ0ZXhCdWZmZXI9YS5jcmVhdGVCdWZmZXIoKTtjLl9fd2ViZ2xDb2xvckJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2IubWVtb3J5Lmdlb21ldHJpZXMrKzt2YXIgaD1jLnZlcnRpY2VzLmxlbmd0aDtjLl9fdmVydGV4QXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKmgpO2MuX19jb2xvckFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMypoKTtjLl9fd2ViZ2xQYXJ0aWNsZUNvdW50PWg7ZShkKTtjLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMDtjLmNvbG9yc05lZWRVcGRhdGU9ITB9fTt0aGlzLmluaXRMaW5lQnVmZmVycz1mdW5jdGlvbihjLGQpe2lmKHZvaWQgMD09PWMuX193ZWJnbFZlcnRleEJ1ZmZlcil7Yy5fX3dlYmdsVmVydGV4QnVmZmVyPWEuY3JlYXRlQnVmZmVyKCk7XG5jLl9fd2ViZ2xDb2xvckJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2MuX193ZWJnbExpbmVEaXN0YW5jZUJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2IubWVtb3J5Lmdlb21ldHJpZXMrKzt2YXIgaD1jLnZlcnRpY2VzLmxlbmd0aDtjLl9fdmVydGV4QXJyYXk9bmV3IEZsb2F0MzJBcnJheSgzKmgpO2MuX19jb2xvckFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMypoKTtjLl9fbGluZURpc3RhbmNlQXJyYXk9bmV3IEZsb2F0MzJBcnJheSgxKmgpO2MuX193ZWJnbExpbmVDb3VudD1oO2UoZCk7Yy52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7Yy5jb2xvcnNOZWVkVXBkYXRlPSEwO2MubGluZURpc3RhbmNlc05lZWRVcGRhdGU9ITB9fTt0aGlzLmluaXRNZXNoQnVmZmVycz1mdW5jdGlvbihlLGcpe2UuX193ZWJnbFZlcnRleEJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbE5vcm1hbEJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbFRhbmdlbnRCdWZmZXI9YS5jcmVhdGVCdWZmZXIoKTtcbmUuX193ZWJnbENvbG9yQnVmZmVyPWEuY3JlYXRlQnVmZmVyKCk7ZS5fX3dlYmdsVVZCdWZmZXI9YS5jcmVhdGVCdWZmZXIoKTtlLl9fd2ViZ2xVVjJCdWZmZXI9YS5jcmVhdGVCdWZmZXIoKTtlLl9fd2ViZ2xTa2luSW5kaWNlc0J1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbFNraW5XZWlnaHRzQnVmZmVyPWEuY3JlYXRlQnVmZmVyKCk7ZS5fX3dlYmdsRmFjZUJ1ZmZlcj1hLmNyZWF0ZUJ1ZmZlcigpO2UuX193ZWJnbExpbmVCdWZmZXI9YS5jcmVhdGVCdWZmZXIoKTt2YXIgaD1lLm51bU1vcnBoVGFyZ2V0cztpZihoKXtlLl9fd2ViZ2xNb3JwaFRhcmdldHNCdWZmZXJzPVtdO2Zvcih2YXIgaz0wLGw9aDtrPGw7aysrKWUuX193ZWJnbE1vcnBoVGFyZ2V0c0J1ZmZlcnMucHVzaChhLmNyZWF0ZUJ1ZmZlcigpKX12YXIgcD1lLm51bU1vcnBoTm9ybWFscztpZihwKWZvcihlLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzPVtdLGs9MCxsPXA7azxsO2srKyllLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzLnB1c2goYS5jcmVhdGVCdWZmZXIoKSk7XG5iLm1lbW9yeS5nZW9tZXRyaWVzKys7dmFyIGs9Zy5nZW9tZXRyeSxuPWUuZmFjZXMzLG09MypuLmxlbmd0aCxzPTEqbi5sZW5ndGgsdD0zKm4ubGVuZ3RoLG49ZChnLGUpO2UuX192ZXJ0ZXhBcnJheT1uZXcgRmxvYXQzMkFycmF5KDMqbSk7ZS5fX25vcm1hbEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoMyptKTtlLl9fY29sb3JBcnJheT1uZXcgRmxvYXQzMkFycmF5KDMqbSk7ZS5fX3V2QXJyYXk9bmV3IEZsb2F0MzJBcnJheSgyKm0pOzE8ay5mYWNlVmVydGV4VXZzLmxlbmd0aCYmKGUuX191djJBcnJheT1uZXcgRmxvYXQzMkFycmF5KDIqbSkpO2suaGFzVGFuZ2VudHMmJihlLl9fdGFuZ2VudEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoNCptKSk7Zy5nZW9tZXRyeS5za2luV2VpZ2h0cy5sZW5ndGgmJmcuZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoJiYoZS5fX3NraW5JbmRleEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoNCptKSxlLl9fc2tpbldlaWdodEFycmF5PW5ldyBGbG9hdDMyQXJyYXkoNCpcbm0pKTtrPW51bGwhPT1jLmdldChcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIikmJjIxODQ1PHM/VWludDMyQXJyYXk6VWludDE2QXJyYXk7ZS5fX3R5cGVBcnJheT1rO2UuX19mYWNlQXJyYXk9bmV3IGsoMypzKTtlLl9fbGluZUFycmF5PW5ldyBrKDIqdCk7aWYoaClmb3IoZS5fX21vcnBoVGFyZ2V0c0FycmF5cz1bXSxrPTAsbD1oO2s8bDtrKyspZS5fX21vcnBoVGFyZ2V0c0FycmF5cy5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoMyptKSk7aWYocClmb3IoZS5fX21vcnBoTm9ybWFsc0FycmF5cz1bXSxrPTAsbD1wO2s8bDtrKyspZS5fX21vcnBoTm9ybWFsc0FycmF5cy5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoMyptKSk7ZS5fX3dlYmdsRmFjZUNvdW50PTMqcztlLl9fd2ViZ2xMaW5lQ291bnQ9Mip0O2lmKG4uYXR0cmlidXRlcyl7dm9pZCAwPT09ZS5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3QmJihlLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdD1bXSk7Zm9yKHZhciByIGluIG4uYXR0cmlidXRlcyl7dmFyIGg9XG5uLmF0dHJpYnV0ZXNbcl0scD17fSx2O2Zvcih2IGluIGgpcFt2XT1oW3ZdO2lmKCFwLl9fd2ViZ2xJbml0aWFsaXplZHx8cC5jcmVhdGVVbmlxdWVCdWZmZXJzKXAuX193ZWJnbEluaXRpYWxpemVkPSEwLHM9MSxcInYyXCI9PT1wLnR5cGU/cz0yOlwidjNcIj09PXAudHlwZT9zPTM6XCJ2NFwiPT09cC50eXBlP3M9NDpcImNcIj09PXAudHlwZSYmKHM9MykscC5zaXplPXMscC5hcnJheT1uZXcgRmxvYXQzMkFycmF5KG0qcykscC5idWZmZXI9YS5jcmVhdGVCdWZmZXIoKSxwLmJ1ZmZlci5iZWxvbmdzVG9BdHRyaWJ1dGU9cixoLm5lZWRzVXBkYXRlPSEwLHAuX19vcmlnaW5hbD1oO2UuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0LnB1c2gocCl9fWUuX19pbml0dGVkQXJyYXlzPSEwfTt0aGlzLnNldFBvaW50Q2xvdWRCdWZmZXJzPWZ1bmN0aW9uKGIsYyxkKXt2YXIgZSxsLHA9Yi52ZXJ0aWNlcyxuPXAubGVuZ3RoLG09Yi5jb2xvcnMscz1tLmxlbmd0aCx0PWIuX192ZXJ0ZXhBcnJheSxyPWIuX19jb2xvckFycmF5LFxudj1iLmNvbG9yc05lZWRVcGRhdGUsdT1iLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdDtpZihiLnZlcnRpY2VzTmVlZFVwZGF0ZSl7Zm9yKGU9MDtlPG47ZSsrKWw9cFtlXSxkPTMqZSx0W2RdPWwueCx0W2QrMV09bC55LHRbZCsyXT1sLno7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbFZlcnRleEJ1ZmZlcik7YS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLHQsYyl9aWYodil7Zm9yKGU9MDtlPHM7ZSsrKWw9bVtlXSxkPTMqZSxyW2RdPWwucixyW2QrMV09bC5nLHJbZCsyXT1sLmI7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbENvbG9yQnVmZmVyKTthLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIscixjKX1pZih1KWZvcihiPTAsbT11Lmxlbmd0aDtiPG07YisrKXtsPXVbYl07aWYobC5uZWVkc1VwZGF0ZSYmKHZvaWQgMD09PWwuYm91bmRUb3x8XCJ2ZXJ0aWNlc1wiPT09bC5ib3VuZFRvKSlpZihyPWwudmFsdWUubGVuZ3RoLGQ9MCwxPT09XG5sLnNpemUpZm9yKHM9MDtzPHI7cysrKWwuYXJyYXlbc109bC52YWx1ZVtzXTtlbHNlIGlmKDI9PT1sLnNpemUpZm9yKHM9MDtzPHI7cysrKWU9bC52YWx1ZVtzXSxsLmFycmF5W2RdPWUueCxsLmFycmF5W2QrMV09ZS55LGQrPTI7ZWxzZSBpZigzPT09bC5zaXplKWlmKFwiY1wiPT09bC50eXBlKWZvcihzPTA7czxyO3MrKyllPWwudmFsdWVbc10sbC5hcnJheVtkXT1lLnIsbC5hcnJheVtkKzFdPWUuZyxsLmFycmF5W2QrMl09ZS5iLGQrPTM7ZWxzZSBmb3Iocz0wO3M8cjtzKyspZT1sLnZhbHVlW3NdLGwuYXJyYXlbZF09ZS54LGwuYXJyYXlbZCsxXT1lLnksbC5hcnJheVtkKzJdPWUueixkKz0zO2Vsc2UgaWYoND09PWwuc2l6ZSlmb3Iocz0wO3M8cjtzKyspZT1sLnZhbHVlW3NdLGwuYXJyYXlbZF09ZS54LGwuYXJyYXlbZCsxXT1lLnksbC5hcnJheVtkKzJdPWUueixsLmFycmF5W2QrM109ZS53LGQrPTQ7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGwuYnVmZmVyKTthLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIsXG5sLmFycmF5LGMpO2wubmVlZHNVcGRhdGU9ITF9fTt0aGlzLnNldExpbmVCdWZmZXJzPWZ1bmN0aW9uKGIsYyl7dmFyIGQsZSxsLHA9Yi52ZXJ0aWNlcyxuPWIuY29sb3JzLG09Yi5saW5lRGlzdGFuY2VzLHM9cC5sZW5ndGgsdD1uLmxlbmd0aCxyPW0ubGVuZ3RoLHY9Yi5fX3ZlcnRleEFycmF5LHU9Yi5fX2NvbG9yQXJyYXkseD1iLl9fbGluZURpc3RhbmNlQXJyYXksej1iLmNvbG9yc05lZWRVcGRhdGUsdz1iLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlLEY9Yi5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3Q7aWYoYi52ZXJ0aWNlc05lZWRVcGRhdGUpe2ZvcihkPTA7ZDxzO2QrKylsPXBbZF0sZT0zKmQsdltlXT1sLngsdltlKzFdPWwueSx2W2UrMl09bC56O2EuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixiLl9fd2ViZ2xWZXJ0ZXhCdWZmZXIpO2EuYnVmZmVyRGF0YShhLkFSUkFZX0JVRkZFUix2LGMpfWlmKHope2ZvcihkPTA7ZDx0O2QrKylsPW5bZF0sZT0zKmQsdVtlXT1sLnIsXG51W2UrMV09bC5nLHVbZSsyXT1sLmI7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbENvbG9yQnVmZmVyKTthLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIsdSxjKX1pZih3KXtmb3IoZT0wO2U8cjtlKyspeFtlXT1tW2VdO2EuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixiLl9fd2ViZ2xMaW5lRGlzdGFuY2VCdWZmZXIpO2EuYnVmZmVyRGF0YShhLkFSUkFZX0JVRkZFUix4LGMpfWlmKEYpZm9yKG09MCxyPUYubGVuZ3RoO208cjttKyspaWYodT1GW21dLHUubmVlZHNVcGRhdGUmJih2b2lkIDA9PT11LmJvdW5kVG98fFwidmVydGljZXNcIj09PXUuYm91bmRUbykpe2U9MDtuPXUudmFsdWUubGVuZ3RoO2lmKDE9PT11LnNpemUpZm9yKHg9MDt4PG47eCsrKXUuYXJyYXlbeF09dS52YWx1ZVt4XTtlbHNlIGlmKDI9PT11LnNpemUpZm9yKHg9MDt4PG47eCsrKXQ9dS52YWx1ZVt4XSx1LmFycmF5W2VdPXQueCx1LmFycmF5W2UrMV09dC55LGUrPTI7ZWxzZSBpZigzPT09dS5zaXplKWlmKFwiY1wiPT09XG51LnR5cGUpZm9yKHg9MDt4PG47eCsrKXQ9dS52YWx1ZVt4XSx1LmFycmF5W2VdPXQucix1LmFycmF5W2UrMV09dC5nLHUuYXJyYXlbZSsyXT10LmIsZSs9MztlbHNlIGZvcih4PTA7eDxuO3grKyl0PXUudmFsdWVbeF0sdS5hcnJheVtlXT10LngsdS5hcnJheVtlKzFdPXQueSx1LmFycmF5W2UrMl09dC56LGUrPTM7ZWxzZSBpZig0PT09dS5zaXplKWZvcih4PTA7eDxuO3grKyl0PXUudmFsdWVbeF0sdS5hcnJheVtlXT10LngsdS5hcnJheVtlKzFdPXQueSx1LmFycmF5W2UrMl09dC56LHUuYXJyYXlbZSszXT10LncsZSs9NDthLmJpbmRCdWZmZXIoYS5BUlJBWV9CVUZGRVIsdS5idWZmZXIpO2EuYnVmZmVyRGF0YShhLkFSUkFZX0JVRkZFUix1LmFycmF5LGMpO3UubmVlZHNVcGRhdGU9ITF9fTt0aGlzLnNldE1lc2hCdWZmZXJzPWZ1bmN0aW9uKGIsYyxkLGUsbCl7aWYoYi5fX2luaXR0ZWRBcnJheXMpe3ZhciBwPSExPT09bCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsJiZcbmwuc2hhZGluZz09PVRIUkVFLkZsYXRTaGFkaW5nLG4sbSxzLHQscix2LHUseCx6LHcsRixHLHksSSxCLEMsRSxMLE4sSCxPLE0sQT14PU49Qz0wLEo9MCxSPUI9RT0wLEs9cj1GPTAsRD0wLEs9Yi5fX3ZlcnRleEFycmF5O0w9Yi5fX3V2QXJyYXk7dmFyIEQ9Yi5fX3V2MkFycmF5LFg9Yi5fX25vcm1hbEFycmF5O3M9Yi5fX3RhbmdlbnRBcnJheTt1PWIuX19jb2xvckFycmF5O0c9Yi5fX3NraW5JbmRleEFycmF5O3k9Yi5fX3NraW5XZWlnaHRBcnJheTtJPWIuX19tb3JwaFRhcmdldHNBcnJheXM7dmFyIGlhPWIuX19tb3JwaE5vcm1hbHNBcnJheXMsUT1iLl9fd2ViZ2xDdXN0b21BdHRyaWJ1dGVzTGlzdCxQPWIuX19mYWNlQXJyYXksYWE9Yi5fX2xpbmVBcnJheSxjYT1jLmdlb21ldHJ5LHFhPWNhLmVsZW1lbnRzTmVlZFVwZGF0ZSxEYT1jYS51dnNOZWVkVXBkYXRlO3Q9Y2Eubm9ybWFsc05lZWRVcGRhdGU7dmFyIHhhPWNhLnRhbmdlbnRzTmVlZFVwZGF0ZTt2PWNhLmNvbG9yc05lZWRVcGRhdGU7XG5IPWNhLm1vcnBoVGFyZ2V0c05lZWRVcGRhdGU7TT1jYS52ZXJ0aWNlczt2YXIgVj1iLmZhY2VzMyxwYT1jYS5mYWNlcyx5YT1jYS5mYWNlVmVydGV4VXZzWzBdLHZhPWNhLmZhY2VWZXJ0ZXhVdnNbMV0sd2E9Y2Euc2tpbkluZGljZXMsbGE9Y2Euc2tpbldlaWdodHMsemE9Y2EubW9ycGhUYXJnZXRzLEFhPWNhLm1vcnBoTm9ybWFscztpZihjYS52ZXJ0aWNlc05lZWRVcGRhdGUpe2M9MDtmb3Iobj1WLmxlbmd0aDtjPG47YysrKW09cGFbVltjXV0sej1NW20uYV0sdz1NW20uYl0sbT1NW20uY10sS1tOXT16LngsS1tOKzFdPXoueSxLW04rMl09ei56LEtbTiszXT13LngsS1tOKzRdPXcueSxLW04rNV09dy56LEtbTis2XT1tLngsS1tOKzddPW0ueSxLW04rOF09bS56LE4rPTk7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbFZlcnRleEJ1ZmZlcik7YS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLEssZCl9aWYoSClmb3IoTj0wLEg9emEubGVuZ3RoO048SDtOKyspe2M9XG5LPTA7Zm9yKG49Vi5sZW5ndGg7YzxuO2MrKylNPVZbY10sbT1wYVtNXSx6PXphW05dLnZlcnRpY2VzW20uYV0sdz16YVtOXS52ZXJ0aWNlc1ttLmJdLG09emFbTl0udmVydGljZXNbbS5jXSxPPUlbTl0sT1tLXT16LngsT1tLKzFdPXoueSxPW0srMl09ei56LE9bSyszXT13LngsT1tLKzRdPXcueSxPW0srNV09dy56LE9bSys2XT1tLngsT1tLKzddPW0ueSxPW0srOF09bS56LGwubW9ycGhOb3JtYWxzJiYocD93PXo9bT1BYVtOXS5mYWNlTm9ybWFsc1tNXToodz1BYVtOXS52ZXJ0ZXhOb3JtYWxzW01dLG09dy5hLHo9dy5iLHc9dy5jKSxNPWlhW05dLE1bS109bS54LE1bSysxXT1tLnksTVtLKzJdPW0ueixNW0srM109ei54LE1bSys0XT16LnksTVtLKzVdPXoueixNW0srNl09dy54LE1bSys3XT13LnksTVtLKzhdPXcueiksSys9OTthLmJpbmRCdWZmZXIoYS5BUlJBWV9CVUZGRVIsYi5fX3dlYmdsTW9ycGhUYXJnZXRzQnVmZmVyc1tOXSk7YS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLFxuSVtOXSxkKTtsLm1vcnBoTm9ybWFscyYmKGEuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixiLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzW05dKSxhLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIsaWFbTl0sZCkpfWlmKGxhLmxlbmd0aCl7Yz0wO2ZvcihuPVYubGVuZ3RoO2M8bjtjKyspbT1wYVtWW2NdXSx6PWxhW20uYV0sdz1sYVttLmJdLEk9bGFbbS5jXSx5W3JdPXoueCx5W3IrMV09ei55LHlbcisyXT16LnoseVtyKzNdPXoudyx5W3IrNF09dy54LHlbcis1XT13LnkseVtyKzZdPXcueix5W3IrN109dy53LHlbcis4XT1JLngseVtyKzldPUkueSx5W3IrMTBdPUkueix5W3IrMTFdPUkudyx6PXdhW20uYV0sdz13YVttLmJdLG09d2FbbS5jXSxHW3JdPXoueCxHW3IrMV09ei55LEdbcisyXT16LnosR1tyKzNdPXoudyxHW3IrNF09dy54LEdbcis1XT13LnksR1tyKzZdPXcueixHW3IrN109dy53LEdbcis4XT1tLngsR1tyKzldPW0ueSxHW3IrMTBdPW0ueixHW3IrMTFdPW0udyxyKz1cbjEyOzA8ciYmKGEuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixiLl9fd2ViZ2xTa2luSW5kaWNlc0J1ZmZlciksYS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLEcsZCksYS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbFNraW5XZWlnaHRzQnVmZmVyKSxhLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIseSxkKSl9aWYodil7Yz0wO2ZvcihuPVYubGVuZ3RoO2M8bjtjKyspbT1wYVtWW2NdXSxyPW0udmVydGV4Q29sb3JzLHY9bS5jb2xvciwzPT09ci5sZW5ndGgmJmwudmVydGV4Q29sb3JzPT09VEhSRUUuVmVydGV4Q29sb3JzPyhHPXJbMF0seT1yWzFdLHI9clsyXSk6cj15PUc9dix1W0ZdPUcucix1W0YrMV09Ry5nLHVbRisyXT1HLmIsdVtGKzNdPXkucix1W0YrNF09eS5nLHVbRis1XT15LmIsdVtGKzZdPXIucix1W0YrN109ci5nLHVbRis4XT1yLmIsRis9OTswPEYmJihhLmJpbmRCdWZmZXIoYS5BUlJBWV9CVUZGRVIsYi5fX3dlYmdsQ29sb3JCdWZmZXIpLGEuYnVmZmVyRGF0YShhLkFSUkFZX0JVRkZFUixcbnUsZCkpfWlmKHhhJiZjYS5oYXNUYW5nZW50cyl7Yz0wO2ZvcihuPVYubGVuZ3RoO2M8bjtjKyspbT1wYVtWW2NdXSx1PW0udmVydGV4VGFuZ2VudHMsbD11WzBdLEY9dVsxXSx1PXVbMl0sc1tCXT1sLngsc1tCKzFdPWwueSxzW0IrMl09bC56LHNbQiszXT1sLncsc1tCKzRdPUYueCxzW0IrNV09Ri55LHNbQis2XT1GLnosc1tCKzddPUYudyxzW0IrOF09dS54LHNbQis5XT11Lnksc1tCKzEwXT11Lnosc1tCKzExXT11LncsQis9MTI7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbFRhbmdlbnRCdWZmZXIpO2EuYnVmZmVyRGF0YShhLkFSUkFZX0JVRkZFUixzLGQpfWlmKHQpe2M9MDtmb3Iobj1WLmxlbmd0aDtjPG47YysrKWlmKG09cGFbVltjXV0scz1tLnZlcnRleE5vcm1hbHMsdD1tLm5vcm1hbCwzPT09cy5sZW5ndGgmJiExPT09cClmb3IoQj0wOzM+QjtCKyspdD1zW0JdLFhbRV09dC54LFhbRSsxXT10LnksWFtFKzJdPXQueixFKz0zO2Vsc2UgZm9yKEI9MDszPlxuQjtCKyspWFtFXT10LngsWFtFKzFdPXQueSxYW0UrMl09dC56LEUrPTM7YS5iaW5kQnVmZmVyKGEuQVJSQVlfQlVGRkVSLGIuX193ZWJnbE5vcm1hbEJ1ZmZlcik7YS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLFgsZCl9aWYoRGEmJnlhKXtjPTA7Zm9yKG49Vi5sZW5ndGg7YzxuO2MrKylpZihwPVZbY10scD15YVtwXSx2b2lkIDAhPT1wKWZvcihCPTA7Mz5CO0IrKylFPXBbQl0sTFt4XT1FLngsTFt4KzFdPUUueSx4Kz0yOzA8eCYmKGEuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixiLl9fd2ViZ2xVVkJ1ZmZlciksYS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLEwsZCkpfWlmKERhJiZ2YSl7Yz0wO2ZvcihuPVYubGVuZ3RoO2M8bjtjKyspaWYocD1WW2NdLHg9dmFbcF0sdm9pZCAwIT09eClmb3IoQj0wOzM+QjtCKyspTD14W0JdLERbQV09TC54LERbQSsxXT1MLnksQSs9MjswPEEmJihhLmJpbmRCdWZmZXIoYS5BUlJBWV9CVUZGRVIsYi5fX3dlYmdsVVYyQnVmZmVyKSxhLmJ1ZmZlckRhdGEoYS5BUlJBWV9CVUZGRVIsXG5ELGQpKX1pZihxYSl7Yz0wO2ZvcihuPVYubGVuZ3RoO2M8bjtjKyspUFtKXT1DLFBbSisxXT1DKzEsUFtKKzJdPUMrMixKKz0zLGFhW1JdPUMsYWFbUisxXT1DKzEsYWFbUisyXT1DLGFhW1IrM109QysyLGFhW1IrNF09QysxLGFhW1IrNV09QysyLFIrPTYsQys9MzthLmJpbmRCdWZmZXIoYS5FTEVNRU5UX0FSUkFZX0JVRkZFUixiLl9fd2ViZ2xGYWNlQnVmZmVyKTthLmJ1ZmZlckRhdGEoYS5FTEVNRU5UX0FSUkFZX0JVRkZFUixQLGQpO2EuYmluZEJ1ZmZlcihhLkVMRU1FTlRfQVJSQVlfQlVGRkVSLGIuX193ZWJnbExpbmVCdWZmZXIpO2EuYnVmZmVyRGF0YShhLkVMRU1FTlRfQVJSQVlfQlVGRkVSLGFhLGQpfWlmKFEpZm9yKEI9MCxDPVEubGVuZ3RoO0I8QztCKyspaWYoQT1RW0JdLEEuX19vcmlnaW5hbC5uZWVkc1VwZGF0ZSl7RD0wO2lmKDE9PT1BLnNpemUpaWYodm9pZCAwPT09QS5ib3VuZFRvfHxcInZlcnRpY2VzXCI9PT1BLmJvdW5kVG8pZm9yKGM9MCxuPVYubGVuZ3RoO2M8bjtjKyspbT1cbnBhW1ZbY11dLEEuYXJyYXlbRF09QS52YWx1ZVttLmFdLEEuYXJyYXlbRCsxXT1BLnZhbHVlW20uYl0sQS5hcnJheVtEKzJdPUEudmFsdWVbbS5jXSxEKz0zO2Vsc2V7aWYoXCJmYWNlc1wiPT09QS5ib3VuZFRvKWZvcihjPTAsbj1WLmxlbmd0aDtjPG47YysrKVI9QS52YWx1ZVtWW2NdXSxBLmFycmF5W0RdPVIsQS5hcnJheVtEKzFdPVIsQS5hcnJheVtEKzJdPVIsRCs9M31lbHNlIGlmKDI9PT1BLnNpemUpaWYodm9pZCAwPT09QS5ib3VuZFRvfHxcInZlcnRpY2VzXCI9PT1BLmJvdW5kVG8pZm9yKGM9MCxuPVYubGVuZ3RoO2M8bjtjKyspbT1wYVtWW2NdXSx6PUEudmFsdWVbbS5hXSx3PUEudmFsdWVbbS5iXSxtPUEudmFsdWVbbS5jXSxBLmFycmF5W0RdPXoueCxBLmFycmF5W0QrMV09ei55LEEuYXJyYXlbRCsyXT13LngsQS5hcnJheVtEKzNdPXcueSxBLmFycmF5W0QrNF09bS54LEEuYXJyYXlbRCs1XT1tLnksRCs9NjtlbHNle2lmKFwiZmFjZXNcIj09PUEuYm91bmRUbylmb3IoYz0wLG49Vi5sZW5ndGg7Yzxcbm47YysrKW09dz16PVI9QS52YWx1ZVtWW2NdXSxBLmFycmF5W0RdPXoueCxBLmFycmF5W0QrMV09ei55LEEuYXJyYXlbRCsyXT13LngsQS5hcnJheVtEKzNdPXcueSxBLmFycmF5W0QrNF09bS54LEEuYXJyYXlbRCs1XT1tLnksRCs9Nn1lbHNlIGlmKDM9PT1BLnNpemUpaWYoSj1cImNcIj09PUEudHlwZT9bXCJyXCIsXCJnXCIsXCJiXCJdOltcInhcIixcInlcIixcInpcIl0sdm9pZCAwPT09QS5ib3VuZFRvfHxcInZlcnRpY2VzXCI9PT1BLmJvdW5kVG8pZm9yKGM9MCxuPVYubGVuZ3RoO2M8bjtjKyspbT1wYVtWW2NdXSx6PUEudmFsdWVbbS5hXSx3PUEudmFsdWVbbS5iXSxtPUEudmFsdWVbbS5jXSxBLmFycmF5W0RdPXpbSlswXV0sQS5hcnJheVtEKzFdPXpbSlsxXV0sQS5hcnJheVtEKzJdPXpbSlsyXV0sQS5hcnJheVtEKzNdPXdbSlswXV0sQS5hcnJheVtEKzRdPXdbSlsxXV0sQS5hcnJheVtEKzVdPXdbSlsyXV0sQS5hcnJheVtEKzZdPW1bSlswXV0sQS5hcnJheVtEKzddPW1bSlsxXV0sQS5hcnJheVtEKzhdPVxubVtKWzJdXSxEKz05O2Vsc2UgaWYoXCJmYWNlc1wiPT09QS5ib3VuZFRvKWZvcihjPTAsbj1WLmxlbmd0aDtjPG47YysrKW09dz16PVI9QS52YWx1ZVtWW2NdXSxBLmFycmF5W0RdPXpbSlswXV0sQS5hcnJheVtEKzFdPXpbSlsxXV0sQS5hcnJheVtEKzJdPXpbSlsyXV0sQS5hcnJheVtEKzNdPXdbSlswXV0sQS5hcnJheVtEKzRdPXdbSlsxXV0sQS5hcnJheVtEKzVdPXdbSlsyXV0sQS5hcnJheVtEKzZdPW1bSlswXV0sQS5hcnJheVtEKzddPW1bSlsxXV0sQS5hcnJheVtEKzhdPW1bSlsyXV0sRCs9OTtlbHNle2lmKFwiZmFjZVZlcnRpY2VzXCI9PT1BLmJvdW5kVG8pZm9yKGM9MCxuPVYubGVuZ3RoO2M8bjtjKyspUj1BLnZhbHVlW1ZbY11dLHo9UlswXSx3PVJbMV0sbT1SWzJdLEEuYXJyYXlbRF09eltKWzBdXSxBLmFycmF5W0QrMV09eltKWzFdXSxBLmFycmF5W0QrMl09eltKWzJdXSxBLmFycmF5W0QrM109d1tKWzBdXSxBLmFycmF5W0QrNF09d1tKWzFdXSxBLmFycmF5W0QrNV09d1tKWzJdXSxcbkEuYXJyYXlbRCs2XT1tW0pbMF1dLEEuYXJyYXlbRCs3XT1tW0pbMV1dLEEuYXJyYXlbRCs4XT1tW0pbMl1dLEQrPTl9ZWxzZSBpZig0PT09QS5zaXplKWlmKHZvaWQgMD09PUEuYm91bmRUb3x8XCJ2ZXJ0aWNlc1wiPT09QS5ib3VuZFRvKWZvcihjPTAsbj1WLmxlbmd0aDtjPG47YysrKW09cGFbVltjXV0sej1BLnZhbHVlW20uYV0sdz1BLnZhbHVlW20uYl0sbT1BLnZhbHVlW20uY10sQS5hcnJheVtEXT16LngsQS5hcnJheVtEKzFdPXoueSxBLmFycmF5W0QrMl09ei56LEEuYXJyYXlbRCszXT16LncsQS5hcnJheVtEKzRdPXcueCxBLmFycmF5W0QrNV09dy55LEEuYXJyYXlbRCs2XT13LnosQS5hcnJheVtEKzddPXcudyxBLmFycmF5W0QrOF09bS54LEEuYXJyYXlbRCs5XT1tLnksQS5hcnJheVtEKzEwXT1tLnosQS5hcnJheVtEKzExXT1tLncsRCs9MTI7ZWxzZSBpZihcImZhY2VzXCI9PT1BLmJvdW5kVG8pZm9yKGM9MCxuPVYubGVuZ3RoO2M8bjtjKyspbT13PXo9Uj1BLnZhbHVlW1ZbY11dLFxuQS5hcnJheVtEXT16LngsQS5hcnJheVtEKzFdPXoueSxBLmFycmF5W0QrMl09ei56LEEuYXJyYXlbRCszXT16LncsQS5hcnJheVtEKzRdPXcueCxBLmFycmF5W0QrNV09dy55LEEuYXJyYXlbRCs2XT13LnosQS5hcnJheVtEKzddPXcudyxBLmFycmF5W0QrOF09bS54LEEuYXJyYXlbRCs5XT1tLnksQS5hcnJheVtEKzEwXT1tLnosQS5hcnJheVtEKzExXT1tLncsRCs9MTI7ZWxzZSBpZihcImZhY2VWZXJ0aWNlc1wiPT09QS5ib3VuZFRvKWZvcihjPTAsbj1WLmxlbmd0aDtjPG47YysrKVI9QS52YWx1ZVtWW2NdXSx6PVJbMF0sdz1SWzFdLG09UlsyXSxBLmFycmF5W0RdPXoueCxBLmFycmF5W0QrMV09ei55LEEuYXJyYXlbRCsyXT16LnosQS5hcnJheVtEKzNdPXoudyxBLmFycmF5W0QrNF09dy54LEEuYXJyYXlbRCs1XT13LnksQS5hcnJheVtEKzZdPXcueixBLmFycmF5W0QrN109dy53LEEuYXJyYXlbRCs4XT1tLngsQS5hcnJheVtEKzldPW0ueSxBLmFycmF5W0QrMTBdPW0ueixBLmFycmF5W0QrXG4xMV09bS53LEQrPTEyO2EuYmluZEJ1ZmZlcihhLkFSUkFZX0JVRkZFUixBLmJ1ZmZlcik7YS5idWZmZXJEYXRhKGEuQVJSQVlfQlVGRkVSLEEuYXJyYXksZCl9ZSYmKGRlbGV0ZSBiLl9faW5pdHRlZEFycmF5cyxkZWxldGUgYi5fX2NvbG9yQXJyYXksZGVsZXRlIGIuX19ub3JtYWxBcnJheSxkZWxldGUgYi5fX3RhbmdlbnRBcnJheSxkZWxldGUgYi5fX3V2QXJyYXksZGVsZXRlIGIuX191djJBcnJheSxkZWxldGUgYi5fX2ZhY2VBcnJheSxkZWxldGUgYi5fX3ZlcnRleEFycmF5LGRlbGV0ZSBiLl9fbGluZUFycmF5LGRlbGV0ZSBiLl9fc2tpbkluZGV4QXJyYXksZGVsZXRlIGIuX19za2luV2VpZ2h0QXJyYXkpfX07dGhpcy5kZWxldGU9ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPVwiX193ZWJnbFZlcnRleEJ1ZmZlciBfX3dlYmdsTm9ybWFsQnVmZmVyIF9fd2ViZ2xUYW5nZW50QnVmZmVyIF9fd2ViZ2xDb2xvckJ1ZmZlciBfX3dlYmdsVVZCdWZmZXIgX193ZWJnbFVWMkJ1ZmZlciBfX3dlYmdsU2tpbkluZGljZXNCdWZmZXIgX193ZWJnbFNraW5XZWlnaHRzQnVmZmVyIF9fd2ViZ2xGYWNlQnVmZmVyIF9fd2ViZ2xMaW5lQnVmZmVyIF9fd2ViZ2xMaW5lRGlzdGFuY2VCdWZmZXJcIi5zcGxpdChcIiBcIiksXG5lPTAsaz1kLmxlbmd0aDtlPGs7ZSsrKXt2YXIgbD1kW2VdO3ZvaWQgMCE9PWNbbF0mJihhLmRlbGV0ZUJ1ZmZlcihjW2xdKSxkZWxldGUgY1tsXSl9aWYodm9pZCAwIT09Yy5fX3dlYmdsQ3VzdG9tQXR0cmlidXRlc0xpc3Qpe2ZvcihsIGluIGMuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0KWEuZGVsZXRlQnVmZmVyKGMuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0W2xdLmJ1ZmZlcik7ZGVsZXRlIGMuX193ZWJnbEN1c3RvbUF0dHJpYnV0ZXNMaXN0fWIubWVtb3J5Lmdlb21ldHJpZXMtLX19O1xuVEhSRUUuV2ViR0xFeHRlbnNpb25zPWZ1bmN0aW9uKGEpe3ZhciBiPXt9O3RoaXMuZ2V0PWZ1bmN0aW9uKGMpe2lmKHZvaWQgMCE9PWJbY10pcmV0dXJuIGJbY107dmFyIGQ7c3dpdGNoKGMpe2Nhc2UgXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpfHxhLmdldEV4dGVuc2lvbihcIk1PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKTticmVhaztjYXNlIFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTtcbmJyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7YnJlYWs7ZGVmYXVsdDpkPWEuZ2V0RXh0ZW5zaW9uKGMpfW51bGw9PT1kJiZUSFJFRS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogXCIrYytcIiBleHRlbnNpb24gbm90IHN1cHBvcnRlZC5cIik7cmV0dXJuIGJbY109ZH19O1xuVEhSRUUuV2ViR0xPYmplY3RzPWZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSxiKXt2YXIgZD1hLm1hdGVyaWFsLGU9ITE7aWYodm9pZCAwPT09dFtiLmlkXXx8ITA9PT1iLmdyb3Vwc05lZWRVcGRhdGUpe2RlbGV0ZSBuW2EuaWRdO2Zvcih2YXIgZT1iLmlkLGQ9ZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwsZz1jLmdldChcIk9FU19lbGVtZW50X2luZGV4X3VpbnRcIik/NDI5NDk2NzI5Njo2NTUzNSxoLG09e30saz1iLm1vcnBoVGFyZ2V0cy5sZW5ndGgsbD1iLm1vcnBoTm9ybWFscy5sZW5ndGgscyxDPXt9LEU9W10sTD0wLE49Yi5mYWNlcy5sZW5ndGg7TDxOO0wrKyl7aD1iLmZhY2VzW0xdO3ZhciBIPWQ/aC5tYXRlcmlhbEluZGV4OjA7SCBpbiBtfHwobVtIXT17aGFzaDpILGNvdW50ZXI6MH0pO2g9bVtIXS5oYXNoK1wiX1wiK21bSF0uY291bnRlcjtoIGluIEN8fChzPXtpZDpyKyssZmFjZXMzOltdLG1hdGVyaWFsSW5kZXg6SCx2ZXJ0aWNlczowLG51bU1vcnBoVGFyZ2V0czprLFxubnVtTW9ycGhOb3JtYWxzOmx9LENbaF09cyxFLnB1c2gocykpO0NbaF0udmVydGljZXMrMz5nJiYobVtIXS5jb3VudGVyKz0xLGg9bVtIXS5oYXNoK1wiX1wiK21bSF0uY291bnRlcixoIGluIEN8fChzPXtpZDpyKyssZmFjZXMzOltdLG1hdGVyaWFsSW5kZXg6SCx2ZXJ0aWNlczowLG51bU1vcnBoVGFyZ2V0czprLG51bU1vcnBoTm9ybWFsczpsfSxDW2hdPXMsRS5wdXNoKHMpKSk7Q1toXS5mYWNlczMucHVzaChMKTtDW2hdLnZlcnRpY2VzKz0zfXRbZV09RTtiLmdyb3Vwc05lZWRVcGRhdGU9ITF9ZD10W2IuaWRdO2c9MDtmb3IobT1kLmxlbmd0aDtnPG07ZysrKWs9ZFtnXSx2b2lkIDA9PT1rLl9fd2ViZ2xWZXJ0ZXhCdWZmZXI/KHAuaW5pdE1lc2hCdWZmZXJzKGssYSksYi52ZXJ0aWNlc05lZWRVcGRhdGU9ITAsYi5tb3JwaFRhcmdldHNOZWVkVXBkYXRlPSEwLGIuZWxlbWVudHNOZWVkVXBkYXRlPSEwLGIudXZzTmVlZFVwZGF0ZT0hMCxiLm5vcm1hbHNOZWVkVXBkYXRlPSEwLGIudGFuZ2VudHNOZWVkVXBkYXRlPVxuITAsZT1iLmNvbG9yc05lZWRVcGRhdGU9ITApOmU9ITEsKGV8fHZvaWQgMD09PWEuX193ZWJnbEFjdGl2ZSkmJmYobixrLGEpO2EuX193ZWJnbEFjdGl2ZT0hMH1mdW5jdGlvbiBmKGEsYixjKXt2YXIgZD1jLmlkO2FbZF09YVtkXXx8W107YVtkXS5wdXNoKHtpZDpkLGJ1ZmZlcjpiLG9iamVjdDpjLG1hdGVyaWFsOm51bGwsejowfSl9ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGIgaW4gYS5hdHRyaWJ1dGVzKWlmKGEuYXR0cmlidXRlc1tiXS5uZWVkc1VwZGF0ZSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBoKGEpe2Zvcih2YXIgYiBpbiBhLmF0dHJpYnV0ZXMpYS5hdHRyaWJ1dGVzW2JdLm5lZWRzVXBkYXRlPSExfWZ1bmN0aW9uIGsoYSl7YS50YXJnZXQudHJhdmVyc2UoZnVuY3Rpb24oYSl7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVtb3ZlXCIsayk7aWYoYSBpbnN0YW5jZW9mIFRIUkVFLk1lc2h8fGEgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludENsb3VkfHxhIGluc3RhbmNlb2YgVEhSRUUuTGluZSlkZWxldGUgblthLmlkXTtcbmVsc2UgaWYoYSBpbnN0YW5jZW9mIFRIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdHx8YS5pbW1lZGlhdGVSZW5kZXJDYWxsYmFjaylmb3IodmFyIGI9bSxjPWIubGVuZ3RoLTE7MDw9YztjLS0pYltjXS5vYmplY3Q9PT1hJiZiLnNwbGljZShjLDEpO2RlbGV0ZSBhLl9fd2ViZ2xJbml0O2RlbGV0ZSBhLl9tb2RlbFZpZXdNYXRyaXg7ZGVsZXRlIGEuX25vcm1hbE1hdHJpeDtkZWxldGUgYS5fX3dlYmdsQWN0aXZlfSl9ZnVuY3Rpb24gbChjKXtjPWMudGFyZ2V0O2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixsKTtkZWxldGUgc1tjLmlkXTtpZihjIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe2Zvcih2YXIgZCBpbiBjLmF0dHJpYnV0ZXMpe3ZhciBlPWMuYXR0cmlidXRlc1tkXTt2b2lkIDAhPT1lLmJ1ZmZlciYmKGEuZGVsZXRlQnVmZmVyKGUuYnVmZmVyKSxkZWxldGUgZS5idWZmZXIpfWIubWVtb3J5Lmdlb21ldHJpZXMtLX1lbHNlIGlmKGQ9dFtjLmlkXSx2b2lkIDAhPT1cbmQpe2Zvcih2YXIgZT0wLGY9ZC5sZW5ndGg7ZTxmO2UrKyl7dmFyIGc9ZFtlXTtpZih2b2lkIDAhPT1nLm51bU1vcnBoVGFyZ2V0cyl7Zm9yKHZhciBoPTAsbT1nLm51bU1vcnBoVGFyZ2V0cztoPG07aCsrKWEuZGVsZXRlQnVmZmVyKGcuX193ZWJnbE1vcnBoVGFyZ2V0c0J1ZmZlcnNbaF0pO2RlbGV0ZSBnLl9fd2ViZ2xNb3JwaFRhcmdldHNCdWZmZXJzfWlmKHZvaWQgMCE9PWcubnVtTW9ycGhOb3JtYWxzKXtoPTA7Zm9yKG09Zy5udW1Nb3JwaE5vcm1hbHM7aDxtO2grKylhLmRlbGV0ZUJ1ZmZlcihnLl9fd2ViZ2xNb3JwaE5vcm1hbHNCdWZmZXJzW2hdKTtkZWxldGUgZy5fX3dlYmdsTW9ycGhOb3JtYWxzQnVmZmVyc31wLmRlbGV0ZShnKX1kZWxldGUgdFtjLmlkXX1lbHNlIHAuZGVsZXRlKGMpfXZhciBwPW5ldyBUSFJFRS5XZWJHTEJ1ZmZlcnMoYSxiLGMsZCksbj17fSxtPVtdLHM9e30sdD17fSxyPTA7dGhpcy5vYmplY3RzPW47dGhpcy5vYmplY3RzSW1tZWRpYXRlPW07dGhpcy5pbml0PVxuZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5fX3dlYmdsSW5pdCYmKGEuX193ZWJnbEluaXQ9ITAsYS5fbW9kZWxWaWV3TWF0cml4PW5ldyBUSFJFRS5NYXRyaXg0LGEuX25vcm1hbE1hdHJpeD1uZXcgVEhSRUUuTWF0cml4MyxhLmFkZEV2ZW50TGlzdGVuZXIoXCJyZW1vdmVkXCIsaykpO3ZhciBjPWEuZ2VvbWV0cnk7dm9pZCAwIT09YyYmdm9pZCAwPT09c1tjLmlkXSYmKHNbYy5pZF09YyxjLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsbCksYyBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5P2IubWVtb3J5Lmdlb21ldHJpZXMrKzphIGluc3RhbmNlb2YgVEhSRUUuTWVzaD9lKGEsYyk6YSBpbnN0YW5jZW9mIFRIUkVFLkxpbmU/cC5pbml0TGluZUJ1ZmZlcnMoYyxhKTphIGluc3RhbmNlb2YgVEhSRUUuUG9pbnRDbG91ZCYmcC5pbml0UG9pbnRDbG91ZEJ1ZmZlcnMoYyxhKSk7aWYodm9pZCAwPT09YS5fX3dlYmdsQWN0aXZlKWlmKGEuX193ZWJnbEFjdGl2ZT0hMCxhIGluc3RhbmNlb2ZcblRIUkVFLk1lc2gpaWYoYyBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KWYobixjLGEpO2Vsc2V7aWYoYyBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KWZvcih2YXIgYz10W2MuaWRdLGQ9MCxnPWMubGVuZ3RoO2Q8ZztkKyspZihuLGNbZF0sYSl9ZWxzZSBhIGluc3RhbmNlb2YgVEhSRUUuTGluZXx8YSBpbnN0YW5jZW9mIFRIUkVFLlBvaW50Q2xvdWQ/ZihuLGMsYSk6KGEgaW5zdGFuY2VvZiBUSFJFRS5JbW1lZGlhdGVSZW5kZXJPYmplY3R8fGEuaW1tZWRpYXRlUmVuZGVyQ2FsbGJhY2spJiZtLnB1c2goe2lkOm51bGwsb2JqZWN0OmEsb3BhcXVlOm51bGwsdHJhbnNwYXJlbnQ6bnVsbCx6OjB9KX07dGhpcy51cGRhdGU9ZnVuY3Rpb24oYil7dmFyIGM9Yi5nZW9tZXRyeTtpZihjIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe2I9Yy5hdHRyaWJ1dGVzO2Zvcih2YXIgYz1jLmF0dHJpYnV0ZXNLZXlzLGY9MCxtPWMubGVuZ3RoO2Y8bTtmKyspe3ZhciBrPWNbZl0sXG5sPWJba10saz1cImluZGV4XCI9PT1rP2EuRUxFTUVOVF9BUlJBWV9CVUZGRVI6YS5BUlJBWV9CVUZGRVIsbD1sIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU/bC5kYXRhOmw7aWYodm9pZCAwPT09bC5idWZmZXIpe2wuYnVmZmVyPWEuY3JlYXRlQnVmZmVyKCk7YS5iaW5kQnVmZmVyKGssbC5idWZmZXIpO3ZhciBuPWEuU1RBVElDX0RSQVc7aWYobCBpbnN0YW5jZW9mIFRIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGV8fGwgaW5zdGFuY2VvZiBUSFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUmJiEwPT09bC5keW5hbWljfHxsIGluc3RhbmNlb2YgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXImJiEwPT09bC5keW5hbWljKW49YS5EWU5BTUlDX0RSQVc7YS5idWZmZXJEYXRhKGssbC5hcnJheSxuKTtsLm5lZWRzVXBkYXRlPSExfWVsc2UhMD09PWwubmVlZHNVcGRhdGUmJihhLmJpbmRCdWZmZXIoayxsLmJ1ZmZlciksdm9pZCAwPT09bC51cGRhdGVSYW5nZXx8XG4tMT09PWwudXBkYXRlUmFuZ2UuY291bnQ/YS5idWZmZXJTdWJEYXRhKGssMCxsLmFycmF5KTowPT09bC51cGRhdGVSYW5nZS5jb3VudD9USFJFRS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIudXBkYXRlT2JqZWN0OiB1c2luZyB1cGRhdGVSYW5nZSBmb3IgVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSBhbmQgbWFya2VkIGFzIG5lZWRzVXBkYXRlIGJ1dCBjb3VudCBpcyAwLCBlbnN1cmUgeW91IGFyZSB1c2luZyBzZXQgbWV0aG9kcyBvciB1cGRhdGluZyBtYW51YWxseS5cIik6KGEuYnVmZmVyU3ViRGF0YShrLGwudXBkYXRlUmFuZ2Uub2Zmc2V0KmwuYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsbC5hcnJheS5zdWJhcnJheShsLnVwZGF0ZVJhbmdlLm9mZnNldCxsLnVwZGF0ZVJhbmdlLm9mZnNldCtsLnVwZGF0ZVJhbmdlLmNvdW50KSksbC51cGRhdGVSYW5nZS5jb3VudD0wKSxsLm5lZWRzVXBkYXRlPSExKX19ZWxzZSBpZihiIGluc3RhbmNlb2YgVEhSRUUuTWVzaCl7ITA9PT1cbmMuZ3JvdXBzTmVlZFVwZGF0ZSYmZShiLGMpO209dFtjLmlkXTtmPTA7Zm9yKGs9bS5sZW5ndGg7ZjxrO2YrKyl7dmFyIGw9bVtmXSxuPWQoYixsKSxzPW4uYXR0cmlidXRlcyYmZyhuKTsoYy52ZXJ0aWNlc05lZWRVcGRhdGV8fGMubW9ycGhUYXJnZXRzTmVlZFVwZGF0ZXx8Yy5lbGVtZW50c05lZWRVcGRhdGV8fGMudXZzTmVlZFVwZGF0ZXx8Yy5ub3JtYWxzTmVlZFVwZGF0ZXx8Yy5jb2xvcnNOZWVkVXBkYXRlfHxjLnRhbmdlbnRzTmVlZFVwZGF0ZXx8cykmJnAuc2V0TWVzaEJ1ZmZlcnMobCxiLGEuRFlOQU1JQ19EUkFXLCFjLmR5bmFtaWMsbil9Yy52ZXJ0aWNlc05lZWRVcGRhdGU9ITE7Yy5tb3JwaFRhcmdldHNOZWVkVXBkYXRlPSExO2MuZWxlbWVudHNOZWVkVXBkYXRlPSExO2MudXZzTmVlZFVwZGF0ZT0hMTtjLm5vcm1hbHNOZWVkVXBkYXRlPSExO2MuY29sb3JzTmVlZFVwZGF0ZT0hMTtjLnRhbmdlbnRzTmVlZFVwZGF0ZT0hMTtuLmF0dHJpYnV0ZXMmJmgobil9ZWxzZSBiIGluc3RhbmNlb2ZcblRIUkVFLkxpbmU/KG49ZChiLGMpLHM9bi5hdHRyaWJ1dGVzJiZnKG4pLChjLnZlcnRpY2VzTmVlZFVwZGF0ZXx8Yy5jb2xvcnNOZWVkVXBkYXRlfHxjLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlfHxzKSYmcC5zZXRMaW5lQnVmZmVycyhjLGEuRFlOQU1JQ19EUkFXKSxjLnZlcnRpY2VzTmVlZFVwZGF0ZT0hMSxjLmNvbG9yc05lZWRVcGRhdGU9ITEsYy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZT0hMSxuLmF0dHJpYnV0ZXMmJmgobikpOmIgaW5zdGFuY2VvZiBUSFJFRS5Qb2ludENsb3VkJiYobj1kKGIsYykscz1uLmF0dHJpYnV0ZXMmJmcobiksKGMudmVydGljZXNOZWVkVXBkYXRlfHxjLmNvbG9yc05lZWRVcGRhdGV8fHMpJiZwLnNldFBvaW50Q2xvdWRCdWZmZXJzKGMsYS5EWU5BTUlDX0RSQVcsYiksYy52ZXJ0aWNlc05lZWRVcGRhdGU9ITEsYy5jb2xvcnNOZWVkVXBkYXRlPSExLG4uYXR0cmlidXRlcyYmaChuKSl9fTtcblRIUkVFLldlYkdMUHJvZ3JhbT1mdW5jdGlvbigpe3ZhciBhPTA7cmV0dXJuIGZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmPWIuY29udGV4dCxnPWQuZGVmaW5lcyxoPWQuX193ZWJnbFNoYWRlci51bmlmb3JtcyxrPWQuYXR0cmlidXRlcyxsPWQuX193ZWJnbFNoYWRlci52ZXJ0ZXhTaGFkZXIscD1kLl9fd2ViZ2xTaGFkZXIuZnJhZ21lbnRTaGFkZXIsbj1kLmluZGV4MEF0dHJpYnV0ZU5hbWU7dm9pZCAwPT09biYmITA9PT1lLm1vcnBoVGFyZ2V0cyYmKG49XCJwb3NpdGlvblwiKTt2YXIgbT1cIlNIQURPV01BUF9UWVBFX0JBU0lDXCI7ZS5zaGFkb3dNYXBUeXBlPT09VEhSRUUuUENGU2hhZG93TWFwP209XCJTSEFET1dNQVBfVFlQRV9QQ0ZcIjplLnNoYWRvd01hcFR5cGU9PT1USFJFRS5QQ0ZTb2Z0U2hhZG93TWFwJiYobT1cIlNIQURPV01BUF9UWVBFX1BDRl9TT0ZUXCIpO3ZhciBzPVwiRU5WTUFQX1RZUEVfQ1VCRVwiLHQ9XCJFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXCIscj1cIkVOVk1BUF9CTEVORElOR19NVUxUSVBMWVwiO1xuaWYoZS5lbnZNYXApe3N3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIFRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZzpjYXNlIFRIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZzpzPVwiRU5WTUFQX1RZUEVfQ1VCRVwiO2JyZWFrO2Nhc2UgVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6Y2FzZSBUSFJFRS5FcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzpzPVwiRU5WTUFQX1RZUEVfRVFVSVJFQ1wiO2JyZWFrO2Nhc2UgVEhSRUUuU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6cz1cIkVOVk1BUF9UWVBFX1NQSEVSRVwifXN3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIFRIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZzpjYXNlIFRIUkVFLkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOnQ9XCJFTlZNQVBfTU9ERV9SRUZSQUNUSU9OXCJ9c3dpdGNoKGQuY29tYmluZSl7Y2FzZSBUSFJFRS5NdWx0aXBseU9wZXJhdGlvbjpyPVwiRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXCI7XG5icmVhaztjYXNlIFRIUkVFLk1peE9wZXJhdGlvbjpyPVwiRU5WTUFQX0JMRU5ESU5HX01JWFwiO2JyZWFrO2Nhc2UgVEhSRUUuQWRkT3BlcmF0aW9uOnI9XCJFTlZNQVBfQkxFTkRJTkdfQUREXCJ9fXZhciB2PTA8Yi5nYW1tYUZhY3Rvcj9iLmdhbW1hRmFjdG9yOjEsdSx4O3U9W107Zm9yKHZhciB6IGluIGcpeD1nW3pdLCExIT09eCYmKHg9XCIjZGVmaW5lIFwiK3orXCIgXCIreCx1LnB1c2goeCkpO3U9dS5qb2luKFwiXFxuXCIpO2c9Zi5jcmVhdGVQcm9ncmFtKCk7ZCBpbnN0YW5jZW9mIFRIUkVFLlJhd1NoYWRlck1hdGVyaWFsP2I9ZD1cIlwiOihkPVtcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBmbG9hdDtcIixcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBpbnQ7XCIsdSxlLnN1cHBvcnRzVmVydGV4VGV4dHVyZXM/XCIjZGVmaW5lIFZFUlRFWF9URVhUVVJFU1wiOlwiXCIsYi5nYW1tYUlucHV0P1wiI2RlZmluZSBHQU1NQV9JTlBVVFwiOlwiXCIsYi5nYW1tYU91dHB1dD9cIiNkZWZpbmUgR0FNTUFfT1VUUFVUXCI6XG5cIlwiLFwiI2RlZmluZSBHQU1NQV9GQUNUT1IgXCIrdixcIiNkZWZpbmUgTUFYX0RJUl9MSUdIVFMgXCIrZS5tYXhEaXJMaWdodHMsXCIjZGVmaW5lIE1BWF9QT0lOVF9MSUdIVFMgXCIrZS5tYXhQb2ludExpZ2h0cyxcIiNkZWZpbmUgTUFYX1NQT1RfTElHSFRTIFwiK2UubWF4U3BvdExpZ2h0cyxcIiNkZWZpbmUgTUFYX0hFTUlfTElHSFRTIFwiK2UubWF4SGVtaUxpZ2h0cyxcIiNkZWZpbmUgTUFYX1NIQURPV1MgXCIrZS5tYXhTaGFkb3dzLFwiI2RlZmluZSBNQVhfQk9ORVMgXCIrZS5tYXhCb25lcyxlLm1hcD9cIiNkZWZpbmUgVVNFX01BUFwiOlwiXCIsZS5lbnZNYXA/XCIjZGVmaW5lIFVTRV9FTlZNQVBcIjpcIlwiLGUuZW52TWFwP1wiI2RlZmluZSBcIit0OlwiXCIsZS5saWdodE1hcD9cIiNkZWZpbmUgVVNFX0xJR0hUTUFQXCI6XCJcIixlLmFvTWFwP1wiI2RlZmluZSBVU0VfQU9NQVBcIjpcIlwiLGUuYnVtcE1hcD9cIiNkZWZpbmUgVVNFX0JVTVBNQVBcIjpcIlwiLGUubm9ybWFsTWFwP1wiI2RlZmluZSBVU0VfTk9STUFMTUFQXCI6XCJcIixlLnNwZWN1bGFyTWFwP1xuXCIjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUFwiOlwiXCIsZS5hbHBoYU1hcD9cIiNkZWZpbmUgVVNFX0FMUEhBTUFQXCI6XCJcIixlLnZlcnRleENvbG9ycz9cIiNkZWZpbmUgVVNFX0NPTE9SXCI6XCJcIixlLmZsYXRTaGFkaW5nP1wiI2RlZmluZSBGTEFUX1NIQURFRFwiOlwiXCIsZS5za2lubmluZz9cIiNkZWZpbmUgVVNFX1NLSU5OSU5HXCI6XCJcIixlLnVzZVZlcnRleFRleHR1cmU/XCIjZGVmaW5lIEJPTkVfVEVYVFVSRVwiOlwiXCIsZS5tb3JwaFRhcmdldHM/XCIjZGVmaW5lIFVTRV9NT1JQSFRBUkdFVFNcIjpcIlwiLGUubW9ycGhOb3JtYWxzP1wiI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTXCI6XCJcIixlLndyYXBBcm91bmQ/XCIjZGVmaW5lIFdSQVBfQVJPVU5EXCI6XCJcIixlLmRvdWJsZVNpZGVkP1wiI2RlZmluZSBET1VCTEVfU0lERURcIjpcIlwiLGUuZmxpcFNpZGVkP1wiI2RlZmluZSBGTElQX1NJREVEXCI6XCJcIixlLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFVTRV9TSEFET1dNQVBcIjpcIlwiLGUuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgXCIrXG5tOlwiXCIsZS5zaGFkb3dNYXBEZWJ1Zz9cIiNkZWZpbmUgU0hBRE9XTUFQX0RFQlVHXCI6XCJcIixlLnNoYWRvd01hcENhc2NhZGU/XCIjZGVmaW5lIFNIQURPV01BUF9DQVNDQURFXCI6XCJcIixlLnNpemVBdHRlbnVhdGlvbj9cIiNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTlwiOlwiXCIsZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG51bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgbm9ybWFsO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbiNpZmRlZiBVU0VfQ09MT1JcXG5cXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MDtcXG5cXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7XFxuXFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQyO1xcblxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MztcXG5cXHQjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMDtcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDE7XFxuXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwyO1xcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMztcXG5cXHQjZWxzZVxcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDtcXG5cXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7XFxuXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2O1xcblxcdFxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0YXR0cmlidXRlIHZlYzQgc2tpbkluZGV4O1xcblxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7XFxuI2VuZGlmXFxuXCJdLmpvaW4oXCJcXG5cIiksXG5iPVtcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBmbG9hdDtcIixcInByZWNpc2lvbiBcIitlLnByZWNpc2lvbitcIiBpbnQ7XCIsZS5idW1wTWFwfHxlLm5vcm1hbE1hcHx8ZS5mbGF0U2hhZGluZz9cIiNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXCI6XCJcIix1LFwiI2RlZmluZSBNQVhfRElSX0xJR0hUUyBcIitlLm1heERpckxpZ2h0cyxcIiNkZWZpbmUgTUFYX1BPSU5UX0xJR0hUUyBcIitlLm1heFBvaW50TGlnaHRzLFwiI2RlZmluZSBNQVhfU1BPVF9MSUdIVFMgXCIrZS5tYXhTcG90TGlnaHRzLFwiI2RlZmluZSBNQVhfSEVNSV9MSUdIVFMgXCIrZS5tYXhIZW1pTGlnaHRzLFwiI2RlZmluZSBNQVhfU0hBRE9XUyBcIitlLm1heFNoYWRvd3MsZS5hbHBoYVRlc3Q/XCIjZGVmaW5lIEFMUEhBVEVTVCBcIitlLmFscGhhVGVzdDpcIlwiLGIuZ2FtbWFJbnB1dD9cIiNkZWZpbmUgR0FNTUFfSU5QVVRcIjpcIlwiLGIuZ2FtbWFPdXRwdXQ/XCIjZGVmaW5lIEdBTU1BX09VVFBVVFwiOlwiXCIsXCIjZGVmaW5lIEdBTU1BX0ZBQ1RPUiBcIitcbnYsZS51c2VGb2cmJmUuZm9nP1wiI2RlZmluZSBVU0VfRk9HXCI6XCJcIixlLnVzZUZvZyYmZS5mb2dFeHA/XCIjZGVmaW5lIEZPR19FWFAyXCI6XCJcIixlLm1hcD9cIiNkZWZpbmUgVVNFX01BUFwiOlwiXCIsZS5lbnZNYXA/XCIjZGVmaW5lIFVTRV9FTlZNQVBcIjpcIlwiLGUuZW52TWFwP1wiI2RlZmluZSBcIitzOlwiXCIsZS5lbnZNYXA/XCIjZGVmaW5lIFwiK3Q6XCJcIixlLmVudk1hcD9cIiNkZWZpbmUgXCIrcjpcIlwiLGUubGlnaHRNYXA/XCIjZGVmaW5lIFVTRV9MSUdIVE1BUFwiOlwiXCIsZS5hb01hcD9cIiNkZWZpbmUgVVNFX0FPTUFQXCI6XCJcIixlLmJ1bXBNYXA/XCIjZGVmaW5lIFVTRV9CVU1QTUFQXCI6XCJcIixlLm5vcm1hbE1hcD9cIiNkZWZpbmUgVVNFX05PUk1BTE1BUFwiOlwiXCIsZS5zcGVjdWxhck1hcD9cIiNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQXCI6XCJcIixlLmFscGhhTWFwP1wiI2RlZmluZSBVU0VfQUxQSEFNQVBcIjpcIlwiLGUudmVydGV4Q29sb3JzP1wiI2RlZmluZSBVU0VfQ09MT1JcIjpcIlwiLGUuZmxhdFNoYWRpbmc/XCIjZGVmaW5lIEZMQVRfU0hBREVEXCI6XG5cIlwiLGUubWV0YWw/XCIjZGVmaW5lIE1FVEFMXCI6XCJcIixlLndyYXBBcm91bmQ/XCIjZGVmaW5lIFdSQVBfQVJPVU5EXCI6XCJcIixlLmRvdWJsZVNpZGVkP1wiI2RlZmluZSBET1VCTEVfU0lERURcIjpcIlwiLGUuZmxpcFNpZGVkP1wiI2RlZmluZSBGTElQX1NJREVEXCI6XCJcIixlLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFVTRV9TSEFET1dNQVBcIjpcIlwiLGUuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgXCIrbTpcIlwiLGUuc2hhZG93TWFwRGVidWc/XCIjZGVmaW5lIFNIQURPV01BUF9ERUJVR1wiOlwiXCIsZS5zaGFkb3dNYXBDYXNjYWRlP1wiI2RlZmluZSBTSEFET1dNQVBfQ0FTQ0FERVwiOlwiXCIsZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XFxudW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1xcblwiXS5qb2luKFwiXFxuXCIpKTtsPW5ldyBUSFJFRS5XZWJHTFNoYWRlcihmLGYuVkVSVEVYX1NIQURFUixkK2wpO3A9bmV3IFRIUkVFLldlYkdMU2hhZGVyKGYsXG5mLkZSQUdNRU5UX1NIQURFUixiK3ApO2YuYXR0YWNoU2hhZGVyKGcsbCk7Zi5hdHRhY2hTaGFkZXIoZyxwKTt2b2lkIDAhPT1uJiZmLmJpbmRBdHRyaWJMb2NhdGlvbihnLDAsbik7Zi5saW5rUHJvZ3JhbShnKTtuPWYuZ2V0UHJvZ3JhbUluZm9Mb2coZyk7Yj1mLmdldFNoYWRlckluZm9Mb2cobCk7bT1mLmdldFNoYWRlckluZm9Mb2cocCk7ITE9PT1mLmdldFByb2dyYW1QYXJhbWV0ZXIoZyxmLkxJTktfU1RBVFVTKSYmVEhSRUUuZXJyb3IoXCJUSFJFRS5XZWJHTFByb2dyYW06IHNoYWRlciBlcnJvcjogXCIsZi5nZXRFcnJvcigpLFwiZ2wuVkFMSURBVEVfU1RBVFVTXCIsZi5nZXRQcm9ncmFtUGFyYW1ldGVyKGcsZi5WQUxJREFURV9TVEFUVVMpLFwiZ2wuZ2V0UHJvZ3JhbUluZm9Mb2dcIixuLGIsbSk7XCJcIiE9PW4mJlRIUkVFLndhcm4oXCJUSFJFRS5XZWJHTFByb2dyYW06IGdsLmdldFByb2dyYW1JbmZvTG9nKClcIixuKTtmLmRlbGV0ZVNoYWRlcihsKTtmLmRlbGV0ZVNoYWRlcihwKTtuPVwidmlld01hdHJpeCBtb2RlbFZpZXdNYXRyaXggcHJvamVjdGlvbk1hdHJpeCBub3JtYWxNYXRyaXggbW9kZWxNYXRyaXggY2FtZXJhUG9zaXRpb24gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJpbmRNYXRyaXggYmluZE1hdHJpeEludmVyc2VcIi5zcGxpdChcIiBcIik7XG5lLnVzZVZlcnRleFRleHR1cmU/KG4ucHVzaChcImJvbmVUZXh0dXJlXCIpLG4ucHVzaChcImJvbmVUZXh0dXJlV2lkdGhcIiksbi5wdXNoKFwiYm9uZVRleHR1cmVIZWlnaHRcIikpOm4ucHVzaChcImJvbmVHbG9iYWxNYXRyaWNlc1wiKTtlLmxvZ2FyaXRobWljRGVwdGhCdWZmZXImJm4ucHVzaChcImxvZ0RlcHRoQnVmRkNcIik7Zm9yKHZhciB3IGluIGgpbi5wdXNoKHcpO2g9bjt3PXt9O249MDtmb3IoYj1oLmxlbmd0aDtuPGI7bisrKW09aFtuXSx3W21dPWYuZ2V0VW5pZm9ybUxvY2F0aW9uKGcsbSk7dGhpcy51bmlmb3Jtcz13O249XCJwb3NpdGlvbiBub3JtYWwgdXYgdXYyIHRhbmdlbnQgY29sb3Igc2tpbkluZGV4IHNraW5XZWlnaHQgbGluZURpc3RhbmNlXCIuc3BsaXQoXCIgXCIpO2ZvcihoPTA7aDxlLm1heE1vcnBoVGFyZ2V0cztoKyspbi5wdXNoKFwibW9ycGhUYXJnZXRcIitoKTtmb3IoaD0wO2g8ZS5tYXhNb3JwaE5vcm1hbHM7aCsrKW4ucHVzaChcIm1vcnBoTm9ybWFsXCIraCk7Zm9yKHZhciBGIGluIGspbi5wdXNoKEYpO1xuZT1uO2s9e307Rj0wO2ZvcihoPWUubGVuZ3RoO0Y8aDtGKyspdz1lW0ZdLGtbd109Zi5nZXRBdHRyaWJMb2NhdGlvbihnLHcpO3RoaXMuYXR0cmlidXRlcz1rO3RoaXMuYXR0cmlidXRlc0tleXM9T2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKTt0aGlzLmlkPWErKzt0aGlzLmNvZGU9Yzt0aGlzLnVzZWRUaW1lcz0xO3RoaXMucHJvZ3JhbT1nO3RoaXMudmVydGV4U2hhZGVyPWw7dGhpcy5mcmFnbWVudFNoYWRlcj1wO3JldHVybiB0aGlzfX0oKTtcblRIUkVFLldlYkdMU2hhZGVyPWZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oYSl7YT1hLnNwbGl0KFwiXFxuXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWFbY109YysxK1wiOiBcIithW2NdO3JldHVybiBhLmpvaW4oXCJcXG5cIil9O3JldHVybiBmdW5jdGlvbihiLGMsZCl7dmFyIGU9Yi5jcmVhdGVTaGFkZXIoYyk7Yi5zaGFkZXJTb3VyY2UoZSxkKTtiLmNvbXBpbGVTaGFkZXIoZSk7ITE9PT1iLmdldFNoYWRlclBhcmFtZXRlcihlLGIuQ09NUElMRV9TVEFUVVMpJiZUSFJFRS5lcnJvcihcIlRIUkVFLldlYkdMU2hhZGVyOiBTaGFkZXIgY291bGRuJ3QgY29tcGlsZS5cIik7XCJcIiE9PWIuZ2V0U2hhZGVySW5mb0xvZyhlKSYmVEhSRUUud2FybihcIlRIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKClcIixjPT09Yi5WRVJURVhfU0hBREVSP1widmVydGV4XCI6XCJmcmFnbWVudFwiLGIuZ2V0U2hhZGVySW5mb0xvZyhlKSxhKGQpKTtyZXR1cm4gZX19KCk7XG5USFJFRS5XZWJHTFNoYWRvd01hcD1mdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChhLGIsYyl7aWYoYi52aXNpYmxlKXt2YXIgZT1sW2IuaWRdO2lmKGUmJmIuY2FzdFNoYWRvdyYmKCExPT09Yi5mcnVzdHVtQ3VsbGVkfHwhMD09PWYuaW50ZXJzZWN0c09iamVjdChiKSkpZm9yKHZhciBnPTAsaD1lLmxlbmd0aDtnPGg7ZysrKXt2YXIgaz1lW2ddO2IuX21vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGMubWF0cml4V29ybGRJbnZlcnNlLGIubWF0cml4V29ybGQpO20ucHVzaChrKX1nPTA7Zm9yKGg9Yi5jaGlsZHJlbi5sZW5ndGg7ZzxoO2crKylkKGEsYi5jaGlsZHJlbltnXSxjKX19dmFyIGU9YS5jb250ZXh0LGY9bmV3IFRIUkVFLkZydXN0dW0sZz1uZXcgVEhSRUUuTWF0cml4NCxoPW5ldyBUSFJFRS5WZWN0b3IzLGs9bmV3IFRIUkVFLlZlY3RvcjMsbD1jLm9iamVjdHMscD1jLm9iamVjdHNJbW1lZGlhdGUsbj1uZXcgVEhSRUUuVmVjdG9yMyxtPVtdO2M9VEhSRUUuU2hhZGVyTGliLmRlcHRoUkdCQTtcbnZhciBzPVRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoYy51bmlmb3JtcyksdD1uZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe3VuaWZvcm1zOnMsdmVydGV4U2hhZGVyOmMudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOmMuZnJhZ21lbnRTaGFkZXJ9KSxyPW5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7dW5pZm9ybXM6cyx2ZXJ0ZXhTaGFkZXI6Yy52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6Yy5mcmFnbWVudFNoYWRlcixtb3JwaFRhcmdldHM6ITB9KSx2PW5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7dW5pZm9ybXM6cyx2ZXJ0ZXhTaGFkZXI6Yy52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6Yy5mcmFnbWVudFNoYWRlcixza2lubmluZzohMH0pLHU9bmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHt1bmlmb3JtczpzLHZlcnRleFNoYWRlcjpjLnZlcnRleFNoYWRlcixmcmFnbWVudFNoYWRlcjpjLmZyYWdtZW50U2hhZGVyLG1vcnBoVGFyZ2V0czohMCxza2lubmluZzohMH0pO1xudC5fc2hhZG93UGFzcz0hMDtyLl9zaGFkb3dQYXNzPSEwO3YuX3NoYWRvd1Bhc3M9ITA7dS5fc2hhZG93UGFzcz0hMDt2YXIgeD10aGlzO3RoaXMuZW5hYmxlZD0hMTt0aGlzLnR5cGU9VEhSRUUuUENGU2hhZG93TWFwO3RoaXMuY3VsbEZhY2U9VEhSRUUuQ3VsbEZhY2VGcm9udDt0aGlzLmNhc2NhZGU9dGhpcy5kZWJ1Zz0hMTt0aGlzLnJlbmRlcj1mdW5jdGlvbihjLGwpe2lmKCExIT09eC5lbmFibGVkKXt2YXIgcyxHLHksSSxCLEMsRSxMLE49W107ST0wO2UuY2xlYXJDb2xvcigxLDEsMSwxKTtlLmRpc2FibGUoZS5CTEVORCk7ZS5lbmFibGUoZS5DVUxMX0ZBQ0UpO2UuZnJvbnRGYWNlKGUuQ0NXKTt4LmN1bGxGYWNlPT09VEhSRUUuQ3VsbEZhY2VGcm9udD9lLmN1bGxGYWNlKGUuRlJPTlQpOmUuY3VsbEZhY2UoZS5CQUNLKTthLnN0YXRlLnNldERlcHRoVGVzdCghMCk7cz0wO2ZvcihHPWIubGVuZ3RoO3M8RztzKyspaWYoeT1iW3NdLHkuY2FzdFNoYWRvdylpZih5IGluc3RhbmNlb2ZcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHQmJnkuc2hhZG93Q2FzY2FkZSlmb3IoQj0wO0I8eS5zaGFkb3dDYXNjYWRlQ291bnQ7QisrKXt2YXIgSDtpZih5LnNoYWRvd0Nhc2NhZGVBcnJheVtCXSlIPXkuc2hhZG93Q2FzY2FkZUFycmF5W0JdO2Vsc2V7RT15O3ZhciBPPUI7SD1uZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodDtILmlzVmlydHVhbD0hMDtILm9ubHlTaGFkb3c9ITA7SC5jYXN0U2hhZG93PSEwO0guc2hhZG93Q2FtZXJhTmVhcj1FLnNoYWRvd0NhbWVyYU5lYXI7SC5zaGFkb3dDYW1lcmFGYXI9RS5zaGFkb3dDYW1lcmFGYXI7SC5zaGFkb3dDYW1lcmFMZWZ0PUUuc2hhZG93Q2FtZXJhTGVmdDtILnNoYWRvd0NhbWVyYVJpZ2h0PUUuc2hhZG93Q2FtZXJhUmlnaHQ7SC5zaGFkb3dDYW1lcmFCb3R0b209RS5zaGFkb3dDYW1lcmFCb3R0b207SC5zaGFkb3dDYW1lcmFUb3A9RS5zaGFkb3dDYW1lcmFUb3A7SC5zaGFkb3dDYW1lcmFWaXNpYmxlPUUuc2hhZG93Q2FtZXJhVmlzaWJsZTtcbkguc2hhZG93RGFya25lc3M9RS5zaGFkb3dEYXJrbmVzcztILnNoYWRvd0JpYXM9RS5zaGFkb3dDYXNjYWRlQmlhc1tPXTtILnNoYWRvd01hcFdpZHRoPUUuc2hhZG93Q2FzY2FkZVdpZHRoW09dO0guc2hhZG93TWFwSGVpZ2h0PUUuc2hhZG93Q2FzY2FkZUhlaWdodFtPXTtILnBvaW50c1dvcmxkPVtdO0gucG9pbnRzRnJ1c3R1bT1bXTtMPUgucG9pbnRzV29ybGQ7Qz1ILnBvaW50c0ZydXN0dW07Zm9yKHZhciBNPTA7OD5NO00rKylMW01dPW5ldyBUSFJFRS5WZWN0b3IzLENbTV09bmV3IFRIUkVFLlZlY3RvcjM7TD1FLnNoYWRvd0Nhc2NhZGVOZWFyWltPXTtFPUUuc2hhZG93Q2FzY2FkZUZhclpbT107Q1swXS5zZXQoLTEsLTEsTCk7Q1sxXS5zZXQoMSwtMSxMKTtDWzJdLnNldCgtMSwxLEwpO0NbM10uc2V0KDEsMSxMKTtDWzRdLnNldCgtMSwtMSxFKTtDWzVdLnNldCgxLC0xLEUpO0NbNl0uc2V0KC0xLDEsRSk7Q1s3XS5zZXQoMSwxLEUpO0gub3JpZ2luYWxDYW1lcmE9bDtDPW5ldyBUSFJFRS5HeXJvc2NvcGU7XG5DLnBvc2l0aW9uLmNvcHkoeS5zaGFkb3dDYXNjYWRlT2Zmc2V0KTtDLmFkZChIKTtDLmFkZChILnRhcmdldCk7bC5hZGQoQyk7eS5zaGFkb3dDYXNjYWRlQXJyYXlbQl09SH1PPXk7TD1CO0U9Ty5zaGFkb3dDYXNjYWRlQXJyYXlbTF07RS5wb3NpdGlvbi5jb3B5KE8ucG9zaXRpb24pO0UudGFyZ2V0LnBvc2l0aW9uLmNvcHkoTy50YXJnZXQucG9zaXRpb24pO0UubG9va0F0KEUudGFyZ2V0KTtFLnNoYWRvd0NhbWVyYVZpc2libGU9Ty5zaGFkb3dDYW1lcmFWaXNpYmxlO0Uuc2hhZG93RGFya25lc3M9Ty5zaGFkb3dEYXJrbmVzcztFLnNoYWRvd0JpYXM9Ty5zaGFkb3dDYXNjYWRlQmlhc1tMXTtDPU8uc2hhZG93Q2FzY2FkZU5lYXJaW0xdO089Ty5zaGFkb3dDYXNjYWRlRmFyWltMXTtFPUUucG9pbnRzRnJ1c3R1bTtFWzBdLno9QztFWzFdLno9QztFWzJdLno9QztFWzNdLno9QztFWzRdLno9TztFWzVdLno9TztFWzZdLno9TztFWzddLno9TztOW0ldPUg7SSsrfWVsc2UgTltJXT15LEkrKztcbnM9MDtmb3IoRz1OLmxlbmd0aDtzPEc7cysrKXt5PU5bc107eS5zaGFkb3dNYXB8fChCPVRIUkVFLkxpbmVhckZpbHRlcix4LnR5cGU9PT1USFJFRS5QQ0ZTb2Z0U2hhZG93TWFwJiYoQj1USFJFRS5OZWFyZXN0RmlsdGVyKSx5LnNoYWRvd01hcD1uZXcgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQoeS5zaGFkb3dNYXBXaWR0aCx5LnNoYWRvd01hcEhlaWdodCx7bWluRmlsdGVyOkIsbWFnRmlsdGVyOkIsZm9ybWF0OlRIUkVFLlJHQkFGb3JtYXR9KSx5LnNoYWRvd01hcFNpemU9bmV3IFRIUkVFLlZlY3RvcjIoeS5zaGFkb3dNYXBXaWR0aCx5LnNoYWRvd01hcEhlaWdodCkseS5zaGFkb3dNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDQpO2lmKCF5LnNoYWRvd0NhbWVyYSl7aWYoeSBpbnN0YW5jZW9mIFRIUkVFLlNwb3RMaWdodCl5LnNoYWRvd0NhbWVyYT1uZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoeS5zaGFkb3dDYW1lcmFGb3YseS5zaGFkb3dNYXBXaWR0aC95LnNoYWRvd01hcEhlaWdodCxcbnkuc2hhZG93Q2FtZXJhTmVhcix5LnNoYWRvd0NhbWVyYUZhcik7ZWxzZSBpZih5IGluc3RhbmNlb2YgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCl5LnNoYWRvd0NhbWVyYT1uZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKHkuc2hhZG93Q2FtZXJhTGVmdCx5LnNoYWRvd0NhbWVyYVJpZ2h0LHkuc2hhZG93Q2FtZXJhVG9wLHkuc2hhZG93Q2FtZXJhQm90dG9tLHkuc2hhZG93Q2FtZXJhTmVhcix5LnNoYWRvd0NhbWVyYUZhcik7ZWxzZXtUSFJFRS5lcnJvcihcIlRIUkVFLlNoYWRvd01hcFBsdWdpbjogVW5zdXBwb3J0ZWQgbGlnaHQgdHlwZSBmb3Igc2hhZG93XCIseSk7Y29udGludWV9Yy5hZGQoeS5zaGFkb3dDYW1lcmEpOyEwPT09Yy5hdXRvVXBkYXRlJiZjLnVwZGF0ZU1hdHJpeFdvcmxkKCl9eS5zaGFkb3dDYW1lcmFWaXNpYmxlJiYheS5jYW1lcmFIZWxwZXImJih5LmNhbWVyYUhlbHBlcj1uZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHkuc2hhZG93Q2FtZXJhKSxjLmFkZCh5LmNhbWVyYUhlbHBlcikpO1xuaWYoeS5pc1ZpcnR1YWwmJkgub3JpZ2luYWxDYW1lcmE9PWwpe0I9bDtJPXkuc2hhZG93Q2FtZXJhO0M9eS5wb2ludHNGcnVzdHVtO0U9eS5wb2ludHNXb3JsZDtoLnNldChJbmZpbml0eSxJbmZpbml0eSxJbmZpbml0eSk7ay5zZXQoLUluZmluaXR5LC1JbmZpbml0eSwtSW5maW5pdHkpO2ZvcihPPTA7OD5PO08rKylMPUVbT10sTC5jb3B5KENbT10pLEwudW5wcm9qZWN0KEIpLEwuYXBwbHlNYXRyaXg0KEkubWF0cml4V29ybGRJbnZlcnNlKSxMLng8aC54JiYoaC54PUwueCksTC54PmsueCYmKGsueD1MLngpLEwueTxoLnkmJihoLnk9TC55KSxMLnk+ay55JiYoay55PUwueSksTC56PGgueiYmKGguej1MLnopLEwuej5rLnomJihrLno9TC56KTtJLmxlZnQ9aC54O0kucmlnaHQ9ay54O0kudG9wPWsueTtJLmJvdHRvbT1oLnk7SS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9ST15LnNoYWRvd01hcDtDPXkuc2hhZG93TWF0cml4O0I9eS5zaGFkb3dDYW1lcmE7Qi5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oeS5tYXRyaXhXb3JsZCk7XG5uLnNldEZyb21NYXRyaXhQb3NpdGlvbih5LnRhcmdldC5tYXRyaXhXb3JsZCk7Qi5sb29rQXQobik7Qi51cGRhdGVNYXRyaXhXb3JsZCgpO0IubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoQi5tYXRyaXhXb3JsZCk7eS5jYW1lcmFIZWxwZXImJih5LmNhbWVyYUhlbHBlci52aXNpYmxlPXkuc2hhZG93Q2FtZXJhVmlzaWJsZSk7eS5zaGFkb3dDYW1lcmFWaXNpYmxlJiZ5LmNhbWVyYUhlbHBlci51cGRhdGUoKTtDLnNldCguNSwwLDAsLjUsMCwuNSwwLC41LDAsMCwuNSwuNSwwLDAsMCwxKTtDLm11bHRpcGx5KEIucHJvamVjdGlvbk1hdHJpeCk7Qy5tdWx0aXBseShCLm1hdHJpeFdvcmxkSW52ZXJzZSk7Zy5tdWx0aXBseU1hdHJpY2VzKEIucHJvamVjdGlvbk1hdHJpeCxCLm1hdHJpeFdvcmxkSW52ZXJzZSk7Zi5zZXRGcm9tTWF0cml4KGcpO2Euc2V0UmVuZGVyVGFyZ2V0KEkpO2EuY2xlYXIoKTttLmxlbmd0aD0wO2QoYyxjLEIpO3k9MDtmb3IoST1tLmxlbmd0aDt5PEk7eSsrKUU9XG5tW3ldLEM9RS5vYmplY3QsRT1FLmJ1ZmZlcixPPUMubWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NZXNoRmFjZU1hdGVyaWFsP0MubWF0ZXJpYWwubWF0ZXJpYWxzWzBdOkMubWF0ZXJpYWwsTD12b2lkIDAhPT1DLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyYmMDxDLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGgmJk8ubW9ycGhUYXJnZXRzLE09QyBpbnN0YW5jZW9mIFRIUkVFLlNraW5uZWRNZXNoJiZPLnNraW5uaW5nLEw9Qy5jdXN0b21EZXB0aE1hdGVyaWFsP0MuY3VzdG9tRGVwdGhNYXRlcmlhbDpNP0w/dTp2Okw/cjp0LGEuc2V0TWF0ZXJpYWxGYWNlcyhPKSxFIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnk/YS5yZW5kZXJCdWZmZXJEaXJlY3QoQixiLG51bGwsTCxFLEMpOmEucmVuZGVyQnVmZmVyKEIsYixudWxsLEwsRSxDKTt5PTA7Zm9yKEk9cC5sZW5ndGg7eTxJO3krKylFPXBbeV0sQz1FLm9iamVjdCxDLnZpc2libGUmJkMuY2FzdFNoYWRvdyYmKEMuX21vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKEIubWF0cml4V29ybGRJbnZlcnNlLFxuQy5tYXRyaXhXb3JsZCksYS5yZW5kZXJJbW1lZGlhdGVPYmplY3QoQixiLG51bGwsdCxDKSl9cz1hLmdldENsZWFyQ29sb3IoKTtHPWEuZ2V0Q2xlYXJBbHBoYSgpO2UuY2xlYXJDb2xvcihzLnIscy5nLHMuYixHKTtlLmVuYWJsZShlLkJMRU5EKTt4LmN1bGxGYWNlPT09VEhSRUUuQ3VsbEZhY2VGcm9udCYmZS5jdWxsRmFjZShlLkJBQ0spO2EucmVzZXRHTFN0YXRlKCl9fX07XG5USFJFRS5XZWJHTFN0YXRlPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IFVpbnQ4QXJyYXkoMTYpLGQ9bmV3IFVpbnQ4QXJyYXkoMTYpLGU9bnVsbCxmPW51bGwsZz1udWxsLGg9bnVsbCxrPW51bGwsbD1udWxsLHA9bnVsbCxuPW51bGwsbT1udWxsLHM9bnVsbCx0PW51bGwscj1udWxsLHY9bnVsbCx1PW51bGwseD1udWxsLHo9bnVsbDt0aGlzLmluaXRBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj1jLmxlbmd0aDthPGI7YSsrKWNbYV09MH07dGhpcy5lbmFibGVBdHRyaWJ1dGU9ZnVuY3Rpb24oYil7Y1tiXT0xOzA9PT1kW2JdJiYoYS5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShiKSxkW2JdPTEpfTt0aGlzLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsZT1kLmxlbmd0aDtiPGU7YisrKWRbYl0hPT1jW2JdJiYoYS5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoYiksZFtiXT0wKX07dGhpcy5zZXRCbGVuZGluZz1mdW5jdGlvbihjLGQsXG5tLG4scyxyLHQpe2MhPT1lJiYoYz09PVRIUkVFLk5vQmxlbmRpbmc/YS5kaXNhYmxlKGEuQkxFTkQpOmM9PT1USFJFRS5BZGRpdGl2ZUJsZW5kaW5nPyhhLmVuYWJsZShhLkJMRU5EKSxhLmJsZW5kRXF1YXRpb24oYS5GVU5DX0FERCksYS5ibGVuZEZ1bmMoYS5TUkNfQUxQSEEsYS5PTkUpKTpjPT09VEhSRUUuU3VidHJhY3RpdmVCbGVuZGluZz8oYS5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxhLk9ORV9NSU5VU19TUkNfQ09MT1IpKTpjPT09VEhSRUUuTXVsdGlwbHlCbGVuZGluZz8oYS5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uKGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jKGEuWkVSTyxhLlNSQ19DT0xPUikpOmM9PT1USFJFRS5DdXN0b21CbGVuZGluZz9hLmVuYWJsZShhLkJMRU5EKTooYS5lbmFibGUoYS5CTEVORCksYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxhLkZVTkNfQUREKSxcbmEuYmxlbmRGdW5jU2VwYXJhdGUoYS5TUkNfQUxQSEEsYS5PTkVfTUlOVVNfU1JDX0FMUEhBLGEuT05FLGEuT05FX01JTlVTX1NSQ19BTFBIQSkpLGU9Yyk7aWYoYz09PVRIUkVFLkN1c3RvbUJsZW5kaW5nKXtzPXN8fGQ7cj1yfHxtO3Q9dHx8bjtpZihkIT09Znx8cyE9PWspYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYihkKSxiKHMpKSxmPWQsaz1zO2lmKG0hPT1nfHxuIT09aHx8ciE9PWx8fHQhPT1wKWEuYmxlbmRGdW5jU2VwYXJhdGUoYihtKSxiKG4pLGIociksYih0KSksZz1tLGg9bixsPXIscD10fWVsc2UgcD1sPWs9aD1nPWY9bnVsbH07dGhpcy5zZXREZXB0aFRlc3Q9ZnVuY3Rpb24oYil7biE9PWImJihiP2EuZW5hYmxlKGEuREVQVEhfVEVTVCk6YS5kaXNhYmxlKGEuREVQVEhfVEVTVCksbj1iKX07dGhpcy5zZXREZXB0aFdyaXRlPWZ1bmN0aW9uKGIpe20hPT1iJiYoYS5kZXB0aE1hc2soYiksbT1iKX07dGhpcy5zZXRDb2xvcldyaXRlPWZ1bmN0aW9uKGIpe3MhPT1iJiYoYS5jb2xvck1hc2soYixcbmIsYixiKSxzPWIpfTt0aGlzLnNldERvdWJsZVNpZGVkPWZ1bmN0aW9uKGIpe3QhPT1iJiYoYj9hLmRpc2FibGUoYS5DVUxMX0ZBQ0UpOmEuZW5hYmxlKGEuQ1VMTF9GQUNFKSx0PWIpfTt0aGlzLnNldEZsaXBTaWRlZD1mdW5jdGlvbihiKXtyIT09YiYmKGI/YS5mcm9udEZhY2UoYS5DVyk6YS5mcm9udEZhY2UoYS5DQ1cpLHI9Yil9O3RoaXMuc2V0TGluZVdpZHRoPWZ1bmN0aW9uKGIpe2IhPT12JiYoYS5saW5lV2lkdGgoYiksdj1iKX07dGhpcy5zZXRQb2x5Z29uT2Zmc2V0PWZ1bmN0aW9uKGIsYyxkKXt1IT09YiYmKGI/YS5lbmFibGUoYS5QT0xZR09OX09GRlNFVF9GSUxMKTphLmRpc2FibGUoYS5QT0xZR09OX09GRlNFVF9GSUxMKSx1PWIpOyFifHx4PT09YyYmej09PWR8fChhLnBvbHlnb25PZmZzZXQoYyxkKSx4PWMsej1kKX07dGhpcy5yZXNldD1mdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8ZC5sZW5ndGg7YSsrKWRbYV09MDtyPXQ9cz1tPW49ZT1udWxsfX07XG5USFJFRS5MZW5zRmxhcmVQbHVnaW49ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnLGgsayxsLHAsbixtPWEuY29udGV4dCxzLHQscix2LHUseDt0aGlzLnJlbmRlcj1mdW5jdGlvbih6LHcsRixHKXtpZigwIT09Yi5sZW5ndGgpe3o9bmV3IFRIUkVFLlZlY3RvcjM7dmFyIHk9Ry9GLEk9LjUqRixCPS41KkcsQz0xNi9HLEU9bmV3IFRIUkVFLlZlY3RvcjIoQyp5LEMpLEw9bmV3IFRIUkVFLlZlY3RvcjMoMSwxLDApLE49bmV3IFRIUkVFLlZlY3RvcjIoMSwxKTtpZih2b2lkIDA9PT1yKXt2YXIgQz1uZXcgRmxvYXQzMkFycmF5KFstMSwtMSwwLDAsMSwtMSwxLDAsMSwxLDEsMSwtMSwxLDAsMV0pLEg9bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO3M9bS5jcmVhdGVCdWZmZXIoKTt0PW0uY3JlYXRlQnVmZmVyKCk7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLHMpO20uYnVmZmVyRGF0YShtLkFSUkFZX0JVRkZFUixDLG0uU1RBVElDX0RSQVcpO20uYmluZEJ1ZmZlcihtLkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxudCk7bS5idWZmZXJEYXRhKG0uRUxFTUVOVF9BUlJBWV9CVUZGRVIsSCxtLlNUQVRJQ19EUkFXKTt1PW0uY3JlYXRlVGV4dHVyZSgpO3g9bS5jcmVhdGVUZXh0dXJlKCk7bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQsdSk7bS50ZXhJbWFnZTJEKG0uVEVYVFVSRV8yRCwwLG0uUkdCLDE2LDE2LDAsbS5SR0IsbS5VTlNJR05FRF9CWVRFLG51bGwpO20udGV4UGFyYW1ldGVyaShtLlRFWFRVUkVfMkQsbS5URVhUVVJFX1dSQVBfUyxtLkNMQU1QX1RPX0VER0UpO20udGV4UGFyYW1ldGVyaShtLlRFWFRVUkVfMkQsbS5URVhUVVJFX1dSQVBfVCxtLkNMQU1QX1RPX0VER0UpO20udGV4UGFyYW1ldGVyaShtLlRFWFRVUkVfMkQsbS5URVhUVVJFX01BR19GSUxURVIsbS5ORUFSRVNUKTttLnRleFBhcmFtZXRlcmkobS5URVhUVVJFXzJELG0uVEVYVFVSRV9NSU5fRklMVEVSLG0uTkVBUkVTVCk7bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQseCk7bS50ZXhJbWFnZTJEKG0uVEVYVFVSRV8yRCwwLFxubS5SR0JBLDE2LDE2LDAsbS5SR0JBLG0uVU5TSUdORURfQllURSxudWxsKTttLnRleFBhcmFtZXRlcmkobS5URVhUVVJFXzJELG0uVEVYVFVSRV9XUkFQX1MsbS5DTEFNUF9UT19FREdFKTttLnRleFBhcmFtZXRlcmkobS5URVhUVVJFXzJELG0uVEVYVFVSRV9XUkFQX1QsbS5DTEFNUF9UT19FREdFKTttLnRleFBhcmFtZXRlcmkobS5URVhUVVJFXzJELG0uVEVYVFVSRV9NQUdfRklMVEVSLG0uTkVBUkVTVCk7bS50ZXhQYXJhbWV0ZXJpKG0uVEVYVFVSRV8yRCxtLlRFWFRVUkVfTUlOX0ZJTFRFUixtLk5FQVJFU1QpO3ZhciBDPSh2PTA8bS5nZXRQYXJhbWV0ZXIobS5NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMpKT97dmVydGV4U2hhZGVyOlwidW5pZm9ybSBsb3dwIGludCByZW5kZXJUeXBlO1xcbnVuaWZvcm0gdmVjMyBzY3JlZW5Qb3NpdGlvbjtcXG51bmlmb3JtIHZlYzIgc2NhbGU7XFxudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcXG51bmlmb3JtIHNhbXBsZXIyRCBvY2NsdXNpb25NYXA7XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IHZWaXNpYmlsaXR5O1xcbnZvaWQgbWFpbigpIHtcXG52VVYgPSB1djtcXG52ZWMyIHBvcyA9IHBvc2l0aW9uO1xcbmlmKCByZW5kZXJUeXBlID09IDIgKSB7XFxudmVjNCB2aXNpYmlsaXR5ID0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuMSwgMC4xICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuMSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC45LCAwLjEgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuOSwgMC41ICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuOSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjkgKSApO1xcbnZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuMSwgMC45ICkgKTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuNSApICk7XFxudmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjUgKSApO1xcbnZWaXNpYmlsaXR5ID0gICAgICAgIHZpc2liaWxpdHkuciAvIDkuMDtcXG52VmlzaWJpbGl0eSAqPSAxLjAgLSB2aXNpYmlsaXR5LmcgLyA5LjA7XFxudlZpc2liaWxpdHkgKj0gICAgICAgdmlzaWJpbGl0eS5iIC8gOS4wO1xcbnZWaXNpYmlsaXR5ICo9IDEuMCAtIHZpc2liaWxpdHkuYSAvIDkuMDtcXG5wb3MueCA9IGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggLSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcbnBvcy55ID0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxufVxcbmdsX1Bvc2l0aW9uID0gdmVjNCggKCBwb3MgKiBzY2FsZSArIHNjcmVlblBvc2l0aW9uLnh5ICkueHksIHNjcmVlblBvc2l0aW9uLnosIDEuMCApO1xcbn1cIixcbmZyYWdtZW50U2hhZGVyOlwidW5pZm9ybSBsb3dwIGludCByZW5kZXJUeXBlO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudmFyeWluZyBmbG9hdCB2VmlzaWJpbGl0eTtcXG52b2lkIG1haW4oKSB7XFxuaWYoIHJlbmRlclR5cGUgPT0gMCApIHtcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMS4wLCAwLjAgKTtcXG59IGVsc2UgaWYoIHJlbmRlclR5cGUgPT0gMSApIHtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxufSBlbHNlIHtcXG52ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxudGV4dHVyZS5hICo9IG9wYWNpdHkgKiB2VmlzaWJpbGl0eTtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbmdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxufVxcbn1cIn06e3ZlcnRleFNoYWRlcjpcInVuaWZvcm0gbG93cCBpbnQgcmVuZGVyVHlwZTtcXG51bmlmb3JtIHZlYzMgc2NyZWVuUG9zaXRpb247XFxudW5pZm9ybSB2ZWMyIHNjYWxlO1xcbnVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52b2lkIG1haW4oKSB7XFxudlVWID0gdXY7XFxudmVjMiBwb3MgPSBwb3NpdGlvbjtcXG5pZiggcmVuZGVyVHlwZSA9PSAyICkge1xcbnBvcy54ID0gY29zKCByb3RhdGlvbiApICogcG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIHBvc2l0aW9uLnk7XFxucG9zLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBwb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogcG9zaXRpb24ueTtcXG59XFxuZ2xfUG9zaXRpb24gPSB2ZWM0KCAoIHBvcyAqIHNjYWxlICsgc2NyZWVuUG9zaXRpb24ueHkgKS54eSwgc2NyZWVuUG9zaXRpb24ueiwgMS4wICk7XFxufVwiLFxuZnJhZ21lbnRTaGFkZXI6XCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG51bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbnVuaWZvcm0gc2FtcGxlcjJEIG9jY2x1c2lvbk1hcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSB2ZWMzIGNvbG9yO1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudm9pZCBtYWluKCkge1xcbmlmKCByZW5kZXJUeXBlID09IDAgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdmVjNCggdGV4dHVyZTJEKCBtYXAsIHZVViApLnJnYiwgMC4wICk7XFxufSBlbHNlIGlmKCByZW5kZXJUeXBlID09IDEgKSB7XFxuZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbn0gZWxzZSB7XFxuZmxvYXQgdmlzaWJpbGl0eSA9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuMSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjUsIDAuOSApICkuYTtcXG52aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuNSApICkuYTtcXG52aXNpYmlsaXR5ID0gKCAxLjAgLSB2aXNpYmlsaXR5IC8gNC4wICk7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbnRleHR1cmUuYSAqPSBvcGFjaXR5ICogdmlzaWJpbGl0eTtcXG5nbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcbmdsX0ZyYWdDb2xvci5yZ2IgKj0gY29sb3I7XFxufVxcbn1cIn0sXG5IPW0uY3JlYXRlUHJvZ3JhbSgpLE89bS5jcmVhdGVTaGFkZXIobS5GUkFHTUVOVF9TSEFERVIpLE09bS5jcmVhdGVTaGFkZXIobS5WRVJURVhfU0hBREVSKSxBPVwicHJlY2lzaW9uIFwiK2EuZ2V0UHJlY2lzaW9uKCkrXCIgZmxvYXQ7XFxuXCI7bS5zaGFkZXJTb3VyY2UoTyxBK0MuZnJhZ21lbnRTaGFkZXIpO20uc2hhZGVyU291cmNlKE0sQStDLnZlcnRleFNoYWRlcik7bS5jb21waWxlU2hhZGVyKE8pO20uY29tcGlsZVNoYWRlcihNKTttLmF0dGFjaFNoYWRlcihILE8pO20uYXR0YWNoU2hhZGVyKEgsTSk7bS5saW5rUHJvZ3JhbShIKTtyPUg7cD1tLmdldEF0dHJpYkxvY2F0aW9uKHIsXCJwb3NpdGlvblwiKTtuPW0uZ2V0QXR0cmliTG9jYXRpb24ocixcInV2XCIpO2M9bS5nZXRVbmlmb3JtTG9jYXRpb24ocixcInJlbmRlclR5cGVcIik7ZD1tLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwibWFwXCIpO2U9bS5nZXRVbmlmb3JtTG9jYXRpb24ocixcIm9jY2x1c2lvbk1hcFwiKTtmPW0uZ2V0VW5pZm9ybUxvY2F0aW9uKHIsXG5cIm9wYWNpdHlcIik7Zz1tLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwiY29sb3JcIik7aD1tLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwic2NhbGVcIik7az1tLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwicm90YXRpb25cIik7bD1tLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwic2NyZWVuUG9zaXRpb25cIil9bS51c2VQcm9ncmFtKHIpO20uZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocCk7bS5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShuKTttLnVuaWZvcm0xaShlLDApO20udW5pZm9ybTFpKGQsMSk7bS5iaW5kQnVmZmVyKG0uQVJSQVlfQlVGRkVSLHMpO20udmVydGV4QXR0cmliUG9pbnRlcihwLDIsbS5GTE9BVCwhMSwxNiwwKTttLnZlcnRleEF0dHJpYlBvaW50ZXIobiwyLG0uRkxPQVQsITEsMTYsOCk7bS5iaW5kQnVmZmVyKG0uRUxFTUVOVF9BUlJBWV9CVUZGRVIsdCk7bS5kaXNhYmxlKG0uQ1VMTF9GQUNFKTttLmRlcHRoTWFzayghMSk7SD0wO2ZvcihPPWIubGVuZ3RoO0g8TztIKyspaWYoQz0xNi9HLEUuc2V0KEMqXG55LEMpLE09YltIXSx6LnNldChNLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzEyXSxNLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzEzXSxNLm1hdHJpeFdvcmxkLmVsZW1lbnRzWzE0XSksei5hcHBseU1hdHJpeDQody5tYXRyaXhXb3JsZEludmVyc2UpLHouYXBwbHlQcm9qZWN0aW9uKHcucHJvamVjdGlvbk1hdHJpeCksTC5jb3B5KHopLE4ueD1MLngqSStJLE4ueT1MLnkqQitCLHZ8fDA8Ti54JiZOLng8RiYmMDxOLnkmJk4ueTxHKXttLmFjdGl2ZVRleHR1cmUobS5URVhUVVJFMSk7bS5iaW5kVGV4dHVyZShtLlRFWFRVUkVfMkQsdSk7bS5jb3B5VGV4SW1hZ2UyRChtLlRFWFRVUkVfMkQsMCxtLlJHQixOLngtOCxOLnktOCwxNiwxNiwwKTttLnVuaWZvcm0xaShjLDApO20udW5pZm9ybTJmKGgsRS54LEUueSk7bS51bmlmb3JtM2YobCxMLngsTC55LEwueik7bS5kaXNhYmxlKG0uQkxFTkQpO20uZW5hYmxlKG0uREVQVEhfVEVTVCk7bS5kcmF3RWxlbWVudHMobS5UUklBTkdMRVMsNixtLlVOU0lHTkVEX1NIT1JULFxuMCk7bS5hY3RpdmVUZXh0dXJlKG0uVEVYVFVSRTApO20uYmluZFRleHR1cmUobS5URVhUVVJFXzJELHgpO20uY29weVRleEltYWdlMkQobS5URVhUVVJFXzJELDAsbS5SR0JBLE4ueC04LE4ueS04LDE2LDE2LDApO20udW5pZm9ybTFpKGMsMSk7bS5kaXNhYmxlKG0uREVQVEhfVEVTVCk7bS5hY3RpdmVUZXh0dXJlKG0uVEVYVFVSRTEpO20uYmluZFRleHR1cmUobS5URVhUVVJFXzJELHUpO20uZHJhd0VsZW1lbnRzKG0uVFJJQU5HTEVTLDYsbS5VTlNJR05FRF9TSE9SVCwwKTtNLnBvc2l0aW9uU2NyZWVuLmNvcHkoTCk7TS5jdXN0b21VcGRhdGVDYWxsYmFjaz9NLmN1c3RvbVVwZGF0ZUNhbGxiYWNrKE0pOk0udXBkYXRlTGVuc0ZsYXJlcygpO20udW5pZm9ybTFpKGMsMik7bS5lbmFibGUobS5CTEVORCk7Zm9yKHZhciBBPTAsSj1NLmxlbnNGbGFyZXMubGVuZ3RoO0E8SjtBKyspe3ZhciBSPU0ubGVuc0ZsYXJlc1tBXTsuMDAxPFIub3BhY2l0eSYmLjAwMTxSLnNjYWxlJiYoTC54PVIueCxcbkwueT1SLnksTC56PVIueixDPVIuc2l6ZSpSLnNjYWxlL0csRS54PUMqeSxFLnk9QyxtLnVuaWZvcm0zZihsLEwueCxMLnksTC56KSxtLnVuaWZvcm0yZihoLEUueCxFLnkpLG0udW5pZm9ybTFmKGssUi5yb3RhdGlvbiksbS51bmlmb3JtMWYoZixSLm9wYWNpdHkpLG0udW5pZm9ybTNmKGcsUi5jb2xvci5yLFIuY29sb3IuZyxSLmNvbG9yLmIpLGEuc3RhdGUuc2V0QmxlbmRpbmcoUi5ibGVuZGluZyxSLmJsZW5kRXF1YXRpb24sUi5ibGVuZFNyYyxSLmJsZW5kRHN0KSxhLnNldFRleHR1cmUoUi50ZXh0dXJlLDEpLG0uZHJhd0VsZW1lbnRzKG0uVFJJQU5HTEVTLDYsbS5VTlNJR05FRF9TSE9SVCwwKSl9fW0uZW5hYmxlKG0uQ1VMTF9GQUNFKTttLmVuYWJsZShtLkRFUFRIX1RFU1QpO20uZGVwdGhNYXNrKCEwKTthLnJlc2V0R0xTdGF0ZSgpfX19O1xuVEhSRUUuU3ByaXRlUGx1Z2luPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoLGssbCxwLG4sbSxzLHQscix2LHUseDtmdW5jdGlvbiB6KGEsYil7cmV0dXJuIGEueiE9PWIuej9iLnotYS56OmIuaWQtYS5pZH12YXIgdz1hLmNvbnRleHQsRixHLHksSSxCPW5ldyBUSFJFRS5WZWN0b3IzLEM9bmV3IFRIUkVFLlF1YXRlcm5pb24sRT1uZXcgVEhSRUUuVmVjdG9yMzt0aGlzLnJlbmRlcj1mdW5jdGlvbihMLE4pe2lmKDAhPT1iLmxlbmd0aCl7aWYodm9pZCAwPT09eSl7dmFyIEg9bmV3IEZsb2F0MzJBcnJheShbLS41LC0uNSwwLDAsLjUsLS41LDEsMCwuNSwuNSwxLDEsLS41LC41LDAsMV0pLE89bmV3IFVpbnQxNkFycmF5KFswLDEsMiwwLDIsM10pO0Y9dy5jcmVhdGVCdWZmZXIoKTtHPXcuY3JlYXRlQnVmZmVyKCk7dy5iaW5kQnVmZmVyKHcuQVJSQVlfQlVGRkVSLEYpO3cuYnVmZmVyRGF0YSh3LkFSUkFZX0JVRkZFUixILHcuU1RBVElDX0RSQVcpO3cuYmluZEJ1ZmZlcih3LkVMRU1FTlRfQVJSQVlfQlVGRkVSLFxuRyk7dy5idWZmZXJEYXRhKHcuRUxFTUVOVF9BUlJBWV9CVUZGRVIsTyx3LlNUQVRJQ19EUkFXKTt2YXIgSD13LmNyZWF0ZVByb2dyYW0oKSxPPXcuY3JlYXRlU2hhZGVyKHcuVkVSVEVYX1NIQURFUiksTT13LmNyZWF0ZVNoYWRlcih3LkZSQUdNRU5UX1NIQURFUik7dy5zaGFkZXJTb3VyY2UoTyxbXCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcIixcInVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcXG51bmlmb3JtIHZlYzIgc2NhbGU7XFxudW5pZm9ybSB2ZWMyIHV2T2Zmc2V0O1xcbnVuaWZvcm0gdmVjMiB1dlNjYWxlO1xcbmF0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbnZhcnlpbmcgdmVjMiB2VVY7XFxudm9pZCBtYWluKCkge1xcbnZVViA9IHV2T2Zmc2V0ICsgdXYgKiB1dlNjYWxlO1xcbnZlYzIgYWxpZ25lZFBvc2l0aW9uID0gcG9zaXRpb24gKiBzY2FsZTtcXG52ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcXG5yb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxucm90YXRlZFBvc2l0aW9uLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcbnZlYzQgZmluYWxQb3NpdGlvbjtcXG5maW5hbFBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XFxuZmluYWxQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247XFxuZmluYWxQb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBmaW5hbFBvc2l0aW9uO1xcbmdsX1Bvc2l0aW9uID0gZmluYWxQb3NpdGlvbjtcXG59XCJdLmpvaW4oXCJcXG5cIikpO1xudy5zaGFkZXJTb3VyY2UoTSxbXCJwcmVjaXNpb24gXCIrYS5nZXRQcmVjaXNpb24oKStcIiBmbG9hdDtcIixcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gaW50IGZvZ1R5cGU7XFxudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxudW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxudW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52b2lkIG1haW4oKSB7XFxudmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcbmlmICggdGV4dHVyZS5hIDwgYWxwaGFUZXN0ICkgZGlzY2FyZDtcXG5nbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciAqIHRleHR1cmUueHl6LCB0ZXh0dXJlLmEgKiBvcGFjaXR5ICk7XFxuaWYgKCBmb2dUeXBlID4gMCApIHtcXG5mbG9hdCBkZXB0aCA9IGdsX0ZyYWdDb29yZC56IC8gZ2xfRnJhZ0Nvb3JkLnc7XFxuZmxvYXQgZm9nRmFjdG9yID0gMC4wO1xcbmlmICggZm9nVHlwZSA9PSAxICkge1xcbmZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZGVwdGggKTtcXG59IGVsc2Uge1xcbmNvbnN0IGZsb2F0IExPRzIgPSAxLjQ0MjY5NTtcXG5mbG9hdCBmb2dGYWN0b3IgPSBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZGVwdGggKiBkZXB0aCAqIExPRzIgKTtcXG5mb2dGYWN0b3IgPSAxLjAgLSBjbGFtcCggZm9nRmFjdG9yLCAwLjAsIDEuMCApO1xcbn1cXG5nbF9GcmFnQ29sb3IgPSBtaXgoIGdsX0ZyYWdDb2xvciwgdmVjNCggZm9nQ29sb3IsIGdsX0ZyYWdDb2xvci53ICksIGZvZ0ZhY3RvciApO1xcbn1cXG59XCJdLmpvaW4oXCJcXG5cIikpO1xudy5jb21waWxlU2hhZGVyKE8pO3cuY29tcGlsZVNoYWRlcihNKTt3LmF0dGFjaFNoYWRlcihILE8pO3cuYXR0YWNoU2hhZGVyKEgsTSk7dy5saW5rUHJvZ3JhbShIKTt5PUg7dT13LmdldEF0dHJpYkxvY2F0aW9uKHksXCJwb3NpdGlvblwiKTt4PXcuZ2V0QXR0cmliTG9jYXRpb24oeSxcInV2XCIpO2M9dy5nZXRVbmlmb3JtTG9jYXRpb24oeSxcInV2T2Zmc2V0XCIpO2Q9dy5nZXRVbmlmb3JtTG9jYXRpb24oeSxcInV2U2NhbGVcIik7ZT13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwicm90YXRpb25cIik7Zj13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwic2NhbGVcIik7Zz13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwiY29sb3JcIik7aD13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwibWFwXCIpO2s9dy5nZXRVbmlmb3JtTG9jYXRpb24oeSxcIm9wYWNpdHlcIik7bD13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwibW9kZWxWaWV3TWF0cml4XCIpO3A9dy5nZXRVbmlmb3JtTG9jYXRpb24oeSxcInByb2plY3Rpb25NYXRyaXhcIik7bj1cbncuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJmb2dUeXBlXCIpO209dy5nZXRVbmlmb3JtTG9jYXRpb24oeSxcImZvZ0RlbnNpdHlcIik7cz13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwiZm9nTmVhclwiKTt0PXcuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJmb2dGYXJcIik7cj13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwiZm9nQ29sb3JcIik7dj13LmdldFVuaWZvcm1Mb2NhdGlvbih5LFwiYWxwaGFUZXN0XCIpO0g9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtILndpZHRoPTg7SC5oZWlnaHQ9ODtPPUguZ2V0Q29udGV4dChcIjJkXCIpO08uZmlsbFN0eWxlPVwid2hpdGVcIjtPLmZpbGxSZWN0KDAsMCw4LDgpO0k9bmV3IFRIUkVFLlRleHR1cmUoSCk7SS5uZWVkc1VwZGF0ZT0hMH13LnVzZVByb2dyYW0oeSk7dy5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh1KTt3LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHgpO3cuZGlzYWJsZSh3LkNVTExfRkFDRSk7dy5lbmFibGUody5CTEVORCk7dy5iaW5kQnVmZmVyKHcuQVJSQVlfQlVGRkVSLFxuRik7dy52ZXJ0ZXhBdHRyaWJQb2ludGVyKHUsMix3LkZMT0FULCExLDE2LDApO3cudmVydGV4QXR0cmliUG9pbnRlcih4LDIsdy5GTE9BVCwhMSwxNiw4KTt3LmJpbmRCdWZmZXIody5FTEVNRU5UX0FSUkFZX0JVRkZFUixHKTt3LnVuaWZvcm1NYXRyaXg0ZnYocCwhMSxOLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHMpO3cuYWN0aXZlVGV4dHVyZSh3LlRFWFRVUkUwKTt3LnVuaWZvcm0xaShoLDApO089SD0wOyhNPUwuZm9nKT8ody51bmlmb3JtM2YocixNLmNvbG9yLnIsTS5jb2xvci5nLE0uY29sb3IuYiksTSBpbnN0YW5jZW9mIFRIUkVFLkZvZz8ody51bmlmb3JtMWYocyxNLm5lYXIpLHcudW5pZm9ybTFmKHQsTS5mYXIpLHcudW5pZm9ybTFpKG4sMSksTz1IPTEpOk0gaW5zdGFuY2VvZiBUSFJFRS5Gb2dFeHAyJiYody51bmlmb3JtMWYobSxNLmRlbnNpdHkpLHcudW5pZm9ybTFpKG4sMiksTz1IPTIpKToody51bmlmb3JtMWkobiwwKSxPPUg9MCk7Zm9yKHZhciBNPTAsQT1iLmxlbmd0aDtNPFxuQTtNKyspe3ZhciBKPWJbTV07Si5fbW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoTi5tYXRyaXhXb3JsZEludmVyc2UsSi5tYXRyaXhXb3JsZCk7Si56PS1KLl9tb2RlbFZpZXdNYXRyaXguZWxlbWVudHNbMTRdfWIuc29ydCh6KTtmb3IodmFyIFI9W10sTT0wLEE9Yi5sZW5ndGg7TTxBO00rKyl7dmFyIEo9YltNXSxLPUoubWF0ZXJpYWw7dy51bmlmb3JtMWYodixLLmFscGhhVGVzdCk7dy51bmlmb3JtTWF0cml4NGZ2KGwsITEsSi5fbW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzKTtKLm1hdHJpeFdvcmxkLmRlY29tcG9zZShCLEMsRSk7UlswXT1FLng7UlsxXT1FLnk7Sj0wO0wuZm9nJiZLLmZvZyYmKEo9Tyk7SCE9PUomJih3LnVuaWZvcm0xaShuLEopLEg9Sik7bnVsbCE9PUsubWFwPyh3LnVuaWZvcm0yZihjLEsubWFwLm9mZnNldC54LEsubWFwLm9mZnNldC55KSx3LnVuaWZvcm0yZihkLEsubWFwLnJlcGVhdC54LEsubWFwLnJlcGVhdC55KSk6KHcudW5pZm9ybTJmKGMsXG4wLDApLHcudW5pZm9ybTJmKGQsMSwxKSk7dy51bmlmb3JtMWYoayxLLm9wYWNpdHkpO3cudW5pZm9ybTNmKGcsSy5jb2xvci5yLEsuY29sb3IuZyxLLmNvbG9yLmIpO3cudW5pZm9ybTFmKGUsSy5yb3RhdGlvbik7dy51bmlmb3JtMmZ2KGYsUik7YS5zdGF0ZS5zZXRCbGVuZGluZyhLLmJsZW5kaW5nLEsuYmxlbmRFcXVhdGlvbixLLmJsZW5kU3JjLEsuYmxlbmREc3QpO2Euc3RhdGUuc2V0RGVwdGhUZXN0KEsuZGVwdGhUZXN0KTthLnN0YXRlLnNldERlcHRoV3JpdGUoSy5kZXB0aFdyaXRlKTtLLm1hcCYmSy5tYXAuaW1hZ2UmJksubWFwLmltYWdlLndpZHRoP2Euc2V0VGV4dHVyZShLLm1hcCwwKTphLnNldFRleHR1cmUoSSwwKTt3LmRyYXdFbGVtZW50cyh3LlRSSUFOR0xFUyw2LHcuVU5TSUdORURfU0hPUlQsMCl9dy5lbmFibGUody5DVUxMX0ZBQ0UpO2EucmVzZXRHTFN0YXRlKCl9fX07XG5USFJFRS5HZW9tZXRyeVV0aWxzPXttZXJnZTpmdW5jdGlvbihhLGIsYyl7VEhSRUUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC5cIik7dmFyIGQ7YiBpbnN0YW5jZW9mIFRIUkVFLk1lc2gmJihiLm1hdHJpeEF1dG9VcGRhdGUmJmIudXBkYXRlTWF0cml4KCksZD1iLm1hdHJpeCxiPWIuZ2VvbWV0cnkpO2EubWVyZ2UoYixkLGMpfSxjZW50ZXI6ZnVuY3Rpb24oYSl7VEhSRUUud2FybihcIlRIUkVFLkdlb21ldHJ5VXRpbHM6IC5jZW50ZXIoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5LmNlbnRlcigpIGluc3RlYWQuXCIpO3JldHVybiBhLmNlbnRlcigpfX07XG5USFJFRS5JbWFnZVV0aWxzPXtjcm9zc09yaWdpbjp2b2lkIDAsbG9hZFRleHR1cmU6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IFRIUkVFLkltYWdlTG9hZGVyO2UuY3Jvc3NPcmlnaW49dGhpcy5jcm9zc09yaWdpbjt2YXIgZj1uZXcgVEhSRUUuVGV4dHVyZSh2b2lkIDAsYik7ZS5sb2FkKGEsZnVuY3Rpb24oYSl7Zi5pbWFnZT1hO2YubmVlZHNVcGRhdGU9ITA7YyYmYyhmKX0sdm9pZCAwLGZ1bmN0aW9uKGEpe2QmJmQoYSl9KTtmLnNvdXJjZUZpbGU9YTtyZXR1cm4gZn0sbG9hZFRleHR1cmVDdWJlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW5ldyBUSFJFRS5JbWFnZUxvYWRlcjtlLmNyb3NzT3JpZ2luPXRoaXMuY3Jvc3NPcmlnaW47dmFyIGY9bmV3IFRIUkVFLkN1YmVUZXh0dXJlKFtdLGIpO2YuZmxpcFk9ITE7dmFyIGc9MDtiPWZ1bmN0aW9uKGIpe2UubG9hZChhW2JdLGZ1bmN0aW9uKGEpe2YuaW1hZ2VzW2JdPWE7Zys9MTs2PT09ZyYmKGYubmVlZHNVcGRhdGU9ITAsYyYmXG5jKGYpKX0sdm9pZCAwLGQpfTtmb3IodmFyIGg9MCxrPWEubGVuZ3RoO2g8azsrK2gpYihoKTtyZXR1cm4gZn0sbG9hZENvbXByZXNzZWRUZXh0dXJlOmZ1bmN0aW9uKCl7VEhSRUUuZXJyb3IoXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuXCIpfSxsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlOmZ1bmN0aW9uKCl7VEhSRUUuZXJyb3IoXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLlwiKX0sZ2V0Tm9ybWFsTWFwOmZ1bmN0aW9uKGEsYil7dmFyIGM9ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5zcXJ0KGFbMF0qYVswXSthWzFdKmFbMV0rYVsyXSphWzJdKTtyZXR1cm5bYVswXS9iLGFbMV0vYixhWzJdL2JdfTtifD0xO3ZhciBkPWEud2lkdGgsZT1hLmhlaWdodCxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG5mLndpZHRoPWQ7Zi5oZWlnaHQ9ZTt2YXIgZz1mLmdldENvbnRleHQoXCIyZFwiKTtnLmRyYXdJbWFnZShhLDAsMCk7Zm9yKHZhciBoPWcuZ2V0SW1hZ2VEYXRhKDAsMCxkLGUpLmRhdGEsaz1nLmNyZWF0ZUltYWdlRGF0YShkLGUpLGw9ay5kYXRhLHA9MDtwPGQ7cCsrKWZvcih2YXIgbj0wO248ZTtuKyspe3ZhciBtPTA+bi0xPzA6bi0xLHM9bisxPmUtMT9lLTE6bisxLHQ9MD5wLTE/MDpwLTEscj1wKzE+ZC0xP2QtMTpwKzEsdj1bXSx1PVswLDAsaFs0KihuKmQrcCldLzI1NSpiXTt2LnB1c2goWy0xLDAsaFs0KihuKmQrdCldLzI1NSpiXSk7di5wdXNoKFstMSwtMSxoWzQqKG0qZCt0KV0vMjU1KmJdKTt2LnB1c2goWzAsLTEsaFs0KihtKmQrcCldLzI1NSpiXSk7di5wdXNoKFsxLC0xLGhbNCoobSpkK3IpXS8yNTUqYl0pO3YucHVzaChbMSwwLGhbNCoobipkK3IpXS8yNTUqYl0pO3YucHVzaChbMSwxLGhbNCoocypkK3IpXS8yNTUqYl0pO3YucHVzaChbMCwxLGhbNCoocypkK3ApXS8yNTUqXG5iXSk7di5wdXNoKFstMSwxLGhbNCoocypkK3QpXS8yNTUqYl0pO209W107dD12Lmxlbmd0aDtmb3Iocz0wO3M8dDtzKyspe3ZhciByPXZbc10seD12WyhzKzEpJXRdLHI9W3JbMF0tdVswXSxyWzFdLXVbMV0sclsyXS11WzJdXSx4PVt4WzBdLXVbMF0seFsxXS11WzFdLHhbMl0tdVsyXV07bS5wdXNoKGMoW3JbMV0qeFsyXS1yWzJdKnhbMV0sclsyXSp4WzBdLXJbMF0qeFsyXSxyWzBdKnhbMV0tclsxXSp4WzBdXSkpfXY9WzAsMCwwXTtmb3Iocz0wO3M8bS5sZW5ndGg7cysrKXZbMF0rPW1bc11bMF0sdlsxXSs9bVtzXVsxXSx2WzJdKz1tW3NdWzJdO3ZbMF0vPW0ubGVuZ3RoO3ZbMV0vPW0ubGVuZ3RoO3ZbMl0vPW0ubGVuZ3RoO3U9NCoobipkK3ApO2xbdV09KHZbMF0rMSkvMioyNTV8MDtsW3UrMV09KHZbMV0rMSkvMioyNTV8MDtsW3UrMl09MjU1KnZbMl18MDtsW3UrM109MjU1fWcucHV0SW1hZ2VEYXRhKGssMCwwKTtyZXR1cm4gZn0sZ2VuZXJhdGVEYXRhVGV4dHVyZTpmdW5jdGlvbihhLFxuYixjKXt2YXIgZD1hKmIsZT1uZXcgVWludDhBcnJheSgzKmQpLGY9TWF0aC5mbG9vcigyNTUqYy5yKSxnPU1hdGguZmxvb3IoMjU1KmMuZyk7Yz1NYXRoLmZsb29yKDI1NSpjLmIpO2Zvcih2YXIgaD0wO2g8ZDtoKyspZVszKmhdPWYsZVszKmgrMV09ZyxlWzMqaCsyXT1jO2E9bmV3IFRIUkVFLkRhdGFUZXh0dXJlKGUsYSxiLFRIUkVFLlJHQkZvcm1hdCk7YS5uZWVkc1VwZGF0ZT0hMDtyZXR1cm4gYX19O1xuVEhSRUUuU2NlbmVVdGlscz17Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1uZXcgVEhSRUUuT2JqZWN0M0QsZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKyljLmFkZChuZXcgVEhSRUUuTWVzaChhLGJbZF0pKTtyZXR1cm4gY30sZGV0YWNoOmZ1bmN0aW9uKGEsYixjKXthLmFwcGx5TWF0cml4KGIubWF0cml4V29ybGQpO2IucmVtb3ZlKGEpO2MuYWRkKGEpfSxhdHRhY2g6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW5ldyBUSFJFRS5NYXRyaXg0O2QuZ2V0SW52ZXJzZShjLm1hdHJpeFdvcmxkKTthLmFwcGx5TWF0cml4KGQpO2IucmVtb3ZlKGEpO2MuYWRkKGEpfX07XG5USFJFRS5Gb250VXRpbHM9e2ZhY2VzOnt9LGZhY2U6XCJoZWx2ZXRpa2VyXCIsd2VpZ2h0Olwibm9ybWFsXCIsc3R5bGU6XCJub3JtYWxcIixzaXplOjE1MCxkaXZpc2lvbnM6MTAsZ2V0RmFjZTpmdW5jdGlvbigpe3RyeXtyZXR1cm4gdGhpcy5mYWNlc1t0aGlzLmZhY2VdW3RoaXMud2VpZ2h0XVt0aGlzLnN0eWxlXX1jYXRjaChhKXt0aHJvd1wiVGhlIGZvbnQgXCIrdGhpcy5mYWNlK1wiIHdpdGggXCIrdGhpcy53ZWlnaHQrXCIgd2VpZ2h0IGFuZCBcIit0aGlzLnN0eWxlK1wiIHN0eWxlIGlzIG1pc3NpbmcuXCI7fX0sbG9hZEZhY2U6ZnVuY3Rpb24oYSl7dmFyIGI9YS5mYW1pbHlOYW1lLnRvTG93ZXJDYXNlKCk7dGhpcy5mYWNlc1tiXT10aGlzLmZhY2VzW2JdfHx7fTt0aGlzLmZhY2VzW2JdW2EuY3NzRm9udFdlaWdodF09dGhpcy5mYWNlc1tiXVthLmNzc0ZvbnRXZWlnaHRdfHx7fTt0aGlzLmZhY2VzW2JdW2EuY3NzRm9udFdlaWdodF1bYS5jc3NGb250U3R5bGVdPWE7cmV0dXJuIHRoaXMuZmFjZXNbYl1bYS5jc3NGb250V2VpZ2h0XVthLmNzc0ZvbnRTdHlsZV09XG5hfSxkcmF3VGV4dDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmdldEZhY2UoKSxjPXRoaXMuc2l6ZS9iLnJlc29sdXRpb24sZD0wLGU9U3RyaW5nKGEpLnNwbGl0KFwiXCIpLGY9ZS5sZW5ndGgsZz1bXTtmb3IoYT0wO2E8ZjthKyspe3ZhciBoPW5ldyBUSFJFRS5QYXRoLGg9dGhpcy5leHRyYWN0R2x5cGhQb2ludHMoZVthXSxiLGMsZCxoKSxkPWQraC5vZmZzZXQ7Zy5wdXNoKGgucGF0aCl9cmV0dXJue3BhdGhzOmcsb2Zmc2V0OmQvMn19LGV4dHJhY3RHbHlwaFBvaW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVtdLGcsaCxrLGwscCxuLG0scyx0LHIsdix1PWIuZ2x5cGhzW2FdfHxiLmdseXBoc1tcIj9cIl07aWYodSl7aWYodS5vKWZvcihiPXUuX2NhY2hlZE91dGxpbmV8fCh1Ll9jYWNoZWRPdXRsaW5lPXUuby5zcGxpdChcIiBcIikpLGw9Yi5sZW5ndGgsYT0wO2E8bDspc3dpdGNoKGs9YlthKytdLGspe2Nhc2UgXCJtXCI6az1iW2ErK10qYytkO3A9YlthKytdKmM7ZS5tb3ZlVG8oayxwKTtcbmJyZWFrO2Nhc2UgXCJsXCI6az1iW2ErK10qYytkO3A9YlthKytdKmM7ZS5saW5lVG8oayxwKTticmVhaztjYXNlIFwicVwiOms9YlthKytdKmMrZDtwPWJbYSsrXSpjO3M9YlthKytdKmMrZDt0PWJbYSsrXSpjO2UucXVhZHJhdGljQ3VydmVUbyhzLHQsayxwKTtpZihnPWZbZi5sZW5ndGgtMV0pZm9yKG49Zy54LG09Zy55LGc9MSxoPXRoaXMuZGl2aXNpb25zO2c8PWg7ZysrKXt2YXIgeD1nL2g7VEhSRUUuU2hhcGUuVXRpbHMuYjIoeCxuLHMsayk7VEhSRUUuU2hhcGUuVXRpbHMuYjIoeCxtLHQscCl9YnJlYWs7Y2FzZSBcImJcIjppZihrPWJbYSsrXSpjK2QscD1iW2ErK10qYyxzPWJbYSsrXSpjK2QsdD1iW2ErK10qYyxyPWJbYSsrXSpjK2Qsdj1iW2ErK10qYyxlLmJlemllckN1cnZlVG8ocyx0LHIsdixrLHApLGc9ZltmLmxlbmd0aC0xXSlmb3Iobj1nLngsbT1nLnksZz0xLGg9dGhpcy5kaXZpc2lvbnM7Zzw9aDtnKyspeD1nL2gsVEhSRUUuU2hhcGUuVXRpbHMuYjMoeCxuLHMscixrKSxUSFJFRS5TaGFwZS5VdGlscy5iMyh4LFxubSx0LHYscCl9cmV0dXJue29mZnNldDp1LmhhKmMscGF0aDplfX19fTtcblRIUkVFLkZvbnRVdGlscy5nZW5lcmF0ZVNoYXBlcz1mdW5jdGlvbihhLGIpe2I9Ynx8e307dmFyIGM9dm9pZCAwIT09Yi5jdXJ2ZVNlZ21lbnRzP2IuY3VydmVTZWdtZW50czo0LGQ9dm9pZCAwIT09Yi5mb250P2IuZm9udDpcImhlbHZldGlrZXJcIixlPXZvaWQgMCE9PWIud2VpZ2h0P2Iud2VpZ2h0Olwibm9ybWFsXCIsZj12b2lkIDAhPT1iLnN0eWxlP2Iuc3R5bGU6XCJub3JtYWxcIjtUSFJFRS5Gb250VXRpbHMuc2l6ZT12b2lkIDAhPT1iLnNpemU/Yi5zaXplOjEwMDtUSFJFRS5Gb250VXRpbHMuZGl2aXNpb25zPWM7VEhSRUUuRm9udFV0aWxzLmZhY2U9ZDtUSFJFRS5Gb250VXRpbHMud2VpZ2h0PWU7VEhSRUUuRm9udFV0aWxzLnN0eWxlPWY7Yz1USFJFRS5Gb250VXRpbHMuZHJhd1RleHQoYSkucGF0aHM7ZD1bXTtlPTA7Zm9yKGY9Yy5sZW5ndGg7ZTxmO2UrKylBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShkLGNbZV0udG9TaGFwZXMoKSk7cmV0dXJuIGR9O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxlPTAsZj1iLTEsZz0wO2c8YjtmPWcrKyllKz1hW2ZdLngqYVtnXS55LWFbZ10ueCphW2ZdLnk7cmV0dXJuLjUqZX07YS5Ucmlhbmd1bGF0ZT1mdW5jdGlvbihhLGQpe3ZhciBlPWEubGVuZ3RoO2lmKDM+ZSlyZXR1cm4gbnVsbDt2YXIgZj1bXSxnPVtdLGg9W10sayxsLHA7aWYoMDxiKGEpKWZvcihsPTA7bDxlO2wrKylnW2xdPWw7ZWxzZSBmb3IobD0wO2w8ZTtsKyspZ1tsXT1lLTEtbDt2YXIgbj0yKmU7Zm9yKGw9ZS0xOzI8ZTspe2lmKDA+PW4tLSl7VEhSRUUud2FybihcIlRIUkVFLkZvbnRVdGlsczogV2FybmluZywgdW5hYmxlIHRvIHRyaWFuZ3VsYXRlIHBvbHlnb24hIGluIFRyaWFuZ3VsYXRlLnByb2Nlc3MoKVwiKTticmVha31rPWw7ZTw9ayYmKGs9MCk7bD1rKzE7ZTw9bCYmKGw9MCk7cD1sKzE7ZTw9cCYmKHA9MCk7dmFyIG07YTp7dmFyIHM9bT12b2lkIDAsdD12b2lkIDAscj12b2lkIDAsXG52PXZvaWQgMCx1PXZvaWQgMCx4PXZvaWQgMCx6PXZvaWQgMCx3PXZvaWQgMCxzPWFbZ1trXV0ueCx0PWFbZ1trXV0ueSxyPWFbZ1tsXV0ueCx2PWFbZ1tsXV0ueSx1PWFbZ1twXV0ueCx4PWFbZ1twXV0ueTtpZigxRS0xMD4oci1zKSooeC10KS0odi10KSoodS1zKSltPSExO2Vsc2V7dmFyIEY9dm9pZCAwLEc9dm9pZCAwLHk9dm9pZCAwLEk9dm9pZCAwLEI9dm9pZCAwLEM9dm9pZCAwLEU9dm9pZCAwLEw9dm9pZCAwLE49dm9pZCAwLEg9dm9pZCAwLE49TD1FPXc9ej12b2lkIDAsRj11LXIsRz14LXYseT1zLXUsST10LXgsQj1yLXMsQz12LXQ7Zm9yKG09MDttPGU7bSsrKWlmKHo9YVtnW21dXS54LHc9YVtnW21dXS55LCEoej09PXMmJnc9PT10fHx6PT09ciYmdz09PXZ8fHo9PT11JiZ3PT09eCkmJihFPXotcyxMPXctdCxOPXotcixIPXctdix6LT11LHctPXgsTj1GKkgtRypOLEU9QipMLUMqRSxMPXkqdy1JKnosLTFFLTEwPD1OJiYtMUUtMTA8PUwmJi0xRS0xMDw9RSkpe209ITE7YnJlYWsgYX1tPVxuITB9fWlmKG0pe2YucHVzaChbYVtnW2tdXSxhW2dbbF1dLGFbZ1twXV1dKTtoLnB1c2goW2dba10sZ1tsXSxnW3BdXSk7az1sO2ZvcihwPWwrMTtwPGU7aysrLHArKylnW2tdPWdbcF07ZS0tO249MiplfX1yZXR1cm4gZD9oOmZ9O2EuVHJpYW5ndWxhdGUuYXJlYT1iO3JldHVybiBhfSkoVEhSRUUuRm9udFV0aWxzKTtzZWxmLl90eXBlZmFjZV9qcz17ZmFjZXM6VEhSRUUuRm9udFV0aWxzLmZhY2VzLGxvYWRGYWNlOlRIUkVFLkZvbnRVdGlscy5sb2FkRmFjZX07VEhSRUUudHlwZWZhY2VfanM9c2VsZi5fdHlwZWZhY2VfanM7XG5USFJFRS5BdWRpbz1mdW5jdGlvbihhKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkF1ZGlvXCI7dGhpcy5jb250ZXh0PWEuY29udGV4dDt0aGlzLnNvdXJjZT10aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7dGhpcy5zb3VyY2Uub25lbmRlZD10aGlzLm9uRW5kZWQuYmluZCh0aGlzKTt0aGlzLmdhaW49dGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTt0aGlzLmdhaW4uY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO3RoaXMucGFubmVyPXRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTt0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuZ2Fpbik7dGhpcy5hdXRvcGxheT0hMTt0aGlzLnN0YXJ0VGltZT0wO3RoaXMuaXNQbGF5aW5nPSExfTtUSFJFRS5BdWRpby5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BdWRpbztcblRIUkVFLkF1ZGlvLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1uZXcgWE1MSHR0cFJlcXVlc3Q7Yy5vcGVuKFwiR0VUXCIsYSwhMCk7Yy5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Mub25sb2FkPWZ1bmN0aW9uKGEpe2IuY29udGV4dC5kZWNvZGVBdWRpb0RhdGEodGhpcy5yZXNwb25zZSxmdW5jdGlvbihhKXtiLnNvdXJjZS5idWZmZXI9YTtiLmF1dG9wbGF5JiZiLnBsYXkoKX0pfTtjLnNlbmQoKTtyZXR1cm4gdGhpc307XG5USFJFRS5BdWRpby5wcm90b3R5cGUucGxheT1mdW5jdGlvbigpe2lmKCEwPT09dGhpcy5pc1BsYXlpbmcpVEhSRUUud2FybihcIlRIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuXCIpO2Vsc2V7dmFyIGE9dGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO2EuYnVmZmVyPXRoaXMuc291cmNlLmJ1ZmZlcjthLmxvb3A9dGhpcy5zb3VyY2UubG9vcDthLm9uZW5kZWQ9dGhpcy5zb3VyY2Uub25lbmRlZDthLmNvbm5lY3QodGhpcy5wYW5uZXIpO2Euc3RhcnQoMCx0aGlzLnN0YXJ0VGltZSk7dGhpcy5pc1BsYXlpbmc9ITA7dGhpcy5zb3VyY2U9YX19O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3RoaXMuc291cmNlLnN0b3AoKTt0aGlzLnN0YXJ0VGltZT10aGlzLmNvbnRleHQuY3VycmVudFRpbWV9O1RIUkVFLkF1ZGlvLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5zb3VyY2Uuc3RvcCgpO3RoaXMuc3RhcnRUaW1lPTB9O1xuVEhSRUUuQXVkaW8ucHJvdG90eXBlLm9uRW5kZWQ9ZnVuY3Rpb24oKXt0aGlzLmlzUGxheWluZz0hMX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLnNldExvb3A9ZnVuY3Rpb24oYSl7dGhpcy5zb3VyY2UubG9vcD1hfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuc2V0UmVmRGlzdGFuY2U9ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIucmVmRGlzdGFuY2U9YX07VEhSRUUuQXVkaW8ucHJvdG90eXBlLnNldFJvbGxvZmZGYWN0b3I9ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIucm9sbG9mZkZhY3Rvcj1hfTtUSFJFRS5BdWRpby5wcm90b3R5cGUuc2V0Vm9sdW1lPWZ1bmN0aW9uKGEpe3RoaXMuZ2Fpbi5nYWluLnZhbHVlPWF9O1xuVEhSRUUuQXVkaW8ucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGIpe1RIUkVFLk9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsYik7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5wYW5uZXIuc2V0UG9zaXRpb24oYS54LGEueSxhLnopfX0oKTtUSFJFRS5BdWRpb0xpc3RlbmVyPWZ1bmN0aW9uKCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJBdWRpb0xpc3RlbmVyXCI7dGhpcy5jb250ZXh0PW5ldyAod2luZG93LkF1ZGlvQ29udGV4dHx8d2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCl9O1RIUkVFLkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtUSFJFRS5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BdWRpb0xpc3RlbmVyO1xuVEhSRUUuQXVkaW9MaXN0ZW5lci5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQ9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiPW5ldyBUSFJFRS5RdWF0ZXJuaW9uLGM9bmV3IFRIUkVFLlZlY3RvcjMsZD1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZSl7VEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxlKTtlPXRoaXMuY29udGV4dC5saXN0ZW5lcjt2YXIgZj10aGlzLnVwO3RoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKGEsYixjKTtkLnNldCgwLDAsLTEpLmFwcGx5UXVhdGVybmlvbihiKTtlLnNldFBvc2l0aW9uKGEueCxhLnksYS56KTtlLnNldE9yaWVudGF0aW9uKGQueCxkLnksZC56LGYueCxmLnksZi56KX19KCk7VEhSRUUuQ3VydmU9ZnVuY3Rpb24oKXt9O1xuVEhSRUUuQ3VydmUucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEpe1RIUkVFLndhcm4oXCJUSFJFRS5DdXJ2ZTogV2FybmluZywgZ2V0UG9pbnQoKSBub3QgaW1wbGVtZW50ZWQhXCIpO3JldHVybiBudWxsfTtUSFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnRBdD1mdW5jdGlvbihhKXthPXRoaXMuZ2V0VXRvVG1hcHBpbmcoYSk7cmV0dXJuIHRoaXMuZ2V0UG9pbnQoYSl9O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRQb2ludHM9ZnVuY3Rpb24oYSl7YXx8KGE9NSk7dmFyIGIsYz1bXTtmb3IoYj0wO2I8PWE7YisrKWMucHVzaCh0aGlzLmdldFBvaW50KGIvYSkpO3JldHVybiBjfTtUSFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0U3BhY2VkUG9pbnRzPWZ1bmN0aW9uKGEpe2F8fChhPTUpO3ZhciBiLGM9W107Zm9yKGI9MDtiPD1hO2IrKyljLnB1c2godGhpcy5nZXRQb2ludEF0KGIvYSkpO3JldHVybiBjfTtcblRIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRMZW5ndGg9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldExlbmd0aHMoKTtyZXR1cm4gYVthLmxlbmd0aC0xXX07VEhSRUUuQ3VydmUucHJvdG90eXBlLmdldExlbmd0aHM9ZnVuY3Rpb24oYSl7YXx8KGE9dGhpcy5fX2FyY0xlbmd0aERpdmlzaW9ucz90aGlzLl9fYXJjTGVuZ3RoRGl2aXNpb25zOjIwMCk7aWYodGhpcy5jYWNoZUFyY0xlbmd0aHMmJnRoaXMuY2FjaGVBcmNMZW5ndGhzLmxlbmd0aD09YSsxJiYhdGhpcy5uZWVkc1VwZGF0ZSlyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7dGhpcy5uZWVkc1VwZGF0ZT0hMTt2YXIgYj1bXSxjLGQ9dGhpcy5nZXRQb2ludCgwKSxlLGY9MDtiLnB1c2goMCk7Zm9yKGU9MTtlPD1hO2UrKyljPXRoaXMuZ2V0UG9pbnQoZS9hKSxmKz1jLmRpc3RhbmNlVG8oZCksYi5wdXNoKGYpLGQ9YztyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM9Yn07XG5USFJFRS5DdXJ2ZS5wcm90b3R5cGUudXBkYXRlQXJjTGVuZ3Rocz1mdW5jdGlvbigpe3RoaXMubmVlZHNVcGRhdGU9ITA7dGhpcy5nZXRMZW5ndGhzKCl9O1RIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRVdG9UbWFwcGluZz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0TGVuZ3RocygpLGQ9MCxlPWMubGVuZ3RoLGY7Zj1iP2I6YSpjW2UtMV07Zm9yKHZhciBnPTAsaD1lLTEsaztnPD1oOylpZihkPU1hdGguZmxvb3IoZysoaC1nKS8yKSxrPWNbZF0tZiwwPmspZz1kKzE7ZWxzZSBpZigwPGspaD1kLTE7ZWxzZXtoPWQ7YnJlYWt9ZD1oO2lmKGNbZF09PWYpcmV0dXJuIGQvKGUtMSk7Zz1jW2RdO3JldHVybiBjPShkKyhmLWcpLyhjW2QrMV0tZykpLyhlLTEpfTtUSFJFRS5DdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXt2YXIgYj1hLTFFLTQ7YSs9MUUtNDswPmImJihiPTApOzE8YSYmKGE9MSk7Yj10aGlzLmdldFBvaW50KGIpO3JldHVybiB0aGlzLmdldFBvaW50KGEpLmNsb25lKCkuc3ViKGIpLm5vcm1hbGl6ZSgpfTtcblRIUkVFLkN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50QXQ9ZnVuY3Rpb24oYSl7YT10aGlzLmdldFV0b1RtYXBwaW5nKGEpO3JldHVybiB0aGlzLmdldFRhbmdlbnQoYSl9O1xuVEhSRUUuQ3VydmUuVXRpbHM9e3RhbmdlbnRRdWFkcmF0aWNCZXppZXI6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIDIqKDEtYSkqKGMtYikrMiphKihkLWMpfSx0YW5nZW50Q3ViaWNCZXppZXI6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4tMypiKigxLWEpKigxLWEpKzMqYyooMS1hKSooMS1hKS02KmEqYyooMS1hKSs2KmEqZCooMS1hKS0zKmEqYSpkKzMqYSphKmV9LHRhbmdlbnRTcGxpbmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gNiphKmEtNiphKygzKmEqYS00KmErMSkrKC02KmEqYSs2KmEpKygzKmEqYS0yKmEpfSxpbnRlcnBvbGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9LjUqKGMtYSk7ZD0uNSooZC1iKTt2YXIgZj1lKmU7cmV0dXJuKDIqYi0yKmMrYStkKSplKmYrKC0zKmIrMypjLTIqYS1kKSpmK2EqZStifX07XG5USFJFRS5DdXJ2ZS5jcmVhdGU9ZnVuY3Rpb24oYSxiKXthLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkN1cnZlLnByb3RvdHlwZSk7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLnByb3RvdHlwZS5nZXRQb2ludD1iO3JldHVybiBhfTtUSFJFRS5DdXJ2ZVBhdGg9ZnVuY3Rpb24oKXt0aGlzLmN1cnZlcz1bXTt0aGlzLmJlbmRzPVtdO3RoaXMuYXV0b0Nsb3NlPSExfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkN1cnZlUGF0aDtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhKXt0aGlzLmN1cnZlcy5wdXNoKGEpfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNoZWNrQ29ubmVjdGlvbj1mdW5jdGlvbigpe307XG5USFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNsb3NlUGF0aD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY3VydmVzWzBdLmdldFBvaW50KDApLGI9dGhpcy5jdXJ2ZXNbdGhpcy5jdXJ2ZXMubGVuZ3RoLTFdLmdldFBvaW50KDEpO2EuZXF1YWxzKGIpfHx0aGlzLmN1cnZlcy5wdXNoKG5ldyBUSFJFRS5MaW5lQ3VydmUoYixhKSl9O1RIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9YSp0aGlzLmdldExlbmd0aCgpLGM9dGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtmb3IoYT0wO2E8Yy5sZW5ndGg7KXtpZihjW2FdPj1iKXJldHVybiBiPWNbYV0tYixhPXRoaXMuY3VydmVzW2FdLGI9MS1iL2EuZ2V0TGVuZ3RoKCksYS5nZXRQb2ludEF0KGIpO2ErK31yZXR1cm4gbnVsbH07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRMZW5ndGg9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldEN1cnZlTGVuZ3RocygpO3JldHVybiBhW2EubGVuZ3RoLTFdfTtcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuZ2V0Q3VydmVMZW5ndGhzPWZ1bmN0aW9uKCl7aWYodGhpcy5jYWNoZUxlbmd0aHMmJnRoaXMuY2FjaGVMZW5ndGhzLmxlbmd0aD09dGhpcy5jdXJ2ZXMubGVuZ3RoKXJldHVybiB0aGlzLmNhY2hlTGVuZ3Roczt2YXIgYT1bXSxiPTAsYyxkPXRoaXMuY3VydmVzLmxlbmd0aDtmb3IoYz0wO2M8ZDtjKyspYis9dGhpcy5jdXJ2ZXNbY10uZ2V0TGVuZ3RoKCksYS5wdXNoKGIpO3JldHVybiB0aGlzLmNhY2hlTGVuZ3Rocz1hfTtcblRIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3g9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldFBvaW50cygpLGIsYyxkLGUsZixnO2I9Yz1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7ZT1mPU51bWJlci5QT1NJVElWRV9JTkZJTklUWTt2YXIgaCxrLGwscCxuPWFbMF1pbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjM7cD1uP25ldyBUSFJFRS5WZWN0b3IzOm5ldyBUSFJFRS5WZWN0b3IyO2s9MDtmb3IobD1hLmxlbmd0aDtrPGw7aysrKWg9YVtrXSxoLng+Yj9iPWgueDpoLng8ZSYmKGU9aC54KSxoLnk+Yz9jPWgueTpoLnk8ZiYmKGY9aC55KSxuJiYoaC56PmQ/ZD1oLno6aC56PGcmJihnPWgueikpLHAuYWRkKGgpO2E9e21pblg6ZSxtaW5ZOmYsbWF4WDpiLG1heFk6Y307biYmKGEubWF4Wj1kLGEubWluWj1nKTtyZXR1cm4gYX07XG5USFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmNyZWF0ZVBvaW50c0dlb21ldHJ5PWZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRQb2ludHMoYSwhMCk7cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoYSl9O1RIUkVFLkN1cnZlUGF0aC5wcm90b3R5cGUuY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnk9ZnVuY3Rpb24oYSl7YT10aGlzLmdldFNwYWNlZFBvaW50cyhhLCEwKTtyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeShhKX07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5jcmVhdGVHZW9tZXRyeT1mdW5jdGlvbihhKXtmb3IodmFyIGI9bmV3IFRIUkVFLkdlb21ldHJ5LGM9MDtjPGEubGVuZ3RoO2MrKyliLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoYVtjXS54LGFbY10ueSxhW2NdLnp8fDApKTtyZXR1cm4gYn07VEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5hZGRXcmFwUGF0aD1mdW5jdGlvbihhKXt0aGlzLmJlbmRzLnB1c2goYSl9O1xuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRUcmFuc2Zvcm1lZFBvaW50cz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0UG9pbnRzKGEpLGQsZTtifHwoYj10aGlzLmJlbmRzKTtkPTA7Zm9yKGU9Yi5sZW5ndGg7ZDxlO2QrKyljPXRoaXMuZ2V0V3JhcFBvaW50cyhjLGJbZF0pO3JldHVybiBjfTtUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlLmdldFRyYW5zZm9ybWVkU3BhY2VkUG9pbnRzPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5nZXRTcGFjZWRQb2ludHMoYSksZCxlO2J8fChiPXRoaXMuYmVuZHMpO2Q9MDtmb3IoZT1iLmxlbmd0aDtkPGU7ZCsrKWM9dGhpcy5nZXRXcmFwUG9pbnRzKGMsYltkXSk7cmV0dXJuIGN9O1xuVEhSRUUuQ3VydmVQYXRoLnByb3RvdHlwZS5nZXRXcmFwUG9pbnRzPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5nZXRCb3VuZGluZ0JveCgpLGQsZSxmLGcsaCxrO2Q9MDtmb3IoZT1hLmxlbmd0aDtkPGU7ZCsrKWY9YVtkXSxnPWYueCxoPWYueSxrPWcvYy5tYXhYLGs9Yi5nZXRVdG9UbWFwcGluZyhrLGcpLGc9Yi5nZXRQb2ludChrKSxrPWIuZ2V0VGFuZ2VudChrKSxrLnNldCgtay55LGsueCkubXVsdGlwbHlTY2FsYXIoaCksZi54PWcueCtrLngsZi55PWcueStrLnk7cmV0dXJuIGF9O1RIUkVFLkd5cm9zY29wZT1mdW5jdGlvbigpe1RIUkVFLk9iamVjdDNELmNhbGwodGhpcyl9O1RIUkVFLkd5cm9zY29wZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkd5cm9zY29wZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3lyb3Njb3BlO1xuVEhSRUUuR3lyb3Njb3BlLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlF1YXRlcm5pb24sYz1uZXcgVEhSRUUuVmVjdG9yMyxkPW5ldyBUSFJFRS5WZWN0b3IzLGU9bmV3IFRIUkVFLlF1YXRlcm5pb24sZj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oZyl7dGhpcy5tYXRyaXhBdXRvVXBkYXRlJiZ0aGlzLnVwZGF0ZU1hdHJpeCgpO2lmKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZXx8Zyl0aGlzLnBhcmVudD8odGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLHRoaXMubWF0cml4KSx0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZShkLGUsZiksdGhpcy5tYXRyaXguZGVjb21wb3NlKGEsYixjKSx0aGlzLm1hdHJpeFdvcmxkLmNvbXBvc2UoZCxiLGYpKTp0aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpLHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZT1cbiExLGc9ITA7Zm9yKHZhciBoPTAsaz10aGlzLmNoaWxkcmVuLmxlbmd0aDtoPGs7aCsrKXRoaXMuY2hpbGRyZW5baF0udXBkYXRlTWF0cml4V29ybGQoZyl9fSgpO1RIUkVFLlBhdGg9ZnVuY3Rpb24oYSl7VEhSRUUuQ3VydmVQYXRoLmNhbGwodGhpcyk7dGhpcy5hY3Rpb25zPVtdO2EmJnRoaXMuZnJvbVBvaW50cyhhKX07VEhSRUUuUGF0aC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZVBhdGgucHJvdG90eXBlKTtUSFJFRS5QYXRoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QYXRoO1RIUkVFLlBhdGhBY3Rpb25zPXtNT1ZFX1RPOlwibW92ZVRvXCIsTElORV9UTzpcImxpbmVUb1wiLFFVQURSQVRJQ19DVVJWRV9UTzpcInF1YWRyYXRpY0N1cnZlVG9cIixCRVpJRVJfQ1VSVkVfVE86XCJiZXppZXJDdXJ2ZVRvXCIsQ1NQTElORV9USFJVOlwic3BsaW5lVGhydVwiLEFSQzpcImFyY1wiLEVMTElQU0U6XCJlbGxpcHNlXCJ9O1xuVEhSRUUuUGF0aC5wcm90b3R5cGUuZnJvbVBvaW50cz1mdW5jdGlvbihhKXt0aGlzLm1vdmVUbyhhWzBdLngsYVswXS55KTtmb3IodmFyIGI9MSxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5saW5lVG8oYVtiXS54LGFbYl0ueSl9O1RIUkVFLlBhdGgucHJvdG90eXBlLm1vdmVUbz1mdW5jdGlvbihhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5NT1ZFX1RPLGFyZ3M6Y30pfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLmxpbmVUbz1mdW5jdGlvbihhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksZD10aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aC0xXS5hcmdzLGQ9bmV3IFRIUkVFLkxpbmVDdXJ2ZShuZXcgVEhSRUUuVmVjdG9yMihkW2QubGVuZ3RoLTJdLGRbZC5sZW5ndGgtMV0pLG5ldyBUSFJFRS5WZWN0b3IyKGEsYikpO3RoaXMuY3VydmVzLnB1c2goZCk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5MSU5FX1RPLGFyZ3M6Y30pfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLnF1YWRyYXRpY0N1cnZlVG89ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxmPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsZj1uZXcgVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUobmV3IFRIUkVFLlZlY3RvcjIoZltmLmxlbmd0aC0yXSxmW2YubGVuZ3RoLTFdKSxuZXcgVEhSRUUuVmVjdG9yMihhLGIpLG5ldyBUSFJFRS5WZWN0b3IyKGMsZCkpO3RoaXMuY3VydmVzLnB1c2goZik7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5RVUFEUkFUSUNfQ1VSVkVfVE8sYXJnczplfSl9O1xuVEhSRUUuUGF0aC5wcm90b3R5cGUuYmV6aWVyQ3VydmVUbz1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxoPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsaD1uZXcgVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZShuZXcgVEhSRUUuVmVjdG9yMihoW2gubGVuZ3RoLTJdLGhbaC5sZW5ndGgtMV0pLG5ldyBUSFJFRS5WZWN0b3IyKGEsYiksbmV3IFRIUkVFLlZlY3RvcjIoYyxkKSxuZXcgVEhSRUUuVmVjdG9yMihlLGYpKTt0aGlzLmN1cnZlcy5wdXNoKGgpO3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246VEhSRUUuUGF0aEFjdGlvbnMuQkVaSUVSX0NVUlZFX1RPLGFyZ3M6Z30pfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLnNwbGluZVRocnU9ZnVuY3Rpb24oYSl7dmFyIGI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxjPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3MsYz1bbmV3IFRIUkVFLlZlY3RvcjIoY1tjLmxlbmd0aC0yXSxjW2MubGVuZ3RoLTFdKV07QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYyxhKTtjPW5ldyBUSFJFRS5TcGxpbmVDdXJ2ZShjKTt0aGlzLmN1cnZlcy5wdXNoKGMpO3RoaXMuYWN0aW9ucy5wdXNoKHthY3Rpb246VEhSRUUuUGF0aEFjdGlvbnMuQ1NQTElORV9USFJVLGFyZ3M6Yn0pfTtUSFJFRS5QYXRoLnByb3RvdHlwZS5hcmM9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnPXRoaXMuYWN0aW9uc1t0aGlzLmFjdGlvbnMubGVuZ3RoLTFdLmFyZ3M7dGhpcy5hYnNhcmMoYStnW2cubGVuZ3RoLTJdLGIrZ1tnLmxlbmd0aC0xXSxjLGQsZSxmKX07XG5USFJFRS5QYXRoLnByb3RvdHlwZS5hYnNhcmM9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuYWJzZWxsaXBzZShhLGIsYyxjLGQsZSxmKX07VEhSRUUuUGF0aC5wcm90b3R5cGUuZWxsaXBzZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD10aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aC0xXS5hcmdzO3RoaXMuYWJzZWxsaXBzZShhK2hbaC5sZW5ndGgtMl0sYitoW2gubGVuZ3RoLTFdLGMsZCxlLGYsZyl9O1RIUkVFLlBhdGgucHJvdG90eXBlLmFic2VsbGlwc2U9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7dmFyIGg9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxrPW5ldyBUSFJFRS5FbGxpcHNlQ3VydmUoYSxiLGMsZCxlLGYsZyk7dGhpcy5jdXJ2ZXMucHVzaChrKTtrPWsuZ2V0UG9pbnQoMSk7aC5wdXNoKGsueCk7aC5wdXNoKGsueSk7dGhpcy5hY3Rpb25zLnB1c2goe2FjdGlvbjpUSFJFRS5QYXRoQWN0aW9ucy5FTExJUFNFLGFyZ3M6aH0pfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLmdldFNwYWNlZFBvaW50cz1mdW5jdGlvbihhLGIpe2F8fChhPTQwKTtmb3IodmFyIGM9W10sZD0wO2Q8YTtkKyspYy5wdXNoKHRoaXMuZ2V0UG9pbnQoZC9hKSk7cmV0dXJuIGN9O1xuVEhSRUUuUGF0aC5wcm90b3R5cGUuZ2V0UG9pbnRzPWZ1bmN0aW9uKGEsYil7aWYodGhpcy51c2VTcGFjZWRQb2ludHMpcmV0dXJuIFRIUkVFLmxvZyhcInRhdGFcIiksdGhpcy5nZXRTcGFjZWRQb2ludHMoYSxiKTthPWF8fDEyO3ZhciBjPVtdLGQsZSxmLGcsaCxrLGwscCxuLG0scyx0LHI7ZD0wO2ZvcihlPXRoaXMuYWN0aW9ucy5sZW5ndGg7ZDxlO2QrKylzd2l0Y2goZj10aGlzLmFjdGlvbnNbZF0sZz1mLmFjdGlvbixmPWYuYXJncyxnKXtjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLk1PVkVfVE86Yy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGZbMF0sZlsxXSkpO2JyZWFrO2Nhc2UgVEhSRUUuUGF0aEFjdGlvbnMuTElORV9UTzpjLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoZlswXSxmWzFdKSk7YnJlYWs7Y2FzZSBUSFJFRS5QYXRoQWN0aW9ucy5RVUFEUkFUSUNfQ1VSVkVfVE86aD1mWzJdO2s9ZlszXTtuPWZbMF07bT1mWzFdOzA8Yy5sZW5ndGg/KGc9Y1tjLmxlbmd0aC0xXSxzPWcueCxcbnQ9Zy55KTooZz10aGlzLmFjdGlvbnNbZC0xXS5hcmdzLHM9Z1tnLmxlbmd0aC0yXSx0PWdbZy5sZW5ndGgtMV0pO2ZvcihmPTE7Zjw9YTtmKyspcj1mL2EsZz1USFJFRS5TaGFwZS5VdGlscy5iMihyLHMsbixoKSxyPVRIUkVFLlNoYXBlLlV0aWxzLmIyKHIsdCxtLGspLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHIpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkJFWklFUl9DVVJWRV9UTzpoPWZbNF07az1mWzVdO249ZlswXTttPWZbMV07bD1mWzJdO3A9ZlszXTswPGMubGVuZ3RoPyhnPWNbYy5sZW5ndGgtMV0scz1nLngsdD1nLnkpOihnPXRoaXMuYWN0aW9uc1tkLTFdLmFyZ3Mscz1nW2cubGVuZ3RoLTJdLHQ9Z1tnLmxlbmd0aC0xXSk7Zm9yKGY9MTtmPD1hO2YrKylyPWYvYSxnPVRIUkVFLlNoYXBlLlV0aWxzLmIzKHIscyxuLGwsaCkscj1USFJFRS5TaGFwZS5VdGlscy5iMyhyLHQsbSxwLGspLGMucHVzaChuZXcgVEhSRUUuVmVjdG9yMihnLHIpKTticmVhaztjYXNlIFRIUkVFLlBhdGhBY3Rpb25zLkNTUExJTkVfVEhSVTpnPVxudGhpcy5hY3Rpb25zW2QtMV0uYXJncztyPVtuZXcgVEhSRUUuVmVjdG9yMihnW2cubGVuZ3RoLTJdLGdbZy5sZW5ndGgtMV0pXTtnPWEqZlswXS5sZW5ndGg7cj1yLmNvbmNhdChmWzBdKTtyPW5ldyBUSFJFRS5TcGxpbmVDdXJ2ZShyKTtmb3IoZj0xO2Y8PWc7ZisrKWMucHVzaChyLmdldFBvaW50QXQoZi9nKSk7YnJlYWs7Y2FzZSBUSFJFRS5QYXRoQWN0aW9ucy5BUkM6aD1mWzBdO2s9ZlsxXTttPWZbMl07bD1mWzNdO2c9Zls0XTtuPSEhZls1XTtzPWctbDt0PTIqYTtmb3IoZj0xO2Y8PXQ7ZisrKXI9Zi90LG58fChyPTEtcikscj1sK3IqcyxnPWgrbSpNYXRoLmNvcyhyKSxyPWsrbSpNYXRoLnNpbihyKSxjLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoZyxyKSk7YnJlYWs7Y2FzZSBUSFJFRS5QYXRoQWN0aW9ucy5FTExJUFNFOmZvcihoPWZbMF0saz1mWzFdLG09ZlsyXSxwPWZbM10sbD1mWzRdLGc9Zls1XSxuPSEhZls2XSxzPWctbCx0PTIqYSxmPTE7Zjw9dDtmKyspcj1mL3Qsbnx8XG4ocj0xLXIpLHI9bCtyKnMsZz1oK20qTWF0aC5jb3Mocikscj1rK3AqTWF0aC5zaW4ociksYy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKGcscikpfWQ9Y1tjLmxlbmd0aC0xXTsxRS0xMD5NYXRoLmFicyhkLngtY1swXS54KSYmMUUtMTA+TWF0aC5hYnMoZC55LWNbMF0ueSkmJmMuc3BsaWNlKGMubGVuZ3RoLTEsMSk7YiYmYy5wdXNoKGNbMF0pO3JldHVybiBjfTtcblRIUkVFLlBhdGgucHJvdG90eXBlLnRvU2hhcGVzPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YVtjXSxmPW5ldyBUSFJFRS5TaGFwZTtmLmFjdGlvbnM9ZS5hY3Rpb25zO2YuY3VydmVzPWUuY3VydmVzO2IucHVzaChmKX1yZXR1cm4gYn1mdW5jdGlvbiBkKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGQ9ITEsZT1jLTEsZj0wO2Y8YztlPWYrKyl7dmFyIGc9YltlXSxoPWJbZl0sbT1oLngtZy54LGs9aC55LWcueTtpZigxRS0xMDxNYXRoLmFicyhrKSl7aWYoMD5rJiYoZz1iW2ZdLG09LW0saD1iW2VdLGs9LWspLCEoYS55PGcueXx8YS55PmgueSkpaWYoYS55PT1nLnkpe2lmKGEueD09Zy54KXJldHVybiEwfWVsc2V7ZT1rKihhLngtZy54KS1tKihhLnktZy55KTtpZigwPT1lKXJldHVybiEwOzA+ZXx8KGQ9IWQpfX1lbHNlIGlmKGEueT09Zy55JiYoaC54PD1hLngmJmEueDw9Zy54fHxnLng8PWEueCYmYS54PD1cbmgueCkpcmV0dXJuITB9cmV0dXJuIGR9dmFyIGU9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZj1bXSxnPW5ldyBUSFJFRS5QYXRoO2I9MDtmb3IoYz1hLmxlbmd0aDtiPGM7YisrKWQ9YVtiXSxlPWQuYXJncyxkPWQuYWN0aW9uLGQ9PVRIUkVFLlBhdGhBY3Rpb25zLk1PVkVfVE8mJjAhPWcuYWN0aW9ucy5sZW5ndGgmJihmLnB1c2goZyksZz1uZXcgVEhSRUUuUGF0aCksZ1tkXS5hcHBseShnLGUpOzAhPWcuYWN0aW9ucy5sZW5ndGgmJmYucHVzaChnKTtyZXR1cm4gZn0odGhpcy5hY3Rpb25zKTtpZigwPT1lLmxlbmd0aClyZXR1cm5bXTtpZighMD09PWIpcmV0dXJuIGMoZSk7dmFyIGYsZyxoLGs9W107aWYoMT09ZS5sZW5ndGgpcmV0dXJuIGc9ZVswXSxoPW5ldyBUSFJFRS5TaGFwZSxoLmFjdGlvbnM9Zy5hY3Rpb25zLGguY3VydmVzPWcuY3VydmVzLGsucHVzaChoKSxrO3ZhciBsPSFUSFJFRS5TaGFwZS5VdGlscy5pc0Nsb2NrV2lzZShlWzBdLmdldFBvaW50cygpKSxsPWE/IWw6bDtcbmg9W107dmFyIHA9W10sbj1bXSxtPTAscztwW21dPXZvaWQgMDtuW21dPVtdO3ZhciB0LHI7dD0wO2ZvcihyPWUubGVuZ3RoO3Q8cjt0KyspZz1lW3RdLHM9Zy5nZXRQb2ludHMoKSxmPVRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKHMpLChmPWE/IWY6Zik/KCFsJiZwW21dJiZtKysscFttXT17czpuZXcgVEhSRUUuU2hhcGUscDpzfSxwW21dLnMuYWN0aW9ucz1nLmFjdGlvbnMscFttXS5zLmN1cnZlcz1nLmN1cnZlcyxsJiZtKyssblttXT1bXSk6blttXS5wdXNoKHtoOmcscDpzWzBdfSk7aWYoIXBbMF0pcmV0dXJuIGMoZSk7aWYoMTxwLmxlbmd0aCl7dD0hMTtyPVtdO2c9MDtmb3IoZT1wLmxlbmd0aDtnPGU7ZysrKWhbZ109W107Zz0wO2ZvcihlPXAubGVuZ3RoO2c8ZTtnKyspZm9yKGY9bltnXSxsPTA7bDxmLmxlbmd0aDtsKyspe209ZltsXTtzPSEwO2Zvcih2YXIgdj0wO3Y8cC5sZW5ndGg7disrKWQobS5wLHBbdl0ucCkmJihnIT12JiZyLnB1c2goe2Zyb21zOmcsdG9zOnYsXG5ob2xlOmx9KSxzPyhzPSExLGhbdl0ucHVzaChtKSk6dD0hMCk7cyYmaFtnXS5wdXNoKG0pfTA8ci5sZW5ndGgmJih0fHwobj1oKSl9dD0wO2ZvcihyPXAubGVuZ3RoO3Q8cjt0KyspZm9yKGg9cFt0XS5zLGsucHVzaChoKSxnPW5bdF0sZT0wLGY9Zy5sZW5ndGg7ZTxmO2UrKyloLmhvbGVzLnB1c2goZ1tlXS5oKTtyZXR1cm4ga307VEhSRUUuU2hhcGU9ZnVuY3Rpb24oKXtUSFJFRS5QYXRoLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt0aGlzLmhvbGVzPVtdfTtUSFJFRS5TaGFwZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5QYXRoLnByb3RvdHlwZSk7VEhSRUUuU2hhcGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYXBlO1RIUkVFLlNoYXBlLnByb3RvdHlwZS5leHRydWRlPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgVEhSRUUuRXh0cnVkZUdlb21ldHJ5KHRoaXMsYSl9O1xuVEhSRUUuU2hhcGUucHJvdG90eXBlLm1ha2VHZW9tZXRyeT1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IFRIUkVFLlNoYXBlR2VvbWV0cnkodGhpcyxhKX07VEhSRUUuU2hhcGUucHJvdG90eXBlLmdldFBvaW50c0hvbGVzPWZ1bmN0aW9uKGEpe3ZhciBiLGM9dGhpcy5ob2xlcy5sZW5ndGgsZD1bXTtmb3IoYj0wO2I8YztiKyspZFtiXT10aGlzLmhvbGVzW2JdLmdldFRyYW5zZm9ybWVkUG9pbnRzKGEsdGhpcy5iZW5kcyk7cmV0dXJuIGR9O1RIUkVFLlNoYXBlLnByb3RvdHlwZS5nZXRTcGFjZWRQb2ludHNIb2xlcz1mdW5jdGlvbihhKXt2YXIgYixjPXRoaXMuaG9sZXMubGVuZ3RoLGQ9W107Zm9yKGI9MDtiPGM7YisrKWRbYl09dGhpcy5ob2xlc1tiXS5nZXRUcmFuc2Zvcm1lZFNwYWNlZFBvaW50cyhhLHRoaXMuYmVuZHMpO3JldHVybiBkfTtcblRIUkVFLlNoYXBlLnByb3RvdHlwZS5leHRyYWN0QWxsUG9pbnRzPWZ1bmN0aW9uKGEpe3JldHVybntzaGFwZTp0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnRzKGEpLGhvbGVzOnRoaXMuZ2V0UG9pbnRzSG9sZXMoYSl9fTtUSFJFRS5TaGFwZS5wcm90b3R5cGUuZXh0cmFjdFBvaW50cz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy51c2VTcGFjZWRQb2ludHM/dGhpcy5leHRyYWN0QWxsU3BhY2VkUG9pbnRzKGEpOnRoaXMuZXh0cmFjdEFsbFBvaW50cyhhKX07VEhSRUUuU2hhcGUucHJvdG90eXBlLmV4dHJhY3RBbGxTcGFjZWRQb2ludHM9ZnVuY3Rpb24oYSl7cmV0dXJue3NoYXBlOnRoaXMuZ2V0VHJhbnNmb3JtZWRTcGFjZWRQb2ludHMoYSksaG9sZXM6dGhpcy5nZXRTcGFjZWRQb2ludHNIb2xlcyhhKX19O1xuVEhSRUUuU2hhcGUuVXRpbHM9e3RyaWFuZ3VsYXRlU2hhcGU6ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYixjKXtyZXR1cm4gYS54IT1iLng/YS54PGIueD9hLng8PWMueCYmYy54PD1iLng6Yi54PD1jLngmJmMueDw9YS54OmEueTxiLnk/YS55PD1jLnkmJmMueTw9Yi55OmIueTw9Yy55JiZjLnk8PWEueX1mdW5jdGlvbiBkKGEsYixkLGUsZil7dmFyIGc9Yi54LWEueCxoPWIueS1hLnksaz1lLngtZC54LGw9ZS55LWQueSxwPWEueC1kLngsbj1hLnktZC55LHk9aCprLWcqbCxJPWgqcC1nKm47aWYoMUUtMTA8TWF0aC5hYnMoeSkpe2lmKDA8eSl7aWYoMD5JfHxJPnkpcmV0dXJuW107az1sKnAtaypuO2lmKDA+a3x8az55KXJldHVybltdfWVsc2V7aWYoMDxJfHxJPHkpcmV0dXJuW107az1sKnAtaypuO2lmKDA8a3x8azx5KXJldHVybltdfWlmKDA9PWspcmV0dXJuIWZ8fDAhPUkmJkkhPXk/W2FdOltdO2lmKGs9PXkpcmV0dXJuIWZ8fDAhPUkmJkkhPXk/W2JdOltdO2lmKDA9PUkpcmV0dXJuW2RdO1xuaWYoST09eSlyZXR1cm5bZV07Zj1rL3k7cmV0dXJuW3t4OmEueCtmKmcseTphLnkrZipofV19aWYoMCE9SXx8bCpwIT1rKm4pcmV0dXJuW107aD0wPT1nJiYwPT1oO2s9MD09ayYmMD09bDtpZihoJiZrKXJldHVybiBhLnghPWQueHx8YS55IT1kLnk/W106W2FdO2lmKGgpcmV0dXJuIGMoZCxlLGEpP1thXTpbXTtpZihrKXJldHVybiBjKGEsYixkKT9bZF06W107MCE9Zz8oYS54PGIueD8oZz1hLGs9YS54LGg9YixhPWIueCk6KGc9YixrPWIueCxoPWEsYT1hLngpLGQueDxlLng/KGI9ZCx5PWQueCxsPWUsZD1lLngpOihiPWUseT1lLngsbD1kLGQ9ZC54KSk6KGEueTxiLnk/KGc9YSxrPWEueSxoPWIsYT1iLnkpOihnPWIsaz1iLnksaD1hLGE9YS55KSxkLnk8ZS55PyhiPWQseT1kLnksbD1lLGQ9ZS55KTooYj1lLHk9ZS55LGw9ZCxkPWQueSkpO3JldHVybiBrPD15P2E8eT9bXTphPT15P2Y/W106W2JdOmE8PWQ/W2IsaF06W2IsbF06az5kP1tdOms9PWQ/Zj9bXTpbZ106YTw9ZD9bZyxoXTpcbltnLGxdfWZ1bmN0aW9uIGUoYSxiLGMsZCl7dmFyIGU9Yi54LWEueCxmPWIueS1hLnk7Yj1jLngtYS54O2M9Yy55LWEueTt2YXIgZz1kLngtYS54O2Q9ZC55LWEueTthPWUqYy1mKmI7ZT1lKmQtZipnO3JldHVybiAxRS0xMDxNYXRoLmFicyhhKT8oYj1nKmMtZCpiLDA8YT8wPD1lJiYwPD1iOjA8PWV8fDA8PWIpOjA8ZX12YXIgZixnLGgsayxsLHA9e307aD1hLmNvbmNhdCgpO2Y9MDtmb3IoZz1iLmxlbmd0aDtmPGc7ZisrKUFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGgsYltmXSk7Zj0wO2ZvcihnPWgubGVuZ3RoO2Y8ZztmKyspbD1oW2ZdLngrXCI6XCIraFtmXS55LHZvaWQgMCE9PXBbbF0mJlRIUkVFLndhcm4oXCJUSFJFRS5TaGFwZTogRHVwbGljYXRlIHBvaW50XCIsbCkscFtsXT1mO2Y9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYil7dmFyIGQ9aC5sZW5ndGgtMSxmPWEtMTswPmYmJihmPWQpO3ZhciBnPWErMTtnPmQmJihnPTApO2Q9ZShoW2FdLGhbZl0saFtnXSxrW2JdKTtcbmlmKCFkKXJldHVybiExO2Q9ay5sZW5ndGgtMTtmPWItMTswPmYmJihmPWQpO2c9YisxO2c+ZCYmKGc9MCk7cmV0dXJuKGQ9ZShrW2JdLGtbZl0sa1tnXSxoW2FdKSk/ITA6ITF9ZnVuY3Rpb24gZihhLGIpe3ZhciBjLGU7Zm9yKGM9MDtjPGgubGVuZ3RoO2MrKylpZihlPWMrMSxlJT1oLmxlbmd0aCxlPWQoYSxiLGhbY10saFtlXSwhMCksMDxlLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBnKGEsYyl7dmFyIGUsZixoLGs7Zm9yKGU9MDtlPGwubGVuZ3RoO2UrKylmb3IoZj1iW2xbZV1dLGg9MDtoPGYubGVuZ3RoO2grKylpZihrPWgrMSxrJT1mLmxlbmd0aCxrPWQoYSxjLGZbaF0sZltrXSwhMCksMDxrLmxlbmd0aClyZXR1cm4hMDtyZXR1cm4hMX12YXIgaD1hLmNvbmNhdCgpLGssbD1bXSxwLG4sRyx5LEksQj1bXSxDLEUsTCxOPTA7Zm9yKHA9Yi5sZW5ndGg7TjxwO04rKylsLnB1c2goTik7Qz0wO2Zvcih2YXIgSD0yKmwubGVuZ3RoOzA8bC5sZW5ndGg7KXtILS07aWYoMD5cbkgpe1RIUkVFLmxvZyhcIkluZmluaXRlIExvb3AhIEhvbGVzIGxlZnQ6XCIrbC5sZW5ndGgrXCIsIFByb2JhYmx5IEhvbGUgb3V0c2lkZSBTaGFwZSFcIik7YnJlYWt9Zm9yKG49QztuPGgubGVuZ3RoO24rKyl7Rz1oW25dO3A9LTE7Zm9yKE49MDtOPGwubGVuZ3RoO04rKylpZih5PWxbTl0sST1HLngrXCI6XCIrRy55K1wiOlwiK3ksdm9pZCAwPT09QltJXSl7az1iW3ldO2ZvcihFPTA7RTxrLmxlbmd0aDtFKyspaWYoeT1rW0VdLGMobixFKSYmIWYoRyx5KSYmIWcoRyx5KSl7cD1FO2wuc3BsaWNlKE4sMSk7Qz1oLnNsaWNlKDAsbisxKTt5PWguc2xpY2Uobik7RT1rLnNsaWNlKHApO0w9ay5zbGljZSgwLHArMSk7aD1DLmNvbmNhdChFKS5jb25jYXQoTCkuY29uY2F0KHkpO0M9bjticmVha31pZigwPD1wKWJyZWFrO0JbSV09ITB9aWYoMDw9cClicmVha319cmV0dXJuIGh9KGEsYik7dmFyIG49VEhSRUUuRm9udFV0aWxzLlRyaWFuZ3VsYXRlKGYsITEpO2Y9MDtmb3IoZz1uLmxlbmd0aDtmPGc7ZisrKWZvcihrPVxubltmXSxoPTA7Mz5oO2grKylsPWtbaF0ueCtcIjpcIitrW2hdLnksbD1wW2xdLHZvaWQgMCE9PWwmJihrW2hdPWwpO3JldHVybiBuLmNvbmNhdCgpfSxpc0Nsb2NrV2lzZTpmdW5jdGlvbihhKXtyZXR1cm4gMD5USFJFRS5Gb250VXRpbHMuVHJpYW5ndWxhdGUuYXJlYShhKX0sYjJwMDpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gYypjKmJ9LGIycDE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMiooMS1hKSphKmJ9LGIycDI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSphKmJ9LGIyOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmIycDAoYSxiKSt0aGlzLmIycDEoYSxjKSt0aGlzLmIycDIoYSxkKX0sYjNwMDpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gYypjKmMqYn0sYjNwMTpmdW5jdGlvbihhLGIpe3ZhciBjPTEtYTtyZXR1cm4gMypjKmMqYSpifSxiM3AyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDMqKDEtYSkqYSphKmJ9LGIzcDM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSpcbmEqYSpifSxiMzpmdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiB0aGlzLmIzcDAoYSxiKSt0aGlzLmIzcDEoYSxjKSt0aGlzLmIzcDIoYSxkKSt0aGlzLmIzcDMoYSxlKX19O1RIUkVFLkxpbmVDdXJ2ZT1mdW5jdGlvbihhLGIpe3RoaXMudjE9YTt0aGlzLnYyPWJ9O1RIUkVFLkxpbmVDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1RIUkVFLkxpbmVDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGluZUN1cnZlO1RIUkVFLkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy52Mi5jbG9uZSgpLnN1Yih0aGlzLnYxKTtiLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLnYxKTtyZXR1cm4gYn07VEhSRUUuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludEF0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldFBvaW50KGEpfTtcblRIUkVFLkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy52Mi5jbG9uZSgpLnN1Yih0aGlzLnYxKS5ub3JtYWxpemUoKX07VEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmU9ZnVuY3Rpb24oYSxiLGMpe3RoaXMudjA9YTt0aGlzLnYxPWI7dGhpcy52Mj1jfTtUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1RIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTtcblRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMjtiLng9VEhSRUUuU2hhcGUuVXRpbHMuYjIoYSx0aGlzLnYwLngsdGhpcy52MS54LHRoaXMudjIueCk7Yi55PVRIUkVFLlNoYXBlLlV0aWxzLmIyKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnkpO3JldHVybiBifTtUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMjtiLng9VEhSRUUuQ3VydmUuVXRpbHMudGFuZ2VudFF1YWRyYXRpY0JlemllcihhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54KTtiLnk9VEhSRUUuQ3VydmUuVXRpbHMudGFuZ2VudFF1YWRyYXRpY0JlemllcihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KTtyZXR1cm4gYi5ub3JtYWxpemUoKX07XG5USFJFRS5DdWJpY0JlemllckN1cnZlPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMudjA9YTt0aGlzLnYxPWI7dGhpcy52Mj1jO3RoaXMudjM9ZH07VEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1RIUkVFLkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkN1YmljQmV6aWVyQ3VydmU7VEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI7Yj1USFJFRS5TaGFwZS5VdGlscy5iMyhhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54LHRoaXMudjMueCk7YT1USFJFRS5TaGFwZS5VdGlscy5iMyhhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55LHRoaXMudjMueSk7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKGIsYSl9O1xuVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0VGFuZ2VudD1mdW5jdGlvbihhKXt2YXIgYjtiPVRIUkVFLkN1cnZlLlV0aWxzLnRhbmdlbnRDdWJpY0JlemllcihhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54LHRoaXMudjMueCk7YT1USFJFRS5DdXJ2ZS5VdGlscy50YW5nZW50Q3ViaWNCZXppZXIoYSx0aGlzLnYwLnksdGhpcy52MS55LHRoaXMudjIueSx0aGlzLnYzLnkpO2I9bmV3IFRIUkVFLlZlY3RvcjIoYixhKTtiLm5vcm1hbGl6ZSgpO3JldHVybiBifTtUSFJFRS5TcGxpbmVDdXJ2ZT1mdW5jdGlvbihhKXt0aGlzLnBvaW50cz12b2lkIDA9PWE/W106YX07VEhSRUUuU3BsaW5lQ3VydmUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQ3VydmUucHJvdG90eXBlKTtUSFJFRS5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3BsaW5lQ3VydmU7XG5USFJFRS5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5wb2ludHM7YSo9Yi5sZW5ndGgtMTt2YXIgYz1NYXRoLmZsb29yKGEpO2EtPWM7dmFyIGQ9YlswPT1jP2M6Yy0xXSxlPWJbY10sZj1iW2M+Yi5sZW5ndGgtMj9iLmxlbmd0aC0xOmMrMV0sYj1iW2M+Yi5sZW5ndGgtMz9iLmxlbmd0aC0xOmMrMl0sYz1uZXcgVEhSRUUuVmVjdG9yMjtjLng9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC54LGUueCxmLngsYi54LGEpO2MueT1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLnksZS55LGYueSxiLnksYSk7cmV0dXJuIGN9O1RIUkVFLkVsbGlwc2VDdXJ2ZT1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt0aGlzLmFYPWE7dGhpcy5hWT1iO3RoaXMueFJhZGl1cz1jO3RoaXMueVJhZGl1cz1kO3RoaXMuYVN0YXJ0QW5nbGU9ZTt0aGlzLmFFbmRBbmdsZT1mO3RoaXMuYUNsb2Nrd2lzZT1nfTtcblRIUkVFLkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5DdXJ2ZS5wcm90b3R5cGUpO1RIUkVFLkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRWxsaXBzZUN1cnZlO1RIUkVFLkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5hRW5kQW5nbGUtdGhpcy5hU3RhcnRBbmdsZTswPmImJihiKz0yKk1hdGguUEkpO2I+MipNYXRoLlBJJiYoYi09MipNYXRoLlBJKTthPSEwPT09dGhpcy5hQ2xvY2t3aXNlP3RoaXMuYUVuZEFuZ2xlKygxLWEpKigyKk1hdGguUEktYik6dGhpcy5hU3RhcnRBbmdsZSthKmI7Yj1uZXcgVEhSRUUuVmVjdG9yMjtiLng9dGhpcy5hWCt0aGlzLnhSYWRpdXMqTWF0aC5jb3MoYSk7Yi55PXRoaXMuYVkrdGhpcy55UmFkaXVzKk1hdGguc2luKGEpO3JldHVybiBifTtcblRIUkVFLkFyY0N1cnZlPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtUSFJFRS5FbGxpcHNlQ3VydmUuY2FsbCh0aGlzLGEsYixjLGMsZCxlLGYpfTtUSFJFRS5BcmNDdXJ2ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5FbGxpcHNlQ3VydmUucHJvdG90eXBlKTtUSFJFRS5BcmNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQXJjQ3VydmU7VEhSRUUuTGluZUN1cnZlMz1USFJFRS5DdXJ2ZS5jcmVhdGUoZnVuY3Rpb24oYSxiKXt0aGlzLnYxPWE7dGhpcy52Mj1ifSxmdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMztiLnN1YlZlY3RvcnModGhpcy52Mix0aGlzLnYxKTtiLm11bHRpcGx5U2NhbGFyKGEpO2IuYWRkKHRoaXMudjEpO3JldHVybiBifSk7XG5USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEsYixjKXt0aGlzLnYwPWE7dGhpcy52MT1iO3RoaXMudjI9Y30sZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7Yi54PVRIUkVFLlNoYXBlLlV0aWxzLmIyKGEsdGhpcy52MC54LHRoaXMudjEueCx0aGlzLnYyLngpO2IueT1USFJFRS5TaGFwZS5VdGlscy5iMihhLHRoaXMudjAueSx0aGlzLnYxLnksdGhpcy52Mi55KTtiLno9VEhSRUUuU2hhcGUuVXRpbHMuYjIoYSx0aGlzLnYwLnosdGhpcy52MS56LHRoaXMudjIueik7cmV0dXJuIGJ9KTtcblRIUkVFLkN1YmljQmV6aWVyQ3VydmUzPVRIUkVFLkN1cnZlLmNyZWF0ZShmdW5jdGlvbihhLGIsYyxkKXt0aGlzLnYwPWE7dGhpcy52MT1iO3RoaXMudjI9Yzt0aGlzLnYzPWR9LGZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRS5WZWN0b3IzO2IueD1USFJFRS5TaGFwZS5VdGlscy5iMyhhLHRoaXMudjAueCx0aGlzLnYxLngsdGhpcy52Mi54LHRoaXMudjMueCk7Yi55PVRIUkVFLlNoYXBlLlV0aWxzLmIzKGEsdGhpcy52MC55LHRoaXMudjEueSx0aGlzLnYyLnksdGhpcy52My55KTtiLno9VEhSRUUuU2hhcGUuVXRpbHMuYjMoYSx0aGlzLnYwLnosdGhpcy52MS56LHRoaXMudjIueix0aGlzLnYzLnopO3JldHVybiBifSk7XG5USFJFRS5TcGxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEpe3RoaXMucG9pbnRzPXZvaWQgMD09YT9bXTphfSxmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBvaW50czthKj1iLmxlbmd0aC0xO3ZhciBjPU1hdGguZmxvb3IoYSk7YS09Yzt2YXIgZD1iWzA9PWM/YzpjLTFdLGU9YltjXSxmPWJbYz5iLmxlbmd0aC0yP2IubGVuZ3RoLTE6YysxXSxiPWJbYz5iLmxlbmd0aC0zP2IubGVuZ3RoLTE6YysyXSxjPW5ldyBUSFJFRS5WZWN0b3IzO2MueD1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLngsZS54LGYueCxiLngsYSk7Yy55PVRIUkVFLkN1cnZlLlV0aWxzLmludGVycG9sYXRlKGQueSxlLnksZi55LGIueSxhKTtjLno9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC56LGUueixmLnosYi56LGEpO3JldHVybiBjfSk7XG5USFJFRS5DbG9zZWRTcGxpbmVDdXJ2ZTM9VEhSRUUuQ3VydmUuY3JlYXRlKGZ1bmN0aW9uKGEpe3RoaXMucG9pbnRzPXZvaWQgMD09YT9bXTphfSxmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBvaW50czthKj1iLmxlbmd0aC0wO3ZhciBjPU1hdGguZmxvb3IoYSk7YS09Yzt2YXIgYz1jKygwPGM/MDooTWF0aC5mbG9vcihNYXRoLmFicyhjKS9iLmxlbmd0aCkrMSkqYi5sZW5ndGgpLGQ9YlsoYy0xKSViLmxlbmd0aF0sZT1iW2MlYi5sZW5ndGhdLGY9YlsoYysxKSViLmxlbmd0aF0sYj1iWyhjKzIpJWIubGVuZ3RoXSxjPW5ldyBUSFJFRS5WZWN0b3IzO2MueD1USFJFRS5DdXJ2ZS5VdGlscy5pbnRlcnBvbGF0ZShkLngsZS54LGYueCxiLngsYSk7Yy55PVRIUkVFLkN1cnZlLlV0aWxzLmludGVycG9sYXRlKGQueSxlLnksZi55LGIueSxhKTtjLno9VEhSRUUuQ3VydmUuVXRpbHMuaW50ZXJwb2xhdGUoZC56LGUueixmLnosYi56LGEpO3JldHVybiBjfSk7XG5USFJFRS5BbmltYXRpb25IYW5kbGVyPXtMSU5FQVI6MCxDQVRNVUxMUk9NOjEsQ0FUTVVMTFJPTV9GT1JXQVJEOjIsYWRkOmZ1bmN0aW9uKCl7VEhSRUUud2FybihcIlRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuYWRkKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC5cIil9LGdldDpmdW5jdGlvbigpe1RIUkVFLndhcm4oXCJUSFJFRS5BbmltYXRpb25IYW5kbGVyLmdldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXCIpfSxyZW1vdmU6ZnVuY3Rpb24oKXtUSFJFRS53YXJuKFwiVEhSRUUuQW5pbWF0aW9uSGFuZGxlci5yZW1vdmUoKSBoYXMgYmVlbiBkZXByZWNhdGVkLlwiKX0sYW5pbWF0aW9uczpbXSxpbml0OmZ1bmN0aW9uKGEpe2lmKCEwPT09YS5pbml0aWFsaXplZClyZXR1cm4gYTtmb3IodmFyIGI9MDtiPGEuaGllcmFyY2h5Lmxlbmd0aDtiKyspe2Zvcih2YXIgYz0wO2M8YS5oaWVyYXJjaHlbYl0ua2V5cy5sZW5ndGg7YysrKWlmKDA+YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS50aW1lJiYoYS5oaWVyYXJjaHlbYl0ua2V5c1tjXS50aW1lPVxuMCksdm9pZCAwIT09YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5yb3QmJiEoYS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5yb3QgaW5zdGFuY2VvZiBUSFJFRS5RdWF0ZXJuaW9uKSl7dmFyIGQ9YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5yb3Q7YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5yb3Q9KG5ldyBUSFJFRS5RdWF0ZXJuaW9uKS5mcm9tQXJyYXkoZCl9aWYoYS5oaWVyYXJjaHlbYl0ua2V5cy5sZW5ndGgmJnZvaWQgMCE9PWEuaGllcmFyY2h5W2JdLmtleXNbMF0ubW9ycGhUYXJnZXRzKXtkPXt9O2ZvcihjPTA7YzxhLmhpZXJhcmNoeVtiXS5rZXlzLmxlbmd0aDtjKyspZm9yKHZhciBlPTA7ZTxhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ZSsrKXt2YXIgZj1hLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0c1tlXTtkW2ZdPS0xfWEuaGllcmFyY2h5W2JdLnVzZWRNb3JwaFRhcmdldHM9ZDtmb3IoYz0wO2M8YS5oaWVyYXJjaHlbYl0ua2V5cy5sZW5ndGg7YysrKXt2YXIgZz1cbnt9O2ZvcihmIGluIGQpe2ZvcihlPTA7ZTxhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ZSsrKWlmKGEuaGllcmFyY2h5W2JdLmtleXNbY10ubW9ycGhUYXJnZXRzW2VdPT09Zil7Z1tmXT1hLmhpZXJhcmNoeVtiXS5rZXlzW2NdLm1vcnBoVGFyZ2V0c0luZmx1ZW5jZXNbZV07YnJlYWt9ZT09PWEuaGllcmFyY2h5W2JdLmtleXNbY10ubW9ycGhUYXJnZXRzLmxlbmd0aCYmKGdbZl09MCl9YS5oaWVyYXJjaHlbYl0ua2V5c1tjXS5tb3JwaFRhcmdldHNJbmZsdWVuY2VzPWd9fWZvcihjPTE7YzxhLmhpZXJhcmNoeVtiXS5rZXlzLmxlbmd0aDtjKyspYS5oaWVyYXJjaHlbYl0ua2V5c1tjXS50aW1lPT09YS5oaWVyYXJjaHlbYl0ua2V5c1tjLTFdLnRpbWUmJihhLmhpZXJhcmNoeVtiXS5rZXlzLnNwbGljZShjLDEpLGMtLSk7Zm9yKGM9MDtjPGEuaGllcmFyY2h5W2JdLmtleXMubGVuZ3RoO2MrKylhLmhpZXJhcmNoeVtiXS5rZXlzW2NdLmluZGV4PWN9YS5pbml0aWFsaXplZD1cbiEwO3JldHVybiBhfSxwYXJzZTpmdW5jdGlvbihhKXt2YXIgYj1mdW5jdGlvbihhLGMpe2MucHVzaChhKTtmb3IodmFyIGQ9MDtkPGEuY2hpbGRyZW4ubGVuZ3RoO2QrKyliKGEuY2hpbGRyZW5bZF0sYyl9LGM9W107aWYoYSBpbnN0YW5jZW9mIFRIUkVFLlNraW5uZWRNZXNoKWZvcih2YXIgZD0wO2Q8YS5za2VsZXRvbi5ib25lcy5sZW5ndGg7ZCsrKWMucHVzaChhLnNrZWxldG9uLmJvbmVzW2RdKTtlbHNlIGIoYSxjKTtyZXR1cm4gY30scGxheTpmdW5jdGlvbihhKXstMT09PXRoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGEpJiZ0aGlzLmFuaW1hdGlvbnMucHVzaChhKX0sc3RvcDpmdW5jdGlvbihhKXthPXRoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGEpOy0xIT09YSYmdGhpcy5hbmltYXRpb25zLnNwbGljZShhLDEpfSx1cGRhdGU6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7Yjx0aGlzLmFuaW1hdGlvbnMubGVuZ3RoO2IrKyl0aGlzLmFuaW1hdGlvbnNbYl0ucmVzZXRCbGVuZFdlaWdodHMoKTtcbmZvcihiPTA7Yjx0aGlzLmFuaW1hdGlvbnMubGVuZ3RoO2IrKyl0aGlzLmFuaW1hdGlvbnNbYl0udXBkYXRlKGEpfX07VEhSRUUuQW5pbWF0aW9uPWZ1bmN0aW9uKGEsYil7dGhpcy5yb290PWE7dGhpcy5kYXRhPVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuaW5pdChiKTt0aGlzLmhpZXJhcmNoeT1USFJFRS5BbmltYXRpb25IYW5kbGVyLnBhcnNlKGEpO3RoaXMuY3VycmVudFRpbWU9MDt0aGlzLnRpbWVTY2FsZT0xO3RoaXMuaXNQbGF5aW5nPSExO3RoaXMubG9vcD0hMDt0aGlzLndlaWdodD0wO3RoaXMuaW50ZXJwb2xhdGlvblR5cGU9VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5MSU5FQVJ9O1xuVEhSRUUuQW5pbWF0aW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuQW5pbWF0aW9uLGtleVR5cGVzOltcInBvc1wiLFwicm90XCIsXCJzY2xcIl0scGxheTpmdW5jdGlvbihhLGIpe3RoaXMuY3VycmVudFRpbWU9dm9pZCAwIT09YT9hOjA7dGhpcy53ZWlnaHQ9dm9pZCAwIT09Yj9iOjE7dGhpcy5pc1BsYXlpbmc9ITA7dGhpcy5yZXNldCgpO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIucGxheSh0aGlzKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuaXNQbGF5aW5nPSExO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIuc3RvcCh0aGlzKX0scmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPXRoaXMuaGllcmFyY2h5Lmxlbmd0aDthPGI7YSsrKXt2YXIgYz10aGlzLmhpZXJhcmNoeVthXTt2b2lkIDA9PT1jLmFuaW1hdGlvbkNhY2hlJiYoYy5hbmltYXRpb25DYWNoZT17YW5pbWF0aW9uczp7fSxibGVuZGluZzp7cG9zaXRpb25XZWlnaHQ6MCxxdWF0ZXJuaW9uV2VpZ2h0OjAsc2NhbGVXZWlnaHQ6MH19KTtcbnZhciBkPXRoaXMuZGF0YS5uYW1lLGU9Yy5hbmltYXRpb25DYWNoZS5hbmltYXRpb25zLGY9ZVtkXTt2b2lkIDA9PT1mJiYoZj17cHJldktleTp7cG9zOjAscm90OjAsc2NsOjB9LG5leHRLZXk6e3BvczowLHJvdDowLHNjbDowfSxvcmlnaW5hbE1hdHJpeDpjLm1hdHJpeH0sZVtkXT1mKTtmb3IoYz0wOzM+YztjKyspe2Zvcih2YXIgZD10aGlzLmtleVR5cGVzW2NdLGU9dGhpcy5kYXRhLmhpZXJhcmNoeVthXS5rZXlzWzBdLGc9dGhpcy5nZXROZXh0S2V5V2l0aChkLGEsMSk7Zy50aW1lPHRoaXMuY3VycmVudFRpbWUmJmcuaW5kZXg+ZS5pbmRleDspZT1nLGc9dGhpcy5nZXROZXh0S2V5V2l0aChkLGEsZy5pbmRleCsxKTtmLnByZXZLZXlbZF09ZTtmLm5leHRLZXlbZF09Z319fSxyZXNldEJsZW5kV2VpZ2h0czpmdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9dGhpcy5oaWVyYXJjaHkubGVuZ3RoO2E8YjthKyspe3ZhciBjPXRoaXMuaGllcmFyY2h5W2FdLmFuaW1hdGlvbkNhY2hlO3ZvaWQgMCE9PVxuYyYmKGM9Yy5ibGVuZGluZyxjLnBvc2l0aW9uV2VpZ2h0PTAsYy5xdWF0ZXJuaW9uV2VpZ2h0PTAsYy5zY2FsZVdlaWdodD0wKX19LHVwZGF0ZTpmdW5jdGlvbigpe3ZhciBhPVtdLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMyxkPW5ldyBUSFJFRS5RdWF0ZXJuaW9uLGU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPVtdLGUsbixtLHMsdCxyO2U9KGEubGVuZ3RoLTEpKmI7bj1NYXRoLmZsb29yKGUpO2UtPW47Y1swXT0wPT09bj9uOm4tMTtjWzFdPW47Y1syXT1uPmEubGVuZ3RoLTI/bjpuKzE7Y1szXT1uPmEubGVuZ3RoLTM/bjpuKzI7bj1hW2NbMF1dO3M9YVtjWzFdXTt0PWFbY1syXV07cj1hW2NbM11dO2M9ZSplO209ZSpjO2RbMF09ZihuWzBdLHNbMF0sdFswXSxyWzBdLGUsYyxtKTtkWzFdPWYoblsxXSxzWzFdLHRbMV0sclsxXSxlLGMsbSk7ZFsyXT1mKG5bMl0sc1syXSx0WzJdLHJbMl0sZSxjLG0pO3JldHVybiBkfSxmPWZ1bmN0aW9uKGEsYixjLGQsXG5lLGYsbSl7YT0uNSooYy1hKTtkPS41KihkLWIpO3JldHVybigyKihiLWMpK2ErZCkqbSsoLTMqKGItYyktMiphLWQpKmYrYSplK2J9O3JldHVybiBmdW5jdGlvbihmKXtpZighMSE9PXRoaXMuaXNQbGF5aW5nJiYodGhpcy5jdXJyZW50VGltZSs9Zip0aGlzLnRpbWVTY2FsZSwwIT09dGhpcy53ZWlnaHQpKXtmPXRoaXMuZGF0YS5sZW5ndGg7aWYodGhpcy5jdXJyZW50VGltZT5mfHwwPnRoaXMuY3VycmVudFRpbWUpdGhpcy5sb29wPyh0aGlzLmN1cnJlbnRUaW1lJT1mLDA+dGhpcy5jdXJyZW50VGltZSYmKHRoaXMuY3VycmVudFRpbWUrPWYpLHRoaXMucmVzZXQoKSk6dGhpcy5zdG9wKCk7Zj0wO2Zvcih2YXIgaD10aGlzLmhpZXJhcmNoeS5sZW5ndGg7ZjxoO2YrKylmb3IodmFyIGs9dGhpcy5oaWVyYXJjaHlbZl0sbD1rLmFuaW1hdGlvbkNhY2hlLmFuaW1hdGlvbnNbdGhpcy5kYXRhLm5hbWVdLHA9ay5hbmltYXRpb25DYWNoZS5ibGVuZGluZyxuPTA7Mz5uO24rKyl7dmFyIG09dGhpcy5rZXlUeXBlc1tuXSxcbnM9bC5wcmV2S2V5W21dLHQ9bC5uZXh0S2V5W21dO2lmKDA8dGhpcy50aW1lU2NhbGUmJnQudGltZTw9dGhpcy5jdXJyZW50VGltZXx8MD50aGlzLnRpbWVTY2FsZSYmcy50aW1lPj10aGlzLmN1cnJlbnRUaW1lKXtzPXRoaXMuZGF0YS5oaWVyYXJjaHlbZl0ua2V5c1swXTtmb3IodD10aGlzLmdldE5leHRLZXlXaXRoKG0sZiwxKTt0LnRpbWU8dGhpcy5jdXJyZW50VGltZSYmdC5pbmRleD5zLmluZGV4OylzPXQsdD10aGlzLmdldE5leHRLZXlXaXRoKG0sZix0LmluZGV4KzEpO2wucHJldktleVttXT1zO2wubmV4dEtleVttXT10fXZhciByPSh0aGlzLmN1cnJlbnRUaW1lLXMudGltZSkvKHQudGltZS1zLnRpbWUpLHY9c1ttXSx1PXRbbV07MD5yJiYocj0wKTsxPHImJihyPTEpO2lmKFwicG9zXCI9PT1tKWlmKHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkxJTkVBUiljLng9dlswXSsodVswXS12WzBdKSpyLGMueT12WzFdKyh1WzFdLXZbMV0pKnIsXG5jLno9dlsyXSsodVsyXS12WzJdKSpyLHM9dGhpcy53ZWlnaHQvKHRoaXMud2VpZ2h0K3AucG9zaXRpb25XZWlnaHQpLGsucG9zaXRpb24ubGVycChjLHMpLHAucG9zaXRpb25XZWlnaHQrPXRoaXMud2VpZ2h0O2Vsc2V7aWYodGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTXx8dGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTV9GT1JXQVJEKWFbMF09dGhpcy5nZXRQcmV2S2V5V2l0aChcInBvc1wiLGYscy5pbmRleC0xKS5wb3MsYVsxXT12LGFbMl09dSxhWzNdPXRoaXMuZ2V0TmV4dEtleVdpdGgoXCJwb3NcIixmLHQuaW5kZXgrMSkucG9zLHI9LjMzKnIrLjMzLHQ9ZShhLHIpLHM9dGhpcy53ZWlnaHQvKHRoaXMud2VpZ2h0K3AucG9zaXRpb25XZWlnaHQpLHAucG9zaXRpb25XZWlnaHQrPXRoaXMud2VpZ2h0LG09ay5wb3NpdGlvbixtLngrPSh0WzBdLW0ueCkqcyxtLnkrPSh0WzFdLVxubS55KSpzLG0ueis9KHRbMl0tbS56KSpzLHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST01fRk9SV0FSRCYmKHI9ZShhLDEuMDEqciksYi5zZXQoclswXSxyWzFdLHJbMl0pLGIuc3ViKG0pLGIueT0wLGIubm9ybWFsaXplKCkscj1NYXRoLmF0YW4yKGIueCxiLnopLGsucm90YXRpb24uc2V0KDAsciwwKSl9ZWxzZVwicm90XCI9PT1tPyhUSFJFRS5RdWF0ZXJuaW9uLnNsZXJwKHYsdSxkLHIpLDA9PT1wLnF1YXRlcm5pb25XZWlnaHQ/KGsucXVhdGVybmlvbi5jb3B5KGQpLHAucXVhdGVybmlvbldlaWdodD10aGlzLndlaWdodCk6KHM9dGhpcy53ZWlnaHQvKHRoaXMud2VpZ2h0K3AucXVhdGVybmlvbldlaWdodCksVEhSRUUuUXVhdGVybmlvbi5zbGVycChrLnF1YXRlcm5pb24sZCxrLnF1YXRlcm5pb24scykscC5xdWF0ZXJuaW9uV2VpZ2h0Kz10aGlzLndlaWdodCkpOlwic2NsXCI9PT1tJiYoYy54PXZbMF0rKHVbMF0tdlswXSkqcixjLnk9XG52WzFdKyh1WzFdLXZbMV0pKnIsYy56PXZbMl0rKHVbMl0tdlsyXSkqcixzPXRoaXMud2VpZ2h0Lyh0aGlzLndlaWdodCtwLnNjYWxlV2VpZ2h0KSxrLnNjYWxlLmxlcnAoYyxzKSxwLnNjYWxlV2VpZ2h0Kz10aGlzLndlaWdodCl9cmV0dXJuITB9fX0oKSxnZXROZXh0S2V5V2l0aDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzO2ZvcihjPXRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST018fHRoaXMuaW50ZXJwb2xhdGlvblR5cGU9PT1USFJFRS5BbmltYXRpb25IYW5kbGVyLkNBVE1VTExST01fRk9SV0FSRD9jPGQubGVuZ3RoLTE/YzpkLmxlbmd0aC0xOmMlZC5sZW5ndGg7YzxkLmxlbmd0aDtjKyspaWYodm9pZCAwIT09ZFtjXVthXSlyZXR1cm4gZFtjXTtyZXR1cm4gdGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzWzBdfSxnZXRQcmV2S2V5V2l0aDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9XG50aGlzLmRhdGEuaGllcmFyY2h5W2JdLmtleXM7Zm9yKGM9dGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTXx8dGhpcy5pbnRlcnBvbGF0aW9uVHlwZT09PVRIUkVFLkFuaW1hdGlvbkhhbmRsZXIuQ0FUTVVMTFJPTV9GT1JXQVJEPzA8Yz9jOjA6MDw9Yz9jOmMrZC5sZW5ndGg7MDw9YztjLS0paWYodm9pZCAwIT09ZFtjXVthXSlyZXR1cm4gZFtjXTtyZXR1cm4gdGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzW2QubGVuZ3RoLTFdfX07XG5USFJFRS5LZXlGcmFtZUFuaW1hdGlvbj1mdW5jdGlvbihhKXt0aGlzLnJvb3Q9YS5ub2RlO3RoaXMuZGF0YT1USFJFRS5BbmltYXRpb25IYW5kbGVyLmluaXQoYSk7dGhpcy5oaWVyYXJjaHk9VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5wYXJzZSh0aGlzLnJvb3QpO3RoaXMuY3VycmVudFRpbWU9MDt0aGlzLnRpbWVTY2FsZT0uMDAxO3RoaXMuaXNQbGF5aW5nPSExO3RoaXMubG9vcD10aGlzLmlzUGF1c2VkPSEwO2E9MDtmb3IodmFyIGI9dGhpcy5oaWVyYXJjaHkubGVuZ3RoO2E8YjthKyspe3ZhciBjPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV0uc2lkcyxkPXRoaXMuaGllcmFyY2h5W2FdO2lmKHRoaXMuZGF0YS5oaWVyYXJjaHlbYV0ua2V5cy5sZW5ndGgmJmMpe2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1jW2VdLGc9dGhpcy5nZXROZXh0S2V5V2l0aChmLGEsMCk7ZyYmZy5hcHBseShmKX1kLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5kYXRhLmhpZXJhcmNoeVthXS5ub2RlLnVwZGF0ZU1hdHJpeCgpO1xuZC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSEwfX19O1xuVEhSRUUuS2V5RnJhbWVBbmltYXRpb24ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUSFJFRS5LZXlGcmFtZUFuaW1hdGlvbixwbGF5OmZ1bmN0aW9uKGEpe3RoaXMuY3VycmVudFRpbWU9dm9pZCAwIT09YT9hOjA7aWYoITE9PT10aGlzLmlzUGxheWluZyl7dGhpcy5pc1BsYXlpbmc9ITA7dmFyIGI9dGhpcy5oaWVyYXJjaHkubGVuZ3RoLGMsZDtmb3IoYT0wO2E8YjthKyspYz10aGlzLmhpZXJhcmNoeVthXSxkPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV0sdm9pZCAwPT09ZC5hbmltYXRpb25DYWNoZSYmKGQuYW5pbWF0aW9uQ2FjaGU9e30sZC5hbmltYXRpb25DYWNoZS5wcmV2S2V5PW51bGwsZC5hbmltYXRpb25DYWNoZS5uZXh0S2V5PW51bGwsZC5hbmltYXRpb25DYWNoZS5vcmlnaW5hbE1hdHJpeD1jLm1hdHJpeCksYz10aGlzLmRhdGEuaGllcmFyY2h5W2FdLmtleXMsYy5sZW5ndGgmJihkLmFuaW1hdGlvbkNhY2hlLnByZXZLZXk9Y1swXSxkLmFuaW1hdGlvbkNhY2hlLm5leHRLZXk9XG5jWzFdLHRoaXMuc3RhcnRUaW1lPU1hdGgubWluKGNbMF0udGltZSx0aGlzLnN0YXJ0VGltZSksdGhpcy5lbmRUaW1lPU1hdGgubWF4KGNbYy5sZW5ndGgtMV0udGltZSx0aGlzLmVuZFRpbWUpKTt0aGlzLnVwZGF0ZSgwKX10aGlzLmlzUGF1c2VkPSExO1RIUkVFLkFuaW1hdGlvbkhhbmRsZXIucGxheSh0aGlzKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuaXNQYXVzZWQ9dGhpcy5pc1BsYXlpbmc9ITE7VEhSRUUuQW5pbWF0aW9uSGFuZGxlci5zdG9wKHRoaXMpO2Zvcih2YXIgYT0wO2E8dGhpcy5kYXRhLmhpZXJhcmNoeS5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLmhpZXJhcmNoeVthXSxjPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV07aWYodm9pZCAwIT09Yy5hbmltYXRpb25DYWNoZSl7dmFyIGQ9Yy5hbmltYXRpb25DYWNoZS5vcmlnaW5hbE1hdHJpeDtkLmNvcHkoYi5tYXRyaXgpO2IubWF0cml4PWQ7ZGVsZXRlIGMuYW5pbWF0aW9uQ2FjaGV9fX0sdXBkYXRlOmZ1bmN0aW9uKGEpe2lmKCExIT09XG50aGlzLmlzUGxheWluZyl7dGhpcy5jdXJyZW50VGltZSs9YSp0aGlzLnRpbWVTY2FsZTthPXRoaXMuZGF0YS5sZW5ndGg7ITA9PT10aGlzLmxvb3AmJnRoaXMuY3VycmVudFRpbWU+YSYmKHRoaXMuY3VycmVudFRpbWUlPWEpO3RoaXMuY3VycmVudFRpbWU9TWF0aC5taW4odGhpcy5jdXJyZW50VGltZSxhKTthPTA7Zm9yKHZhciBiPXRoaXMuaGllcmFyY2h5Lmxlbmd0aDthPGI7YSsrKXt2YXIgYz10aGlzLmhpZXJhcmNoeVthXSxkPXRoaXMuZGF0YS5oaWVyYXJjaHlbYV0sZT1kLmtleXMsZD1kLmFuaW1hdGlvbkNhY2hlO2lmKGUubGVuZ3RoKXt2YXIgZj1kLnByZXZLZXksZz1kLm5leHRLZXk7aWYoZy50aW1lPD10aGlzLmN1cnJlbnRUaW1lKXtmb3IoO2cudGltZTx0aGlzLmN1cnJlbnRUaW1lJiZnLmluZGV4PmYuaW5kZXg7KWY9ZyxnPWVbZi5pbmRleCsxXTtkLnByZXZLZXk9ZjtkLm5leHRLZXk9Z31nLnRpbWU+PXRoaXMuY3VycmVudFRpbWU/Zi5pbnRlcnBvbGF0ZShnLHRoaXMuY3VycmVudFRpbWUpOlxuZi5pbnRlcnBvbGF0ZShnLGcudGltZSk7dGhpcy5kYXRhLmhpZXJhcmNoeVthXS5ub2RlLnVwZGF0ZU1hdHJpeCgpO2MubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH19fX0sZ2V0TmV4dEtleVdpdGg6ZnVuY3Rpb24oYSxiLGMpe2I9dGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzO2ZvcihjJT1iLmxlbmd0aDtjPGIubGVuZ3RoO2MrKylpZihiW2NdLmhhc1RhcmdldChhKSlyZXR1cm4gYltjXTtyZXR1cm4gYlswXX0sZ2V0UHJldktleVdpdGg6ZnVuY3Rpb24oYSxiLGMpe2I9dGhpcy5kYXRhLmhpZXJhcmNoeVtiXS5rZXlzO2ZvcihjPTA8PWM/YzpjK2IubGVuZ3RoOzA8PWM7Yy0tKWlmKGJbY10uaGFzVGFyZ2V0KGEpKXJldHVybiBiW2NdO3JldHVybiBiW2IubGVuZ3RoLTFdfX07XG5USFJFRS5Nb3JwaEFuaW1hdGlvbj1mdW5jdGlvbihhKXt0aGlzLm1lc2g9YTt0aGlzLmZyYW1lcz1hLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGg7dGhpcy5jdXJyZW50VGltZT0wO3RoaXMuZHVyYXRpb249MUUzO3RoaXMubG9vcD0hMDt0aGlzLmN1cnJlbnRGcmFtZT10aGlzLmxhc3RGcmFtZT0wO3RoaXMuaXNQbGF5aW5nPSExfTtcblRIUkVFLk1vcnBoQW5pbWF0aW9uLnByb3RvdHlwZT17Y29uc3RydWN0b3I6VEhSRUUuTW9ycGhBbmltYXRpb24scGxheTpmdW5jdGlvbigpe3RoaXMuaXNQbGF5aW5nPSEwfSxwYXVzZTpmdW5jdGlvbigpe3RoaXMuaXNQbGF5aW5nPSExfSx1cGRhdGU6ZnVuY3Rpb24oYSl7aWYoITEhPT10aGlzLmlzUGxheWluZyl7dGhpcy5jdXJyZW50VGltZSs9YTshMD09PXRoaXMubG9vcCYmdGhpcy5jdXJyZW50VGltZT50aGlzLmR1cmF0aW9uJiYodGhpcy5jdXJyZW50VGltZSU9dGhpcy5kdXJhdGlvbik7dGhpcy5jdXJyZW50VGltZT1NYXRoLm1pbih0aGlzLmN1cnJlbnRUaW1lLHRoaXMuZHVyYXRpb24pO2E9dGhpcy5kdXJhdGlvbi90aGlzLmZyYW1lczt2YXIgYj1NYXRoLmZsb29yKHRoaXMuY3VycmVudFRpbWUvYSksYz10aGlzLm1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzO2IhPXRoaXMuY3VycmVudEZyYW1lJiYoY1t0aGlzLmxhc3RGcmFtZV09MCxjW3RoaXMuY3VycmVudEZyYW1lXT1cbjEsY1tiXT0wLHRoaXMubGFzdEZyYW1lPXRoaXMuY3VycmVudEZyYW1lLHRoaXMuY3VycmVudEZyYW1lPWIpO2NbYl09dGhpcy5jdXJyZW50VGltZSVhL2E7Y1t0aGlzLmxhc3RGcmFtZV09MS1jW2JdfX19O1xuVEhSRUUuQm94R2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxiLGMsZCxlLGYsZyxyKXt2YXIgdix1PWgud2lkdGhTZWdtZW50cyx4PWguaGVpZ2h0U2VnbWVudHMsej1lLzIsdz1mLzIsRj1oLnZlcnRpY2VzLmxlbmd0aDtpZihcInhcIj09PWEmJlwieVwiPT09Ynx8XCJ5XCI9PT1hJiZcInhcIj09PWIpdj1cInpcIjtlbHNlIGlmKFwieFwiPT09YSYmXCJ6XCI9PT1ifHxcInpcIj09PWEmJlwieFwiPT09Yil2PVwieVwiLHg9aC5kZXB0aFNlZ21lbnRzO2Vsc2UgaWYoXCJ6XCI9PT1hJiZcInlcIj09PWJ8fFwieVwiPT09YSYmXCJ6XCI9PT1iKXY9XCJ4XCIsdT1oLmRlcHRoU2VnbWVudHM7dmFyIEc9dSsxLHk9eCsxLEk9ZS91LEI9Zi94LEM9bmV3IFRIUkVFLlZlY3RvcjM7Q1t2XT0wPGc/MTotMTtmb3IoZT0wO2U8eTtlKyspZm9yKGY9MDtmPEc7ZisrKXt2YXIgRT1uZXcgVEhSRUUuVmVjdG9yMztFW2FdPShmKkkteikqYztFW2JdPShlKkItdykqZDtFW3ZdPWc7aC52ZXJ0aWNlcy5wdXNoKEUpfWZvcihlPVxuMDtlPHg7ZSsrKWZvcihmPTA7Zjx1O2YrKyl3PWYrRyplLGE9ZitHKihlKzEpLGI9ZisxK0cqKGUrMSksYz1mKzErRyplLGQ9bmV3IFRIUkVFLlZlY3RvcjIoZi91LDEtZS94KSxnPW5ldyBUSFJFRS5WZWN0b3IyKGYvdSwxLShlKzEpL3gpLHY9bmV3IFRIUkVFLlZlY3RvcjIoKGYrMSkvdSwxLShlKzEpL3gpLHo9bmV3IFRIUkVFLlZlY3RvcjIoKGYrMSkvdSwxLWUveCksdz1uZXcgVEhSRUUuRmFjZTModytGLGErRixjK0YpLHcubm9ybWFsLmNvcHkoQyksdy52ZXJ0ZXhOb3JtYWxzLnB1c2goQy5jbG9uZSgpLEMuY2xvbmUoKSxDLmNsb25lKCkpLHcubWF0ZXJpYWxJbmRleD1yLGguZmFjZXMucHVzaCh3KSxoLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbZCxnLHpdKSx3PW5ldyBUSFJFRS5GYWNlMyhhK0YsYitGLGMrRiksdy5ub3JtYWwuY29weShDKSx3LnZlcnRleE5vcm1hbHMucHVzaChDLmNsb25lKCksQy5jbG9uZSgpLEMuY2xvbmUoKSksdy5tYXRlcmlhbEluZGV4PXIsaC5mYWNlcy5wdXNoKHcpLFxuaC5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2cuY2xvbmUoKSx2LHouY2xvbmUoKV0pfVRIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQm94R2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3dpZHRoOmEsaGVpZ2h0OmIsZGVwdGg6Yyx3aWR0aFNlZ21lbnRzOmQsaGVpZ2h0U2VnbWVudHM6ZSxkZXB0aFNlZ21lbnRzOmZ9O3RoaXMud2lkdGhTZWdtZW50cz1kfHwxO3RoaXMuaGVpZ2h0U2VnbWVudHM9ZXx8MTt0aGlzLmRlcHRoU2VnbWVudHM9Znx8MTt2YXIgaD10aGlzO2Q9YS8yO2U9Yi8yO2Y9Yy8yO2coXCJ6XCIsXCJ5XCIsLTEsLTEsYyxiLGQsMCk7ZyhcInpcIixcInlcIiwxLC0xLGMsYiwtZCwxKTtnKFwieFwiLFwielwiLDEsMSxhLGMsZSwyKTtnKFwieFwiLFwielwiLDEsLTEsYSxjLC1lLDMpO2coXCJ4XCIsXCJ5XCIsMSwtMSxhLGIsZiw0KTtnKFwieFwiLFwieVwiLC0xLC0xLGEsYiwtZiw1KTt0aGlzLm1lcmdlVmVydGljZXMoKX07VEhSRUUuQm94R2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtcblRIUkVFLkJveEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb3hHZW9tZXRyeTtUSFJFRS5DdWJlR2VvbWV0cnk9VEhSRUUuQm94R2VvbWV0cnk7XG5USFJFRS5DaXJjbGVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkNpcmNsZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxzZWdtZW50czpiLHRoZXRhU3RhcnQ6Yyx0aGV0YUxlbmd0aDpkfTthPWF8fDUwO2I9dm9pZCAwIT09Yj9NYXRoLm1heCgzLGIpOjg7Yz12b2lkIDAhPT1jP2M6MDtkPXZvaWQgMCE9PWQ/ZDoyKk1hdGguUEk7dmFyIGUsZj1bXTtlPW5ldyBUSFJFRS5WZWN0b3IzO3ZhciBnPW5ldyBUSFJFRS5WZWN0b3IyKC41LC41KTt0aGlzLnZlcnRpY2VzLnB1c2goZSk7Zi5wdXNoKGcpO2ZvcihlPTA7ZTw9YjtlKyspe3ZhciBoPW5ldyBUSFJFRS5WZWN0b3IzLGs9YytlL2IqZDtoLng9YSpNYXRoLmNvcyhrKTtoLnk9YSpNYXRoLnNpbihrKTt0aGlzLnZlcnRpY2VzLnB1c2goaCk7Zi5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKChoLngvYSsxKS8yLChoLnkvYSsxKS8yKSl9Yz1uZXcgVEhSRUUuVmVjdG9yMygwLFxuMCwxKTtmb3IoZT0xO2U8PWI7ZSsrKXRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoZSxlKzEsMCxbYy5jbG9uZSgpLGMuY2xvbmUoKSxjLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2ZbZV0uY2xvbmUoKSxmW2UrMV0uY2xvbmUoKSxnLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuYm91bmRpbmdTcGhlcmU9bmV3IFRIUkVFLlNwaGVyZShuZXcgVEhSRUUuVmVjdG9yMyxhKX07VEhSRUUuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQ2lyY2xlR2VvbWV0cnk7XG5USFJFRS5DeWxpbmRlckdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDeWxpbmRlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXNUb3A6YSxyYWRpdXNCb3R0b206YixoZWlnaHQ6YyxyYWRpYWxTZWdtZW50czpkLGhlaWdodFNlZ21lbnRzOmUsb3BlbkVuZGVkOmYsdGhldGFTdGFydDpnLHRoZXRhTGVuZ3RoOmh9O2E9dm9pZCAwIT09YT9hOjIwO2I9dm9pZCAwIT09Yj9iOjIwO2M9dm9pZCAwIT09Yz9jOjEwMDtkPWR8fDg7ZT1lfHwxO2Y9dm9pZCAwIT09Zj9mOiExO2c9dm9pZCAwIT09Zz9nOjA7aD12b2lkIDAhPT1oP2g6MipNYXRoLlBJO3ZhciBrPWMvMixsLHAsbj1bXSxtPVtdO2ZvcihwPTA7cDw9ZTtwKyspe3ZhciBzPVtdLHQ9W10scj1wL2Usdj1yKihiLWEpK2E7Zm9yKGw9MDtsPD1kO2wrKyl7dmFyIHU9bC9kLHg9bmV3IFRIUkVFLlZlY3RvcjM7eC54PXYqTWF0aC5zaW4odSpoK1xuZyk7eC55PS1yKmMrazt4Lno9dipNYXRoLmNvcyh1KmgrZyk7dGhpcy52ZXJ0aWNlcy5wdXNoKHgpO3MucHVzaCh0aGlzLnZlcnRpY2VzLmxlbmd0aC0xKTt0LnB1c2gobmV3IFRIUkVFLlZlY3RvcjIodSwxLXIpKX1uLnB1c2gocyk7bS5wdXNoKHQpfWM9KGItYSkvYztmb3IobD0wO2w8ZDtsKyspZm9yKDAhPT1hPyhnPXRoaXMudmVydGljZXNbblswXVtsXV0uY2xvbmUoKSxoPXRoaXMudmVydGljZXNbblswXVtsKzFdXS5jbG9uZSgpKTooZz10aGlzLnZlcnRpY2VzW25bMV1bbF1dLmNsb25lKCksaD10aGlzLnZlcnRpY2VzW25bMV1bbCsxXV0uY2xvbmUoKSksZy5zZXRZKE1hdGguc3FydChnLngqZy54K2cueipnLnopKmMpLm5vcm1hbGl6ZSgpLGguc2V0WShNYXRoLnNxcnQoaC54KmgueCtoLnoqaC56KSpjKS5ub3JtYWxpemUoKSxwPTA7cDxlO3ArKyl7dmFyIHM9bltwXVtsXSx0PW5bcCsxXVtsXSxyPW5bcCsxXVtsKzFdLHY9bltwXVtsKzFdLHU9Zy5jbG9uZSgpLHg9Zy5jbG9uZSgpLFxuej1oLmNsb25lKCksdz1oLmNsb25lKCksRj1tW3BdW2xdLmNsb25lKCksRz1tW3ArMV1bbF0uY2xvbmUoKSx5PW1bcCsxXVtsKzFdLmNsb25lKCksST1tW3BdW2wrMV0uY2xvbmUoKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHMsdCx2LFt1LHgsd10pKTt0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbRixHLEldKTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHQscix2LFt4LmNsb25lKCkseix3LmNsb25lKCldKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW0cuY2xvbmUoKSx5LEkuY2xvbmUoKV0pfWlmKCExPT09ZiYmMDxhKWZvcih0aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCxrLDApKSxsPTA7bDxkO2wrKylzPW5bMF1bbF0sdD1uWzBdW2wrMV0scj10aGlzLnZlcnRpY2VzLmxlbmd0aC0xLHU9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLHg9bmV3IFRIUkVFLlZlY3RvcjMoMCwxLDApLHo9bmV3IFRIUkVFLlZlY3RvcjMoMCxcbjEsMCksRj1tWzBdW2xdLmNsb25lKCksRz1tWzBdW2wrMV0uY2xvbmUoKSx5PW5ldyBUSFJFRS5WZWN0b3IyKEcueCwwKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHMsdCxyLFt1LHgsel0pKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbRixHLHldKTtpZighMT09PWYmJjA8Yilmb3IodGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAsLWssMCkpLGw9MDtsPGQ7bCsrKXM9bltlXVtsKzFdLHQ9bltlXVtsXSxyPXRoaXMudmVydGljZXMubGVuZ3RoLTEsdT1uZXcgVEhSRUUuVmVjdG9yMygwLC0xLDApLHg9bmV3IFRIUkVFLlZlY3RvcjMoMCwtMSwwKSx6PW5ldyBUSFJFRS5WZWN0b3IzKDAsLTEsMCksRj1tW2VdW2wrMV0uY2xvbmUoKSxHPW1bZV1bbF0uY2xvbmUoKSx5PW5ldyBUSFJFRS5WZWN0b3IyKEcueCwxKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKHMsdCxyLFt1LHgsel0pKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbRixcbkcseV0pO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCl9O1RIUkVFLkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5DeWxpbmRlckdlb21ldHJ5O1xuVEhSRUUuRWRnZXNHZW9tZXRyeT1mdW5jdGlvbihhLGIpe1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7dmFyIGM9TWF0aC5jb3MoVEhSRUUuTWF0aC5kZWdUb1JhZCh2b2lkIDAhPT1iP2I6MSkpLGQ9WzAsMF0sZT17fSxmPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGEtYn0sZz1bXCJhXCIsXCJiXCIsXCJjXCJdLGg7YSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5PyhoPW5ldyBUSFJFRS5HZW9tZXRyeSxoLmZyb21CdWZmZXJHZW9tZXRyeShhKSk6aD1hLmNsb25lKCk7aC5tZXJnZVZlcnRpY2VzKCk7aC5jb21wdXRlRmFjZU5vcm1hbHMoKTt2YXIgaz1oLnZlcnRpY2VzO2g9aC5mYWNlcztmb3IodmFyIGw9MCxwPTAsbj1oLmxlbmd0aDtwPG47cCsrKWZvcih2YXIgbT1oW3BdLHM9MDszPnM7cysrKXtkWzBdPW1bZ1tzXV07ZFsxXT1tW2dbKHMrMSklM11dO2Quc29ydChmKTt2YXIgdD1kLnRvU3RyaW5nKCk7dm9pZCAwPT09ZVt0XT8oZVt0XT17dmVydDE6ZFswXSx2ZXJ0MjpkWzFdLFxuZmFjZTE6cCxmYWNlMjp2b2lkIDB9LGwrKyk6ZVt0XS5mYWNlMj1wfWQ9bmV3IEZsb2F0MzJBcnJheSg2KmwpO2Y9MDtmb3IodCBpbiBlKWlmKGc9ZVt0XSx2b2lkIDA9PT1nLmZhY2UyfHxoW2cuZmFjZTFdLm5vcm1hbC5kb3QoaFtnLmZhY2UyXS5ub3JtYWwpPD1jKWw9a1tnLnZlcnQxXSxkW2YrK109bC54LGRbZisrXT1sLnksZFtmKytdPWwueixsPWtbZy52ZXJ0Ml0sZFtmKytdPWwueCxkW2YrK109bC55LGRbZisrXT1sLno7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoZCwzKSl9O1RIUkVFLkVkZ2VzR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5FZGdlc0dlb21ldHJ5O1xuVEhSRUUuRXh0cnVkZUdlb21ldHJ5PWZ1bmN0aW9uKGEsYil7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoVEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJFeHRydWRlR2VvbWV0cnlcIixhPWEgaW5zdGFuY2VvZiBBcnJheT9hOlthXSx0aGlzLmFkZFNoYXBlTGlzdChhLGIpLHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCkpfTtUSFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkV4dHJ1ZGVHZW9tZXRyeTtUSFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmFkZFNoYXBlTGlzdD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyl0aGlzLmFkZFNoYXBlKGFbZF0sYil9O1xuVEhSRUUuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5hZGRTaGFwZT1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSxiLGMpe2J8fFRIUkVFLmVycm9yKFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIik7cmV0dXJuIGIuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSl9ZnVuY3Rpb24gZChhLGIsYyl7dmFyIGQ9MSxkPWEueC1iLngsZT1hLnktYi55LGY9Yy54LWEueCxnPWMueS1hLnksaD1kKmQrZSplO2lmKDFFLTEwPE1hdGguYWJzKGQqZy1lKmYpKXt2YXIgaz1NYXRoLnNxcnQoaCksbD1NYXRoLnNxcnQoZipmK2cqZyksaD1iLngtZS9rO2I9Yi55K2QvaztmPSgoYy54LWcvbC1oKSpnLShjLnkrZi9sLWIpKmYpLyhkKmctZSpmKTtjPWgrZCpmLWEueDthPWIrZSpmLWEueTtkPWMqYythKmE7aWYoMj49ZClyZXR1cm4gbmV3IFRIUkVFLlZlY3RvcjIoYyxhKTtkPU1hdGguc3FydChkLzIpfWVsc2UgYT0hMSwxRS0xMDxkPzFFLTEwPGYmJihhPSEwKTpcbi0xRS0xMD5kPy0xRS0xMD5mJiYoYT0hMCk6TWF0aC5zaWduKGUpPT1NYXRoLnNpZ24oZykmJihhPSEwKSxhPyhjPS1lLGE9ZCxkPU1hdGguc3FydChoKSk6KGM9ZCxhPWUsZD1NYXRoLnNxcnQoaC8yKSk7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IyKGMvZCxhL2QpfWZ1bmN0aW9uIGUoYSxiKXt2YXIgYyxkO2ZvcihRPWEubGVuZ3RoOzA8PS0tUTspe2M9UTtkPVEtMTswPmQmJihkPWEubGVuZ3RoLTEpO2Zvcih2YXIgZT0wLGY9cysyKnAsZT0wO2U8ZjtlKyspe3ZhciBnPUQqZSxoPUQqKGUrMSksaz1iK2MrZyxnPWIrZCtnLGw9YitkK2gsaD1iK2MraCxrPWsrTCxnPWcrTCxsPWwrTCxoPWgrTDtFLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGssZyxoLG51bGwsbnVsbCx4KSk7RS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhnLGwsaCxudWxsLG51bGwseCkpO2s9ei5nZW5lcmF0ZVNpZGVXYWxsVVYoRSxrLGcsbCxoKTtFLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChba1swXSxrWzFdLFxua1szXV0pO0UuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtrWzFdLGtbMl0sa1szXV0pfX19ZnVuY3Rpb24gZihhLGIsYyl7RS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGEsYixjKSl9ZnVuY3Rpb24gZyhhLGIsYyl7YSs9TDtiKz1MO2MrPUw7RS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhhLGIsYyxudWxsLG51bGwsdSkpO2E9ei5nZW5lcmF0ZVRvcFVWKEUsYSxiLGMpO0UuZmFjZVZlcnRleFV2c1swXS5wdXNoKGEpfXZhciBoPXZvaWQgMCE9PWIuYW1vdW50P2IuYW1vdW50OjEwMCxrPXZvaWQgMCE9PWIuYmV2ZWxUaGlja25lc3M/Yi5iZXZlbFRoaWNrbmVzczo2LGw9dm9pZCAwIT09Yi5iZXZlbFNpemU/Yi5iZXZlbFNpemU6ay0yLHA9dm9pZCAwIT09Yi5iZXZlbFNlZ21lbnRzP2IuYmV2ZWxTZWdtZW50czozLG49dm9pZCAwIT09Yi5iZXZlbEVuYWJsZWQ/Yi5iZXZlbEVuYWJsZWQ6ITAsbT12b2lkIDAhPT1iLmN1cnZlU2VnbWVudHM/Yi5jdXJ2ZVNlZ21lbnRzOlxuMTIscz12b2lkIDAhPT1iLnN0ZXBzP2Iuc3RlcHM6MSx0PWIuZXh0cnVkZVBhdGgscix2PSExLHU9Yi5tYXRlcmlhbCx4PWIuZXh0cnVkZU1hdGVyaWFsLHo9dm9pZCAwIT09Yi5VVkdlbmVyYXRvcj9iLlVWR2VuZXJhdG9yOlRIUkVFLkV4dHJ1ZGVHZW9tZXRyeS5Xb3JsZFVWR2VuZXJhdG9yLHcsRixHLHk7dCYmKHI9dC5nZXRTcGFjZWRQb2ludHMocyksdj0hMCxuPSExLHc9dm9pZCAwIT09Yi5mcmFtZXM/Yi5mcmFtZXM6bmV3IFRIUkVFLlR1YmVHZW9tZXRyeS5GcmVuZXRGcmFtZXModCxzLCExKSxGPW5ldyBUSFJFRS5WZWN0b3IzLEc9bmV3IFRIUkVFLlZlY3RvcjMseT1uZXcgVEhSRUUuVmVjdG9yMyk7bnx8KGw9az1wPTApO3ZhciBJLEIsQyxFPXRoaXMsTD10aGlzLnZlcnRpY2VzLmxlbmd0aCx0PWEuZXh0cmFjdFBvaW50cyhtKSxtPXQuc2hhcGUsTj10LmhvbGVzO2lmKHQ9IVRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKG0pKXttPW0ucmV2ZXJzZSgpO0I9MDtmb3IoQz1cbk4ubGVuZ3RoO0I8QztCKyspST1OW0JdLFRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKEkpJiYoTltCXT1JLnJldmVyc2UoKSk7dD0hMX12YXIgSD1USFJFRS5TaGFwZS5VdGlscy50cmlhbmd1bGF0ZVNoYXBlKG0sTiksTz1tO0I9MDtmb3IoQz1OLmxlbmd0aDtCPEM7QisrKUk9TltCXSxtPW0uY29uY2F0KEkpO3ZhciBNLEEsSixSLEssRD1tLmxlbmd0aCxYLGlhPUgubGVuZ3RoLHQ9W10sUT0wO0o9Ty5sZW5ndGg7TT1KLTE7Zm9yKEE9USsxO1E8SjtRKyssTSsrLEErKylNPT09SiYmKE09MCksQT09PUomJihBPTApLHRbUV09ZChPW1FdLE9bTV0sT1tBXSk7dmFyIFA9W10sYWEsY2E9dC5jb25jYXQoKTtCPTA7Zm9yKEM9Ti5sZW5ndGg7QjxDO0IrKyl7ST1OW0JdO2FhPVtdO1E9MDtKPUkubGVuZ3RoO009Si0xO2ZvcihBPVErMTtRPEo7USsrLE0rKyxBKyspTT09PUomJihNPTApLEE9PT1KJiYoQT0wKSxhYVtRXT1kKElbUV0sSVtNXSxJW0FdKTtQLnB1c2goYWEpO2NhPWNhLmNvbmNhdChhYSl9Zm9yKE09XG4wO008cDtNKyspe0o9TS9wO1I9ayooMS1KKTtBPWwqTWF0aC5zaW4oSipNYXRoLlBJLzIpO1E9MDtmb3IoSj1PLmxlbmd0aDtRPEo7USsrKUs9YyhPW1FdLHRbUV0sQSksZihLLngsSy55LC1SKTtCPTA7Zm9yKEM9Ti5sZW5ndGg7QjxDO0IrKylmb3IoST1OW0JdLGFhPVBbQl0sUT0wLEo9SS5sZW5ndGg7UTxKO1ErKylLPWMoSVtRXSxhYVtRXSxBKSxmKEsueCxLLnksLVIpfUE9bDtmb3IoUT0wO1E8RDtRKyspSz1uP2MobVtRXSxjYVtRXSxBKTptW1FdLHY/KEcuY29weSh3Lm5vcm1hbHNbMF0pLm11bHRpcGx5U2NhbGFyKEsueCksRi5jb3B5KHcuYmlub3JtYWxzWzBdKS5tdWx0aXBseVNjYWxhcihLLnkpLHkuY29weShyWzBdKS5hZGQoRykuYWRkKEYpLGYoeS54LHkueSx5LnopKTpmKEsueCxLLnksMCk7Zm9yKEo9MTtKPD1zO0orKylmb3IoUT0wO1E8RDtRKyspSz1uP2MobVtRXSxjYVtRXSxBKTptW1FdLHY/KEcuY29weSh3Lm5vcm1hbHNbSl0pLm11bHRpcGx5U2NhbGFyKEsueCksXG5GLmNvcHkody5iaW5vcm1hbHNbSl0pLm11bHRpcGx5U2NhbGFyKEsueSkseS5jb3B5KHJbSl0pLmFkZChHKS5hZGQoRiksZih5LngseS55LHkueikpOmYoSy54LEsueSxoL3MqSik7Zm9yKE09cC0xOzA8PU07TS0tKXtKPU0vcDtSPWsqKDEtSik7QT1sKk1hdGguc2luKEoqTWF0aC5QSS8yKTtRPTA7Zm9yKEo9Ty5sZW5ndGg7UTxKO1ErKylLPWMoT1tRXSx0W1FdLEEpLGYoSy54LEsueSxoK1IpO0I9MDtmb3IoQz1OLmxlbmd0aDtCPEM7QisrKWZvcihJPU5bQl0sYWE9UFtCXSxRPTAsSj1JLmxlbmd0aDtRPEo7USsrKUs9YyhJW1FdLGFhW1FdLEEpLHY/ZihLLngsSy55K3Jbcy0xXS55LHJbcy0xXS54K1IpOmYoSy54LEsueSxoK1IpfShmdW5jdGlvbigpe2lmKG4pe3ZhciBhO2E9MCpEO2ZvcihRPTA7UTxpYTtRKyspWD1IW1FdLGcoWFsyXSthLFhbMV0rYSxYWzBdK2EpO2E9cysyKnA7YSo9RDtmb3IoUT0wO1E8aWE7USsrKVg9SFtRXSxnKFhbMF0rYSxYWzFdK2EsWFsyXSthKX1lbHNle2ZvcihRPVxuMDtRPGlhO1ErKylYPUhbUV0sZyhYWzJdLFhbMV0sWFswXSk7Zm9yKFE9MDtRPGlhO1ErKylYPUhbUV0sZyhYWzBdK0QqcyxYWzFdK0QqcyxYWzJdK0Qqcyl9fSkoKTsoZnVuY3Rpb24oKXt2YXIgYT0wO2UoTyxhKTthKz1PLmxlbmd0aDtCPTA7Zm9yKEM9Ti5sZW5ndGg7QjxDO0IrKylJPU5bQl0sZShJLGEpLGErPUkubGVuZ3RofSkoKX07XG5USFJFRS5FeHRydWRlR2VvbWV0cnkuV29ybGRVVkdlbmVyYXRvcj17Z2VuZXJhdGVUb3BVVjpmdW5jdGlvbihhLGIsYyxkKXthPWEudmVydGljZXM7Yj1hW2JdO2M9YVtjXTtkPWFbZF07cmV0dXJuW25ldyBUSFJFRS5WZWN0b3IyKGIueCxiLnkpLG5ldyBUSFJFRS5WZWN0b3IyKGMueCxjLnkpLG5ldyBUSFJFRS5WZWN0b3IyKGQueCxkLnkpXX0sZ2VuZXJhdGVTaWRlV2FsbFVWOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hLnZlcnRpY2VzO2I9YVtiXTtjPWFbY107ZD1hW2RdO2U9YVtlXTtyZXR1cm4uMDE+TWF0aC5hYnMoYi55LWMueSk/W25ldyBUSFJFRS5WZWN0b3IyKGIueCwxLWIueiksbmV3IFRIUkVFLlZlY3RvcjIoYy54LDEtYy56KSxuZXcgVEhSRUUuVmVjdG9yMihkLngsMS1kLnopLG5ldyBUSFJFRS5WZWN0b3IyKGUueCwxLWUueildOltuZXcgVEhSRUUuVmVjdG9yMihiLnksMS1iLnopLG5ldyBUSFJFRS5WZWN0b3IyKGMueSwxLWMueiksbmV3IFRIUkVFLlZlY3RvcjIoZC55LFxuMS1kLnopLG5ldyBUSFJFRS5WZWN0b3IyKGUueSwxLWUueildfX07VEhSRUUuU2hhcGVHZW9tZXRyeT1mdW5jdGlvbihhLGIpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2hhcGVHZW9tZXRyeVwiOyExPT09YSBpbnN0YW5jZW9mIEFycmF5JiYoYT1bYV0pO3RoaXMuYWRkU2hhcGVMaXN0KGEsYik7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKX07VEhSRUUuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlNoYXBlR2VvbWV0cnk7VEhSRUUuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuYWRkU2hhcGVMaXN0PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKXRoaXMuYWRkU2hhcGUoYVtjXSxiKTtyZXR1cm4gdGhpc307XG5USFJFRS5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS5hZGRTaGFwZT1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPXt9KTt2YXIgYz1iLm1hdGVyaWFsLGQ9dm9pZCAwPT09Yi5VVkdlbmVyYXRvcj9USFJFRS5FeHRydWRlR2VvbWV0cnkuV29ybGRVVkdlbmVyYXRvcjpiLlVWR2VuZXJhdG9yLGUsZixnLGg9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7ZT1hLmV4dHJhY3RQb2ludHModm9pZCAwIT09Yi5jdXJ2ZVNlZ21lbnRzP2IuY3VydmVTZWdtZW50czoxMik7dmFyIGs9ZS5zaGFwZSxsPWUuaG9sZXM7aWYoIVRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKGspKWZvcihrPWsucmV2ZXJzZSgpLGU9MCxmPWwubGVuZ3RoO2U8ZjtlKyspZz1sW2VdLFRIUkVFLlNoYXBlLlV0aWxzLmlzQ2xvY2tXaXNlKGcpJiYobFtlXT1nLnJldmVyc2UoKSk7dmFyIHA9VEhSRUUuU2hhcGUuVXRpbHMudHJpYW5ndWxhdGVTaGFwZShrLGwpO2U9MDtmb3IoZj1sLmxlbmd0aDtlPGY7ZSsrKWc9bFtlXSxcbms9ay5jb25jYXQoZyk7bD1rLmxlbmd0aDtmPXAubGVuZ3RoO2ZvcihlPTA7ZTxsO2UrKylnPWtbZV0sdGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKGcueCxnLnksMCkpO2ZvcihlPTA7ZTxmO2UrKylsPXBbZV0saz1sWzBdK2gsZz1sWzFdK2gsbD1sWzJdK2gsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhrLGcsbCxudWxsLG51bGwsYykpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKGQuZ2VuZXJhdGVUb3BVVih0aGlzLGssZyxsKSl9O1xuVEhSRUUuTGF0aGVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxhdGhlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BvaW50czphLHNlZ21lbnRzOmIscGhpU3RhcnQ6YyxwaGlMZW5ndGg6ZH07Yj1ifHwxMjtjPWN8fDA7ZD1kfHwyKk1hdGguUEk7Zm9yKHZhciBlPTEvKGEubGVuZ3RoLTEpLGY9MS9iLGc9MCxoPWI7Zzw9aDtnKyspZm9yKHZhciBrPWMrZypmKmQsbD1NYXRoLmNvcyhrKSxwPU1hdGguc2luKGspLGs9MCxuPWEubGVuZ3RoO2s8bjtrKyspe3ZhciBtPWFba10scz1uZXcgVEhSRUUuVmVjdG9yMztzLng9bCptLngtcCptLnk7cy55PXAqbS54K2wqbS55O3Muej1tLno7dGhpcy52ZXJ0aWNlcy5wdXNoKHMpfWM9YS5sZW5ndGg7Zz0wO2ZvcihoPWI7ZzxoO2crKylmb3Ioaz0wLG49YS5sZW5ndGgtMTtrPG47aysrKXtiPXA9aytjKmc7ZD1wK2M7dmFyIGw9cCsxK2MscD1wKzEsbT1nKmYscz1rKmUsdD1cbm0rZixyPXMrZTt0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGIsZCxwKSk7dGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW25ldyBUSFJFRS5WZWN0b3IyKG0scyksbmV3IFRIUkVFLlZlY3RvcjIodCxzKSxuZXcgVEhSRUUuVmVjdG9yMihtLHIpXSk7dGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGwscCkpO3RoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtuZXcgVEhSRUUuVmVjdG9yMih0LHMpLG5ldyBUSFJFRS5WZWN0b3IyKHQsciksbmV3IFRIUkVFLlZlY3RvcjIobSxyKV0pfXRoaXMubWVyZ2VWZXJ0aWNlcygpO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpfTtUSFJFRS5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuTGF0aGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuTGF0aGVHZW9tZXRyeTtcblRIUkVFLlBsYW5lR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCl7VEhSRUUubG9nKFwiVEhSRUUuUGxhbmVHZW9tZXRyeTogQ29uc2lkZXIgdXNpbmcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSBmb3IgbG93ZXIgbWVtb3J5IGZvb3RwcmludC5cIik7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQbGFuZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXt3aWR0aDphLGhlaWdodDpiLHdpZHRoU2VnbWVudHM6YyxoZWlnaHRTZWdtZW50czpkfTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeShhLGIsYyxkKSl9O1RIUkVFLlBsYW5lR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QbGFuZUdlb21ldHJ5O1xuVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkKXtUSFJFRS5CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBsYW5lQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3dpZHRoOmEsaGVpZ2h0OmIsd2lkdGhTZWdtZW50czpjLGhlaWdodFNlZ21lbnRzOmR9O3ZhciBlPWEvMixmPWIvMjtjPWN8fDE7ZD1kfHwxO3ZhciBnPWMrMSxoPWQrMSxrPWEvYyxsPWIvZDtiPW5ldyBGbG9hdDMyQXJyYXkoZypoKjMpO2E9bmV3IEZsb2F0MzJBcnJheShnKmgqMyk7Zm9yKHZhciBwPW5ldyBGbG9hdDMyQXJyYXkoZypoKjIpLG49MCxtPTAscz0wO3M8aDtzKyspZm9yKHZhciB0PXMqbC1mLHI9MDtyPGc7cisrKWJbbl09ciprLWUsYltuKzFdPS10LGFbbisyXT0xLHBbbV09ci9jLHBbbSsxXT0xLXMvZCxuKz0zLG0rPTI7bj0wO2U9bmV3ICg2NTUzNTxiLmxlbmd0aC8zP1VpbnQzMkFycmF5OlVpbnQxNkFycmF5KShjKmQqNik7Zm9yKHM9MDtzPGQ7cysrKWZvcihyPVxuMDtyPGM7cisrKWY9citnKihzKzEpLGg9cisxK2cqKHMrMSksaz1yKzErZypzLGVbbl09citnKnMsZVtuKzFdPWYsZVtuKzJdPWssZVtuKzNdPWYsZVtuKzRdPWgsZVtuKzVdPWssbis9Njt0aGlzLmFkZEF0dHJpYnV0ZShcImluZGV4XCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShlLDEpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShiLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocCwyKSl9O1RIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5O1xuVEhSRUUuUmluZ0dlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlJpbmdHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17aW5uZXJSYWRpdXM6YSxvdXRlclJhZGl1czpiLHRoZXRhU2VnbWVudHM6YyxwaGlTZWdtZW50czpkLHRoZXRhU3RhcnQ6ZSx0aGV0YUxlbmd0aDpmfTthPWF8fDA7Yj1ifHw1MDtlPXZvaWQgMCE9PWU/ZTowO2Y9dm9pZCAwIT09Zj9mOjIqTWF0aC5QSTtjPXZvaWQgMCE9PWM/TWF0aC5tYXgoMyxjKTo4O2Q9dm9pZCAwIT09ZD9NYXRoLm1heCgxLGQpOjg7dmFyIGcsaD1bXSxrPWEsbD0oYi1hKS9kO2ZvcihhPTA7YTxkKzE7YSsrKXtmb3IoZz0wO2c8YysxO2crKyl7dmFyIHA9bmV3IFRIUkVFLlZlY3RvcjMsbj1lK2cvYypmO3AueD1rKk1hdGguY29zKG4pO3AueT1rKk1hdGguc2luKG4pO3RoaXMudmVydGljZXMucHVzaChwKTtoLnB1c2gobmV3IFRIUkVFLlZlY3RvcjIoKHAueC9iKzEpLzIsXG4ocC55L2IrMSkvMikpfWsrPWx9Yj1uZXcgVEhSRUUuVmVjdG9yMygwLDAsMSk7Zm9yKGE9MDthPGQ7YSsrKWZvcihlPWEqKGMrMSksZz0wO2c8YztnKyspZj1uPWcrZSxsPW4rYysxLHA9bitjKzIsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhmLGwscCxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZl0uY2xvbmUoKSxoW2xdLmNsb25lKCksaFtwXS5jbG9uZSgpXSksZj1uLGw9bitjKzIscD1uKzEsdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhmLGwscCxbYi5jbG9uZSgpLGIuY2xvbmUoKSxiLmNsb25lKCldKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2hbZl0uY2xvbmUoKSxoW2xdLmNsb25lKCksaFtwXS5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUobmV3IFRIUkVFLlZlY3RvcjMsayl9O1xuVEhSRUUuUmluZ0dlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuUmluZ0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5SaW5nR2VvbWV0cnk7XG5USFJFRS5TcGhlcmVHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXtUSFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNwaGVyZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSx3aWR0aFNlZ21lbnRzOmIsaGVpZ2h0U2VnbWVudHM6YyxwaGlTdGFydDpkLHBoaUxlbmd0aDplLHRoZXRhU3RhcnQ6Zix0aGV0YUxlbmd0aDpnfTthPWF8fDUwO2I9TWF0aC5tYXgoMyxNYXRoLmZsb29yKGIpfHw4KTtjPU1hdGgubWF4KDIsTWF0aC5mbG9vcihjKXx8Nik7ZD12b2lkIDAhPT1kP2Q6MDtlPXZvaWQgMCE9PWU/ZToyKk1hdGguUEk7Zj12b2lkIDAhPT1mP2Y6MDtnPXZvaWQgMCE9PWc/ZzpNYXRoLlBJO3ZhciBoLGssbD1bXSxwPVtdO2ZvcihrPTA7azw9YztrKyspe3ZhciBuPVtdLG09W107Zm9yKGg9MDtoPD1iO2grKyl7dmFyIHM9aC9iLHQ9ay9jLHI9bmV3IFRIUkVFLlZlY3RvcjM7ci54PS1hKk1hdGguY29zKGQrcyplKSpNYXRoLnNpbihmK3QqZyk7XG5yLnk9YSpNYXRoLmNvcyhmK3QqZyk7ci56PWEqTWF0aC5zaW4oZCtzKmUpKk1hdGguc2luKGYrdCpnKTt0aGlzLnZlcnRpY2VzLnB1c2gocik7bi5wdXNoKHRoaXMudmVydGljZXMubGVuZ3RoLTEpO20ucHVzaChuZXcgVEhSRUUuVmVjdG9yMihzLDEtdCkpfWwucHVzaChuKTtwLnB1c2gobSl9Zm9yKGs9MDtrPGM7aysrKWZvcihoPTA7aDxiO2grKyl7ZD1sW2tdW2grMV07ZT1sW2tdW2hdO2Y9bFtrKzFdW2hdO2c9bFtrKzFdW2grMV07dmFyIG49dGhpcy52ZXJ0aWNlc1tkXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLG09dGhpcy52ZXJ0aWNlc1tlXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHM9dGhpcy52ZXJ0aWNlc1tmXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHQ9dGhpcy52ZXJ0aWNlc1tnXS5jbG9uZSgpLm5vcm1hbGl6ZSgpLHI9cFtrXVtoKzFdLmNsb25lKCksdj1wW2tdW2hdLmNsb25lKCksdT1wW2srMV1baF0uY2xvbmUoKSx4PXBbaysxXVtoKzFdLmNsb25lKCk7TWF0aC5hYnModGhpcy52ZXJ0aWNlc1tkXS55KT09PVxuYT8oci54PShyLngrdi54KS8yLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoZCxmLGcsW24scyx0XSkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtyLHUseF0pKTpNYXRoLmFicyh0aGlzLnZlcnRpY2VzW2ZdLnkpPT09YT8odS54PSh1LngreC54KS8yLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoZCxlLGYsW24sbSxzXSkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtyLHYsdV0pKToodGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGUsZyxbbixtLHRdKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW3Isdix4XSksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhlLGYsZyxbbS5jbG9uZSgpLHMsdC5jbG9uZSgpXSkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFt2LmNsb25lKCksdSx4LmNsb25lKCldKSl9dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBUSFJFRS5TcGhlcmUobmV3IFRIUkVFLlZlY3RvcjMsXG5hKX07VEhSRUUuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3BoZXJlR2VvbWV0cnk7VEhSRUUuVGV4dEdlb21ldHJ5PWZ1bmN0aW9uKGEsYil7Yj1ifHx7fTt2YXIgYz1USFJFRS5Gb250VXRpbHMuZ2VuZXJhdGVTaGFwZXMoYSxiKTtiLmFtb3VudD12b2lkIDAhPT1iLmhlaWdodD9iLmhlaWdodDo1MDt2b2lkIDA9PT1iLmJldmVsVGhpY2tuZXNzJiYoYi5iZXZlbFRoaWNrbmVzcz0xMCk7dm9pZCAwPT09Yi5iZXZlbFNpemUmJihiLmJldmVsU2l6ZT04KTt2b2lkIDA9PT1iLmJldmVsRW5hYmxlZCYmKGIuYmV2ZWxFbmFibGVkPSExKTtUSFJFRS5FeHRydWRlR2VvbWV0cnkuY2FsbCh0aGlzLGMsYik7dGhpcy50eXBlPVwiVGV4dEdlb21ldHJ5XCJ9O1RIUkVFLlRleHRHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlKTtcblRIUkVFLlRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVGV4dEdlb21ldHJ5O1xuVEhSRUUuVG9ydXNHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyxkLGUpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHJhZGlhbFNlZ21lbnRzOmMsdHVidWxhclNlZ21lbnRzOmQsYXJjOmV9O2E9YXx8MTAwO2I9Ynx8NDA7Yz1jfHw4O2Q9ZHx8NjtlPWV8fDIqTWF0aC5QSTtmb3IodmFyIGY9bmV3IFRIUkVFLlZlY3RvcjMsZz1bXSxoPVtdLGs9MDtrPD1jO2srKylmb3IodmFyIGw9MDtsPD1kO2wrKyl7dmFyIHA9bC9kKmUsbj1rL2MqTWF0aC5QSSoyO2YueD1hKk1hdGguY29zKHApO2YueT1hKk1hdGguc2luKHApO3ZhciBtPW5ldyBUSFJFRS5WZWN0b3IzO20ueD0oYStiKk1hdGguY29zKG4pKSpNYXRoLmNvcyhwKTttLnk9KGErYipNYXRoLmNvcyhuKSkqTWF0aC5zaW4ocCk7bS56PWIqTWF0aC5zaW4obik7dGhpcy52ZXJ0aWNlcy5wdXNoKG0pO2cucHVzaChuZXcgVEhSRUUuVmVjdG9yMihsL1xuZCxrL2MpKTtoLnB1c2gobS5jbG9uZSgpLnN1YihmKS5ub3JtYWxpemUoKSl9Zm9yKGs9MTtrPD1jO2srKylmb3IobD0xO2w8PWQ7bCsrKWE9KGQrMSkqaytsLTEsYj0oZCsxKSooay0xKStsLTEsZT0oZCsxKSooay0xKStsLGY9KGQrMSkqaytsLHA9bmV3IFRIUkVFLkZhY2UzKGEsYixmLFtoW2FdLmNsb25lKCksaFtiXS5jbG9uZSgpLGhbZl0uY2xvbmUoKV0pLHRoaXMuZmFjZXMucHVzaChwKSx0aGlzLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbZ1thXS5jbG9uZSgpLGdbYl0uY2xvbmUoKSxnW2ZdLmNsb25lKCldKSxwPW5ldyBUSFJFRS5GYWNlMyhiLGUsZixbaFtiXS5jbG9uZSgpLGhbZV0uY2xvbmUoKSxoW2ZdLmNsb25lKCldKSx0aGlzLmZhY2VzLnB1c2gocCksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2dbYl0uY2xvbmUoKSxnW2VdLmNsb25lKCksZ1tmXS5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKX07XG5USFJFRS5Ub3J1c0dlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVG9ydXNHZW9tZXRyeTtcblRIUkVFLlRvcnVzS25vdEdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe2Z1bmN0aW9uIGgoYSxiLGMsZCxlKXt2YXIgZj1NYXRoLmNvcyhhKSxnPU1hdGguc2luKGEpO2EqPWIvYztiPU1hdGguY29zKGEpO2YqPWQqKDIrYikqLjU7Zz1kKigyK2IpKmcqLjU7ZD1lKmQqTWF0aC5zaW4oYSkqLjU7cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKGYsZyxkKX1USFJFRS5HZW9tZXRyeS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlRvcnVzS25vdEdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSx0dWJlOmIscmFkaWFsU2VnbWVudHM6Yyx0dWJ1bGFyU2VnbWVudHM6ZCxwOmUscTpmLGhlaWdodFNjYWxlOmd9O2E9YXx8MTAwO2I9Ynx8NDA7Yz1jfHw2NDtkPWR8fDg7ZT1lfHwyO2Y9Znx8MztnPWd8fDE7Zm9yKHZhciBrPUFycmF5KGMpLGw9bmV3IFRIUkVFLlZlY3RvcjMscD1uZXcgVEhSRUUuVmVjdG9yMyxuPW5ldyBUSFJFRS5WZWN0b3IzLG09MDttPGM7KyttKXtrW21dPVxuQXJyYXkoZCk7dmFyIHM9bS9jKjIqZSpNYXRoLlBJLHQ9aChzLGYsZSxhLGcpLHM9aChzKy4wMSxmLGUsYSxnKTtsLnN1YlZlY3RvcnMocyx0KTtwLmFkZFZlY3RvcnMocyx0KTtuLmNyb3NzVmVjdG9ycyhsLHApO3AuY3Jvc3NWZWN0b3JzKG4sbCk7bi5ub3JtYWxpemUoKTtwLm5vcm1hbGl6ZSgpO2ZvcihzPTA7czxkOysrcyl7dmFyIHI9cy9kKjIqTWF0aC5QSSx2PS1iKk1hdGguY29zKHIpLHI9YipNYXRoLnNpbihyKSx1PW5ldyBUSFJFRS5WZWN0b3IzO3UueD10LngrdipwLngrcipuLng7dS55PXQueSt2KnAueStyKm4ueTt1Lno9dC56K3YqcC56K3Iqbi56O2tbbV1bc109dGhpcy52ZXJ0aWNlcy5wdXNoKHUpLTF9fWZvcihtPTA7bTxjOysrbSlmb3Iocz0wO3M8ZDsrK3MpZT0obSsxKSVjLGY9KHMrMSklZCxhPWtbbV1bc10sYj1rW2VdW3NdLGU9a1tlXVtmXSxmPWtbbV1bZl0sZz1uZXcgVEhSRUUuVmVjdG9yMihtL2Mscy9kKSxsPW5ldyBUSFJFRS5WZWN0b3IyKChtKzEpL2MsXG5zL2QpLHA9bmV3IFRIUkVFLlZlY3RvcjIoKG0rMSkvYywocysxKS9kKSxuPW5ldyBUSFJFRS5WZWN0b3IyKG0vYywocysxKS9kKSx0aGlzLmZhY2VzLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsYixmKSksdGhpcy5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2csbCxuXSksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhiLGUsZikpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtsLmNsb25lKCkscCxuLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKX07VEhSRUUuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVG9ydXNLbm90R2VvbWV0cnk7XG5USFJFRS5UdWJlR2VvbWV0cnk9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe1RIUkVFLkdlb21ldHJ5LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVHViZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtwYXRoOmEsc2VnbWVudHM6YixyYWRpdXM6YyxyYWRpYWxTZWdtZW50czpkLGNsb3NlZDplfTtiPWJ8fDY0O2M9Y3x8MTtkPWR8fDg7ZT1lfHwhMTtmPWZ8fFRIUkVFLlR1YmVHZW9tZXRyeS5Ob1RhcGVyO3ZhciBnPVtdLGgsayxsPWIrMSxwLG4sbSxzLHQscj1uZXcgVEhSRUUuVmVjdG9yMyx2LHUseDt2PW5ldyBUSFJFRS5UdWJlR2VvbWV0cnkuRnJlbmV0RnJhbWVzKGEsYixlKTt1PXYubm9ybWFsczt4PXYuYmlub3JtYWxzO3RoaXMudGFuZ2VudHM9di50YW5nZW50czt0aGlzLm5vcm1hbHM9dTt0aGlzLmJpbm9ybWFscz14O2Zvcih2PTA7djxsO3YrKylmb3IoZ1t2XT1bXSxwPXYvKGwtMSksdD1hLmdldFBvaW50QXQocCksaD11W3ZdLGs9eFt2XSxtPWMqZihwKSxwPTA7cDxkO3ArKyluPVxucC9kKjIqTWF0aC5QSSxzPS1tKk1hdGguY29zKG4pLG49bSpNYXRoLnNpbihuKSxyLmNvcHkodCksci54Kz1zKmgueCtuKmsueCxyLnkrPXMqaC55K24qay55LHIueis9cypoLnorbiprLnosZ1t2XVtwXT10aGlzLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoci54LHIueSxyLnopKS0xO2Zvcih2PTA7djxiO3YrKylmb3IocD0wO3A8ZDtwKyspZj1lPyh2KzEpJWI6disxLGw9KHArMSklZCxhPWdbdl1bcF0sYz1nW2ZdW3BdLGY9Z1tmXVtsXSxsPWdbdl1bbF0scj1uZXcgVEhSRUUuVmVjdG9yMih2L2IscC9kKSx1PW5ldyBUSFJFRS5WZWN0b3IyKCh2KzEpL2IscC9kKSx4PW5ldyBUSFJFRS5WZWN0b3IyKCh2KzEpL2IsKHArMSkvZCksaD1uZXcgVEhSRUUuVmVjdG9yMih2L2IsKHArMSkvZCksdGhpcy5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhhLGMsbCkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFtyLHUsaF0pLHRoaXMuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoYyxcbmYsbCkpLHRoaXMuZmFjZVZlcnRleFV2c1swXS5wdXNoKFt1LmNsb25lKCkseCxoLmNsb25lKCldKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKX07VEhSRUUuVHViZUdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVHViZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5UdWJlR2VvbWV0cnk7VEhSRUUuVHViZUdlb21ldHJ5Lk5vVGFwZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIDF9O1RIUkVFLlR1YmVHZW9tZXRyeS5TaW51c29pZGFsVGFwZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc2luKE1hdGguUEkqYSl9O1xuVEhSRUUuVHViZUdlb21ldHJ5LkZyZW5ldEZyYW1lcz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9bmV3IFRIUkVFLlZlY3RvcjMsZT1bXSxmPVtdLGc9W10saD1uZXcgVEhSRUUuVmVjdG9yMyxrPW5ldyBUSFJFRS5NYXRyaXg0O2IrPTE7dmFyIGwscCxuO3RoaXMudGFuZ2VudHM9ZTt0aGlzLm5vcm1hbHM9Zjt0aGlzLmJpbm9ybWFscz1nO2ZvcihsPTA7bDxiO2wrKylwPWwvKGItMSksZVtsXT1hLmdldFRhbmdlbnRBdChwKSxlW2xdLm5vcm1hbGl6ZSgpO2ZbMF09bmV3IFRIUkVFLlZlY3RvcjM7Z1swXT1uZXcgVEhSRUUuVmVjdG9yMzthPU51bWJlci5NQVhfVkFMVUU7bD1NYXRoLmFicyhlWzBdLngpO3A9TWF0aC5hYnMoZVswXS55KTtuPU1hdGguYWJzKGVbMF0ueik7bDw9YSYmKGE9bCxkLnNldCgxLDAsMCkpO3A8PWEmJihhPXAsZC5zZXQoMCwxLDApKTtuPD1hJiZkLnNldCgwLDAsMSk7aC5jcm9zc1ZlY3RvcnMoZVswXSxkKS5ub3JtYWxpemUoKTtmWzBdLmNyb3NzVmVjdG9ycyhlWzBdLFxuaCk7Z1swXS5jcm9zc1ZlY3RvcnMoZVswXSxmWzBdKTtmb3IobD0xO2w8YjtsKyspZltsXT1mW2wtMV0uY2xvbmUoKSxnW2xdPWdbbC0xXS5jbG9uZSgpLGguY3Jvc3NWZWN0b3JzKGVbbC0xXSxlW2xdKSwxRS00PGgubGVuZ3RoKCkmJihoLm5vcm1hbGl6ZSgpLGQ9TWF0aC5hY29zKFRIUkVFLk1hdGguY2xhbXAoZVtsLTFdLmRvdChlW2xdKSwtMSwxKSksZltsXS5hcHBseU1hdHJpeDQoay5tYWtlUm90YXRpb25BeGlzKGgsZCkpKSxnW2xdLmNyb3NzVmVjdG9ycyhlW2xdLGZbbF0pO2lmKGMpZm9yKGQ9TWF0aC5hY29zKFRIUkVFLk1hdGguY2xhbXAoZlswXS5kb3QoZltiLTFdKSwtMSwxKSksZC89Yi0xLDA8ZVswXS5kb3QoaC5jcm9zc1ZlY3RvcnMoZlswXSxmW2ItMV0pKSYmKGQ9LWQpLGw9MTtsPGI7bCsrKWZbbF0uYXBwbHlNYXRyaXg0KGsubWFrZVJvdGF0aW9uQXhpcyhlW2xdLGQqbCkpLGdbbF0uY3Jvc3NWZWN0b3JzKGVbbF0sZltsXSl9O1xuVEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5PWZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYSl7dmFyIGI9YS5ub3JtYWxpemUoKS5jbG9uZSgpO2IuaW5kZXg9ay52ZXJ0aWNlcy5wdXNoKGIpLTE7dmFyIGM9TWF0aC5hdGFuMihhLnosLWEueCkvMi9NYXRoLlBJKy41O2E9TWF0aC5hdGFuMigtYS55LE1hdGguc3FydChhLngqYS54K2EueiphLnopKS9NYXRoLlBJKy41O2IudXY9bmV3IFRIUkVFLlZlY3RvcjIoYywxLWEpO3JldHVybiBifWZ1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPW5ldyBUSFJFRS5GYWNlMyhhLmluZGV4LGIuaW5kZXgsYy5pbmRleCxbYS5jbG9uZSgpLGIuY2xvbmUoKSxjLmNsb25lKCldKTtrLmZhY2VzLnB1c2goZCk7di5jb3B5KGEpLmFkZChiKS5hZGQoYykuZGl2aWRlU2NhbGFyKDMpO2Q9TWF0aC5hdGFuMih2LnosLXYueCk7ay5mYWNlVmVydGV4VXZzWzBdLnB1c2goW2goYS51dixhLGQpLGgoYi51dixiLGQpLGgoYy51dixjLGQpXSl9ZnVuY3Rpb24gZyhhLFxuYil7Zm9yKHZhciBjPU1hdGgucG93KDIsYiksZD1lKGsudmVydGljZXNbYS5hXSksZz1lKGsudmVydGljZXNbYS5iXSksaD1lKGsudmVydGljZXNbYS5jXSksbD1bXSxtPTA7bTw9YzttKyspe2xbbV09W107Zm9yKHZhciBuPWUoZC5jbG9uZSgpLmxlcnAoaCxtL2MpKSxwPWUoZy5jbG9uZSgpLmxlcnAoaCxtL2MpKSxzPWMtbSxyPTA7cjw9cztyKyspbFttXVtyXT0wPT1yJiZtPT1jP246ZShuLmNsb25lKCkubGVycChwLHIvcykpfWZvcihtPTA7bTxjO20rKylmb3Iocj0wO3I8MiooYy1tKS0xO3IrKylkPU1hdGguZmxvb3Ioci8yKSwwPT1yJTI/ZihsW21dW2QrMV0sbFttKzFdW2RdLGxbbV1bZF0pOmYobFttXVtkKzFdLGxbbSsxXVtkKzFdLGxbbSsxXVtkXSl9ZnVuY3Rpb24gaChhLGIsYyl7MD5jJiYxPT09YS54JiYoYT1uZXcgVEhSRUUuVmVjdG9yMihhLngtMSxhLnkpKTswPT09Yi54JiYwPT09Yi56JiYoYT1uZXcgVEhSRUUuVmVjdG9yMihjLzIvTWF0aC5QSSsuNSxhLnkpKTtyZXR1cm4gYS5jbG9uZSgpfVxuVEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2x5aGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3ZlcnRpY2VzOmEsaW5kaWNlczpiLHJhZGl1czpjLGRldGFpbDpkfTtjPWN8fDE7ZD1kfHwwO2Zvcih2YXIgaz10aGlzLGw9MCxwPWEubGVuZ3RoO2w8cDtsKz0zKWUobmV3IFRIUkVFLlZlY3RvcjMoYVtsXSxhW2wrMV0sYVtsKzJdKSk7YT10aGlzLnZlcnRpY2VzO2Zvcih2YXIgbj1bXSxtPWw9MCxwPWIubGVuZ3RoO2w8cDtsKz0zLG0rKyl7dmFyIHM9YVtiW2xdXSx0PWFbYltsKzFdXSxyPWFbYltsKzJdXTtuW21dPW5ldyBUSFJFRS5GYWNlMyhzLmluZGV4LHQuaW5kZXgsci5pbmRleCxbcy5jbG9uZSgpLHQuY2xvbmUoKSxyLmNsb25lKCldKX1mb3IodmFyIHY9bmV3IFRIUkVFLlZlY3RvcjMsbD0wLHA9bi5sZW5ndGg7bDxwO2wrKylnKG5bbF0sZCk7bD0wO2ZvcihwPXRoaXMuZmFjZVZlcnRleFV2c1swXS5sZW5ndGg7bDxwO2wrKyliPXRoaXMuZmFjZVZlcnRleFV2c1swXVtsXSxcbmQ9YlswXS54LGE9YlsxXS54LG49YlsyXS54LG09TWF0aC5tYXgoZCxNYXRoLm1heChhLG4pKSxzPU1hdGgubWluKGQsTWF0aC5taW4oYSxuKSksLjk8bSYmLjE+cyYmKC4yPmQmJihiWzBdLngrPTEpLC4yPmEmJihiWzFdLngrPTEpLC4yPm4mJihiWzJdLngrPTEpKTtsPTA7Zm9yKHA9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7bDxwO2wrKyl0aGlzLnZlcnRpY2VzW2xdLm11bHRpcGx5U2NhbGFyKGMpO3RoaXMubWVyZ2VWZXJ0aWNlcygpO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7dGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgVEhSRUUuU3BoZXJlKG5ldyBUSFJFRS5WZWN0b3IzLGMpfTtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuR2VvbWV0cnkucHJvdG90eXBlKTtUSFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvbHloZWRyb25HZW9tZXRyeTtcblRIUkVFLkRvZGVjYWhlZHJvbkdlb21ldHJ5PWZ1bmN0aW9uKGEsYil7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn07dmFyIGM9KDErTWF0aC5zcXJ0KDUpKS8yLGQ9MS9jO1RIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5jYWxsKHRoaXMsWy0xLC0xLC0xLC0xLC0xLDEsLTEsMSwtMSwtMSwxLDEsMSwtMSwtMSwxLC0xLDEsMSwxLC0xLDEsMSwxLDAsLWQsLWMsMCwtZCxjLDAsZCwtYywwLGQsYywtZCwtYywwLC1kLGMsMCxkLC1jLDAsZCxjLDAsLWMsMCwtZCxjLDAsLWQsLWMsMCxkLGMsMCxkXSxbMywxMSw3LDMsNywxNSwzLDE1LDEzLDcsMTksMTcsNywxNyw2LDcsNiwxNSwxNyw0LDgsMTcsOCwxMCwxNywxMCw2LDgsMCwxNiw4LDE2LDIsOCwyLDEwLDAsMTIsMSwwLDEsMTgsMCwxOCwxNiw2LDEwLDIsNiwyLDEzLDYsMTMsMTUsMiwxNiwxOCwyLDE4LDMsMiwzLDEzLDE4LDEsOSwxOCw5LDExLDE4LDExLDMsNCwxNCwxMiw0LDEyLDAsNCwwLDgsMTEsOSw1LDExLDUsMTksXG4xMSwxOSw3LDE5LDUsMTQsMTksMTQsNCwxOSw0LDE3LDEsMTIsMTQsMSwxNCw1LDEsNSw5XSxhLGIpfTtUSFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLkRvZGVjYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeTtcblRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnk9ZnVuY3Rpb24oYSxiKXt2YXIgYz0oMStNYXRoLnNxcnQoNSkpLzI7VEhSRUUuUG9seWhlZHJvbkdlb21ldHJ5LmNhbGwodGhpcyxbLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYywwLDAsLTEsYywwLDEsYywwLC0xLC1jLDAsMSwtYyxjLDAsLTEsYywwLDEsLWMsMCwtMSwtYywwLDFdLFswLDExLDUsMCw1LDEsMCwxLDcsMCw3LDEwLDAsMTAsMTEsMSw1LDksNSwxMSw0LDExLDEwLDIsMTAsNyw2LDcsMSw4LDMsOSw0LDMsNCwyLDMsMiw2LDMsNiw4LDMsOCw5LDQsOSw1LDIsNCwxMSw2LDIsMTAsOCw2LDcsOSw4LDFdLGEsYik7dGhpcy50eXBlPVwiSWNvc2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7XG5USFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5O1RIUkVFLk9jdGFoZWRyb25HZW9tZXRyeT1mdW5jdGlvbihhLGIpe3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9O1RIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5jYWxsKHRoaXMsWzEsMCwwLC0xLDAsMCwwLDEsMCwwLC0xLDAsMCwwLDEsMCwwLC0xXSxbMCwyLDQsMCw0LDMsMCwzLDUsMCw1LDIsMSwyLDUsMSw1LDMsMSwzLDQsMSw0LDJdLGEsYik7dGhpcy50eXBlPVwiT2N0YWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn19O1RIUkVFLk9jdGFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLk9jdGFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5O1xuVEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeT1mdW5jdGlvbihhLGIpe1RIUkVFLlBvbHloZWRyb25HZW9tZXRyeS5jYWxsKHRoaXMsWzEsMSwxLC0xLC0xLDEsLTEsMSwtMSwxLC0xLC0xXSxbMiwxLDAsMCwzLDIsMSwzLDAsMiwzLDFdLGEsYik7dGhpcy50eXBlPVwiVGV0cmFoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fTtUSFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkdlb21ldHJ5LnByb3RvdHlwZSk7VEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVGV0cmFoZWRyb25HZW9tZXRyeTtcblRIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeT1mdW5jdGlvbihhLGIsYyl7VEhSRUUuR2VvbWV0cnkuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQYXJhbWV0cmljR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e2Z1bmM6YSxzbGljZXM6YixzdGFja3M6Y307dmFyIGQ9dGhpcy52ZXJ0aWNlcyxlPXRoaXMuZmFjZXMsZj10aGlzLmZhY2VWZXJ0ZXhVdnNbMF0sZyxoLGssbCxwPWIrMTtmb3IoZz0wO2c8PWM7ZysrKWZvcihsPWcvYyxoPTA7aDw9YjtoKyspaz1oL2Isaz1hKGssbCksZC5wdXNoKGspO3ZhciBuLG0scyx0O2ZvcihnPTA7ZzxjO2crKylmb3IoaD0wO2g8YjtoKyspYT1nKnAraCxkPWcqcCtoKzEsbD0oZysxKSpwK2grMSxrPShnKzEpKnAraCxuPW5ldyBUSFJFRS5WZWN0b3IyKGgvYixnL2MpLG09bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYixnL2MpLHM9bmV3IFRIUkVFLlZlY3RvcjIoKGgrMSkvYiwoZysxKS9jKSx0PW5ldyBUSFJFRS5WZWN0b3IyKGgvYiwoZysxKS9jKSxlLnB1c2gobmV3IFRIUkVFLkZhY2UzKGEsXG5kLGspKSxmLnB1c2goW24sbSx0XSksZS5wdXNoKG5ldyBUSFJFRS5GYWNlMyhkLGwsaykpLGYucHVzaChbbS5jbG9uZSgpLHMsdC5jbG9uZSgpXSk7dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTt0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCl9O1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5HZW9tZXRyeS5wcm90b3R5cGUpO1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5O1xuVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnk9ZnVuY3Rpb24oYSl7VEhSRUUuQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTt2YXIgYj1bMCwwXSxjPXt9LGQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS1ifSxlPVtcImFcIixcImJcIixcImNcIl07aWYoYSBpbnN0YW5jZW9mIFRIUkVFLkdlb21ldHJ5KXt2YXIgZj1hLnZlcnRpY2VzLGc9YS5mYWNlcyxoPTAsaz1uZXcgVWludDMyQXJyYXkoNipnLmxlbmd0aCk7YT0wO2Zvcih2YXIgbD1nLmxlbmd0aDthPGw7YSsrKWZvcih2YXIgcD1nW2FdLG49MDszPm47bisrKXtiWzBdPXBbZVtuXV07YlsxXT1wW2VbKG4rMSklM11dO2Iuc29ydChkKTt2YXIgbT1iLnRvU3RyaW5nKCk7dm9pZCAwPT09Y1ttXSYmKGtbMipoXT1iWzBdLGtbMipoKzFdPWJbMV0sY1ttXT0hMCxoKyspfWI9bmV3IEZsb2F0MzJBcnJheSg2KmgpO2E9MDtmb3IobD1oO2E8bDthKyspZm9yKG49MDsyPm47bisrKWg9ZltrWzIqYStuXV0sZT02KmErMypuLGJbZSswXT1oLngsYltlKzFdPWgueSxcbmJbZSsyXT1oLno7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoYiwzKSl9ZWxzZSBpZihhIGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpe2lmKHZvaWQgMCE9PWEuYXR0cmlidXRlcy5pbmRleCl7Zj1hLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7bD1hLmF0dHJpYnV0ZXMuaW5kZXguYXJyYXk7Zz1hLmRyYXdjYWxscztoPTA7MD09PWcubGVuZ3RoJiYoZz1be2NvdW50OmwubGVuZ3RoLGluZGV4OjAsc3RhcnQ6MH1dKTtmb3IodmFyIGs9bmV3IFVpbnQzMkFycmF5KDIqbC5sZW5ndGgpLHA9MCxzPWcubGVuZ3RoO3A8czsrK3Ape249Z1twXS5zdGFydDttPWdbcF0uY291bnQ7ZT1nW3BdLmluZGV4O2E9bjtmb3IodmFyIHQ9bittO2E8dDthKz0zKWZvcihuPTA7Mz5uO24rKyliWzBdPWUrbFthK25dLGJbMV09ZStsW2ErKG4rMSklM10sYi5zb3J0KGQpLG09Yi50b1N0cmluZygpLHZvaWQgMD09PWNbbV0mJihrWzIqaF09XG5iWzBdLGtbMipoKzFdPWJbMV0sY1ttXT0hMCxoKyspfWI9bmV3IEZsb2F0MzJBcnJheSg2KmgpO2E9MDtmb3IobD1oO2E8bDthKyspZm9yKG49MDsyPm47bisrKWU9NiphKzMqbixoPTMqa1syKmErbl0sYltlKzBdPWZbaF0sYltlKzFdPWZbaCsxXSxiW2UrMl09ZltoKzJdfWVsc2UgZm9yKGY9YS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5LGg9Zi5sZW5ndGgvMyxrPWgvMyxiPW5ldyBGbG9hdDMyQXJyYXkoNipoKSxhPTAsbD1rO2E8bDthKyspZm9yKG49MDszPm47bisrKWU9MTgqYSs2Km4saz05KmErMypuLGJbZSswXT1mW2tdLGJbZSsxXT1mW2srMV0sYltlKzJdPWZbaysyXSxoPTkqYSsobisxKSUzKjMsYltlKzNdPWZbaF0sYltlKzRdPWZbaCsxXSxiW2UrNV09ZltoKzJdO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGIsMykpfX07VEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcblRIUkVFLldpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5XaXJlZnJhbWVHZW9tZXRyeTtUSFJFRS5BeGlzSGVscGVyPWZ1bmN0aW9uKGEpe2E9YXx8MTt2YXIgYj1uZXcgRmxvYXQzMkFycmF5KFswLDAsMCxhLDAsMCwwLDAsMCwwLGEsMCwwLDAsMCwwLDAsYV0pLGM9bmV3IEZsb2F0MzJBcnJheShbMSwwLDAsMSwuNiwwLDAsMSwwLC42LDEsMCwwLDAsMSwwLC42LDFdKTthPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeTthLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShiLDMpKTthLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjLDMpKTtiPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7dmVydGV4Q29sb3JzOlRIUkVFLlZlcnRleENvbG9yc30pO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGEsYixUSFJFRS5MaW5lUGllY2VzKX07XG5USFJFRS5BeGlzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5BeGlzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BeGlzSGVscGVyO1xuVEhSRUUuQXJyb3dIZWxwZXI9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuR2VvbWV0cnk7YS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSxuZXcgVEhSRUUuVmVjdG9yMygwLDEsMCkpO3ZhciBiPW5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KDAsLjUsMSw1LDEpO2IuYXBwbHlNYXRyaXgoKG5ldyBUSFJFRS5NYXRyaXg0KS5tYWtlVHJhbnNsYXRpb24oMCwtLjUsMCkpO3JldHVybiBmdW5jdGlvbihjLGQsZSxmLGcsaCl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt2b2lkIDA9PT1mJiYoZj0xNjc3Njk2MCk7dm9pZCAwPT09ZSYmKGU9MSk7dm9pZCAwPT09ZyYmKGc9LjIqZSk7dm9pZCAwPT09aCYmKGg9LjIqZyk7dGhpcy5wb3NpdGlvbi5jb3B5KGQpO3RoaXMubGluZT1uZXcgVEhSRUUuTGluZShhLG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6Zn0pKTt0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmFkZCh0aGlzLmxpbmUpO1xudGhpcy5jb25lPW5ldyBUSFJFRS5NZXNoKGIsbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtjb2xvcjpmfSkpO3RoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMuYWRkKHRoaXMuY29uZSk7dGhpcy5zZXREaXJlY3Rpb24oYyk7dGhpcy5zZXRMZW5ndGgoZSxnLGgpfX0oKTtUSFJFRS5BcnJvd0hlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5BcnJvd0hlbHBlcjtcblRIUkVFLkFycm93SGVscGVyLnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMyxiO3JldHVybiBmdW5jdGlvbihjKXsuOTk5OTk8Yy55P3RoaXMucXVhdGVybmlvbi5zZXQoMCwwLDAsMSk6LS45OTk5OT5jLnk/dGhpcy5xdWF0ZXJuaW9uLnNldCgxLDAsMCwwKTooYS5zZXQoYy56LDAsLWMueCkubm9ybWFsaXplKCksYj1NYXRoLmFjb3MoYy55KSx0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZShhLGIpKX19KCk7VEhSRUUuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldExlbmd0aD1mdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YiYmKGI9LjIqYSk7dm9pZCAwPT09YyYmKGM9LjIqYik7dGhpcy5saW5lLnNjYWxlLnNldCgxLGEtYiwxKTt0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7dGhpcy5jb25lLnNjYWxlLnNldChjLGIsYyk7dGhpcy5jb25lLnBvc2l0aW9uLnk9YTt0aGlzLmNvbmUudXBkYXRlTWF0cml4KCl9O1xuVEhSRUUuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yPWZ1bmN0aW9uKGEpe3RoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoYSk7dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldChhKX07VEhSRUUuQm94SGVscGVyPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeTtiLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDcyKSwzKSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYixuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOjE2Nzc2OTYwfSksVEhSRUUuTGluZVBpZWNlcyk7dm9pZCAwIT09YSYmdGhpcy51cGRhdGUoYSl9O1RIUkVFLkJveEhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lLnByb3RvdHlwZSk7VEhSRUUuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Cb3hIZWxwZXI7XG5USFJFRS5Cb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhKXt2YXIgYj1hLmdlb21ldHJ5O251bGw9PT1iLmJvdW5kaW5nQm94JiZiLmNvbXB1dGVCb3VuZGluZ0JveCgpO3ZhciBjPWIuYm91bmRpbmdCb3gubWluLGI9Yi5ib3VuZGluZ0JveC5tYXgsZD10aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7ZFswXT1iLng7ZFsxXT1iLnk7ZFsyXT1iLno7ZFszXT1jLng7ZFs0XT1iLnk7ZFs1XT1iLno7ZFs2XT1jLng7ZFs3XT1iLnk7ZFs4XT1iLno7ZFs5XT1jLng7ZFsxMF09Yy55O2RbMTFdPWIuejtkWzEyXT1jLng7ZFsxM109Yy55O2RbMTRdPWIuejtkWzE1XT1iLng7ZFsxNl09Yy55O2RbMTddPWIuejtkWzE4XT1iLng7ZFsxOV09Yy55O2RbMjBdPWIuejtkWzIxXT1iLng7ZFsyMl09Yi55O2RbMjNdPWIuejtkWzI0XT1iLng7ZFsyNV09Yi55O2RbMjZdPWMuejtkWzI3XT1jLng7ZFsyOF09Yi55O2RbMjldPWMuejtkWzMwXT1jLng7ZFszMV09Yi55O1xuZFszMl09Yy56O2RbMzNdPWMueDtkWzM0XT1jLnk7ZFszNV09Yy56O2RbMzZdPWMueDtkWzM3XT1jLnk7ZFszOF09Yy56O2RbMzldPWIueDtkWzQwXT1jLnk7ZFs0MV09Yy56O2RbNDJdPWIueDtkWzQzXT1jLnk7ZFs0NF09Yy56O2RbNDVdPWIueDtkWzQ2XT1iLnk7ZFs0N109Yy56O2RbNDhdPWIueDtkWzQ5XT1iLnk7ZFs1MF09Yi56O2RbNTFdPWIueDtkWzUyXT1iLnk7ZFs1M109Yy56O2RbNTRdPWMueDtkWzU1XT1iLnk7ZFs1Nl09Yi56O2RbNTddPWMueDtkWzU4XT1iLnk7ZFs1OV09Yy56O2RbNjBdPWMueDtkWzYxXT1jLnk7ZFs2Ml09Yi56O2RbNjNdPWMueDtkWzY0XT1jLnk7ZFs2NV09Yy56O2RbNjZdPWIueDtkWzY3XT1jLnk7ZFs2OF09Yi56O2RbNjldPWIueDtkWzcwXT1jLnk7ZFs3MV09Yy56O3RoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5uZWVkc1VwZGF0ZT0hMDt0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7XG50aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLkJvdW5kaW5nQm94SGVscGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dm9pZCAwIT09Yj9iOjg5NDc4NDg7dGhpcy5vYmplY3Q9YTt0aGlzLmJveD1uZXcgVEhSRUUuQm94MztUSFJFRS5NZXNoLmNhbGwodGhpcyxuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwxLDEpLG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7Y29sb3I6Yyx3aXJlZnJhbWU6ITB9KSl9O1RIUkVFLkJvdW5kaW5nQm94SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk1lc2gucHJvdG90eXBlKTtUSFJFRS5Cb3VuZGluZ0JveEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuQm91bmRpbmdCb3hIZWxwZXI7VEhSRUUuQm91bmRpbmdCb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuYm94LnNldEZyb21PYmplY3QodGhpcy5vYmplY3QpO3RoaXMuYm94LnNpemUodGhpcy5zY2FsZSk7dGhpcy5ib3guY2VudGVyKHRoaXMucG9zaXRpb24pfTtcblRIUkVFLkNhbWVyYUhlbHBlcj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYixkKXtjKGEsZCk7YyhiLGQpfWZ1bmN0aW9uIGMoYSxiKXtkLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMpO2QuY29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKGIpKTt2b2lkIDA9PT1mW2FdJiYoZlthXT1bXSk7ZlthXS5wdXNoKGQudmVydGljZXMubGVuZ3RoLTEpfXZhciBkPW5ldyBUSFJFRS5HZW9tZXRyeSxlPW5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6MTY3NzcyMTUsdmVydGV4Q29sb3JzOlRIUkVFLkZhY2VDb2xvcnN9KSxmPXt9O2IoXCJuMVwiLFwibjJcIiwxNjc1NTIwMCk7YihcIm4yXCIsXCJuNFwiLDE2NzU1MjAwKTtiKFwibjRcIixcIm4zXCIsMTY3NTUyMDApO2IoXCJuM1wiLFwibjFcIiwxNjc1NTIwMCk7YihcImYxXCIsXCJmMlwiLDE2NzU1MjAwKTtiKFwiZjJcIixcImY0XCIsMTY3NTUyMDApO2IoXCJmNFwiLFwiZjNcIiwxNjc1NTIwMCk7YihcImYzXCIsXCJmMVwiLDE2NzU1MjAwKTtiKFwibjFcIixcImYxXCIsMTY3NTUyMDApO1xuYihcIm4yXCIsXCJmMlwiLDE2NzU1MjAwKTtiKFwibjNcIixcImYzXCIsMTY3NTUyMDApO2IoXCJuNFwiLFwiZjRcIiwxNjc1NTIwMCk7YihcInBcIixcIm4xXCIsMTY3MTE2ODApO2IoXCJwXCIsXCJuMlwiLDE2NzExNjgwKTtiKFwicFwiLFwibjNcIiwxNjcxMTY4MCk7YihcInBcIixcIm40XCIsMTY3MTE2ODApO2IoXCJ1MVwiLFwidTJcIiw0Mzc3NSk7YihcInUyXCIsXCJ1M1wiLDQzNzc1KTtiKFwidTNcIixcInUxXCIsNDM3NzUpO2IoXCJjXCIsXCJ0XCIsMTY3NzcyMTUpO2IoXCJwXCIsXCJjXCIsMzM1NTQ0Myk7YihcImNuMVwiLFwiY24yXCIsMzM1NTQ0Myk7YihcImNuM1wiLFwiY240XCIsMzM1NTQ0Myk7YihcImNmMVwiLFwiY2YyXCIsMzM1NTQ0Myk7YihcImNmM1wiLFwiY2Y0XCIsMzM1NTQ0Myk7VEhSRUUuTGluZS5jYWxsKHRoaXMsZCxlLFRIUkVFLkxpbmVQaWVjZXMpO3RoaXMuY2FtZXJhPWE7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5wb2ludE1hcD1mO3RoaXMudXBkYXRlKCl9O1xuVEhSRUUuQ2FtZXJhSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtUSFJFRS5DYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkNhbWVyYUhlbHBlcjtcblRIUkVFLkNhbWVyYUhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGEsYixjPW5ldyBUSFJFRS5WZWN0b3IzLGQ9bmV3IFRIUkVFLkNhbWVyYSxlPWZ1bmN0aW9uKGUsZyxoLGspe2Muc2V0KGcsaCxrKS51bnByb2plY3QoZCk7ZT1iW2VdO2lmKHZvaWQgMCE9PWUpZm9yKGc9MCxoPWUubGVuZ3RoO2c8aDtnKyspYS52ZXJ0aWNlc1tlW2ddXS5jb3B5KGMpfTtyZXR1cm4gZnVuY3Rpb24oKXthPXRoaXMuZ2VvbWV0cnk7Yj10aGlzLnBvaW50TWFwO2QucHJvamVjdGlvbk1hdHJpeC5jb3B5KHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXgpO2UoXCJjXCIsMCwwLC0xKTtlKFwidFwiLDAsMCwxKTtlKFwibjFcIiwtMSwtMSwtMSk7ZShcIm4yXCIsMSwtMSwtMSk7ZShcIm4zXCIsLTEsMSwtMSk7ZShcIm40XCIsMSwxLC0xKTtlKFwiZjFcIiwtMSwtMSwxKTtlKFwiZjJcIiwxLC0xLDEpO2UoXCJmM1wiLC0xLDEsMSk7ZShcImY0XCIsMSwxLDEpO2UoXCJ1MVwiLC43LDEuMSwtMSk7ZShcInUyXCIsLS43LDEuMSxcbi0xKTtlKFwidTNcIiwwLDIsLTEpO2UoXCJjZjFcIiwtMSwwLDEpO2UoXCJjZjJcIiwxLDAsMSk7ZShcImNmM1wiLDAsLTEsMSk7ZShcImNmNFwiLDAsMSwxKTtlKFwiY24xXCIsLTEsMCwtMSk7ZShcImNuMlwiLDEsMCwtMSk7ZShcImNuM1wiLDAsLTEsLTEpO2UoXCJjbjRcIiwwLDEsLTEpO2EudmVydGljZXNOZWVkVXBkYXRlPSEwfX0oKTtcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7Yj1ifHwxO3ZhciBjPW5ldyBUSFJFRS5HZW9tZXRyeTtjLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLWIsYiwwKSxuZXcgVEhSRUUuVmVjdG9yMyhiLGIsMCksbmV3IFRIUkVFLlZlY3RvcjMoYiwtYiwwKSxuZXcgVEhSRUUuVmVjdG9yMygtYiwtYiwwKSxuZXcgVEhSRUUuVmVjdG9yMygtYixiLDApKTt2YXIgZD1uZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2ZvZzohMX0pO2QuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7dGhpcy5saWdodFBsYW5lPW5ldyBUSFJFRS5MaW5lKGMsZCk7dGhpcy5hZGQodGhpcy5saWdodFBsYW5lKTtcbmM9bmV3IFRIUkVFLkdlb21ldHJ5O2MudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyxuZXcgVEhSRUUuVmVjdG9yMyk7ZD1uZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2ZvZzohMX0pO2QuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7dGhpcy50YXJnZXRMaW5lPW5ldyBUSFJFRS5MaW5lKGMsZCk7dGhpcy5hZGQodGhpcy50YXJnZXRMaW5lKTt0aGlzLnVwZGF0ZSgpfTtUSFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuRGlyZWN0aW9uYWxMaWdodEhlbHBlcjtcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5kaXNwb3NlKCk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTt0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpfTtcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjMsYz1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKTtiLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCk7Yy5zdWJWZWN0b3JzKGIsYSk7dGhpcy5saWdodFBsYW5lLmxvb2tBdChjKTt0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LnZlcnRpY2VzWzFdLmNvcHkoYyk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZT0hMDt0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IpfX0oKTtcblRIUkVFLkVkZ2VzSGVscGVyPWZ1bmN0aW9uKGEsYixjKXtiPXZvaWQgMCE9PWI/YjoxNjc3NzIxNTtUSFJFRS5MaW5lLmNhbGwodGhpcyxuZXcgVEhSRUUuRWRnZXNHZW9tZXRyeShhLmdlb21ldHJ5LGMpLG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7Y29sb3I6Yn0pLFRIUkVFLkxpbmVQaWVjZXMpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExfTtUSFJFRS5FZGdlc0hlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lLnByb3RvdHlwZSk7VEhSRUUuRWRnZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkVkZ2VzSGVscGVyO1xuVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXI9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5vYmplY3Q9YTt0aGlzLnNpemU9dm9pZCAwIT09Yj9iOjE7YT12b2lkIDAhPT1jP2M6MTY3NzY5NjA7ZD12b2lkIDAhPT1kP2Q6MTtiPW5ldyBUSFJFRS5HZW9tZXRyeTtjPTA7Zm9yKHZhciBlPXRoaXMub2JqZWN0Lmdlb21ldHJ5LmZhY2VzLmxlbmd0aDtjPGU7YysrKWIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyxuZXcgVEhSRUUuVmVjdG9yMyk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYixuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe2NvbG9yOmEsbGluZXdpZHRoOmR9KSxUSFJFRS5MaW5lUGllY2VzKTt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5ub3JtYWxNYXRyaXg9bmV3IFRIUkVFLk1hdHJpeDM7dGhpcy51cGRhdGUoKX07VEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1xuVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLkZhY2VOb3JtYWxzSGVscGVyO1xuVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2VvbWV0cnkudmVydGljZXMsYj10aGlzLm9iamVjdCxjPWIuZ2VvbWV0cnkudmVydGljZXMsZD1iLmdlb21ldHJ5LmZhY2VzLGU9Yi5tYXRyaXhXb3JsZDtiLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoZSk7Zm9yKHZhciBmPWI9MCxnPWQubGVuZ3RoO2I8ZztiKyssZis9Mil7dmFyIGg9ZFtiXTthW2ZdLmNvcHkoY1toLmFdKS5hZGQoY1toLmJdKS5hZGQoY1toLmNdKS5kaXZpZGVTY2FsYXIoMykuYXBwbHlNYXRyaXg0KGUpO2FbZisxXS5jb3B5KGgubm9ybWFsKS5hcHBseU1hdHJpeDModGhpcy5ub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSkuYWRkKGFbZl0pfXRoaXMuZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlPSEwO3JldHVybiB0aGlzfTtcblRIUkVFLkdyaWRIZWxwZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgVEhSRUUuR2VvbWV0cnksZD1uZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe3ZlcnRleENvbG9yczpUSFJFRS5WZXJ0ZXhDb2xvcnN9KTt0aGlzLmNvbG9yMT1uZXcgVEhSRUUuQ29sb3IoNDQ3MzkyNCk7dGhpcy5jb2xvcjI9bmV3IFRIUkVFLkNvbG9yKDg5NDc4NDgpO2Zvcih2YXIgZT0tYTtlPD1hO2UrPWIpe2MudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygtYSwwLGUpLG5ldyBUSFJFRS5WZWN0b3IzKGEsMCxlKSxuZXcgVEhSRUUuVmVjdG9yMyhlLDAsLWEpLG5ldyBUSFJFRS5WZWN0b3IzKGUsMCxhKSk7dmFyIGY9MD09PWU/dGhpcy5jb2xvcjE6dGhpcy5jb2xvcjI7Yy5jb2xvcnMucHVzaChmLGYsZixmKX1USFJFRS5MaW5lLmNhbGwodGhpcyxjLGQsVEhSRUUuTGluZVBpZWNlcyl9O1RIUkVFLkdyaWRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1xuVEhSRUUuR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuR3JpZEhlbHBlcjtUSFJFRS5HcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnM9ZnVuY3Rpb24oYSxiKXt0aGlzLmNvbG9yMS5zZXQoYSk7dGhpcy5jb2xvcjIuc2V0KGIpO3RoaXMuZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZT0hMH07XG5USFJFRS5IZW1pc3BoZXJlTGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5jb2xvcnM9W25ldyBUSFJFRS5Db2xvcixuZXcgVEhSRUUuQ29sb3JdO3ZhciBjPW5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShiLDQsMik7Yy5hcHBseU1hdHJpeCgobmV3IFRIUkVFLk1hdHJpeDQpLm1ha2VSb3RhdGlvblgoLU1hdGguUEkvMikpO2Zvcih2YXIgZD0wOzg+ZDtkKyspYy5mYWNlc1tkXS5jb2xvcj10aGlzLmNvbG9yc1s0PmQ/MDoxXTtkPW5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7dmVydGV4Q29sb3JzOlRIUkVFLkZhY2VDb2xvcnMsd2lyZWZyYW1lOiEwfSk7dGhpcy5saWdodFNwaGVyZT1uZXcgVEhSRUUuTWVzaChjLGQpO3RoaXMuYWRkKHRoaXMubGlnaHRTcGhlcmUpO1xudGhpcy51cGRhdGUoKX07VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLk9iamVjdDNELnByb3RvdHlwZSk7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5IZW1pc3BoZXJlTGlnaHRIZWxwZXI7VEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5saWdodFNwaGVyZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5saWdodFNwaGVyZS5tYXRlcmlhbC5kaXNwb3NlKCl9O1xuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLmNvbG9yc1swXS5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmNvbG9yc1sxXS5jb3B5KHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTt0aGlzLmxpZ2h0U3BoZXJlLmxvb2tBdChhLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKS5uZWdhdGUoKSk7dGhpcy5saWdodFNwaGVyZS5nZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlPSEwfX0oKTtcblRIUkVFLlBvaW50TGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSxiKXt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3ZhciBjPW5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShiLDQsMiksZD1uZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe3dpcmVmcmFtZTohMCxmb2c6ITF9KTtkLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcikubXVsdGlwbHlTY2FsYXIodGhpcy5saWdodC5pbnRlbnNpdHkpO1RIUkVFLk1lc2guY2FsbCh0aGlzLGMsZCk7dGhpcy5tYXRyaXg9dGhpcy5saWdodC5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWVzaC5wcm90b3R5cGUpO1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVRIUkVFLlBvaW50TGlnaHRIZWxwZXI7XG5USFJFRS5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCl9O1RIUkVFLlBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKS5tdWx0aXBseVNjYWxhcih0aGlzLmxpZ2h0LmludGVuc2l0eSl9O1xuVEhSRUUuU2tlbGV0b25IZWxwZXI9ZnVuY3Rpb24oYSl7dGhpcy5ib25lcz10aGlzLmdldEJvbmVMaXN0KGEpO2Zvcih2YXIgYj1uZXcgVEhSRUUuR2VvbWV0cnksYz0wO2M8dGhpcy5ib25lcy5sZW5ndGg7YysrKXRoaXMuYm9uZXNbY10ucGFyZW50IGluc3RhbmNlb2YgVEhSRUUuQm9uZSYmKGIudmVydGljZXMucHVzaChuZXcgVEhSRUUuVmVjdG9yMyksYi52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKSxiLmNvbG9ycy5wdXNoKG5ldyBUSFJFRS5Db2xvcigwLDAsMSkpLGIuY29sb3JzLnB1c2gobmV3IFRIUkVFLkNvbG9yKDAsMSwwKSkpO2M9bmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHt2ZXJ0ZXhDb2xvcnM6VEhSRUUuVmVydGV4Q29sb3JzLGRlcHRoVGVzdDohMSxkZXB0aFdyaXRlOiExLHRyYW5zcGFyZW50OiEwfSk7VEhSRUUuTGluZS5jYWxsKHRoaXMsYixjLFRIUkVFLkxpbmVQaWVjZXMpO3RoaXMucm9vdD1hO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7XG50aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy51cGRhdGUoKX07VEhSRUUuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1RIUkVFLlNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Ta2VsZXRvbkhlbHBlcjtUSFJFRS5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuZ2V0Qm9uZUxpc3Q9ZnVuY3Rpb24oYSl7dmFyIGI9W107YSBpbnN0YW5jZW9mIFRIUkVFLkJvbmUmJmIucHVzaChhKTtmb3IodmFyIGM9MDtjPGEuY2hpbGRyZW4ubGVuZ3RoO2MrKyliLnB1c2guYXBwbHkoYix0aGlzLmdldEJvbmVMaXN0KGEuY2hpbGRyZW5bY10pKTtyZXR1cm4gYn07XG5USFJFRS5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuZ2VvbWV0cnksYj0obmV3IFRIUkVFLk1hdHJpeDQpLmdldEludmVyc2UodGhpcy5yb290Lm1hdHJpeFdvcmxkKSxjPW5ldyBUSFJFRS5NYXRyaXg0LGQ9MCxlPTA7ZTx0aGlzLmJvbmVzLmxlbmd0aDtlKyspe3ZhciBmPXRoaXMuYm9uZXNbZV07Zi5wYXJlbnQgaW5zdGFuY2VvZiBUSFJFRS5Cb25lJiYoYy5tdWx0aXBseU1hdHJpY2VzKGIsZi5tYXRyaXhXb3JsZCksYS52ZXJ0aWNlc1tkXS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYyksYy5tdWx0aXBseU1hdHJpY2VzKGIsZi5wYXJlbnQubWF0cml4V29ybGQpLGEudmVydGljZXNbZCsxXS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYyksZCs9Mil9YS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7YS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKX07XG5USFJFRS5TcG90TGlnaHRIZWxwZXI9ZnVuY3Rpb24oYSl7VEhSRUUuT2JqZWN0M0QuY2FsbCh0aGlzKTt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO2E9bmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoMCwxLDEsOCwxLCEwKTthLmFwcGx5TWF0cml4KChuZXcgVEhSRUUuTWF0cml4NCkubWFrZVRyYW5zbGF0aW9uKDAsLS41LDApKTthLmFwcGx5TWF0cml4KChuZXcgVEhSRUUuTWF0cml4NCkubWFrZVJvdGF0aW9uWCgtTWF0aC5QSS8yKSk7dmFyIGI9bmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHt3aXJlZnJhbWU6ITAsZm9nOiExfSk7dGhpcy5jb25lPW5ldyBUSFJFRS5NZXNoKGEsYik7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnVwZGF0ZSgpfTtUSFJFRS5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlKTtcblRIUkVFLlNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuU3BvdExpZ2h0SGVscGVyO1RIUkVFLlNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKX07XG5USFJFRS5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBUSFJFRS5WZWN0b3IzLGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9dGhpcy5saWdodC5kaXN0YW5jZT90aGlzLmxpZ2h0LmRpc3RhbmNlOjFFNCxkPWMqTWF0aC50YW4odGhpcy5saWdodC5hbmdsZSk7dGhpcy5jb25lLnNjYWxlLnNldChkLGQsYyk7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC5tYXRyaXhXb3JsZCk7Yi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQpO3RoaXMuY29uZS5sb29rQXQoYi5zdWIoYSkpO3RoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KX19KCk7XG5USFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyPWZ1bmN0aW9uKGEsYixjLGQpe3RoaXMub2JqZWN0PWE7dGhpcy5zaXplPXZvaWQgMCE9PWI/YjoxO2I9dm9pZCAwIT09Yz9jOjE2NzExNjgwO2Q9dm9pZCAwIT09ZD9kOjE7Yz1uZXcgVEhSRUUuR2VvbWV0cnk7YT1hLmdlb21ldHJ5LmZhY2VzO2Zvcih2YXIgZT0wLGY9YS5sZW5ndGg7ZTxmO2UrKylmb3IodmFyIGc9MCxoPWFbZV0udmVydGV4Tm9ybWFscy5sZW5ndGg7ZzxoO2crKyljLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMsbmV3IFRIUkVFLlZlY3RvcjMpO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGMsbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjpiLGxpbmV3aWR0aDpkfSksVEhSRUUuTGluZVBpZWNlcyk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMubm9ybWFsTWF0cml4PW5ldyBUSFJFRS5NYXRyaXgzO3RoaXMudXBkYXRlKCl9O1RIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTGluZS5wcm90b3R5cGUpO1xuVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlcjtcblRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhKXt2YXIgYj1uZXcgVEhSRUUuVmVjdG9yMztyZXR1cm4gZnVuY3Rpb24oYSl7YT1bXCJhXCIsXCJiXCIsXCJjXCIsXCJkXCJdO3RoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO2Zvcih2YXIgZD10aGlzLmdlb21ldHJ5LnZlcnRpY2VzLGU9dGhpcy5vYmplY3QuZ2VvbWV0cnkudmVydGljZXMsZj10aGlzLm9iamVjdC5nZW9tZXRyeS5mYWNlcyxnPXRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkLGg9MCxrPTAsbD1mLmxlbmd0aDtrPGw7aysrKWZvcih2YXIgcD1mW2tdLG49MCxtPXAudmVydGV4Tm9ybWFscy5sZW5ndGg7bjxtO24rKyl7dmFyIHM9cC52ZXJ0ZXhOb3JtYWxzW25dO2RbaF0uY29weShlW3BbYVtuXV1dKS5hcHBseU1hdHJpeDQoZyk7Yi5jb3B5KHMpLmFwcGx5TWF0cml4Myh0aGlzLm5vcm1hbE1hdHJpeCkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKTtcbmIuYWRkKGRbaF0pO2grPTE7ZFtoXS5jb3B5KGIpO2grPTF9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7cmV0dXJuIHRoaXN9fSgpO1xuVEhSRUUuVmVydGV4VGFuZ2VudHNIZWxwZXI9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5vYmplY3Q9YTt0aGlzLnNpemU9dm9pZCAwIT09Yj9iOjE7Yj12b2lkIDAhPT1jP2M6MjU1O2Q9dm9pZCAwIT09ZD9kOjE7Yz1uZXcgVEhSRUUuR2VvbWV0cnk7YT1hLmdlb21ldHJ5LmZhY2VzO2Zvcih2YXIgZT0wLGY9YS5sZW5ndGg7ZTxmO2UrKylmb3IodmFyIGc9MCxoPWFbZV0udmVydGV4VGFuZ2VudHMubGVuZ3RoO2c8aDtnKyspYy52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKSxjLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMpO1RIUkVFLkxpbmUuY2FsbCh0aGlzLGMsbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjpiLGxpbmV3aWR0aDpkfSksVEhSRUUuTGluZVBpZWNlcyk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMudXBkYXRlKCl9O1RIUkVFLlZlcnRleFRhbmdlbnRzSGVscGVyLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFRIUkVFLkxpbmUucHJvdG90eXBlKTtcblRIUkVFLlZlcnRleFRhbmdlbnRzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5WZXJ0ZXhUYW5nZW50c0hlbHBlcjtcblRIUkVFLlZlcnRleFRhbmdlbnRzSGVscGVyLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IFRIUkVFLlZlY3RvcjM7cmV0dXJuIGZ1bmN0aW9uKGEpe2E9W1wiYVwiLFwiYlwiLFwiY1wiLFwiZFwiXTt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7Zm9yKHZhciBkPXRoaXMuZ2VvbWV0cnkudmVydGljZXMsZT10aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcyxmPXRoaXMub2JqZWN0Lmdlb21ldHJ5LmZhY2VzLGc9dGhpcy5vYmplY3QubWF0cml4V29ybGQsaD0wLGs9MCxsPWYubGVuZ3RoO2s8bDtrKyspZm9yKHZhciBwPWZba10sbj0wLG09cC52ZXJ0ZXhUYW5nZW50cy5sZW5ndGg7bjxtO24rKyl7dmFyIHM9cC52ZXJ0ZXhUYW5nZW50c1tuXTtkW2hdLmNvcHkoZVtwW2Fbbl1dXSkuYXBwbHlNYXRyaXg0KGcpO2IuY29weShzKS50cmFuc2Zvcm1EaXJlY3Rpb24oZykubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKTtiLmFkZChkW2hdKTtoKz0xO2RbaF0uY29weShiKTtcbmgrPTF9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU9ITA7cmV0dXJuIHRoaXN9fSgpO1RIUkVFLldpcmVmcmFtZUhlbHBlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXZvaWQgMCE9PWI/YjoxNjc3NzIxNTtUSFJFRS5MaW5lLmNhbGwodGhpcyxuZXcgVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkoYS5nZW9tZXRyeSksbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtjb2xvcjpjfSksVEhSRUUuTGluZVBpZWNlcyk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITF9O1RIUkVFLldpcmVmcmFtZUhlbHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5MaW5lLnByb3RvdHlwZSk7VEhSRUUuV2lyZWZyYW1lSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5XaXJlZnJhbWVIZWxwZXI7XG5USFJFRS5JbW1lZGlhdGVSZW5kZXJPYmplY3Q9ZnVuY3Rpb24oKXtUSFJFRS5PYmplY3QzRC5jYWxsKHRoaXMpO3RoaXMucmVuZGVyPWZ1bmN0aW9uKGEpe319O1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShUSFJFRS5PYmplY3QzRC5wcm90b3R5cGUpO1RIUkVFLkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3I9VEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1RIUkVFLk1vcnBoQmxlbmRNZXNoPWZ1bmN0aW9uKGEsYil7VEhSRUUuTWVzaC5jYWxsKHRoaXMsYSxiKTt0aGlzLmFuaW1hdGlvbnNNYXA9e307dGhpcy5hbmltYXRpb25zTGlzdD1bXTt2YXIgYz10aGlzLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7dGhpcy5jcmVhdGVBbmltYXRpb24oXCJfX2RlZmF1bHRcIiwwLGMtMSxjLzEpO3RoaXMuc2V0QW5pbWF0aW9uV2VpZ2h0KFwiX19kZWZhdWx0XCIsMSl9O1xuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVEhSRUUuTWVzaC5wcm90b3R5cGUpO1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1USFJFRS5Nb3JwaEJsZW5kTWVzaDtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuY3JlYXRlQW5pbWF0aW9uPWZ1bmN0aW9uKGEsYixjLGQpe2I9e3N0YXJ0RnJhbWU6YixlbmRGcmFtZTpjLGxlbmd0aDpjLWIrMSxmcHM6ZCxkdXJhdGlvbjooYy1iKS9kLGxhc3RGcmFtZTowLGN1cnJlbnRGcmFtZTowLGFjdGl2ZTohMSx0aW1lOjAsZGlyZWN0aW9uOjEsd2VpZ2h0OjEsZGlyZWN0aW9uQmFja3dhcmRzOiExLG1pcnJvcmVkTG9vcDohMX07dGhpcy5hbmltYXRpb25zTWFwW2FdPWI7dGhpcy5hbmltYXRpb25zTGlzdC5wdXNoKGIpfTtcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5hdXRvQ3JlYXRlQW5pbWF0aW9ucz1mdW5jdGlvbihhKXtmb3IodmFyIGI9LyhbYS16XSspXz8oXFxkKykvLGMsZD17fSxlPXRoaXMuZ2VvbWV0cnksZj0wLGc9ZS5tb3JwaFRhcmdldHMubGVuZ3RoO2Y8ZztmKyspe3ZhciBoPWUubW9ycGhUYXJnZXRzW2ZdLm5hbWUubWF0Y2goYik7aWYoaCYmMTxoLmxlbmd0aCl7dmFyIGs9aFsxXTtkW2tdfHwoZFtrXT17c3RhcnQ6SW5maW5pdHksZW5kOi1JbmZpbml0eX0pO2g9ZFtrXTtmPGguc3RhcnQmJihoLnN0YXJ0PWYpO2Y+aC5lbmQmJihoLmVuZD1mKTtjfHwoYz1rKX19Zm9yKGsgaW4gZCloPWRba10sdGhpcy5jcmVhdGVBbmltYXRpb24oayxoLnN0YXJ0LGguZW5kLGEpO3RoaXMuZmlyc3RBbmltYXRpb249Y307XG5USFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuc2V0QW5pbWF0aW9uRGlyZWN0aW9uRm9yd2FyZD1mdW5jdGlvbihhKXtpZihhPXRoaXMuYW5pbWF0aW9uc01hcFthXSlhLmRpcmVjdGlvbj0xLGEuZGlyZWN0aW9uQmFja3dhcmRzPSExfTtUSFJFRS5Nb3JwaEJsZW5kTWVzaC5wcm90b3R5cGUuc2V0QW5pbWF0aW9uRGlyZWN0aW9uQmFja3dhcmQ9ZnVuY3Rpb24oYSl7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYS5kaXJlY3Rpb249LTEsYS5kaXJlY3Rpb25CYWNrd2FyZHM9ITB9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25GUFM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmFuaW1hdGlvbnNNYXBbYV07YyYmKGMuZnBzPWIsYy5kdXJhdGlvbj0oYy5lbmQtYy5zdGFydCkvYy5mcHMpfTtcblRIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25EdXJhdGlvbj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYW5pbWF0aW9uc01hcFthXTtjJiYoYy5kdXJhdGlvbj1iLGMuZnBzPShjLmVuZC1jLnN0YXJ0KS9jLmR1cmF0aW9uKX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnNldEFuaW1hdGlvbldlaWdodD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYW5pbWF0aW9uc01hcFthXTtjJiYoYy53ZWlnaHQ9Yil9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5zZXRBbmltYXRpb25UaW1lPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5hbmltYXRpb25zTWFwW2FdO2MmJihjLnRpbWU9Yil9O1RIUkVFLk1vcnBoQmxlbmRNZXNoLnByb3RvdHlwZS5nZXRBbmltYXRpb25UaW1lPWZ1bmN0aW9uKGEpe3ZhciBiPTA7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYj1hLnRpbWU7cmV0dXJuIGJ9O1xuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLmdldEFuaW1hdGlvbkR1cmF0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPS0xO2lmKGE9dGhpcy5hbmltYXRpb25zTWFwW2FdKWI9YS5kdXJhdGlvbjtyZXR1cm4gYn07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnBsYXlBbmltYXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5hbmltYXRpb25zTWFwW2FdO2I/KGIudGltZT0wLGIuYWN0aXZlPSEwKTpUSFJFRS53YXJuKFwiVEhSRUUuTW9ycGhCbGVuZE1lc2g6IGFuaW1hdGlvbltcIithK1wiXSB1bmRlZmluZWQgaW4gLnBsYXlBbmltYXRpb24oKVwiKX07VEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnN0b3BBbmltYXRpb249ZnVuY3Rpb24oYSl7aWYoYT10aGlzLmFuaW1hdGlvbnNNYXBbYV0pYS5hY3RpdmU9ITF9O1xuVEhSRUUuTW9ycGhCbGVuZE1lc2gucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihhKXtmb3IodmFyIGI9MCxjPXRoaXMuYW5pbWF0aW9uc0xpc3QubGVuZ3RoO2I8YztiKyspe3ZhciBkPXRoaXMuYW5pbWF0aW9uc0xpc3RbYl07aWYoZC5hY3RpdmUpe3ZhciBlPWQuZHVyYXRpb24vZC5sZW5ndGg7ZC50aW1lKz1kLmRpcmVjdGlvbiphO2lmKGQubWlycm9yZWRMb29wKXtpZihkLnRpbWU+ZC5kdXJhdGlvbnx8MD5kLnRpbWUpZC5kaXJlY3Rpb24qPS0xLGQudGltZT5kLmR1cmF0aW9uJiYoZC50aW1lPWQuZHVyYXRpb24sZC5kaXJlY3Rpb25CYWNrd2FyZHM9ITApLDA+ZC50aW1lJiYoZC50aW1lPTAsZC5kaXJlY3Rpb25CYWNrd2FyZHM9ITEpfWVsc2UgZC50aW1lJT1kLmR1cmF0aW9uLDA+ZC50aW1lJiYoZC50aW1lKz1kLmR1cmF0aW9uKTt2YXIgZj1kLnN0YXJ0RnJhbWUrVEhSRUUuTWF0aC5jbGFtcChNYXRoLmZsb29yKGQudGltZS9lKSwwLGQubGVuZ3RoLTEpLGc9ZC53ZWlnaHQ7XG5mIT09ZC5jdXJyZW50RnJhbWUmJih0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tkLmxhc3RGcmFtZV09MCx0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tkLmN1cnJlbnRGcmFtZV09MSpnLHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2ZdPTAsZC5sYXN0RnJhbWU9ZC5jdXJyZW50RnJhbWUsZC5jdXJyZW50RnJhbWU9Zik7ZT1kLnRpbWUlZS9lO2QuZGlyZWN0aW9uQmFja3dhcmRzJiYoZT0xLWUpO3RoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzW2QuY3VycmVudEZyYW1lXT1lKmc7dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXNbZC5sYXN0RnJhbWVdPSgxLWUpKmd9fX07XG4iLCJ2YXIgcmVmJCwgaWQsIGxvZywgdW5saW5lcywgdGVtcGxhdGUsIERlYnVnT3V0cHV0LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCB1bmxpbmVzID0gcmVmJC51bmxpbmVzO1xudGVtcGxhdGUgPSB7XG4gIGNlbGw6IGZ1bmN0aW9uKGl0KXtcbiAgICBpZiAoaXQpIHtcbiAgICAgIHJldHVybiBcIuKWkuKWklwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCIgIFwiO1xuICAgIH1cbiAgfSxcbiAgc2NvcmU6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMsIG51bGwsIDIpO1xuICB9LFxuICBicmljazogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5zaGFwZS5tYXAoZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0Lm1hcCh0ZW1wbGF0ZS5jZWxsKS5qb2luKCcgJyk7XG4gICAgfSkuam9pbihcIlxcbiAgICAgICAgXCIpO1xuICB9LFxuICBrZXlzOiBmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgbGVuJCwga2V5U3VtbWFyeSwgcmVzdWx0cyQgPSBbXTtcbiAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gdGhpcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBrZXlTdW1tYXJ5ID0gdGhpc1tpJF07XG4gICAgICAgIHJlc3VsdHMkLnB1c2goa2V5U3VtbWFyeS5rZXkgKyAnLScgKyBrZXlTdW1tYXJ5LmFjdGlvbiArIFwifFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzJDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiKG5vIGNoYW5nZSlcIjtcbiAgICB9XG4gIH0sXG4gIG5vcm1hbDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gXCJzY29yZSAtIFwiICsgdGVtcGxhdGUuc2NvcmUuYXBwbHkodGhpcy5zY29yZSkgKyBcIlxcbmxpbmVzIC0gXCIgKyB0aGlzLmxpbmVzICsgXCJcXG5cXG4gbWV0YSAtIFwiICsgdGhpcy5tZXRhZ2FtZVN0YXRlICsgXCJcXG4gdGltZSAtIFwiICsgdGhpcy5lbGFwc2VkVGltZSArIFwiXFxuZnJhbWUgLSBcIiArIHRoaXMuZWxhcHNlZEZyYW1lcyArIFwiXFxuIGtleXMgLSBcIiArIHRlbXBsYXRlLmtleXMuYXBwbHkodGhpcy5pbnB1dFN0YXRlKSArIFwiXFxuIGRyb3AgLSBcIiArICh0aGlzLmZvcmNlRG93bk1vZGUgPyAnc29mdCcgOiAnYXV0bycpO1xuICB9LFxuICBtZW51SXRlbXM6IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGl4LCBpdGVtO1xuICAgIHJldHVybiBcIlwiICsgdW5saW5lcygoZnVuY3Rpb24oKXtcbiAgICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB0aGlzLm1lbnVEYXRhKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBpeCA9IGkkO1xuICAgICAgICBpdGVtID0gcmVmJFtpJF07XG4gICAgICAgIHJlc3VsdHMkLnB1c2godGVtcGxhdGUubWVudUl0ZW0uY2FsbChpdGVtLCBpeCwgdGhpcy5jdXJyZW50SW5kZXgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzJDtcbiAgICB9LmNhbGwodGhpcykpKTtcbiAgfSxcbiAgc3RhcnRNZW51OiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBcIlNUQVJUIE1FTlVcXG5cIiArIHRlbXBsYXRlLm1lbnVJdGVtcy5hcHBseSh0aGlzKTtcbiAgfSxcbiAgbWVudUl0ZW06IGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50SW5kZXgpe1xuICAgIHJldHVybiBcIlwiICsgKGluZGV4ID09PSBjdXJyZW50SW5kZXggPyBcIj5cIiA6IFwiIFwiKSArIFwiIFwiICsgdGhpcy50ZXh0O1xuICB9LFxuICBmYWlsdXJlOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBcIiAgIEdBTUUgT1ZFUlxcblxcbiAgICAgU2NvcmVcXG5cXG4gIFNpbmdsZSAtIFwiICsgdGhpcy5zY29yZS5zaW5nbGVzICsgXCJcXG4gIERvdWJsZSAtIFwiICsgdGhpcy5zY29yZS5kb3VibGVzICsgXCJcXG4gIFRyaXBsZSAtIFwiICsgdGhpcy5zY29yZS50cmlwbGVzICsgXCJcXG4gIFRldHJpcyAtIFwiICsgdGhpcy5zY29yZS50ZXRyaXMgKyBcIlxcblxcblRvdGFsIExpbmVzOiBcIiArIHRoaXMuc2NvcmUubGluZXMgKyBcIlxcblxcblwiICsgdGVtcGxhdGUubWVudUl0ZW1zLmFwcGx5KHRoaXMuZmFpbE1lbnVTdGF0ZSk7XG4gIH1cbn07XG5vdXQkLkRlYnVnT3V0cHV0ID0gRGVidWdPdXRwdXQgPSAoZnVuY3Rpb24oKXtcbiAgRGVidWdPdXRwdXQuZGlzcGxheU5hbWUgPSAnRGVidWdPdXRwdXQnO1xuICB2YXIgcHJvdG90eXBlID0gRGVidWdPdXRwdXQucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IERlYnVnT3V0cHV0O1xuICBmdW5jdGlvbiBEZWJ1Z091dHB1dCgpe1xuICAgIHRoaXMuZGJvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRibyk7XG4gICAgdGhpcy5kYm8uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICB9XG4gIHByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihzdGF0ZSl7XG4gICAgc3dpdGNoIChzdGF0ZS5tZXRhZ2FtZVN0YXRlKSB7XG4gICAgY2FzZSAnZ2FtZSc6XG4gICAgICByZXR1cm4gdGhpcy5kYm8uaW5uZXJIVE1MID0gdGVtcGxhdGUubm9ybWFsLmFwcGx5KHN0YXRlKTtcbiAgICBjYXNlICdmYWlsdXJlJzpcbiAgICAgIHJldHVybiB0aGlzLmRiby5pbm5lckhUTUwgPSB0ZW1wbGF0ZS5mYWlsdXJlLmFwcGx5KHN0YXRlKTtcbiAgICBjYXNlICdzdGFydC1tZW51JzpcbiAgICAgIHJldHVybiB0aGlzLmRiby5pbm5lckhUTUwgPSB0ZW1wbGF0ZS5zdGFydE1lbnUuYXBwbHkoc3RhdGUuc3RhcnRNZW51U3RhdGUpO1xuICAgIGNhc2UgJ3JlbW92ZS1saW5lcyc6XG4gICAgICByZXR1cm4gdGhpcy5kYm8uaW5uZXJIVE1MID0gdGVtcGxhdGUubm9ybWFsLmFwcGx5KHN0YXRlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRoaXMuZGJvLmlubmVySFRNTCA9IFwiVW5rbm93biBtZXRhZ2FtZSBzdGF0ZTogXCIgKyBzdGF0ZS5tZXRhZ2FtZVN0YXRlO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIERlYnVnT3V0cHV0O1xufSgpKTsiLCJ2YXIgcmVmJCwgaWQsIGxvZywgcmFmLCBGcmFtZURyaXZlciwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZywgcmFmID0gcmVmJC5yYWY7XG5vdXQkLkZyYW1lRHJpdmVyID0gRnJhbWVEcml2ZXIgPSAoZnVuY3Rpb24oKXtcbiAgRnJhbWVEcml2ZXIuZGlzcGxheU5hbWUgPSAnRnJhbWVEcml2ZXInO1xuICB2YXIgcHJvdG90eXBlID0gRnJhbWVEcml2ZXIucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IEZyYW1lRHJpdmVyO1xuICBmdW5jdGlvbiBGcmFtZURyaXZlcihvbkZyYW1lKXtcbiAgICB0aGlzLm9uRnJhbWUgPSBvbkZyYW1lO1xuICAgIHRoaXMuZnJhbWUgPSBiaW5kJCh0aGlzLCAnZnJhbWUnLCBwcm90b3R5cGUpO1xuICAgIGxvZyhcIkZyYW1lRHJpdmVyOjpuZXdcIik7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHplcm86IDAsXG4gICAgICB0aW1lOiAwLFxuICAgICAgZnJhbWU6IDAsXG4gICAgICBydW5uaW5nOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgcHJvdG90eXBlLmZyYW1lID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgbm93LCDOlHQ7XG4gICAgaWYgKHRoaXMuc3RhdGUucnVubmluZykge1xuICAgICAgcmFmKHRoaXMuZnJhbWUpO1xuICAgIH1cbiAgICBub3cgPSBEYXRlLm5vdygpIC0gdGhpcy5zdGF0ZS56ZXJvO1xuICAgIM6UdCA9IG5vdyAtIHRoaXMuc3RhdGUudGltZTtcbiAgICB0aGlzLnN0YXRlLnRpbWUgPSBub3c7XG4gICAgdGhpcy5zdGF0ZS5mcmFtZSA9IHRoaXMuc3RhdGUuZnJhbWUgKyAxO1xuICAgIHRoaXMuc3RhdGUuzpR0ID0gzpR0O1xuICAgIHJldHVybiB0aGlzLm9uRnJhbWUozpR0LCB0aGlzLnN0YXRlLnRpbWUsIHRoaXMuc3RhdGUuZnJhbWUpO1xuICB9O1xuICBwcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpe1xuICAgIGlmICh0aGlzLnN0YXRlLnJ1bm5pbmcgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nKFwiRnJhbWVEcml2ZXI6OlN0YXJ0IC0gc3RhcnRpbmdcIik7XG4gICAgdGhpcy5zdGF0ZS56ZXJvID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLnN0YXRlLnRpbWUgPSAwO1xuICAgIHRoaXMuc3RhdGUucnVubmluZyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWUoKTtcbiAgfTtcbiAgcHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpe1xuICAgIGlmICh0aGlzLnN0YXRlLnJ1bm5pbmcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZyhcIkZyYW1lRHJpdmVyOjpTdG9wIC0gc3RvcHBpbmdcIik7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucnVubmluZyA9IGZhbHNlO1xuICB9O1xuICByZXR1cm4gRnJhbWVEcml2ZXI7XG59KCkpO1xuZnVuY3Rpb24gYmluZCQob2JqLCBrZXksIHRhcmdldCl7XG4gIHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gKHRhcmdldCB8fCBvYmopW2tleV0uYXBwbHkob2JqLCBhcmd1bWVudHMpIH07XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHJhbmQsIFRpbWVyLCBHYW1lU3RhdGUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIHJhbmQgPSByZWYkLnJhbmQ7XG5UaW1lciA9IHJlcXVpcmUoJy4vdGltZXInKS5UaW1lcjtcbm91dCQuR2FtZVN0YXRlID0gR2FtZVN0YXRlID0gKGZ1bmN0aW9uKCl7XG4gIEdhbWVTdGF0ZS5kaXNwbGF5TmFtZSA9ICdHYW1lU3RhdGUnO1xuICB2YXIgZGVmYXVsdHMsIHByb3RvdHlwZSA9IEdhbWVTdGF0ZS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gR2FtZVN0YXRlO1xuICBkZWZhdWx0cyA9IHtcbiAgICBtZXRhZ2FtZVN0YXRlOiAnbm8tZ2FtZScsXG4gICAgaW5wdXRTdGF0ZTogW10sXG4gICAgZm9yY2VEb3duTW9kZTogZmFsc2UsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgZWxhcHNlZEZyYW1lczogMCxcbiAgICByb3dzVG9SZW1vdmU6IFtdLFxuICAgIGZsYWdzOiB7XG4gICAgICByb3dzUmVtb3ZlZFRoaXNGcmFtZTogZmFsc2VcbiAgICB9LFxuICAgIHNjb3JlOiB7XG4gICAgICBwb2ludHM6IDAsXG4gICAgICBsaW5lczogMCxcbiAgICAgIHNpbmdsZXM6IDAsXG4gICAgICBkb3VibGVzOiAwLFxuICAgICAgdHJpcGxlczogMCxcbiAgICAgIHRldHJpczogMFxuICAgIH0sXG4gICAgYnJpY2s6IHtcbiAgICAgIG5leHQ6IHZvaWQgOCxcbiAgICAgIGN1cnJlbnQ6IHZvaWQgOFxuICAgIH0sXG4gICAgdGltZXJzOiB7XG4gICAgICBkcm9wVGltZXI6IG51bGwsXG4gICAgICBmb3JjZURyb3BXYWl0VGllbXI6IG51bGwsXG4gICAgICBrZXlSZXBlYXRUaW1lcjogbnVsbCxcbiAgICAgIHJlbW92YWxBbmltYXRpb246IG51bGwsXG4gICAgICB0aXRsZVJldmVhbFRpbWVyOiBudWxsLFxuICAgICAgZmFpbHVyZVJldmVhbFRpbWVyOiBudWxsXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICB0aWxlV2lkdGg6IDEwLFxuICAgICAgdGlsZUhlaWdodDogMTgsXG4gICAgICB0aWxlU2l6ZTogMjAsXG4gICAgICBoYXJkRHJvcEpvbHRBbW91bnQ6IDAuMzUsXG4gICAgICBkcm9wU3BlZWQ6IDMwMCxcbiAgICAgIGZvcmNlRHJvcFdhaXRUaW1lOiAxMDAsXG4gICAgICByZW1vdmFsQW5pbWF0aW9uVGltZTogNTAwLFxuICAgICAgaGFyZERyb3BFZmZlY3RUaW1lOiAxMDAsXG4gICAgICBrZXlSZXBlYXRUaW1lOiAxMDAsXG4gICAgICB0aXRsZVJldmVhbFRpbWU6IDQwMDBcbiAgICB9LFxuICAgIGFyZW5hOiB7XG4gICAgICBjZWxsczogW1tdXSxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBHYW1lU3RhdGUob3B0aW9ucyl7XG4gICAgaW1wb3J0JCh0aGlzLCBkZWZhdWx0cyk7XG4gICAgaW1wb3J0JCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMudGltZXJzLmRyb3BUaW1lciA9IG5ldyBUaW1lcih0aGlzLm9wdGlvbnMuZHJvcFNwZWVkKTtcbiAgICB0aGlzLnRpbWVycy5mb3JjZURyb3BXYWl0VGltZXIgPSBuZXcgVGltZXIodGhpcy5vcHRpb25zLmZvcmNlRHJvcFdhaXRUaW1lKTtcbiAgICB0aGlzLnRpbWVycy5rZXlSZXBlYXRUaW1lciA9IG5ldyBUaW1lcih0aGlzLm9wdGlvbnMua2V5UmVwZWF0VGltZSk7XG4gICAgdGhpcy50aW1lcnMucmVtb3ZhbEFuaW1hdGlvbiA9IG5ldyBUaW1lcih0aGlzLm9wdGlvbnMucmVtb3ZhbEFuaW1hdGlvblRpbWUpO1xuICAgIHRoaXMudGltZXJzLmhhcmREcm9wRWZmZWN0ID0gbmV3IFRpbWVyKHRoaXMub3B0aW9ucy5oYXJkRHJvcEVmZmVjdFRpbWUpO1xuICAgIHRoaXMudGltZXJzLnRpdGxlUmV2ZWFsVGltZXIgPSBuZXcgVGltZXIodGhpcy5vcHRpb25zLnRpdGxlUmV2ZWFsVGltZSk7XG4gICAgdGhpcy50aW1lcnMuZmFpbHVyZVJldmVhbFRpbWVyID0gbmV3IFRpbWVyKHRoaXMub3B0aW9ucy50aXRsZVJldmVhbFRpbWUpO1xuICAgIHRoaXMuYXJlbmEgPSBjb25zdHJ1Y3Rvci5uZXdBcmVuYSh0aGlzLm9wdGlvbnMudGlsZVdpZHRoLCB0aGlzLm9wdGlvbnMudGlsZUhlaWdodCk7XG4gIH1cbiAgR2FtZVN0YXRlLm5ld0FyZW5hID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCl7XG4gICAgdmFyIHJvdywgY2VsbDtcbiAgICByZXR1cm4ge1xuICAgICAgY2VsbHM6IChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgaSQsIHRvJCwgbHJlc3VsdCQsIGokLCB0bzEkLCByZXN1bHRzJCA9IFtdO1xuICAgICAgICBmb3IgKGkkID0gMCwgdG8kID0gaGVpZ2h0OyBpJCA8IHRvJDsgKytpJCkge1xuICAgICAgICAgIHJvdyA9IGkkO1xuICAgICAgICAgIGxyZXN1bHQkID0gW107XG4gICAgICAgICAgZm9yIChqJCA9IDAsIHRvMSQgPSB3aWR0aDsgaiQgPCB0bzEkOyArK2okKSB7XG4gICAgICAgICAgICBjZWxsID0gaiQ7XG4gICAgICAgICAgICBscmVzdWx0JC5wdXNoKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHRzJC5wdXNoKGxyZXN1bHQkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cyQ7XG4gICAgICB9KCkpLFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICB9O1xuICB9O1xuICByZXR1cm4gR2FtZVN0YXRlO1xufSgpKTtcbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIGZpbHRlciwgVGltZXIsIGtleVJlcGVhdFRpbWUsIEtFWSwgQUNUSU9OX05BTUUsIGV2ZW50U3VtbWFyeSwgbmV3QmxhbmtLZXlzdGF0ZSwgSW5wdXRIYW5kbGVyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBmaWx0ZXIgPSByZWYkLmZpbHRlcjtcblRpbWVyID0gcmVxdWlyZSgnLi90aW1lcicpLlRpbWVyO1xua2V5UmVwZWF0VGltZSA9IDE1MDtcbktFWSA9IHtcbiAgUkVUVVJOOiAxMyxcbiAgRVNDQVBFOiAyNyxcbiAgU1BBQ0U6IDMyLFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBaOiA5MCxcbiAgWDogODgsXG4gIE9ORTogNDksXG4gIFRXTzogNTAsXG4gIFRIUkVFOiA1MSxcbiAgRk9VUjogNTIsXG4gIEZJVkU6IDUzLFxuICBTSVg6IDU0XG59O1xuQUNUSU9OX05BTUUgPSAocmVmJCA9IHt9LCByZWYkW0tFWS5SRVRVUk4gKyBcIlwiXSA9ICdjb25maXJtJywgcmVmJFtLRVkuRVNDQVBFICsgXCJcIl0gPSAnY2FuY2VsJywgcmVmJFtLRVkuU1BBQ0UgKyBcIlwiXSA9ICdoYXJkLWRyb3AnLCByZWYkW0tFWS5YICsgXCJcIl0gPSAnY3cnLCByZWYkW0tFWS5aICsgXCJcIl0gPSAnY2N3JywgcmVmJFtLRVkuVVAgKyBcIlwiXSA9ICd1cCcsIHJlZiRbS0VZLkxFRlQgKyBcIlwiXSA9ICdsZWZ0JywgcmVmJFtLRVkuUklHSFQgKyBcIlwiXSA9ICdyaWdodCcsIHJlZiRbS0VZLkRPV04gKyBcIlwiXSA9ICdkb3duJywgcmVmJFtLRVkuT05FICsgXCJcIl0gPSAnZGVidWctMScsIHJlZiRbS0VZLlRXTyArIFwiXCJdID0gJ2RlYnVnLTInLCByZWYkW0tFWS5USFJFRSArIFwiXCJdID0gJ2RlYnVnLTMnLCByZWYkW0tFWS5GT1VSICsgXCJcIl0gPSAnZGVidWctNCcsIHJlZiRbS0VZLkZJVkUgKyBcIlwiXSA9ICdkZWJ1Zy01JywgcmVmJCk7XG5ldmVudFN1bW1hcnkgPSBmdW5jdGlvbihrZXksIHN0YXRlKXtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IGtleSxcbiAgICBhY3Rpb246IHN0YXRlID8gJ2Rvd24nIDogJ3VwJ1xuICB9O1xufTtcbm5ld0JsYW5rS2V5c3RhdGUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgIHVwOiBmYWxzZSxcbiAgICBkb3duOiBmYWxzZSxcbiAgICBsZWZ0OiBmYWxzZSxcbiAgICByaWdodDogZmFsc2UsXG4gICAgYWN0aW9uQTogZmFsc2UsXG4gICAgYWN0aW9uQjogZmFsc2UsXG4gICAgY29uZmlybTogZmFsc2UsXG4gICAgY2FuY2VsOiBmYWxzZVxuICB9O1xufTtcbm91dCQuSW5wdXRIYW5kbGVyID0gSW5wdXRIYW5kbGVyID0gKGZ1bmN0aW9uKCl7XG4gIElucHV0SGFuZGxlci5kaXNwbGF5TmFtZSA9ICdJbnB1dEhhbmRsZXInO1xuICB2YXIgcHJvdG90eXBlID0gSW5wdXRIYW5kbGVyLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBJbnB1dEhhbmRsZXI7XG4gIGZ1bmN0aW9uIElucHV0SGFuZGxlcigpe1xuICAgIHRoaXMuc3RhdGVTZXR0ZXIgPSBiaW5kJCh0aGlzLCAnc3RhdGVTZXR0ZXInLCBwcm90b3R5cGUpO1xuICAgIGxvZyhcIklucHV0SGFuZGxlcjo6bmV3XCIpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLnN0YXRlU2V0dGVyKHRydWUpKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuc3RhdGVTZXR0ZXIoZmFsc2UpKTtcbiAgICB0aGlzLmN1cnJLZXlzdGF0ZSA9IG5ld0JsYW5rS2V5c3RhdGUoKTtcbiAgICB0aGlzLmxhc3RLZXlzdGF0ZSA9IG5ld0JsYW5rS2V5c3RhdGUoKTtcbiAgfVxuICBwcm90b3R5cGUuc3RhdGVTZXR0ZXIgPSBjdXJyeSQoKGZ1bmN0aW9uKHN0YXRlLCBhcmckKXtcbiAgICB2YXIgd2hpY2gsIGtleTtcbiAgICB3aGljaCA9IGFyZyQud2hpY2g7XG4gICAgaWYgKGtleSA9IEFDVElPTl9OQU1FW3doaWNoXSkge1xuICAgICAgdGhpcy5jdXJyS2V5c3RhdGVba2V5XSA9IHN0YXRlO1xuICAgICAgaWYgKHN0YXRlID09PSB0cnVlICYmIHRoaXMubGFzdEhlbGRLZXkgIT09IGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0SGVsZEtleSA9IGtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0pLCB0cnVlKTtcbiAgcHJvdG90eXBlLmNoYW5nZXNTaW5jZUxhc3RGcmFtZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGtleSwgc3RhdGUsIHdhc0RpZmZlcmVudDtcbiAgICByZXR1cm4gZmlsdGVyKGlkLCAoZnVuY3Rpb24oKXtcbiAgICAgIHZhciByZWYkLCByZXN1bHRzJCA9IFtdO1xuICAgICAgZm9yIChrZXkgaW4gcmVmJCA9IHRoaXMuY3VycktleXN0YXRlKSB7XG4gICAgICAgIHN0YXRlID0gcmVmJFtrZXldO1xuICAgICAgICB3YXNEaWZmZXJlbnQgPSBzdGF0ZSAhPT0gdGhpcy5sYXN0S2V5c3RhdGVba2V5XTtcbiAgICAgICAgdGhpcy5sYXN0S2V5c3RhdGVba2V5XSA9IHN0YXRlO1xuICAgICAgICBpZiAod2FzRGlmZmVyZW50KSB7XG4gICAgICAgICAgcmVzdWx0cyQucHVzaChldmVudFN1bW1hcnkoa2V5LCBzdGF0ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cyQ7XG4gICAgfS5jYWxsKHRoaXMpKSk7XG4gIH07XG4gIElucHV0SGFuZGxlci5kZWJ1Z01vZGUgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oYXJnJCl7XG4gICAgICB2YXIgd2hpY2g7XG4gICAgICB3aGljaCA9IGFyZyQud2hpY2g7XG4gICAgICByZXR1cm4gbG9nKFwiSW5wdXRIYW5kbGVyOjpkZWJ1Z01vZGUgLVwiLCB3aGljaCwgQUNUSU9OX05BTUVbd2hpY2hdIHx8ICdbdW5ib3VuZF0nKTtcbiAgICB9KTtcbiAgfTtcbiAgSW5wdXRIYW5kbGVyLm9uID0gZnVuY3Rpb24oY29kZSwgzrspe1xuICAgIHJldHVybiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oYXJnJCl7XG4gICAgICB2YXIgd2hpY2g7XG4gICAgICB3aGljaCA9IGFyZyQud2hpY2g7XG4gICAgICBpZiAod2hpY2ggPT09IGNvZGUpIHtcbiAgICAgICAgcmV0dXJuIM67KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBJbnB1dEhhbmRsZXI7XG59KCkpO1xuZnVuY3Rpb24gYmluZCQob2JqLCBrZXksIHRhcmdldCl7XG4gIHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gKHRhcmdldCB8fCBvYmopW2tleV0uYXBwbHkob2JqLCBhcmd1bWVudHMpIH07XG59XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgbWF4LCByYW5kLCBmbG9vciwgUGFsZXR0ZSwgQmxpdHRlciwgQXJlbmFWaWV3LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBtYXggPSByZWYkLm1heCwgcmFuZCA9IHJlZiQucmFuZCwgZmxvb3IgPSByZWYkLmZsb29yO1xuUGFsZXR0ZSA9IHJlcXVpcmUoJy4vcGFsZXR0ZScpLlBhbGV0dGU7XG5CbGl0dGVyID0gcmVxdWlyZSgnLi9ibGl0dGVyJykuQmxpdHRlcjtcbm91dCQuQXJlbmFWaWV3ID0gQXJlbmFWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyY2xhc3Mpe1xuICB2YXIgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChBcmVuYVZpZXcsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ0FyZW5hVmlldycsIEFyZW5hVmlldyksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBBcmVuYVZpZXc7XG4gIGZ1bmN0aW9uIEFyZW5hVmlldygpe1xuICAgIEFyZW5hVmlldy5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5ncmlkID0gKGZ1bmN0aW9uKGZ1bmMsIGFyZ3MsIGN0b3IpIHtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gZnVuYy5wcm90b3R5cGU7XG4gICAgICB2YXIgY2hpbGQgPSBuZXcgY3RvciwgcmVzdWx0ID0gZnVuYy5hcHBseShjaGlsZCwgYXJncyksIHQ7XG4gICAgICByZXR1cm4gKHQgPSB0eXBlb2YgcmVzdWx0KSAgPT0gXCJvYmplY3RcIiB8fCB0ID09IFwiZnVuY3Rpb25cIiA/IHJlc3VsdCB8fCBjaGlsZCA6IGNoaWxkO1xuICB9KShCbGl0dGVyLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCl7fSk7XG4gICAgdGhpcy5jZWxscyA9IChmdW5jdGlvbihmdW5jLCBhcmdzLCBjdG9yKSB7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IGZ1bmMucHJvdG90eXBlO1xuICAgICAgdmFyIGNoaWxkID0gbmV3IGN0b3IsIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY2hpbGQsIGFyZ3MpLCB0O1xuICAgICAgcmV0dXJuICh0ID0gdHlwZW9mIHJlc3VsdCkgID09IFwib2JqZWN0XCIgfHwgdCA9PSBcImZ1bmN0aW9uXCIgPyByZXN1bHQgfHwgY2hpbGQgOiBjaGlsZDtcbiAgfSkoQmxpdHRlciwgYXJndW1lbnRzLCBmdW5jdGlvbigpe30pO1xuICB9XG4gIHByb3RvdHlwZS5kcmF3Q2VsbHMgPSBmdW5jdGlvbihjZWxscywgc2l6ZSl7XG4gICAgdmFyIGkkLCBsZW4kLCB5LCByb3csIGxyZXN1bHQkLCBqJCwgbGVuMSQsIHgsIHRpbGUsIHJlc3VsdHMkID0gW107XG4gICAgdGhpcy5jZWxscy5jbGVhcigpO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gY2VsbHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IGNlbGxzW2kkXTtcbiAgICAgIGxyZXN1bHQkID0gW107XG4gICAgICBmb3IgKGokID0gMCwgbGVuMSQgPSByb3cubGVuZ3RoOyBqJCA8IGxlbjEkOyArK2okKSB7XG4gICAgICAgIHggPSBqJDtcbiAgICAgICAgdGlsZSA9IHJvd1tqJF07XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgdGhpcy5jZWxscy5jdHguZmlsbFN0eWxlID0gUGFsZXR0ZS50aWxlQ29sb3JzW3RpbGVdO1xuICAgICAgICAgIGxyZXN1bHQkLnB1c2godGhpcy5jZWxscy5jdHguZmlsbFJlY3QoMSArIHggKiBzaXplLCAxICsgeSAqIHNpemUsIHNpemUgLSAxLCBzaXplIC0gMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHRzJC5wdXNoKGxyZXN1bHQkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICBwcm90b3R5cGUuZHJhd0dyaWQgPSBmdW5jdGlvbih3LCBoLCBzaXplKXtcbiAgICB2YXIgaSQsIHgsIHk7XG4gICAgdGhpcy5ncmlkLmNsZWFyKCk7XG4gICAgdGhpcy5ncmlkLmN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XG4gICAgdGhpcy5ncmlkLmN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGkkID0gMDsgaSQgPD0gdzsgKytpJCkge1xuICAgICAgeCA9IGkkO1xuICAgICAgdGhpcy5ncmlkLmN0eC5tb3ZlVG8oeCAqIHNpemUgKyAwLjUsIDApO1xuICAgICAgdGhpcy5ncmlkLmN0eC5saW5lVG8oeCAqIHNpemUgKyAwLjUsIGggKiBzaXplICsgMC41KTtcbiAgICB9XG4gICAgZm9yIChpJCA9IDA7IGkkIDw9IGg7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHRoaXMuZ3JpZC5jdHgubW92ZVRvKDAsIHkgKiBzaXplICsgMC41KTtcbiAgICAgIHRoaXMuZ3JpZC5jdHgubGluZVRvKHcgKiBzaXplICsgMC41LCB5ICogc2l6ZSArIDAuNSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdyaWQuY3R4LnN0cm9rZSgpO1xuICB9O1xuICBwcm90b3R5cGUuZHJhd1Jvd1JlbW92YWwgPSBmdW5jdGlvbih3aWR0aCwgc2l6ZSwgeSwgbW9kZSl7XG4gICAgdmFyIGkkLCB4LCByZXN1bHRzJCA9IFtdO1xuICAgIG1vZGUgPT0gbnVsbCAmJiAobW9kZSA9IDEpO1xuICAgIGZvciAoaSQgPSAwOyBpJCA8PSB3aWR0aDsgKytpJCkge1xuICAgICAgeCA9IGkkO1xuICAgICAgdGhpcy5jZWxscy5jdHguZmlsbFN0eWxlID0gbW9kZVxuICAgICAgICA/IFBhbGV0dGUubmV1dHJhbFswXVxuICAgICAgICA6IFBhbGV0dGUubmV1dHJhbFszXTtcbiAgICAgIHJlc3VsdHMkLnB1c2godGhpcy5jZWxscy5jdHguZmlsbFJlY3QoMSArIHggKiBzaXplLCAxICsgeSAqIHNpemUsIHNpemUgLSAxLCBzaXplIC0gMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS5jYWxjdWxhdGVKaXR0ZXIgPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIHJvd3NUb1JlbW92ZSwgdGltZXJzLCB6eiwgam9sdCwgaml0dGVyO1xuICAgIHJvd3NUb1JlbW92ZSA9IGdzLnJvd3NUb1JlbW92ZSwgdGltZXJzID0gZ3MudGltZXJzO1xuICAgIHp6ID0gcm93c1RvUmVtb3ZlLmxlbmd0aDtcbiAgICBqb2x0ID0gdGltZXJzLnJlbW92YWxBbmltYXRpb24uYWN0aXZlICYmIHRpbWVycy5oYXJkRHJvcEVmZmVjdC5hY3RpdmVcbiAgICAgID8gbWF4KDEgLSB0aW1lcnMuaGFyZERyb3BFZmZlY3QucHJvZ3Jlc3MsIDEgLSB0aW1lcnMucmVtb3ZhbEFuaW1hdGlvbi5wcm9ncmVzcylcbiAgICAgIDogMSAtIHRpbWVycy5oYXJkRHJvcEVmZmVjdC5wcm9ncmVzcztcbiAgICBqaXR0ZXIgPSAoMSAtIHRpbWVycy5yZW1vdmFsQW5pbWF0aW9uLnByb2dyZXNzKSAqIHp6IC8gNDtcbiAgICBqb2x0ICo9IGdzLm9wdGlvbnMuaGFyZERyb3BKb2x0QW1vdW50ICogZ3MuaGFyZERyb3BEaXN0YW5jZTtcbiAgICBpZiAodGltZXJzLnJlbW92YWxBbmltYXRpb24uYWN0aXZlKSB7XG4gICAgICByZXR1cm4gW2Zsb29yKHJhbmQoLXp6LCB6eikpLCBmbG9vcihyYW5kKC16eiwgenopKSArIGpvbHQgKiAoMSArIHp6KV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbMCwgam9sdF07XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUuZHJhd0JvcmRlciA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIHope1xuICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gUGFsZXR0ZS5uZXV0cmFsWzJdO1xuICAgIHJldHVybiB0aGlzLmN0eC5zdHJva2VSZWN0KDAuNSwgMC41LCB3aWR0aCAqIHogKyAxLCBoZWlnaHQgKiB6ICsgMSk7XG4gIH07XG4gIHByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihncywgYXJnJCl7XG4gICAgdmFyIGFyZW5hLCBjZWxscywgd2lkdGgsIGhlaWdodCwgcm93c1RvUmVtb3ZlLCB0aW1lcnMsIHosIHp6LCBwLCBpJCwgbGVuJCwgcm93SXgsIGJsaXRKaXR0ZXI7XG4gICAgYXJlbmEgPSBncy5hcmVuYSwgY2VsbHMgPSBhcmVuYS5jZWxscywgd2lkdGggPSBhcmVuYS53aWR0aCwgaGVpZ2h0ID0gYXJlbmEuaGVpZ2h0LCByb3dzVG9SZW1vdmUgPSBncy5yb3dzVG9SZW1vdmUsIHRpbWVycyA9IGdzLnRpbWVycztcbiAgICB6ID0gYXJnJC56O1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB6eiA9IHJvd3NUb1JlbW92ZS5sZW5ndGg7XG4gICAgaWYgKGdzLnRpbWVycy5yZW1vdmFsQW5pbWF0aW9uLmFjdGl2ZSkge1xuICAgICAgcCA9IDMzICsgZmxvb3IoKDI1NSAtIDMzKSAvIDQgKiB6eiAqICgxIC0gdGltZXJzLnJlbW92YWxBbmltYXRpb24ucHJvZ3Jlc3MpKTtcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwicmdiKFwiICsgcCArIFwiLFwiICsgcCArIFwiLFwiICsgcCArIFwiKVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBQYWxldHRlLm5ldXRyYWxbM107XG4gICAgfVxuICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoICogeiwgaGVpZ2h0ICogeik7XG4gICAgdGhpcy5kcmF3Q2VsbHMoY2VsbHMsIHopO1xuICAgIHRoaXMuZHJhd0JvcmRlcih3aWR0aCwgaGVpZ2h0LCB6KTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IHJvd3NUb1JlbW92ZS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgcm93SXggPSByb3dzVG9SZW1vdmVbaSRdO1xuICAgICAgaWYgKGZsb29yKHRpbWVycy5yZW1vdmFsQW5pbWF0aW9uLmN1cnJlbnRUaW1lKSAlIDIpIHtcbiAgICAgICAgdGhpcy5kcmF3Um93UmVtb3ZhbCh3aWR0aCwgeiwgcm93SXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kcmF3Um93UmVtb3ZhbCh3aWR0aCwgeiwgcm93SXgsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBibGl0Sml0dGVyID0gdGhpcy5jYWxjdWxhdGVKaXR0ZXIoZ3MpO1xuICAgIHRoaXMuZ3JpZC5ibGl0VG8odGhpcywgYmxpdEppdHRlclswXSwgYmxpdEppdHRlclsxXSk7XG4gICAgcmV0dXJuIHRoaXMuY2VsbHMuYmxpdFRvKHRoaXMsIGJsaXRKaXR0ZXJbMF0sIGJsaXRKaXR0ZXJbMV0sIDAuOSk7XG4gIH07XG4gIHJldHVybiBBcmVuYVZpZXc7XG59KEJsaXR0ZXIpKTtcbmZ1bmN0aW9uIGV4dGVuZCQoc3ViLCBzdXApe1xuICBmdW5jdGlvbiBmdW4oKXt9IGZ1bi5wcm90b3R5cGUgPSAoc3ViLnN1cGVyY2xhc3MgPSBzdXApLnByb3RvdHlwZTtcbiAgKHN1Yi5wcm90b3R5cGUgPSBuZXcgZnVuKS5jb25zdHJ1Y3RvciA9IHN1YjtcbiAgaWYgKHR5cGVvZiBzdXAuZXh0ZW5kZWQgPT0gJ2Z1bmN0aW9uJykgc3VwLmV4dGVuZGVkKHN1Yik7XG4gIHJldHVybiBzdWI7XG59XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciByZWYkLCBpZCwgbG9nLCBCbGl0dGVyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nO1xub3V0JC5CbGl0dGVyID0gQmxpdHRlciA9IChmdW5jdGlvbigpe1xuICBCbGl0dGVyLmRpc3BsYXlOYW1lID0gJ0JsaXR0ZXInO1xuICB2YXIgcHJvdG90eXBlID0gQmxpdHRlci5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gQmxpdHRlcjtcbiAgZnVuY3Rpb24gQmxpdHRlcihvcHRzLCB3LCBoKXtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMudyA9IHc7XG4gICAgdGhpcy5oID0gaDtcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMudztcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaDtcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIH1cbiAgcHJvdG90eXBlLnNob3dEZWJ1ZyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUuYmFja2dyb3VuZCA9ICcjZjBmJztcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5tYXJnaW4gPSAnMTBweCc7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUuYm9yZGVyID0gXCIycHggc29saWQgIzBmMFwiO1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcbiAgfTtcbiAgcHJvdG90eXBlLmJsaXRUbyA9IGZ1bmN0aW9uKGRlc3QsIHgsIHksIGFscGhhKXtcbiAgICB4ID09IG51bGwgJiYgKHggPSAwKTtcbiAgICB5ID09IG51bGwgJiYgKHkgPSAwKTtcbiAgICBhbHBoYSA9PSBudWxsICYmIChhbHBoYSA9IDEpO1xuICAgIGRlc3QuY3R4Lmdsb2JhbEFscGhhID0gYWxwaGE7XG4gICAgZGVzdC5jdHguZHJhd0ltYWdlKHRoaXMuY2FudmFzLCB4LCB5KTtcbiAgICByZXR1cm4gZGVzdC5jdHguZ2xvYmFsQWxwaGEgPSAxO1xuICB9O1xuICBwcm90b3R5cGUuYmxpdFRvQ2FudmFzID0gZnVuY3Rpb24oZGVzdENhbnZhcyl7XG4gICAgdmFyIGN0eDtcbiAgICBjdHggPSBkZXN0Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBkZXN0Q2FudmFzLndpZHRoLCBkZXN0Q2FudmFzLmhlaWdodCk7XG4gICAgcmV0dXJuIGN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIDAsIDAsIGRlc3RDYW52YXMud2lkdGgsIGRlc3RDYW52YXMuaGVpZ2h0KTtcbiAgfTtcbiAgcHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oY29sb3Ipe1xuICAgIGlmIChjb2xvciAhPSBudWxsKSB7XG4gICAgICB0aGlzLmN0eC5maWxsQ29sb3IgPSBjb2xvcjtcbiAgICAgIHJldHVybiB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIEJsaXR0ZXI7XG59KCkpOyIsInZhciByZWYkLCBpZCwgbG9nLCB0aWxlQ29sb3JzLCBCbGl0dGVyLCBCcmlja1ZpZXcsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2c7XG50aWxlQ29sb3JzID0gcmVxdWlyZSgnLi9wYWxldHRlJykudGlsZUNvbG9ycztcbkJsaXR0ZXIgPSByZXF1aXJlKCcuL2JsaXR0ZXInKS5CbGl0dGVyO1xub3V0JC5Ccmlja1ZpZXcgPSBCcmlja1ZpZXcgPSAoZnVuY3Rpb24oc3VwZXJjbGFzcyl7XG4gIHZhciBwcm90b3R5cGUgPSBleHRlbmQkKChpbXBvcnQkKEJyaWNrVmlldywgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnQnJpY2tWaWV3JywgQnJpY2tWaWV3KSwgc3VwZXJjbGFzcykucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IEJyaWNrVmlldztcbiAgZnVuY3Rpb24gQnJpY2tWaWV3KCl7XG4gICAgQnJpY2tWaWV3LnN1cGVyY2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICBwcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oYnJpY2spe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgeSwgcm93LCBqJCwgbGVuMSQsIHgsIGNlbGw7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBicmljay5zaGFwZSkubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IHJlZiRbaSRdO1xuICAgICAgZm9yIChqJCA9IDAsIGxlbjEkID0gcm93Lmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgICB4ID0gaiQ7XG4gICAgICAgIGNlbGwgPSByb3dbaiRdO1xuICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHRpbGVDb2xvcnNbY2VsbF07XG4gICAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoeCAqIHRoaXMub3B0cy56ICsgMSwgeSAqIHRoaXMub3B0cy56ICsgMSwgdGhpcy5vcHRzLnogLSAxLCB0aGlzLm9wdHMueiAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICByZXR1cm4gQnJpY2tWaWV3O1xufShCbGl0dGVyKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgQmxpdHRlciwgUGFsZXR0ZSwgQXJlbmFWaWV3LCBCcmlja1ZpZXcsIE5leHRCcmlja1ZpZXcsIFN0YXJ0TWVudVZpZXcsIENhbnZhc1JlbmRlcmVyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nO1xuQmxpdHRlciA9IHJlcXVpcmUoJy4vYmxpdHRlcicpLkJsaXR0ZXI7XG5QYWxldHRlID0gcmVxdWlyZSgnLi9wYWxldHRlJykuUGFsZXR0ZTtcbkFyZW5hVmlldyA9IHJlcXVpcmUoJy4vYXJlbmEnKS5BcmVuYVZpZXc7XG5Ccmlja1ZpZXcgPSByZXF1aXJlKCcuL2JyaWNrJykuQnJpY2tWaWV3O1xuTmV4dEJyaWNrVmlldyA9IHJlcXVpcmUoJy4vbmV4dC1icmljaycpLk5leHRCcmlja1ZpZXc7XG5TdGFydE1lbnVWaWV3ID0gcmVxdWlyZSgnLi9zdGFydC1tZW51JykuU3RhcnRNZW51Vmlldztcbm91dCQuQ2FudmFzUmVuZGVyZXIgPSBDYW52YXNSZW5kZXJlciA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoQ2FudmFzUmVuZGVyZXIsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ0NhbnZhc1JlbmRlcmVyJywgQ2FudmFzUmVuZGVyZXIpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gQ2FudmFzUmVuZGVyZXI7XG4gIGZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKG9wdHMpe1xuICAgIHZhciB6O1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgdGhpcy56ID0geiA9IHRoaXMub3B0cy56O1xuICAgIENhbnZhc1JlbmRlcmVyLnN1cGVyY2xhc3MuY2FsbCh0aGlzLCB0aGlzLm9wdHMsIDE3ICogeiwgMjAgKiB6KTtcbiAgICB0aGlzLmFyZW5hID0gbmV3IEFyZW5hVmlldyh0aGlzLm9wdHMsIDEwICogeiArIDIsIDE4ICogeiArIDIpO1xuICAgIHRoaXMuYnJpY2sgPSBuZXcgQnJpY2tWaWV3KHRoaXMub3B0cywgNCAqIHosIDQgKiB6KTtcbiAgICB0aGlzLm5leHQgPSBuZXcgTmV4dEJyaWNrVmlldyh0aGlzLm9wdHMsIDQgKiB6LCA0ICogeik7XG4gICAgdGhpcy5zdGFydCA9IG5ldyBTdGFydE1lbnVWaWV3KHRoaXMub3B0cywgMTcgKiB6LCAyMCAqIHopO1xuICAgIHRoaXMub3V0cHV0Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdGhpcy5vdXRwdXRDYW52YXMud2lkdGggPSAxNyAqIHRoaXMub3B0cy56O1xuICAgIHRoaXMub3V0cHV0Q2FudmFzLmhlaWdodCA9IDIwICogdGhpcy5vcHRzLno7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG4gIHByb3RvdHlwZS5yZW5kZXJTdGFydE1lbnUgPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIHN0YXJ0TWVudVN0YXRlO1xuICAgIHN0YXJ0TWVudVN0YXRlID0gZ3Muc3RhcnRNZW51U3RhdGU7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIGlmICh0aGlzLnN0YXRlLmxhc3RTdGFydE1lbnVJbmRleCAhPT0gZ3Muc3RhcnRNZW51U3RhdGUuY3VycmVudEluZGV4KSB7XG4gICAgICB0aGlzLnN0YXJ0LnJlbmRlcihzdGFydE1lbnVTdGF0ZSk7XG4gICAgfVxuICAgIHRoaXMuc3RhcnQuYmxpdFRvKHRoaXMsIDAsIDApO1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmxhc3RTdGFydE1lbnVJbmRleCA9IGdzLnN0YXJ0TWVudVN0YXRlLmN1cnJlbnRJbmRleDtcbiAgfTtcbiAgcHJvdG90eXBlLnJlbmRlckJsYW5rID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5jbGVhcigpO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyR2FtZSA9IGZ1bmN0aW9uKGdzKXtcbiAgICB0aGlzLmJyaWNrLnJlbmRlcihncy5icmljay5jdXJyZW50LCB0aGlzLm9wdHMpO1xuICAgIHRoaXMubmV4dC5yZW5kZXIoZ3MuYnJpY2submV4dCwgdGhpcy5vcHRzKTtcbiAgICB0aGlzLmFyZW5hLnJlbmRlcihncywgdGhpcy5vcHRzKTtcbiAgICByZXR1cm4gdGhpcy5jb2xsYXBzZUFsbChncyk7XG4gIH07XG4gIHByb3RvdHlwZS5jb2xsYXBzZUFsbCA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgcG9zO1xuICAgIHBvcyA9IGdzLmJyaWNrLmN1cnJlbnQucG9zO1xuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFBhbGV0dGUubmV1dHJhbFszXTtcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgdGhpcy5icmljay5ibGl0VG8odGhpcy5hcmVuYSwgcG9zWzBdICogdGhpcy56LCBwb3NbMV0gKiB0aGlzLnopO1xuICAgIHRoaXMuYXJlbmEuYmxpdFRvKHRoaXMsIHRoaXMub3B0cy56LCB0aGlzLm9wdHMueik7XG4gICAgaWYgKGdzLm1ldGFnYW1lU3RhdGUgPT09ICdyZW1vdmFsLWFuaW1hdGlvbicpIHtcbiAgICAgIHRoaXMuZmxhc2hpbmcuYmxpdFRvKHRoaXMsIHRoaXMub3B0cy56LCB0aGlzLm9wdHMueik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5leHQuYmxpdFRvKHRoaXMsICgyICsgZ3MuYXJlbmEud2lkdGgpICogdGhpcy56LCAxICogdGhpcy56KTtcbiAgfTtcbiAgcHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKGdhbWVTdGF0ZSl7XG4gICAgdmFyIG1ldGFnYW1lU3RhdGU7XG4gICAgbWV0YWdhbWVTdGF0ZSA9IGdhbWVTdGF0ZS5tZXRhZ2FtZVN0YXRlO1xuICAgIHN3aXRjaCAobWV0YWdhbWVTdGF0ZSkge1xuICAgIGNhc2UgJ3N0YXJ0LW1lbnUnOlxuICAgICAgdGhpcy5yZW5kZXJTdGFydE1lbnUoZ2FtZVN0YXRlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3BhdXNlJzpcbiAgICAgIHRoaXMucmVuZGVyUGF1c2VNZW51KGdhbWVTdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdnYW1lJzpcbiAgICAgIHRoaXMucmVuZGVyR2FtZShnYW1lU3RhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2luJzpcbiAgICAgIHRoaXMucmVuZGVyV2luU2NyZWVuKGdhbWVTdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZW1vdmUtbGluZXMnOlxuICAgICAgdGhpcy5yZW5kZXJHYW1lKGdhbWVTdGF0ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5yZW5kZXJCbGFuaygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ibGl0VG9DYW52YXModGhpcy5vdXRwdXRDYW52YXMpO1xuICB9O1xuICBwcm90b3R5cGUuYXBwZW5kVG8gPSBmdW5jdGlvbihob3N0KXtcbiAgICByZXR1cm4gaG9zdC5hcHBlbmRDaGlsZCh0aGlzLm91dHB1dENhbnZhcyk7XG4gIH07XG4gIHJldHVybiBDYW52YXNSZW5kZXJlcjtcbn0oQmxpdHRlcikpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIEJyaWNrVmlldywgQmxpdHRlciwgUGFsZXR0ZSwgTmV4dEJyaWNrVmlldywgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZztcbkJyaWNrVmlldyA9IHJlcXVpcmUoJy4vYnJpY2snKS5Ccmlja1ZpZXc7XG5CbGl0dGVyID0gcmVxdWlyZSgnLi9ibGl0dGVyJykuQmxpdHRlcjtcblBhbGV0dGUgPSByZXF1aXJlKCcuL3BhbGV0dGUnKS5QYWxldHRlO1xub3V0JC5OZXh0QnJpY2tWaWV3ID0gTmV4dEJyaWNrVmlldyA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoTmV4dEJyaWNrVmlldywgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnTmV4dEJyaWNrVmlldycsIE5leHRCcmlja1ZpZXcpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gTmV4dEJyaWNrVmlldztcbiAgZnVuY3Rpb24gTmV4dEJyaWNrVmlldygpe1xuICAgIE5leHRCcmlja1ZpZXcuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuYnJpY2sgPSBuZXcgQnJpY2tWaWV3KHRoaXMub3B0cywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG4gIHByb3RvdHlwZS5wcmV0dHlPZmZzZXQgPSBmdW5jdGlvbih0eXBlKXtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICBjYXNlICd6aWcnOlxuICAgICAgcmV0dXJuIFswLjUsIDBdO1xuICAgIGNhc2UgJ3phZyc6XG4gICAgICByZXR1cm4gWzAuNSwgMF07XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4gWzAuNSwgMF07XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgcmV0dXJuIFswLjUsIDBdO1xuICAgIGNhc2UgJ3RlZSc6XG4gICAgICByZXR1cm4gWzAuNSwgMF07XG4gICAgY2FzZSAndGV0cmlzJzpcbiAgICAgIHJldHVybiBbMCwgLTAuNV07XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUucmVuZGVyQmcgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFBhbGV0dGUubmV1dHJhbFszXTtcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBQYWxldHRlLm5ldXRyYWxbMl07XG4gICAgcmV0dXJuIHRoaXMuY3R4LnN0cm9rZVJlY3QoMC41LCAwLjUsIHRoaXMud2lkdGggLSAxLCB0aGlzLmhlaWdodCAtIDEpO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oYnJpY2spe1xuICAgIHZhciByZWYkLCB4LCB5O1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLnJlbmRlckJnKCk7XG4gICAgdGhpcy5icmljay5yZW5kZXIoYnJpY2spO1xuICAgIHJlZiQgPSB0aGlzLnByZXR0eU9mZnNldChicmljay50eXBlKSwgeCA9IHJlZiRbMF0sIHkgPSByZWYkWzFdO1xuICAgIHJldHVybiB0aGlzLmJyaWNrLmJsaXRUbyh0aGlzLCB4ICogdGhpcy5vcHRzLnosIHkgKiB0aGlzLm9wdHMueik7XG4gIH07XG4gIHJldHVybiBOZXh0QnJpY2tWaWV3O1xufShCbGl0dGVyKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgbmV1dHJhbCwgcmVkLCBvcmFuZ2UsIGdyZWVuLCBtYWdlbnRhLCBibHVlLCBicm93biwgeWVsbG93LCBjeWFuLCB0aWxlQ29sb3JzLCBQYWxldHRlLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xub3V0JC5uZXV0cmFsID0gbmV1dHJhbCA9IFsnI2ZmZmZmZicsICcjY2NjY2NjJywgJyM4ODg4ODgnLCAnIzIxMjEyMSddO1xub3V0JC5yZWQgPSByZWQgPSBbJyNGRjQ0NDQnLCAnI0ZGNzc3NycsICcjZGQ0NDQ0JywgJyM1NTExMTEnXTtcbm91dCQub3JhbmdlID0gb3JhbmdlID0gWycjRkZCQjMzJywgJyNGRkNDODgnLCAnI0NDODgwMCcsICcjNTUzMzAwJ107XG5vdXQkLmdyZWVuID0gZ3JlZW4gPSBbJyM0NGZmNjYnLCAnIzg4ZmZhYScsICcjMjJiYjMzJywgJyMxMTU1MTEnXTtcbm91dCQubWFnZW50YSA9IG1hZ2VudGEgPSBbJyNmZjMzZmYnLCAnI2ZmYWFmZicsICcjYmIyMmJiJywgJyM1NTExNTUnXTtcbm91dCQuYmx1ZSA9IGJsdWUgPSBbJyM2NmJiZmYnLCAnI2FhZGRmZicsICcjNTU4OGVlJywgJyMxMTExNTUnXTtcbm91dCQuYnJvd24gPSBicm93biA9IFsnI2ZmYmIzMycsICcjZmZjYzg4JywgJyNiYjk5MDAnLCAnIzU1NTUxMSddO1xub3V0JC55ZWxsb3cgPSB5ZWxsb3cgPSBbJyNlZWVlMTEnLCAnI2ZmZmZhYScsICcjY2NiYjAwJywgJyM1NTU1MTEnXTtcbm91dCQuY3lhbiA9IGN5YW4gPSBbJyM0NGRkZmYnLCAnI2FhZTNmZicsICcjMDBhYWNjJywgJyMwMDY2OTknXTtcbm91dCQudGlsZUNvbG9ycyA9IHRpbGVDb2xvcnMgPSBbbmV1dHJhbFsyXSwgcmVkWzBdLCBvcmFuZ2VbMF0sIHllbGxvd1swXSwgZ3JlZW5bMF0sIGN5YW5bMF0sIGJsdWVbMl0sIG1hZ2VudGFbMF0sICd3aGl0ZSddO1xub3V0JC5QYWxldHRlID0gUGFsZXR0ZSA9IHtcbiAgbmV1dHJhbDogbmV1dHJhbCxcbiAgcmVkOiByZWQsXG4gIG9yYW5nZTogb3JhbmdlLFxuICB5ZWxsb3c6IHllbGxvdyxcbiAgZ3JlZW46IGdyZWVuLFxuICBjeWFuOiBjeWFuLFxuICBibHVlOiBibHVlLFxuICBtYWdlbnRhOiBtYWdlbnRhLFxuICB0aWxlQ29sb3JzOiB0aWxlQ29sb3JzXG59OyIsInZhciByZWYkLCBpZCwgbG9nLCBmbG9vciwgQmxpdHRlciwgVGV4dEJsaXR0ZXIsIFN0YXJ0TWVudVZpZXcsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIGZsb29yID0gcmVmJC5mbG9vcjtcbkJsaXR0ZXIgPSByZXF1aXJlKCcuL2JsaXR0ZXInKS5CbGl0dGVyO1xuVGV4dEJsaXR0ZXIgPSByZXF1aXJlKCcuL3RleHQtYmxpdHRlcicpLlRleHRCbGl0dGVyO1xub3V0JC5TdGFydE1lbnVWaWV3ID0gU3RhcnRNZW51VmlldyA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoU3RhcnRNZW51Vmlldywgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnU3RhcnRNZW51VmlldycsIFN0YXJ0TWVudVZpZXcpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gU3RhcnRNZW51VmlldztcbiAgZnVuY3Rpb24gU3RhcnRNZW51Vmlldygpe1xuICAgIFN0YXJ0TWVudVZpZXcuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dCA9IG5ldyBUZXh0QmxpdHRlcih7fSwgdGhpcy53ICogMiAvIDMsIHRoaXMuaCAvIDIwKTtcbiAgICB0aGlzLnRpdGxlID0gbmV3IFRleHRCbGl0dGVyKHt9LCB0aGlzLncgKiAyIC8gMywgdGhpcy5oIC8gMTApO1xuICB9XG4gIHByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihhcmckKXtcbiAgICB2YXIgbWVudURhdGEsIGN1cnJlbnRJbmRleCwgaSQsIGxlbiQsIGksIGVudHJ5LCByZXN1bHRzJCA9IFtdO1xuICAgIG1lbnVEYXRhID0gYXJnJC5tZW51RGF0YSwgY3VycmVudEluZGV4ID0gYXJnJC5jdXJyZW50SW5kZXg7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gbWVudURhdGEubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIGkgPSBpJDtcbiAgICAgIGVudHJ5ID0gbWVudURhdGFbaSRdO1xuICAgICAgdGhpcy50ZXh0LnJlbmRlcihlbnRyeS50ZXh0KTtcbiAgICAgIGlmIChpID09PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgdGhpcy50ZXh0LnJlbmRlckZyYW1lKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRleHQuYmxpdFRvKHRoaXMsIGZsb29yKHRoaXMudyAvIDYpLCBmbG9vcih0aGlzLmggLyAyICsgdGhpcy5oIC8gMTUgKiBpKSk7XG4gICAgICB0aGlzLnRpdGxlLnJlbmRlcignVEVUUklTJyk7XG4gICAgICByZXN1bHRzJC5wdXNoKHRoaXMudGl0bGUuYmxpdFRvKHRoaXMsIHRoaXMudyAvIDYsIHRoaXMuaCAvIDYpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICByZXR1cm4gU3RhcnRNZW51Vmlldztcbn0oQmxpdHRlcikpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIEJsaXR0ZXIsIFRleHRCbGl0dGVyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nO1xuQmxpdHRlciA9IHJlcXVpcmUoJy4vYmxpdHRlcicpLkJsaXR0ZXI7XG5vdXQkLlRleHRCbGl0dGVyID0gVGV4dEJsaXR0ZXIgPSAoZnVuY3Rpb24oc3VwZXJjbGFzcyl7XG4gIHZhciBkZWZhdWx0Rm9udE9wdGlvbnMsIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoVGV4dEJsaXR0ZXIsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ1RleHRCbGl0dGVyJywgVGV4dEJsaXR0ZXIpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gVGV4dEJsaXR0ZXI7XG4gIGRlZmF1bHRGb250T3B0aW9ucyA9IHtcbiAgICBmb250OiBcIjE0cHggbW9ub3NwYWNlXCIsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICB9O1xuICBmdW5jdGlvbiBUZXh0QmxpdHRlcihvcHRzLCB4LCB5KXtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIFRleHRCbGl0dGVyLnN1cGVyY2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmZvbnQgPSB7XG4gICAgICBzaXplOiB5LFxuICAgICAgZmFtaWx5OiAnbW9ub3NwYWNlJ1xuICAgIH07XG4gICAgdGhpcy5zZXRGb250KHRoaXMuZm9udCk7XG4gICAgdGhpcy5zZXRBbGlnbm1lbnQoJ2NlbnRlcicpO1xuICAgIHRoaXMuY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICB9XG4gIHByb3RvdHlwZS5zZXRGb250ID0gZnVuY3Rpb24oc2V0dGluZ3Mpe1xuICAgIGltcG9ydCQodGhpcy5mb250LCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHRoaXMuY3R4LmZvbnQgPSB0aGlzLmZvbnQuc2l6ZSArIFwicHggXCIgKyB0aGlzLmZvbnQuZmFtaWx5O1xuICB9O1xuICBwcm90b3R5cGUuc2V0QWxpZ25tZW50ID0gZnVuY3Rpb24oYWxpZ25TdHJpbmcpe1xuICAgIHJldHVybiB0aGlzLmN0eC50ZXh0QWxpZ24gPSBhbGlnblN0cmluZztcbiAgfTtcbiAgcHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKHRleHQsIGNvbG9yKXtcbiAgICBjb2xvciA9PSBudWxsICYmIChjb2xvciA9ICdibGFjaycpO1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICByZXR1cm4gdGhpcy5jdHguZmlsbFRleHQodGV4dCwgdGhpcy53IC8gMiwgdGhpcy5mb250LnNpemUgLyAyLCB0aGlzLncpO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmN0eC5zdHJva2VSZWN0KDAuNSwgMC41LCB0aGlzLncgLSAxLCB0aGlzLmggLSAxKTtcbiAgfTtcbiAgcmV0dXJuIFRleHRCbGl0dGVyO1xufShCbGl0dGVyKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgZWwsIERvbVJlbmRlcmVyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nO1xuZWwgPSBiaW5kJChkb2N1bWVudCwgJ2NyZWF0ZUVsZW1lbnQnKTtcbm91dCQuRG9tUmVuZGVyZXIgPSBEb21SZW5kZXJlciA9IChmdW5jdGlvbigpe1xuICBEb21SZW5kZXJlci5kaXNwbGF5TmFtZSA9ICdEb21SZW5kZXJlcic7XG4gIHZhciBwcm90b3R5cGUgPSBEb21SZW5kZXJlci5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gRG9tUmVuZGVyZXI7XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKG9wdHMpe1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgdGhpcy5kb20gPSB7XG4gICAgICBtYWluOiBlbCgnZGl2JylcbiAgICB9O1xuICB9XG4gIHByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihnYW1lU3RhdGUpe307XG4gIHByb3RvdHlwZS5hcHBlbmRUbyA9IGZ1bmN0aW9uKGhvc3Qpe1xuICAgIHJldHVybiBob3N0LmFwcGVuZENoaWxkKHRoaXMuZG9tLm1haW4pO1xuICB9O1xuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCkpO1xuZnVuY3Rpb24gYmluZCQob2JqLCBrZXksIHRhcmdldCl7XG4gIHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gKHRhcmdldCB8fCBvYmopW2tleV0uYXBwbHkob2JqLCBhcmd1bWVudHMpIH07XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHBpLCByYW5kLCBmbG9vciwgQmFzZSwgbWVzaE1hdGVyaWFscywgQXJlbmFDZWxscywgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZywgcGkgPSByZWYkLnBpLCByYW5kID0gcmVmJC5yYW5kLCBmbG9vciA9IHJlZiQuZmxvb3I7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbm1lc2hNYXRlcmlhbHMgPSByZXF1aXJlKCcuLi9wYWxldHRlJykubWVzaE1hdGVyaWFscztcbm91dCQuQXJlbmFDZWxscyA9IEFyZW5hQ2VsbHMgPSAoZnVuY3Rpb24oc3VwZXJjbGFzcyl7XG4gIHZhciBwcm90b3R5cGUgPSBleHRlbmQkKChpbXBvcnQkKEFyZW5hQ2VsbHMsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ0FyZW5hQ2VsbHMnLCBBcmVuYUNlbGxzKSwgc3VwZXJjbGFzcykucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IEFyZW5hQ2VsbHM7XG4gIGZ1bmN0aW9uIEFyZW5hQ2VsbHMob3B0cywgZ3Mpe1xuICAgIHZhciByZWYkLCB3aWR0aCwgaGVpZ2h0LCByZXMkLCBpJCwgbGVuJCwgeSwgcm93LCBscmVzdWx0JCwgaiQsIGxlbjEkLCB4LCBjZWxsLCBjdWJlLCByZWYxJDtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIEFyZW5hQ2VsbHMuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJlZiQgPSBncy5hcmVuYSwgd2lkdGggPSByZWYkLndpZHRoLCBoZWlnaHQgPSByZWYkLmhlaWdodDtcbiAgICB0aGlzLmdlb20uYm94ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDAuOSwgMC45LCAwLjkpO1xuICAgIHRoaXMubWF0cy56YXAgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7XG4gICAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgICBlbWlzc2l2ZTogMHg5OTk5OTlcbiAgICB9KTtcbiAgICB0aGlzLm9mZnNldCA9IG5ldyBUSFJFRS5PYmplY3QzRDtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvbi5hZGQodGhpcy5vZmZzZXQpO1xuICAgIHJlZiQgPSB0aGlzLnJlZ2lzdHJhdGlvbi5wb3NpdGlvbjtcbiAgICByZWYkLnggPSB3aWR0aCAvIC0yICsgMC41O1xuICAgIHJlZiQueSA9IGhlaWdodCAtIDAuNTtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvbi5yb3RhdGlvbi54ID0gcGk7XG4gICAgcmVzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBncy5hcmVuYS5jZWxscykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IHJlZiRbaSRdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgeCA9IGokO1xuICAgICAgICBjZWxsID0gcm93W2okXTtcbiAgICAgICAgY3ViZSA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvbS5ib3gsIHRoaXMubWF0cy5ub3JtYWwpO1xuICAgICAgICByZWYxJCA9IGN1YmUucG9zaXRpb247XG4gICAgICAgIHJlZjEkLnggPSB4O1xuICAgICAgICByZWYxJC55ID0geTtcbiAgICAgICAgY3ViZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMub2Zmc2V0LmFkZChjdWJlKTtcbiAgICAgICAgbHJlc3VsdCQucHVzaChjdWJlKTtcbiAgICAgIH1cbiAgICAgIHJlcyQucHVzaChscmVzdWx0JCk7XG4gICAgfVxuICAgIHRoaXMuY2VsbHMgPSByZXMkO1xuICB9XG4gIHByb3RvdHlwZS50b2dnbGVSb3dPZkNlbGxzID0gZnVuY3Rpb24ocm93SXgsIHN0YXRlKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIGJveCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gdGhpcy5jZWxsc1tyb3dJeF0pLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBib3ggPSByZWYkW2kkXTtcbiAgICAgIGJveC5tYXRlcmlhbCA9IHRoaXMubWF0cy56YXA7XG4gICAgICByZXN1bHRzJC5wdXNoKGJveC52aXNpYmxlID0gc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS5zaG93WmFwRWZmZWN0ID0gZnVuY3Rpb24oam9sdCwgZ3Mpe1xuICAgIHZhciBhcmVuYSwgcm93c1RvUmVtb3ZlLCB0aW1lcnMsIG9uT2ZmLCBpJCwgbGVuJCwgcm93SXgsIHJlc3VsdHMkID0gW107XG4gICAgYXJlbmEgPSBncy5hcmVuYSwgcm93c1RvUmVtb3ZlID0gZ3Mucm93c1RvUmVtb3ZlLCB0aW1lcnMgPSBncy50aW1lcnM7XG4gICAgb25PZmYgPSAhIShmbG9vcih0aW1lcnMucmVtb3ZhbEFuaW1hdGlvbi5jdXJyZW50VGltZSkgJSAyKTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IHJvd3NUb1JlbW92ZS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgcm93SXggPSByb3dzVG9SZW1vdmVbaSRdO1xuICAgICAgcmVzdWx0cyQucHVzaCh0aGlzLnRvZ2dsZVJvd09mQ2VsbHMocm93SXgsIG9uT2ZmKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfTtcbiAgcHJvdG90eXBlLnVwZGF0ZUNlbGxzID0gZnVuY3Rpb24oY2VsbHMpe1xuICAgIHZhciBpJCwgbGVuJCwgeSwgcm93LCBscmVzdWx0JCwgaiQsIGxlbjEkLCB4LCBjZWxsLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gY2VsbHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IGNlbGxzW2kkXTtcbiAgICAgIGxyZXN1bHQkID0gW107XG4gICAgICBmb3IgKGokID0gMCwgbGVuMSQgPSByb3cubGVuZ3RoOyBqJCA8IGxlbjEkOyArK2okKSB7XG4gICAgICAgIHggPSBqJDtcbiAgICAgICAgY2VsbCA9IHJvd1tqJF07XG4gICAgICAgIHRoaXMuY2VsbHNbeV1beF0udmlzaWJsZSA9ICEhY2VsbDtcbiAgICAgICAgbHJlc3VsdCQucHVzaCh0aGlzLmNlbGxzW3ldW3hdLm1hdGVyaWFsID0gbWVzaE1hdGVyaWFsc1tjZWxsXSk7XG4gICAgICB9XG4gICAgICByZXN1bHRzJC5wdXNoKGxyZXN1bHQkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICByZXR1cm4gQXJlbmFDZWxscztcbn0oQmFzZSkpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIEJhc2UsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2c7XG5vdXQkLkJhc2UgPSBCYXNlID0gKGZ1bmN0aW9uKCl7XG4gIEJhc2UuZGlzcGxheU5hbWUgPSAnQmFzZSc7XG4gIHZhciBwcm90b3R5cGUgPSBCYXNlLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBCYXNlO1xuICBmdW5jdGlvbiBCYXNlKG9wdHMsIGdzKXtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMucm9vdCA9IG5ldyBUSFJFRS5PYmplY3QzRDtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvbiA9IG5ldyBUSFJFRS5PYmplY3QzRDtcbiAgICB0aGlzLnJvb3QuYWRkKHRoaXMucmVnaXN0cmF0aW9uKTtcbiAgICB0aGlzLmdlb20gPSB7fTtcbiAgICB0aGlzLm1hdHMgPSB7XG4gICAgICBub3JtYWw6IG5ldyBUSFJFRS5NZXNoTm9ybWFsTWF0ZXJpYWwoKVxuICAgIH07XG4gIH1cbiAgcHJvdG90eXBlLnNob3dCb3VuZHMgPSBmdW5jdGlvbihzY2VuZSl7XG4gICAgdGhpcy5ib3VuZHMgPSBuZXcgVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIodGhpcy5yb290LCAweDU1NTU1NSk7XG4gICAgdGhpcy5ib3VuZHMudXBkYXRlKCk7XG4gICAgcmV0dXJuIHNjZW5lLmFkZCh0aGlzLmJvdW5kcyk7XG4gIH07XG4gIHByb3RvdHlwZS5hZGRUbyA9IGZ1bmN0aW9uKG9iail7XG4gICAgcmV0dXJuIG9iai5hZGQodGhpcy5yb290KTtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ3Bvc2l0aW9uJywge1xuICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiB0aGlzLnJvb3QucG9zaXRpb247XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ3Zpc2libGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMucm9vdC52aXNpYmxlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihzdGF0ZSl7XG4gICAgICB0aGlzLnJvb3QudmlzaWJsZSA9IHN0YXRlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSk7XG4gIHJldHVybiBCYXNlO1xufSgpKTsiLCJ2YXIgcmVmJCwgaWQsIGxvZywgc2luLCBCYXNlLCBCcmljaywgQnJpY2tQcmV2aWV3LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBzaW4gPSByZWYkLnNpbjtcbkJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKS5CYXNlO1xuQnJpY2sgPSByZXF1aXJlKCcuL2JyaWNrJykuQnJpY2s7XG5vdXQkLkJyaWNrUHJldmlldyA9IEJyaWNrUHJldmlldyA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByZXR0eU9mZnNldCwgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChCcmlja1ByZXZpZXcsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ0JyaWNrUHJldmlldycsIEJyaWNrUHJldmlldyksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBCcmlja1ByZXZpZXc7XG4gIHByZXR0eU9mZnNldCA9IHtcbiAgICBzcXVhcmU6IFswLCAwXSxcbiAgICB6aWc6IFswLjUsIDBdLFxuICAgIHphZzogWzAuNSwgMF0sXG4gICAgbGVmdDogWzAuNSwgMF0sXG4gICAgcmlnaHQ6IFswLjUsIDBdLFxuICAgIHRlZTogWzAuNSwgMF0sXG4gICAgdGV0cmlzOiBbMCwgLTAuNV1cbiAgfTtcbiAgZnVuY3Rpb24gQnJpY2tQcmV2aWV3KG9wdHMsIGdzKXtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIEJyaWNrUHJldmlldy5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgcHJvdG90eXBlLmRpc3BsYXlTaGFwZSA9IGZ1bmN0aW9uKGJyaWNrKXtcbiAgICB2YXIgcmVmJCwgeCwgeTtcbiAgICBzdXBlcmNsYXNzLnByb3RvdHlwZS5kaXNwbGF5U2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZWYkID0gcHJldHR5T2Zmc2V0W2JyaWNrLnR5cGVdLCB4ID0gcmVmJFswXSwgeSA9IHJlZiRbMV07XG4gICAgdGhpcy5yZWdpc3RyYXRpb24ucG9zaXRpb24ueCA9IC0xLjUgKyB4O1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJhdGlvbi5wb3NpdGlvbi55ID0gLTEuNSArIHk7XG4gIH07XG4gIHByb3RvdHlwZS51cGRhdGVXaWdnbGUgPSBmdW5jdGlvbihicmljaywgZWxhcHNlZFRpbWUpe1xuICAgIHJldHVybiB0aGlzLnJvb3Qucm90YXRpb24ueSA9IDAuMiAqIHNpbihlbGFwc2VkVGltZSAvIDUwMCk7XG4gIH07XG4gIHJldHVybiBCcmlja1ByZXZpZXc7XG59KEJyaWNrKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgcGksIEJhc2UsIG1lc2hNYXRlcmlhbHMsIEJyaWNrLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBwaSA9IHJlZiQucGk7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbm1lc2hNYXRlcmlhbHMgPSByZXF1aXJlKCcuLi9wYWxldHRlJykubWVzaE1hdGVyaWFscztcbm91dCQuQnJpY2sgPSBCcmljayA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByZXR0eU9mZnNldCwgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChCcmljaywgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnQnJpY2snLCBCcmljayksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBCcmljaztcbiAgcHJldHR5T2Zmc2V0ID0ge1xuICAgIHNxdWFyZTogWzAsIDBdLFxuICAgIHppZzogWzAuNSwgMF0sXG4gICAgemFnOiBbMC41LCAwXSxcbiAgICBsZWZ0OiBbMC41LCAwXSxcbiAgICByaWdodDogWzAuNSwgMF0sXG4gICAgdGVlOiBbMC41LCAwXSxcbiAgICB0ZXRyaXM6IFswLCAtMC41XVxuICB9O1xuICBmdW5jdGlvbiBCcmljayhvcHRzLCBncyl7XG4gICAgdmFyIHJlZiQsIHdpZHRoLCBoZWlnaHQsIHJlcyQsIGkkLCBpLCBjdWJlO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgQnJpY2suc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJlZiQgPSBncy5hcmVuYSwgd2lkdGggPSByZWYkLndpZHRoLCBoZWlnaHQgPSByZWYkLmhlaWdodDtcbiAgICB0aGlzLmdlb20uYnJpY2tCb3ggPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMC45LCAwLjksIDAuOSk7XG4gICAgdGhpcy5yZWdpc3RyYXRpb24ucm90YXRpb24ueCA9IHBpO1xuICAgIHJlZiQgPSB0aGlzLnJlZ2lzdHJhdGlvbi5wb3NpdGlvbjtcbiAgICByZWYkLnggPSB3aWR0aCAvIC0yICsgMC41O1xuICAgIHJlZiQueSA9IGhlaWdodCAtIDAuNTtcbiAgICB0aGlzLmJyaWNrID0gbmV3IFRIUkVFLk9iamVjdDNEO1xuICAgIHRoaXMucmVnaXN0cmF0aW9uLmFkZCh0aGlzLmJyaWNrKTtcbiAgICByZXMkID0gW107XG4gICAgZm9yIChpJCA9IDA7IGkkIDw9IDM7ICsraSQpIHtcbiAgICAgIGkgPSBpJDtcbiAgICAgIGN1YmUgPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb20uYnJpY2tCb3gsIHRoaXMubWF0cy5ub3JtYWwpO1xuICAgICAgdGhpcy5icmljay5hZGQoY3ViZSk7XG4gICAgICBjdWJlLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgICAgcmVzJC5wdXNoKGN1YmUpO1xuICAgIH1cbiAgICB0aGlzLmNlbGxzID0gcmVzJDtcbiAgfVxuICBwcm90b3R5cGUuZGlzcGxheVNoYXBlID0gZnVuY3Rpb24oYXJnJCwgaXgpe1xuICAgIHZhciBzaGFwZSwgaSQsIGxlbiQsIHksIHJvdywgbHJlc3VsdCQsIGokLCBsZW4xJCwgeCwgY2VsbCwgeCQsIHJlZiQsIHJlc3VsdHMkID0gW107XG4gICAgc2hhcGUgPSBhcmckLnNoYXBlO1xuICAgIGl4ID09IG51bGwgJiYgKGl4ID0gMCk7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSBzaGFwZS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgeSA9IGkkO1xuICAgICAgcm93ID0gc2hhcGVbaSRdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgeCA9IGokO1xuICAgICAgICBjZWxsID0gcm93W2okXTtcbiAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICB4JCA9IHRoaXMuY2VsbHNbaXhdO1xuICAgICAgICAgIHgkLm1hdGVyaWFsID0gbWVzaE1hdGVyaWFsc1tjZWxsXTtcbiAgICAgICAgICByZWYkID0geCQucG9zaXRpb247XG4gICAgICAgICAgcmVmJC54ID0geDtcbiAgICAgICAgICByZWYkLnkgPSB5O1xuICAgICAgICAgIGxyZXN1bHQkLnB1c2goaXggKz0gMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS51cGRhdGVQb3MgPSBmdW5jdGlvbihhcmckKXtcbiAgICB2YXIgeCwgeSwgcmVmJDtcbiAgICB4ID0gYXJnJFswXSwgeSA9IGFyZyRbMV07XG4gICAgcmV0dXJuIHJlZiQgPSB0aGlzLmJyaWNrLnBvc2l0aW9uLCByZWYkLnggPSB4LCByZWYkLnkgPSB5LCByZWYkO1xuICB9O1xuICByZXR1cm4gQnJpY2s7XG59KEJhc2UpKTtcbmZ1bmN0aW9uIGV4dGVuZCQoc3ViLCBzdXApe1xuICBmdW5jdGlvbiBmdW4oKXt9IGZ1bi5wcm90b3R5cGUgPSAoc3ViLnN1cGVyY2xhc3MgPSBzdXApLnByb3RvdHlwZTtcbiAgKHN1Yi5wcm90b3R5cGUgPSBuZXcgZnVuKS5jb25zdHJ1Y3RvciA9IHN1YjtcbiAgaWYgKHR5cGVvZiBzdXAuZXh0ZW5kZWQgPT0gJ2Z1bmN0aW9uJykgc3VwLmV4dGVuZGVkKHN1Yik7XG4gIHJldHVybiBzdWI7XG59XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciByZWYkLCBpZCwgbG9nLCBCYXNlLCBGcmFtZSwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZztcbkJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKS5CYXNlO1xub3V0JC5GcmFtZSA9IEZyYW1lID0gKGZ1bmN0aW9uKHN1cGVyY2xhc3Mpe1xuICB2YXIgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChGcmFtZSwgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnRnJhbWUnLCBGcmFtZSksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBGcmFtZTtcbiAgZnVuY3Rpb24gRnJhbWUob3B0cywgZ3Mpe1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgRnJhbWUuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIHJldHVybiBGcmFtZTtcbn0oQmFzZSkpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIGZsb29yLCBCYXNlLCBsaW5lTWF0ZXJpYWxzLCByb3dzVG9Db2xzLCBHdWlkZUxpbmVzLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBmbG9vciA9IHJlZiQuZmxvb3I7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbmxpbmVNYXRlcmlhbHMgPSByZXF1aXJlKCcuLi9wYWxldHRlJykubGluZU1hdGVyaWFscztcbnJvd3NUb0NvbHMgPSBmdW5jdGlvbihyb3dzKXtcbiAgdmFyIGNvbHMsIGkkLCB0byQsIHksIGokLCB0bzEkLCB4O1xuICBjb2xzID0gW107XG4gIGZvciAoaSQgPSAwLCB0byQgPSByb3dzWzBdLmxlbmd0aDsgaSQgPCB0byQ7ICsraSQpIHtcbiAgICB5ID0gaSQ7XG4gICAgZm9yIChqJCA9IDAsIHRvMSQgPSByb3dzLmxlbmd0aDsgaiQgPCB0bzEkOyArK2okKSB7XG4gICAgICB4ID0gaiQ7XG4gICAgICAoY29sc1t5XSB8fCAoY29sc1t5XSA9IFtdKSlbeF0gPSByb3dzW3hdW3ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29scztcbn07XG5vdXQkLkd1aWRlTGluZXMgPSBHdWlkZUxpbmVzID0gKGZ1bmN0aW9uKHN1cGVyY2xhc3Mpe1xuICB2YXIgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChHdWlkZUxpbmVzLCBzdXBlcmNsYXNzKS5kaXNwbGF5TmFtZSA9ICdHdWlkZUxpbmVzJywgR3VpZGVMaW5lcyksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBHdWlkZUxpbmVzO1xuICBmdW5jdGlvbiBHdWlkZUxpbmVzKG9wdHMsIGdzKXtcbiAgICB2YXIgcmVmJCwgd2lkdGgsIGhlaWdodCwgbWVzaCwgaSQsIGksIGxpbmU7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBHdWlkZUxpbmVzLnN1cGVyY2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmxpbmVzID0gW107XG4gICAgcmVmJCA9IGdzLmFyZW5hLCB3aWR0aCA9IHJlZiQud2lkdGgsIGhlaWdodCA9IHJlZiQuaGVpZ2h0O1xuICAgIG1lc2ggPSBuZXcgVEhSRUUuR2VvbWV0cnkoKTtcbiAgICBtZXNoLnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCksIG5ldyBUSFJFRS5WZWN0b3IzKDAsIGhlaWdodCwgMCkpO1xuICAgIHRoaXMucmVnaXN0cmF0aW9uLnBvc2l0aW9uLnggPSB3aWR0aCAvIC0yICsgMC41O1xuICAgIGZvciAoaSQgPSAwOyBpJCA8PSA5OyArK2kkKSB7XG4gICAgICBpID0gaSQ7XG4gICAgICBsaW5lID0gbmV3IFRIUkVFLkxpbmUobWVzaCwgbGluZU1hdGVyaWFsc1tpXSk7XG4gICAgICByZWYkID0gbGluZS5wb3NpdGlvbjtcbiAgICAgIHJlZiQueCA9IGk7XG4gICAgICByZWYkLnkgPSAwO1xuICAgICAgdGhpcy5saW5lcy5wdXNoKGxpbmUpO1xuICAgICAgdGhpcy5yZWdpc3RyYXRpb24uYWRkKGxpbmUpO1xuICAgIH1cbiAgfVxuICBwcm90b3R5cGUuc2hvd0JlYW0gPSBmdW5jdGlvbihicmljayl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCBsaW5lLCB5LCByb3csIGxyZXN1bHQkLCBqJCwgbGVuMSQsIHgsIGNlbGwsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHRoaXMubGluZXMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBsaW5lID0gcmVmJFtpJF07XG4gICAgICBsaW5lLm1hdGVyaWFsID0gbGluZU1hdGVyaWFsc1swXTtcbiAgICB9XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IGJyaWNrLnNoYXBlKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgeSA9IGkkO1xuICAgICAgcm93ID0gcmVmJFtpJF07XG4gICAgICBscmVzdWx0JCA9IFtdO1xuICAgICAgZm9yIChqJCA9IDAsIGxlbjEkID0gcm93Lmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgICB4ID0gaiQ7XG4gICAgICAgIGNlbGwgPSByb3dbaiRdO1xuICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgIGxyZXN1bHQkLnB1c2godGhpcy5saW5lc1ticmljay5wb3NbMF0gKyB4XS5tYXRlcmlhbCA9IGxpbmVNYXRlcmlhbHNbY2VsbF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHRzJC5wdXNoKGxyZXN1bHQkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICBwcm90b3R5cGUuZGFuY2UgPSBmdW5jdGlvbih0aW1lKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIGksIGxpbmUsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHRoaXMubGluZXMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBpID0gaSQ7XG4gICAgICBsaW5lID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKGxpbmUubWF0ZXJpYWwgPSBsaW5lTWF0ZXJpYWxzWyhpICsgZmxvb3IodGltZSAvIDEwMCkpICUgOF0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHJldHVybiBHdWlkZUxpbmVzO1xufShCYXNlKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgVGl0bGUsIFRhYmxlLCBGcmFtZSwgQnJpY2ssIExpZ2h0aW5nLCBHdWlkZUxpbmVzLCBBcmVuYUNlbGxzLCBCcmlja1ByZXZpZXcsIFBhcnRpY2xlRWZmZWN0LCBTdGFydE1lbnUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5pbXBvcnQkKG91dCQsIChyZWYkID0gcmVxdWlyZSgnLi90aXRsZScpLCBUaXRsZSA9IHJlZiQuVGl0bGUsIHJlZiQpKTtcbmltcG9ydCQob3V0JCwgKHJlZiQgPSByZXF1aXJlKCcuL3RhYmxlJyksIFRhYmxlID0gcmVmJC5UYWJsZSwgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vZnJhbWUnKSwgRnJhbWUgPSByZWYkLkZyYW1lLCByZWYkKSk7XG5pbXBvcnQkKG91dCQsIChyZWYkID0gcmVxdWlyZSgnLi9icmljaycpLCBCcmljayA9IHJlZiQuQnJpY2ssIHJlZiQpKTtcbmltcG9ydCQob3V0JCwgKHJlZiQgPSByZXF1aXJlKCcuL2xpZ2h0aW5nJyksIExpZ2h0aW5nID0gcmVmJC5MaWdodGluZywgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vZ3VpZGUtbGluZXMnKSwgR3VpZGVMaW5lcyA9IHJlZiQuR3VpZGVMaW5lcywgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vYXJlbmEtY2VsbHMnKSwgQXJlbmFDZWxscyA9IHJlZiQuQXJlbmFDZWxscywgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vYnJpY2stcHJldmlldycpLCBCcmlja1ByZXZpZXcgPSByZWYkLkJyaWNrUHJldmlldywgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vcGFydGljbGUtZWZmZWN0JyksIFBhcnRpY2xlRWZmZWN0ID0gcmVmJC5QYXJ0aWNsZUVmZmVjdCwgcmVmJCkpO1xuaW1wb3J0JChvdXQkLCAocmVmJCA9IHJlcXVpcmUoJy4vc3RhcnQtbWVudScpLCBTdGFydE1lbnUgPSByZWYkLlN0YXJ0TWVudSwgcmVmJCkpO1xuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgQmFzZSwgTGlnaHRpbmcsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2c7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbm91dCQuTGlnaHRpbmcgPSBMaWdodGluZyA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoTGlnaHRpbmcsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ0xpZ2h0aW5nJywgTGlnaHRpbmcpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gTGlnaHRpbmc7XG4gIGZ1bmN0aW9uIExpZ2h0aW5nKG9wdHMsIGdzKXtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIExpZ2h0aW5nLnN1cGVyY2xhc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmxpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYsIDEuMSwgMTAwKTtcbiAgICB0aGlzLnJvb3QuYWRkKHRoaXMubGlnaHQpO1xuICAgIHRoaXMuc3BvdGxpZ2h0ID0gbmV3IFRIUkVFLlNwb3RMaWdodCgweGZmZmZmZik7XG4gICAgdGhpcy5zcG90bGlnaHQucG9zaXRpb24uc2V0KDAsIGdzLmFyZW5hLmhlaWdodCwgMCk7XG4gICAgdGhpcy5zcG90bGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgdGhpcy5zcG90bGlnaHQuc2hhZG93RGFya25lc3MgPSAwLjU7XG4gICAgdGhpcy5zcG90bGlnaHQuc2hhZG93QmlhcyA9IDAuMDAwMTtcbiAgICB0aGlzLnNwb3RsaWdodC5zaGFkb3dNYXBXaWR0aCA9IDEwMjQ7XG4gICAgdGhpcy5zcG90bGlnaHQuc2hhZG93TWFwSGVpZ2h0ID0gMTAyNDtcbiAgICB0aGlzLnNwb3RsaWdodC5zaGFkb3dDYW1lcmFWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNwb3RsaWdodC5zaGFkb3dDYW1lcmFOZWFyID0gMTA7XG4gICAgdGhpcy5zcG90bGlnaHQuc2hhZG93Q2FtZXJhRmFyID0gMjUwMDtcbiAgICB0aGlzLnNwb3RsaWdodC5zaGFkb3dDYW1lcmFGb3YgPSA1MDtcbiAgfVxuICByZXR1cm4gTGlnaHRpbmc7XG59KEJhc2UpKTtcbmZ1bmN0aW9uIGV4dGVuZCQoc3ViLCBzdXApe1xuICBmdW5jdGlvbiBmdW4oKXt9IGZ1bi5wcm90b3R5cGUgPSAoc3ViLnN1cGVyY2xhc3MgPSBzdXApLnByb3RvdHlwZTtcbiAgKHN1Yi5wcm90b3R5cGUgPSBuZXcgZnVuKS5jb25zdHJ1Y3RvciA9IHN1YjtcbiAgaWYgKHR5cGVvZiBzdXAuZXh0ZW5kZWQgPT0gJ2Z1bmN0aW9uJykgc3VwLmV4dGVuZGVkKHN1Yik7XG4gIHJldHVybiBzdWI7XG59XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciByZWYkLCBpZCwgbG9nLCBwaSwgc2luLCBjb3MsIEJhc2UsIG1lc2hNYXRlcmlhbHMsIFBhcnRpY2xlRWZmZWN0LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBwaSA9IHJlZiQucGksIHNpbiA9IHJlZiQuc2luLCBjb3MgPSByZWYkLmNvcztcbkJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKS5CYXNlO1xubWVzaE1hdGVyaWFscyA9IHJlcXVpcmUoJy4uL3BhbGV0dGUnKS5tZXNoTWF0ZXJpYWxzO1xub3V0JC5QYXJ0aWNsZUVmZmVjdCA9IFBhcnRpY2xlRWZmZWN0ID0gKGZ1bmN0aW9uKHN1cGVyY2xhc3Mpe1xuICB2YXIgc2l6ZSwgc3BlZWQsIGxpZmVzcGFuLCBwcm90b3R5cGUgPSBleHRlbmQkKChpbXBvcnQkKFBhcnRpY2xlRWZmZWN0LCBzdXBlcmNsYXNzKS5kaXNwbGF5TmFtZSA9ICdQYXJ0aWNsZUVmZmVjdCcsIFBhcnRpY2xlRWZmZWN0KSwgc3VwZXJjbGFzcykucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IFBhcnRpY2xlRWZmZWN0O1xuICBzaXplID0gMC4zO1xuICBzcGVlZCA9IDM7XG4gIGxpZmVzcGFuID0gMzAwMDtcbiAgZnVuY3Rpb24gUGFydGljbGVFZmZlY3Qob3B0cywgZ3Mpe1xuICAgIHZhciBhcmVuYSwgd2lkdGgsIGhlaWdodCwgcGFydGljbGVzLCBnZW9tZXRyeSwgY29sb3IsIG1hdGVyaWFsLCBwYXJ0aWNsZVN5c3RlbTtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIGFyZW5hID0gZ3MuYXJlbmEsIHdpZHRoID0gYXJlbmEud2lkdGgsIGhlaWdodCA9IGFyZW5hLmhlaWdodDtcbiAgICBQYXJ0aWNsZUVmZmVjdC5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5sYXN0UCA9IDEwO1xuICAgIHBhcnRpY2xlcyA9IDEyMDA7XG4gICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICB0aGlzLnBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVzICogMyk7XG4gICAgdGhpcy52ZWxvY2l0aWVzID0gbmV3IEZsb2F0MzJBcnJheShwYXJ0aWNsZXMgKiAzKTtcbiAgICB0aGlzLmxpZmVzcGFucyA9IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVzICogMyk7XG4gICAgdGhpcy5jb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KHBhcnRpY2xlcyAqIDMpO1xuICAgIGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCk7XG4gICAgdGhpcy5wb3NBdHRyID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSh0aGlzLnBvc2l0aW9ucywgMyk7XG4gICAgdGhpcy5jb2xBdHRyID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSh0aGlzLmNvbG9ycywgMyk7XG4gICAgdGhpcy5yZXNldFBhcnRpY2xlcygpO1xuICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCB0aGlzLnBvc0F0dHIpO1xuICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnY29sb3InLCB0aGlzLmNvbEF0dHIpO1xuICAgIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCh7XG4gICAgICBzaXplOiBzaXplLFxuICAgICAgdmVydGV4Q29sb3JzOiBUSFJFRS5WZXJ0ZXhDb2xvcnNcbiAgICB9KTtcbiAgICBwYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5Qb2ludENsb3VkKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgdGhpcy5yb290LmFkZChwYXJ0aWNsZVN5c3RlbSk7XG4gIH1cbiAgcHJvdG90eXBlLnJldml2ZSA9IGZ1bmN0aW9uKG4sIHkpe1xuICAgIHZhciBpJCwgaSwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMDsgaSQgPCBuOyArK2kkKSB7XG4gICAgICBpID0gaSQ7XG4gICAgICB0aGlzLmxpZmVzcGFuc1tpXSA9IGxpZmVzcGFuIC8gMiArIE1hdGgucmFuZG9tKCkgKiBsaWZlc3BhbiAvIDI7XG4gICAgICByZXN1bHRzJC5wdXNoKHRoaXMucG9zaXRpb25zW2kgKiAzICsgMV0gPSB5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICBwcm90b3R5cGUucmVzZXRQYXJ0aWNsZXMgPSBmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgdG8kLCBpLCBuLCB4LCB6LCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCB0byQgPSB0aGlzLnBvc2l0aW9ucy5sZW5ndGg7IGkkIDwgdG8kOyBpJCArPSAzKSB7XG4gICAgICBpID0gaSQ7XG4gICAgICBuID0gMTA7XG4gICAgICB4ID0gNC41IC0gTWF0aC5yYW5kb20oKSAqIDk7XG4gICAgICB6ID0gMC41IC0gTWF0aC5yYW5kb20oKTtcbiAgICAgIHRoaXMucG9zaXRpb25zW2kgKyAwXSA9IHg7XG4gICAgICB0aGlzLnBvc2l0aW9uc1tpICsgMV0gPSAwO1xuICAgICAgdGhpcy5wb3NpdGlvbnNbaSArIDJdID0gejtcbiAgICAgIHRoaXMudmVsb2NpdGllc1tpICsgMF0gPSB4IC8gOSAqIDEwO1xuICAgICAgdGhpcy52ZWxvY2l0aWVzW2kgKyAxXSA9IE1hdGgucmFuZG9tKCkgKiAyO1xuICAgICAgdGhpcy52ZWxvY2l0aWVzW2kgKyAyXSA9IHogKiAxMDtcbiAgICAgIHRoaXMuY29sb3JzW2kgKyAwXSA9IDE7XG4gICAgICB0aGlzLmNvbG9yc1tpICsgMV0gPSAxO1xuICAgICAgdGhpcy5jb2xvcnNbaSArIDJdID0gMTtcbiAgICAgIHJlc3VsdHMkLnB1c2godGhpcy5saWZlc3BhbnNbaV0gPSAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICBwcm90b3R5cGUuYWNjZWxlcmF0ZVBhcnRpY2xlID0gZnVuY3Rpb24oaSwgdCl7XG4gICAgdmFyIGFjYywgcHgsIHB5LCBweiwgdngsIHZ5LCB2eiwgcHgxLCBweTEsIHB6MSwgdngxLCB2eTEsIHZ6MTtcbiAgICBpZiAodGhpcy5saWZlc3BhbnNbaSAvIDNdIDw9IDApIHtcbiAgICAgIHRoaXMucG9zaXRpb25zW2kgKyAxXSA9IC0xMDAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0ID0gdCAvICgxMDAwIC8gc3BlZWQpO1xuICAgIGFjYyA9IC0wLjk4O1xuICAgIHB4ID0gdGhpcy5wb3NpdGlvbnNbaSArIDBdO1xuICAgIHB5ID0gdGhpcy5wb3NpdGlvbnNbaSArIDFdO1xuICAgIHB6ID0gdGhpcy5wb3NpdGlvbnNbaSArIDJdO1xuICAgIHZ4ID0gdGhpcy52ZWxvY2l0aWVzW2kgKyAwXTtcbiAgICB2eSA9IHRoaXMudmVsb2NpdGllc1tpICsgMV07XG4gICAgdnogPSB0aGlzLnZlbG9jaXRpZXNbaSArIDJdO1xuICAgIHB4MSA9IHB4ICsgMC41ICogMCAqIHQgKiB0ICsgdnggKiB0O1xuICAgIHB5MSA9IHB5ICsgMC41ICogYWNjICogdCAqIHQgKyB2eSAqIHQ7XG4gICAgcHoxID0gcHogKyAwLjUgKiAwICogdCAqIHQgKyB2eiAqIHQ7XG4gICAgdngxID0gMCAqIHQgKyB2eDtcbiAgICB2eTEgPSBhY2MgKiB0ICsgdnk7XG4gICAgdnoxID0gMCAqIHQgKyB2ejtcbiAgICBpZiAocHkxIDwgc2l6ZSAvIDIpIHtcbiAgICAgIHB5MSA9IHNpemUgLyAyO1xuICAgICAgdngxICo9IDAuNztcbiAgICAgIHZ5MSAqPSAtMC42O1xuICAgICAgdnoxICo9IDAuNztcbiAgICB9XG4gICAgdGhpcy5wb3NpdGlvbnNbaSArIDBdID0gcHgxO1xuICAgIHRoaXMucG9zaXRpb25zW2kgKyAxXSA9IHB5MTtcbiAgICB0aGlzLnBvc2l0aW9uc1tpICsgMl0gPSBwejE7XG4gICAgdGhpcy52ZWxvY2l0aWVzW2kgKyAwXSA9IHZ4MTtcbiAgICB0aGlzLnZlbG9jaXRpZXNbaSArIDFdID0gdnkxO1xuICAgIHJldHVybiB0aGlzLnZlbG9jaXRpZXNbaSArIDJdID0gdnoxO1xuICB9O1xuICBwcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ocCwgzpR0KXtcbiAgICB2YXIgaSQsIHRvJCwgaTtcbiAgICB0aGlzLmxhc3RQID0gcDtcbiAgICBmb3IgKGkkID0gMCwgdG8kID0gdGhpcy5wb3NpdGlvbnMubGVuZ3RoOyBpJCA8IHRvJDsgaSQgKz0gMykge1xuICAgICAgaSA9IGkkO1xuICAgICAgdGhpcy5hY2NlbGVyYXRlUGFydGljbGUoaSwgzpR0KTtcbiAgICAgIHRoaXMubGlmZXNwYW5zW2kgLyAzXSAtPSDOlHQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBvc0F0dHIubmVlZHNVcGRhdGUgPSB0cnVlO1xuICB9O1xuICByZXR1cm4gUGFydGljbGVFZmZlY3Q7XG59KEJhc2UpKTtcbmZ1bmN0aW9uIGV4dGVuZCQoc3ViLCBzdXApe1xuICBmdW5jdGlvbiBmdW4oKXt9IGZ1bi5wcm90b3R5cGUgPSAoc3ViLnN1cGVyY2xhc3MgPSBzdXApLnByb3RvdHlwZTtcbiAgKHN1Yi5wcm90b3R5cGUgPSBuZXcgZnVuKS5jb25zdHJ1Y3RvciA9IHN1YjtcbiAgaWYgKHR5cGVvZiBzdXAuZXh0ZW5kZWQgPT0gJ2Z1bmN0aW9uJykgc3VwLmV4dGVuZGVkKHN1Yik7XG4gIHJldHVybiBzdWI7XG59XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciByZWYkLCBpZCwgbG9nLCBzaW4sIGNvcywgQmFzZSwgY2FudmFzVGV4dHVyZSwgU3RhcnRNZW51LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBzaW4gPSByZWYkLnNpbiwgY29zID0gcmVmJC5jb3M7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbmNhbnZhc1RleHR1cmUgPSBmdW5jdGlvbigpe1xuICB2YXIgdGV4dHVyZVNpemUsIHRleHRDbnYsIGltZ0NudiwgdGV4dEN0eCwgaW1nQ3R4O1xuICB0ZXh0dXJlU2l6ZSA9IDUxMjtcbiAgdGV4dENudiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBpbWdDbnYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdGV4dEN0eCA9IHRleHRDbnYuZ2V0Q29udGV4dCgnMmQnKTtcbiAgaW1nQ3R4ID0gaW1nQ252LmdldENvbnRleHQoJzJkJyk7XG4gIGltZ0Nudi53aWR0aCA9IGltZ0Nudi5oZWlnaHQgPSB0ZXh0dXJlU2l6ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZyQpe1xuICAgIHZhciB3aWR0aCwgaGVpZ2h0LCB0ZXh0LCB0ZXh0U2l6ZSwgcmVmJDtcbiAgICB3aWR0aCA9IGFyZyQud2lkdGgsIGhlaWdodCA9IGFyZyQuaGVpZ2h0LCB0ZXh0ID0gYXJnJC50ZXh0LCB0ZXh0U2l6ZSA9IChyZWYkID0gYXJnJC50ZXh0U2l6ZSkgIT0gbnVsbCA/IHJlZiQgOiAxMDtcbiAgICB0ZXh0Q252LndpZHRoID0gd2lkdGggKiAxMDA7XG4gICAgdGV4dENudi5oZWlnaHQgPSBoZWlnaHQgKiAxMDA7XG4gICAgdGV4dEN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICB0ZXh0Q3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIHRleHRDdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICB0ZXh0Q3R4LmZvbnQgPSB0ZXh0U2l6ZSAqIDEwMCArIFwicHggbW9ub3NwYWNlXCI7XG4gICAgdGV4dEN0eC5maWxsVGV4dCh0ZXh0LCB3aWR0aCAqIDUwLCBoZWlnaHQgKiA1MCwgd2lkdGggKiAxMDApO1xuICAgIGltZ0N0eC5jbGVhclJlY3QoMCwgMCwgdGV4dHVyZVNpemUsIHRleHR1cmVTaXplKTtcbiAgICBpbWdDdHguZHJhd0ltYWdlKHRleHRDbnYsIDAsIDAsIHRleHR1cmVTaXplLCB0ZXh0dXJlU2l6ZSk7XG4gICAgcmV0dXJuIGltZ0Nudi50b0RhdGFVUkwoKTtcbiAgfTtcbn0oKTtcbm91dCQuU3RhcnRNZW51ID0gU3RhcnRNZW51ID0gKGZ1bmN0aW9uKHN1cGVyY2xhc3Mpe1xuICB2YXIgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChTdGFydE1lbnUsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ1N0YXJ0TWVudScsIFN0YXJ0TWVudSksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBTdGFydE1lbnU7XG4gIGZ1bmN0aW9uIFN0YXJ0TWVudShvcHRzLCBncyl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCBpeCwgb3B0aW9uLCBpbWFnZSwgdGV4LCBnZW9tLCBtYXQsIHF1YWQ7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBTdGFydE1lbnUuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBncy5zdGFydE1lbnVTdGF0ZS5tZW51RGF0YSkubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIGl4ID0gaSQ7XG4gICAgICBvcHRpb24gPSByZWYkW2kkXTtcbiAgICAgIGltYWdlID0gY2FudmFzVGV4dHVyZSh7XG4gICAgICAgIHRleHQ6IG9wdGlvbi50ZXh0LFxuICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgIGhlaWdodDogMTBcbiAgICAgIH0pO1xuICAgICAgdGV4ID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZShpbWFnZSk7XG4gICAgICBnZW9tID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoMTYsIDQpO1xuICAgICAgbWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgICAgbWFwOiB0ZXgsXG4gICAgICAgIGFscGhhTWFwOiB0ZXgsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHF1YWQgPSBuZXcgVEhSRUUuTWVzaChnZW9tLCBtYXQpO1xuICAgICAgcXVhZC5wb3NpdGlvbi55ID0gNiAtIGl4ICogNC41O1xuICAgICAgdGhpcy5vcHRpb25zLnB1c2gocXVhZCk7XG4gICAgICB0aGlzLnJvb3QuYWRkKHF1YWQpO1xuICAgIH1cbiAgICB0aGlzLnJlZ2lzdHJhdGlvbi5wb3NpdGlvbi55ID0gMTA7XG4gIH1cbiAgcHJvdG90eXBlLnVwZGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uKHN0YXRlLCB0aW1lKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIGl4LCBxdWFkLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB0aGlzLm9wdGlvbnMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBpeCA9IGkkO1xuICAgICAgcXVhZCA9IHJlZiRbaSRdO1xuICAgICAgaWYgKGl4ID09PSBzdGF0ZS5jdXJyZW50SW5kZXgpIHtcbiAgICAgICAgcXVhZC5zY2FsZS54ID0gMSArIDAuMDUgKiBzaW4odGltZSAvIDMwMCk7XG4gICAgICAgIHJlc3VsdHMkLnB1c2gocXVhZC5zY2FsZS55ID0gMSArIDAuMDUgKiAtc2luKHRpbWUgLyAzMDApKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9O1xuICByZXR1cm4gU3RhcnRNZW51O1xufShCYXNlKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIGxvZywgQmFzZSwgbWVzaE1hdGVyaWFscywgVGFibGUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2c7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbm1lc2hNYXRlcmlhbHMgPSByZXF1aXJlKCcuLi9wYWxldHRlJykubWVzaE1hdGVyaWFscztcbm91dCQuVGFibGUgPSBUYWJsZSA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoVGFibGUsIHN1cGVyY2xhc3MpLmRpc3BsYXlOYW1lID0gJ1RhYmxlJywgVGFibGUpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gVGFibGU7XG4gIGZ1bmN0aW9uIFRhYmxlKG9wdHMsIGdzKXtcbiAgICB2YXIgc2l6ZSwgdGV4dHVyZSwgdGFibGVNYXQ7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBUYWJsZS5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgc2l6ZSA9IDEwMDtcbiAgICB0ZXh0dXJlID0gVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSgnYXNzZXRzL21hcmJsZS5qcGcnKTtcbiAgICB0ZXh0dXJlLnJlcGVhdC5zZXQoMiwgMik7XG4gICAgdGV4dHVyZS53cmFwUyA9IFRIUkVFLk1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7XG4gICAgdGV4dHVyZS53cmFwVCA9IFRIUkVFLk1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7XG4gICAgdGFibGVNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuICAgICAgbWFwOiB0ZXh0dXJlXG4gICAgfSk7XG4gICAgdGhpcy5nZW9tLnRhYmxlID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHNpemUsIDEsIHNpemUpO1xuICAgIHRoaXMudGFibGUgPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb20udGFibGUsIHRhYmxlTWF0KTtcbiAgICB0aGlzLnRhYmxlLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIHRoaXMudGFibGUuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgdGhpcy5yZWdpc3RyYXRpb24uYWRkKHRoaXMudGFibGUpO1xuICAgIHRoaXMucmVnaXN0cmF0aW9uLnBvc2l0aW9uLnkgPSAtMC41O1xuICB9XG4gIHJldHVybiBUYWJsZTtcbn0oQmFzZSkpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHBpLCBzaW4sIGNvcywgbWluLCBtYXgsIEVhc2UsIEJhc2UsIG1lc2hNYXRlcmlhbHMsIFRpdGxlLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nLCBwaSA9IHJlZiQucGksIHNpbiA9IHJlZiQuc2luLCBjb3MgPSByZWYkLmNvcywgbWluID0gcmVmJC5taW4sIG1heCA9IHJlZiQubWF4O1xuRWFzZSA9IHJlcXVpcmUoJ3N0ZCcpLkVhc2U7XG5CYXNlID0gcmVxdWlyZSgnLi9iYXNlJykuQmFzZTtcbm1lc2hNYXRlcmlhbHMgPSByZXF1aXJlKCcuLi9wYWxldHRlJykubWVzaE1hdGVyaWFscztcbm91dCQuVGl0bGUgPSBUaXRsZSA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIGJsb2NrVGV4dCwgcHJvdG90eXBlID0gZXh0ZW5kJCgoaW1wb3J0JChUaXRsZSwgc3VwZXJjbGFzcykuZGlzcGxheU5hbWUgPSAnVGl0bGUnLCBUaXRsZSksIHN1cGVyY2xhc3MpLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBUaXRsZTtcbiAgYmxvY2tUZXh0ID0ge1xuICAgIHRldHJpczogW1sxLCAxLCAxLCAyLCAyLCAyLCAzLCAzLCAzLCA0LCA0LCAwLCA1LCA2LCA2LCA2XSwgWzAsIDEsIDAsIDIsIDAsIDAsIDAsIDMsIDAsIDQsIDAsIDQsIDUsIDYsIDAsIDBdLCBbMCwgMSwgMCwgMiwgMiwgMCwgMCwgMywgMCwgNCwgNCwgMCwgNSwgNiwgNiwgNl0sIFswLCAxLCAwLCAyLCAwLCAwLCAwLCAzLCAwLCA0LCAwLCA0LCA1LCAwLCAwLCA2XSwgWzAsIDEsIDAsIDIsIDIsIDIsIDAsIDMsIDAsIDQsIDAsIDQsIDUsIDYsIDYsIDZdXSxcbiAgICB2cnQ6IFtbMSwgMCwgMSwgNCwgNCwgNiwgNiwgNl0sIFsxLCAwLCAxLCA0LCAwLCA0LCA2LCAwXSwgWzEsIDAsIDEsIDQsIDQsIDAsIDYsIDBdLCBbMSwgMCwgMSwgNCwgMCwgNCwgNiwgMF0sIFswLCAxLCAwLCA0LCAwLCA0LCA2LCAwXV1cbiAgfTtcbiAgZnVuY3Rpb24gVGl0bGUob3B0cywgZ3Mpe1xuICAgIHZhciByZWYkLCB3aWR0aCwgaGVpZ2h0LCB3b3JkLCBib3hTaXplLCB0aXRsZU9mZnNldCwgaSQsIGxlbiQsIHksIHJvdywgaiQsIGxlbjEkLCB4LCBjZWxsLCBib3g7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICBUaXRsZS5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmVmJCA9IGdzLmFyZW5hLCB3aWR0aCA9IHJlZiQud2lkdGgsIGhlaWdodCA9IHJlZiQuaGVpZ2h0O1xuICAgIHdvcmQgPSBibG9ja1RleHQudnJ0O1xuICAgIGJveFNpemUgPSAxO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuZ2VvbS5ib3ggPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoYm94U2l6ZSAqIDAuOSwgYm94U2l6ZSAqIDAuOSwgYm94U2l6ZSAqIDAuOSk7XG4gICAgdGhpcy5nZW9tLnN0cnV0ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIDAuOSk7XG4gICAgdGhpcy5zdHJ1dCA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvbS5zdHJ1dCwgbWVzaE1hdGVyaWFsc1swXSk7XG4gICAgdGhpcy5zdHJ1dC5wb3NpdGlvbi56ID0gLTE7XG4gICAgdGhpcy5zdHJ1dC5wb3NpdGlvbi55ID0gaGVpZ2h0IC8gLTIgKyAwLjU7XG4gICAgdGl0bGVPZmZzZXQgPSB7XG4gICAgICB4OiAod29yZFswXS5sZW5ndGggLSAxKSAvICgtMiAqIGJveFNpemUpLFxuICAgICAgeTogaGVpZ2h0IC8gLTIgLSAod29yZC5sZW5ndGggLSAxKSAvICgtMSAqIGJveFNpemUpXG4gICAgfTtcbiAgICB0aGlzLnRpdGxlID0gbmV3IFRIUkVFLk9iamVjdDNEO1xuICAgIGltcG9ydCQodGhpcy50aXRsZS5wb3NpdGlvbiwgdGl0bGVPZmZzZXQpO1xuICAgIHRoaXMucmVnaXN0cmF0aW9uLmFkZCh0aGlzLnRpdGxlKTtcbiAgICByZWYkID0gdGhpcy5yZWdpc3RyYXRpb24ucG9zaXRpb247XG4gICAgcmVmJC54ID0gMDtcbiAgICByZWYkLnkgPSBoZWlnaHQgLSAwLjU7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSB3b3JkLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB5ID0gaSQ7XG4gICAgICByb3cgPSB3b3JkW2kkXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgeCA9IGokO1xuICAgICAgICBjZWxsID0gcm93W2okXTtcbiAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICBib3ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb20uYm94LCBtZXNoTWF0ZXJpYWxzW2NlbGxdKTtcbiAgICAgICAgICByZWYkID0gYm94LnBvc2l0aW9uO1xuICAgICAgICAgIHJlZiQueCA9IHggLyBib3hTaXplO1xuICAgICAgICAgIHJlZiQueSA9IHdvcmQubGVuZ3RoIC8gMiAtIHkgLyBib3hTaXplO1xuICAgICAgICAgIHRoaXMudGl0bGUuYWRkKGJveCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJvdG90eXBlLnJldmVhbCA9IGZ1bmN0aW9uKHByb2dyZXNzKXtcbiAgICB2YXIgcDtcbiAgICBwID0gbWluKDEsIHByb2dyZXNzKTtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvbi5wb3NpdGlvbi55ID0gRWFzZS5xdWludE91dChwLCB0aGlzLmhlaWdodCAqIDIsIHRoaXMuaGVpZ2h0KTtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvbi5yb3RhdGlvbi55ID0gRWFzZS5leHBPdXQocCwgMzAsIDApO1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJhdGlvbi5yb3RhdGlvbi54ID0gRWFzZS5leHBPdXQocCwgLXBpIC8gMTAsIDApO1xuICB9O1xuICBwcm90b3R5cGUuZGFuY2UgPSBmdW5jdGlvbih0aW1lKXtcbiAgICByZXR1cm4gdGhpcy50aXRsZS5vcGFjaXR5ID0gMC41ICsgMC41ICogc2luICsgdGltZSAvIDEwMDA7XG4gIH07XG4gIHJldHVybiBUaXRsZTtcbn0oQmFzZSkpO1xuZnVuY3Rpb24gZXh0ZW5kJChzdWIsIHN1cCl7XG4gIGZ1bmN0aW9uIGZ1bigpe30gZnVuLnByb3RvdHlwZSA9IChzdWIuc3VwZXJjbGFzcyA9IHN1cCkucHJvdG90eXBlO1xuICAoc3ViLnByb3RvdHlwZSA9IG5ldyBmdW4pLmNvbnN0cnVjdG9yID0gc3ViO1xuICBpZiAodHlwZW9mIHN1cC5leHRlbmRlZCA9PSAnZnVuY3Rpb24nKSBzdXAuZXh0ZW5kZWQoc3ViKTtcbiAgcmV0dXJuIHN1Yjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHNpbiwgY29zLCBwaSwgdGF1LCBtYXgsIGxlcnAsIHJhbmQsIGZsb29yLCBtYXAsIFRIUkVFLCBQYWxldHRlLCBTY2VuZU1hbmFnZXIsIFRpdGxlLCBUYWJsZSwgRnJhbWUsIEJyaWNrLCBMaWdodGluZywgR3VpZGVMaW5lcywgQXJlbmFDZWxscywgQnJpY2tQcmV2aWV3LCBQYXJ0aWNsZUVmZmVjdCwgU3RhcnRNZW51LCBUaHJlZUpzUmVuZGVyZXIsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIHNpbiA9IHJlZiQuc2luLCBjb3MgPSByZWYkLmNvcywgcGkgPSByZWYkLnBpLCB0YXUgPSByZWYkLnRhdSwgbWF4ID0gcmVmJC5tYXgsIGxlcnAgPSByZWYkLmxlcnAsIHJhbmQgPSByZWYkLnJhbmQsIGZsb29yID0gcmVmJC5mbG9vciwgbWFwID0gcmVmJC5tYXA7XG5USFJFRSA9IHJlcXVpcmUoJ3RocmVlLWpzLXZyLWV4dGVuc2lvbnMnKTtcblBhbGV0dGUgPSByZXF1aXJlKCcuL3BhbGV0dGUnKS5QYWxldHRlO1xuU2NlbmVNYW5hZ2VyID0gcmVxdWlyZSgnLi9zY2VuZS1tYW5hZ2VyJykuU2NlbmVNYW5hZ2VyO1xucmVmJCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cycpLCBUaXRsZSA9IHJlZiQuVGl0bGUsIFRhYmxlID0gcmVmJC5UYWJsZSwgRnJhbWUgPSByZWYkLkZyYW1lLCBCcmljayA9IHJlZiQuQnJpY2ssIExpZ2h0aW5nID0gcmVmJC5MaWdodGluZztcbnJlZiQgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMnKSwgR3VpZGVMaW5lcyA9IHJlZiQuR3VpZGVMaW5lcywgQXJlbmFDZWxscyA9IHJlZiQuQXJlbmFDZWxscywgQnJpY2tQcmV2aWV3ID0gcmVmJC5Ccmlja1ByZXZpZXc7XG5yZWYkID0gcmVxdWlyZSgnLi9jb21wb25lbnRzJyksIFBhcnRpY2xlRWZmZWN0ID0gcmVmJC5QYXJ0aWNsZUVmZmVjdCwgU3RhcnRNZW51ID0gcmVmJC5TdGFydE1lbnU7XG5vdXQkLlRocmVlSnNSZW5kZXJlciA9IFRocmVlSnNSZW5kZXJlciA9IChmdW5jdGlvbigpe1xuICBUaHJlZUpzUmVuZGVyZXIuZGlzcGxheU5hbWUgPSAnVGhyZWVKc1JlbmRlcmVyJztcbiAgdmFyIHByb3RvdHlwZSA9IFRocmVlSnNSZW5kZXJlci5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gVGhyZWVKc1JlbmRlcmVyO1xuICBmdW5jdGlvbiBUaHJlZUpzUmVuZGVyZXIob3B0cywgZ3Mpe1xuICAgIHZhciBhcmVuYSwgd2lkdGgsIGhlaWdodCwgcmVmJCwgbmFtZSwgcGFydCwgdGhpcyQgPSB0aGlzO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgYXJlbmEgPSBncy5hcmVuYSwgd2lkdGggPSBhcmVuYS53aWR0aCwgaGVpZ2h0ID0gYXJlbmEuaGVpZ2h0O1xuICAgIGxvZyhcIk5ldyAzRCBSZW5kZXJlcjpcIiwgdGhpcy5vcHRzKTtcbiAgICB0aGlzLnNjZW5lTWFuID0gbmV3IFNjZW5lTWFuYWdlcih0aGlzLm9wdHMpO1xuICAgIHRoaXMub3V0cHV0Q2FudmFzID0gdGhpcy5zY2VuZU1hbi5kb21FbGVtZW50O1xuICAgIHRoaXMucGFydHMgPSB7XG4gICAgICB0aXRsZTogbmV3IFRpdGxlKHRoaXMub3B0cywgZ3MpLFxuICAgICAgdGFibGU6IG5ldyBUYWJsZSh0aGlzLm9wdHMsIGdzKSxcbiAgICAgIGZyYW1lOiBuZXcgRnJhbWUodGhpcy5vcHRzLCBncyksXG4gICAgICBsaWdodGluZzogbmV3IExpZ2h0aW5nKHRoaXMub3B0cywgZ3MpLFxuICAgICAgZ3VpZGVMaW5lczogbmV3IEd1aWRlTGluZXModGhpcy5vcHRzLCBncyksXG4gICAgICBhcmVuYUNlbGxzOiBuZXcgQXJlbmFDZWxscyh0aGlzLm9wdHMsIGdzKSxcbiAgICAgIHRoaXNCcmljazogbmV3IEJyaWNrKHRoaXMub3B0cywgZ3MpLFxuICAgICAgbmV4dEJyaWNrOiBuZXcgQnJpY2tQcmV2aWV3KHRoaXMub3B0cywgZ3MpLFxuICAgICAgcGFydGljbGVzOiBuZXcgUGFydGljbGVFZmZlY3QodGhpcy5vcHRzLCBncyksXG4gICAgICBzdGFydE1lbnU6IG5ldyBTdGFydE1lbnUodGhpcy5vcHRzLCBncylcbiAgICB9O1xuICAgIHJlZiQgPSB0aGlzLnBhcnRzLmxpZ2h0aW5nLnBvc2l0aW9uO1xuICAgIHJlZiQueSA9IGhlaWdodCAvIDI7XG4gICAgcmVmJC56ID0gNztcbiAgICB0aGlzLnBhcnRzLm5leHRCcmljay5wb3NpdGlvbi55ID0gaGVpZ2h0ICsgNTtcbiAgICB0aGlzLnBhcnRzLnRhYmxlLnRhYmxlLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIHRoaXMucGFydHMudGhpc0JyaWNrLmJyaWNrLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIGZvciAobmFtZSBpbiByZWYkID0gdGhpcy5wYXJ0cykge1xuICAgICAgcGFydCA9IHJlZiRbbmFtZV07XG4gICAgICB0aGlzLnNjZW5lTWFuLmFkZChwYXJ0KTtcbiAgICB9XG4gICAgdGhpcy5yID0gMTU7XG4gICAgdGhpcy55ID0gMztcbiAgICB0aGlzLnNjZW5lTWFuLnJvb3QucG9zaXRpb24uc2V0KDAsIC10aGlzLnksIC10aGlzLnIpO1xuICAgIGxvZyh0aGlzLnNjZW5lTWFuLnJvb3QsIHRoaXMuc2NlbmVNYW4ucm9vdC5wb3NpdGlvbik7XG4gICAgdGhpcy5zY2VuZU1hbi5jYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIHRoaXMuciwgdGhpcy55KSk7XG4gICAgdGhpcy5zaG93U2NlbmVIZWxwZXJzKCk7XG4gICAgdGhpcy5zY2VuZU1hbi5jb250cm9scy56ZXJvU2Vuc29yKCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24oYXJnJCl7XG4gICAgICB2YXIgcGFnZVgsIHBhZ2VZO1xuICAgICAgcGFnZVggPSBhcmckLnBhZ2VYLCBwYWdlWSA9IGFyZyQucGFnZVk7XG4gICAgICByZXR1cm47XG4gICAgICByZXR1cm4gdGhpcyQucG9zaXRpb25EZWJ1Z0NhbWVyYShsZXJwKC0xLCAxLCBwYWdlWCAvIHdpbmRvdy5pbm5lcldpZHRoKSwgbGVycCgtMSwgMSwgcGFnZVkgLyB3aW5kb3cuaW5uZXJIZWlnaHQpKTtcbiAgICB9KTtcbiAgfVxuICBwcm90b3R5cGUuc2hvd1NjZW5lSGVscGVycyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGdyaWQsIGF4aXMsIGxpZ2h0LCBzcG90O1xuICAgIGdyaWQgPSBuZXcgVEhSRUUuR3JpZEhlbHBlcigxMCwgMSk7XG4gICAgYXhpcyA9IG5ldyBUSFJFRS5BeGlzSGVscGVyKDUpO1xuICAgIGxpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHRIZWxwZXIodGhpcy5wYXJ0cy5saWdodGluZy5saWdodCwgMSk7XG4gICAgc3BvdCA9IG5ldyBUSFJFRS5TcG90TGlnaHRIZWxwZXIodGhpcy5wYXJ0cy5saWdodGluZy5zcG90bGlnaHQsIDEpO1xuICAgIHJldHVybiB0aGlzLnNjZW5lTWFuLmNhbWVyYS5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoMCwgdGhpcy55LCAwKSk7XG4gIH07XG4gIHByb3RvdHlwZS5wb3NpdGlvbkRlYnVnQ2FtZXJhID0gZnVuY3Rpb24ocGhhc2UsIHZwaGFzZSl7XG4gICAgdnBoYXNlID09IG51bGwgJiYgKHZwaGFzZSA9IDApO1xuICAgIHRoaXMuc2NlbmVNYW4ucm9vdC5wb3NpdGlvbi55ID0gLXRoaXMueTtcbiAgICByZXR1cm47XG4gICAgdGhpcy5zY2VuZU1hbi5jYW1lcmEucG9zaXRpb24ueCA9IHRoaXMuciAqIHNpbihwaGFzZSk7XG4gICAgdGhpcy5zY2VuZU1hbi5jYW1lcmEucG9zaXRpb24ueSA9IHRoaXMueSArIHRoaXMuciAqIC1zaW4odnBoYXNlKTtcbiAgICB0aGlzLnNjZW5lTWFuLmNhbWVyYS5wb3NpdGlvbi56ID0gdGhpcy5yICogY29zKHBoYXNlKTtcbiAgICByZXR1cm4gdGhpcy5zY2VuZU1hbi5jYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDAsIDEwLCAwKSk7XG4gIH07XG4gIHByb3RvdHlwZS5hdXRvUm90YXRlRGVidWdDYW1lcmEgPSBmdW5jdGlvbihncyl7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25EZWJ1Z0NhbWVyYShwaSAvIDEwICogc2luKGdzLmVsYXBzZWRUaW1lIC8gMTAwMCkpO1xuICB9O1xuICBwcm90b3R5cGUuY2FsY3VsYXRlSm9sdCA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgcm93c1RvUmVtb3ZlLCB0aW1lcnMsIHAsIHp6LCBqb2x0O1xuICAgIHJvd3NUb1JlbW92ZSA9IGdzLnJvd3NUb1JlbW92ZSwgdGltZXJzID0gZ3MudGltZXJzO1xuICAgIHAgPSB0aW1lcnMucmVtb3ZhbEFuaW1hdGlvbi5hY3RpdmVcbiAgICAgID8gMSAtIHRpbWVycy5yZW1vdmFsQW5pbWF0aW9uLnByb2dyZXNzXG4gICAgICA6IHRpbWVycy5oYXJkRHJvcEVmZmVjdC5wcm9ncmVzcyA/IG1heCgxIC0gdGltZXJzLmhhcmREcm9wRWZmZWN0LnByb2dyZXNzKSA6IDA7XG4gICAgenogPSByb3dzVG9SZW1vdmUubGVuZ3RoO1xuICAgIHJldHVybiBqb2x0ID0gLTEgKiBwICogKDEgKyB6eikgKiBncy5vcHRpb25zLmhhcmREcm9wSm9sdEFtb3VudDtcbiAgfTtcbiAgcHJvdG90eXBlLnJlbmRlckxpbmVaYXAgPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIGFyZW5hLCByb3dzVG9SZW1vdmUsIHRpbWVycywgam9sdCwgenosIGppdHRlciwgaSQsIGxlbiQsIGksIHJvd0l4LCBwO1xuICAgIGFyZW5hID0gZ3MuYXJlbmEsIHJvd3NUb1JlbW92ZSA9IGdzLnJvd3NUb1JlbW92ZSwgdGltZXJzID0gZ3MudGltZXJzO1xuICAgIGpvbHQgPSB0aGlzLmNhbGN1bGF0ZUpvbHQoZ3MpO1xuICAgIHp6ID0gcm93c1RvUmVtb3ZlLmxlbmd0aCAvIDIwO1xuICAgIGppdHRlciA9IFtyYW5kKC16eiwgenopLCByYW5kKC16eiwgenopXTtcbiAgICB0aGlzLnBhcnRzLmFyZW5hQ2VsbHMuc2hvd1phcEVmZmVjdChqb2x0LCBncyk7XG4gICAgdGhpcy5zY2VuZU1hbi5yb290LnBvc2l0aW9uLnggPSBqaXR0ZXJbMF07XG4gICAgdGhpcy5zY2VuZU1hbi5yb290LnBvc2l0aW9uLnkgPSBqaXR0ZXJbMV0gKyBqb2x0O1xuICAgIHRoaXMuYXV0b1JvdGF0ZURlYnVnQ2FtZXJhKGdzKTtcbiAgICBpZiAoZ3MuZmxhZ3Mucm93c1JlbW92ZWRUaGlzRnJhbWUpIHtcbiAgICAgIHRoaXMucGFydHMucGFydGljbGVzLnJlc2V0UGFydGljbGVzKCk7XG4gICAgICBmb3IgKGkkID0gMCwgbGVuJCA9IHJvd3NUb1JlbW92ZS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBpID0gaSQ7XG4gICAgICAgIHJvd0l4ID0gcm93c1RvUmVtb3ZlW2kkXTtcbiAgICAgICAgcCA9IChmbiQoKSk7XG4gICAgICAgIHRoaXMucGFydHMucGFydGljbGVzLnJldml2ZShwIC0gaSAqIHAgLyByb3dzVG9SZW1vdmUubGVuZ3RoLCBhcmVuYS5oZWlnaHQgLSByb3dJeCAtIDAuNSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnRzLnBhcnRpY2xlcy51cGRhdGUodGltZXJzLnJlbW92YWxBbmltYXRpb24ucHJvZ3Jlc3MsIGdzLs6UdCk7XG4gICAgZnVuY3Rpb24gZm4kKCl7XG4gICAgICBzd2l0Y2ggKHJvd3NUb1JlbW92ZS5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIDMwMDtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIDYwMDtcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIDEyMDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUucmVuZGVyQXJlbmEgPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIGFyZW5hLCBicmljaztcbiAgICBhcmVuYSA9IGdzLmFyZW5hLCBicmljayA9IGdzLmJyaWNrO1xuICAgIHRoaXMucGFydHMudGl0bGUudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMucGFydHMuYXJlbmFDZWxscy52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnBhcnRzLnRoaXNCcmljay52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnBhcnRzLm5leHRCcmljay52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnBhcnRzLmd1aWRlTGluZXMudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5wYXJ0cy5zdGFydE1lbnUudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMucGFydHMuYXJlbmFDZWxscy51cGRhdGVDZWxscyhhcmVuYS5jZWxscyk7XG4gICAgdGhpcy5wYXJ0cy50aGlzQnJpY2suZGlzcGxheVNoYXBlKGJyaWNrLmN1cnJlbnQpO1xuICAgIHRoaXMucGFydHMudGhpc0JyaWNrLnVwZGF0ZVBvcyhicmljay5jdXJyZW50LnBvcyk7XG4gICAgdGhpcy5wYXJ0cy5ndWlkZUxpbmVzLnNob3dCZWFtKGJyaWNrLmN1cnJlbnQpO1xuICAgIHRoaXMucGFydHMubmV4dEJyaWNrLmRpc3BsYXlTaGFwZShicmljay5uZXh0KTtcbiAgICB0aGlzLnBhcnRzLm5leHRCcmljay51cGRhdGVXaWdnbGUoZ3MsIGdzLmVsYXBzZWRUaW1lKTtcbiAgICB0aGlzLnNjZW5lTWFuLnJvb3QucG9zaXRpb24ueSA9IHRoaXMuY2FsY3VsYXRlSm9sdChncyk7XG4gICAgdGhpcy5hdXRvUm90YXRlRGVidWdDYW1lcmEoZ3MpO1xuICAgIHJldHVybiB0aGlzLnBhcnRzLnBhcnRpY2xlcy51cGRhdGUoZ3MudGltZXJzLnJlbW92YWxBbmltYXRpb24ucHJvZ3Jlc3MsIGdzLs6UdCk7XG4gIH07XG4gIHByb3RvdHlwZS5yZW5kZXJQYXVzZU1lbnUgPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIGFyZW5hLCBoZWlnaHQsIHRpbWVycztcbiAgICBhcmVuYSA9IGdzLmFyZW5hLCBoZWlnaHQgPSBhcmVuYS5oZWlnaHQsIHRpbWVycyA9IGdzLnRpbWVycztcbiAgfTtcbiAgcHJvdG90eXBlLnJlbmRlclN0YXJ0TWVudSA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgYXJlbmEsIGhlaWdodCwgdGltZXJzO1xuICAgIGFyZW5hID0gZ3MuYXJlbmEsIGhlaWdodCA9IGFyZW5hLmhlaWdodCwgdGltZXJzID0gZ3MudGltZXJzO1xuICAgIHRoaXMucGFydHMudGl0bGUudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5wYXJ0cy5hcmVuYUNlbGxzLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnBhcnRzLmd1aWRlTGluZXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMucGFydHMudGhpc0JyaWNrLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnBhcnRzLm5leHRCcmljay52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5wYXJ0cy5zdGFydE1lbnUudmlzaWJsZSA9IHRydWU7XG4gICAgaWYgKHRpbWVycy50aXRsZVJldmVhbFRpbWVyLmFjdGl2ZSkge1xuICAgICAgdGhpcy5wYXJ0cy50aXRsZS5kYW5jZShncy5lbGFwc2VkVGltZSk7XG4gICAgICB0aGlzLnBhcnRzLnRpdGxlLnJldmVhbCh0aW1lcnMudGl0bGVSZXZlYWxUaW1lci5wcm9ncmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFydHMudGl0bGUuZGFuY2UoZ3MuZWxhcHNlZFRpbWUpO1xuICAgIH1cbiAgICB0aGlzLmF1dG9Sb3RhdGVEZWJ1Z0NhbWVyYShncyk7XG4gICAgcmV0dXJuIHRoaXMucGFydHMuc3RhcnRNZW51LnVwZGF0ZVNlbGVjdGlvbihncy5zdGFydE1lbnVTdGF0ZSwgZ3MuZWxhcHNlZFRpbWUpO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyRmFpbFNjcmVlbiA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgYXJlbmEsIGhlaWdodCwgdGltZXJzO1xuICAgIGFyZW5hID0gZ3MuYXJlbmEsIGhlaWdodCA9IGFyZW5hLmhlaWdodCwgdGltZXJzID0gZ3MudGltZXJzO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oZ3Mpe1xuICAgIHRoaXMuc2NlbmVNYW4udXBkYXRlKCk7XG4gICAgc3dpdGNoIChncy5tZXRhZ2FtZVN0YXRlKSB7XG4gICAgY2FzZSAnZ2FtZSc6XG4gICAgICB0aGlzLnJlbmRlckFyZW5hKGdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ25vLWdhbWUnOlxuICAgICAgbG9nKCduby1nYW1lJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzdGFydC1tZW51JzpcbiAgICAgIHRoaXMucmVuZGVyU3RhcnRNZW51KGdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3BhdXNlLW1lbnUnOlxuICAgICAgdGhpcy5yZW5kZXJQYXVzZU1lbnUoZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmVtb3ZlLWxpbmVzJzpcbiAgICAgIHRoaXMucmVuZGVyTGluZVphcChncyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmYWlsdXJlJzpcbiAgICAgIHRoaXMucmVuZGVyRmFpbFNjcmVlbihncyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nKFwiVGhyZWVKc1JlbmRlcmVyOjpyZW5kZXIgLSBVbmtub3duIG1ldGFnYW1lc3RhdGU6XCIsIGdzLm1ldGFnYW1lU3RhdGUpO1xuICAgIH1cbiAgICB0aGlzLnBhcnRzLnBhcnRpY2xlcy51cGRhdGUoMSwgZ3MuzpR0KTtcbiAgICByZXR1cm4gdGhpcy5zY2VuZU1hbi5yZW5kZXIoKTtcbiAgfTtcbiAgcHJvdG90eXBlLmFwcGVuZFRvID0gZnVuY3Rpb24oaG9zdCl7XG4gICAgcmV0dXJuIGhvc3QuYXBwZW5kQ2hpbGQodGhpcy5vdXRwdXRDYW52YXMpO1xuICB9O1xuICByZXR1cm4gVGhyZWVKc1JlbmRlcmVyO1xufSgpKTsiLCJ2YXIgVEhSRUUsIG5ldXRyYWwsIHJlZCwgb3JhbmdlLCBncmVlbiwgbWFnZW50YSwgYmx1ZSwgYnJvd24sIHllbGxvdywgY3lhbiwgdGlsZUNvbG9ycywgbWVzaE1hdGVyaWFscywgY29sb3IsIGxpbmVNYXRlcmlhbHMsIFBhbGV0dGUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5USFJFRSA9IHJlcXVpcmUoJ3RocmVlLWpzLXZyLWV4dGVuc2lvbnMnKTtcbm91dCQubmV1dHJhbCA9IG5ldXRyYWwgPSBbMHhmZmZmZmYsIDB4Y2NjY2NjLCAweDg4ODg4OCwgMHgyMTIxMjFdO1xub3V0JC5yZWQgPSByZWQgPSBbMHhGRjQ0NDQsIDB4RkY3Nzc3LCAweGRkNDQ0NCwgMHg1NTExMTFdO1xub3V0JC5vcmFuZ2UgPSBvcmFuZ2UgPSBbMHhGRkJCMzMsIDB4RkZDQzg4LCAweENDODgwMCwgMHg1NTMzMDBdO1xub3V0JC5ncmVlbiA9IGdyZWVuID0gWzB4NDRmZjY2LCAweDg4ZmZhYSwgMHgyMmJiMzMsIDB4MTE1NTExXTtcbm91dCQubWFnZW50YSA9IG1hZ2VudGEgPSBbMHhmZjMzZmYsIDB4ZmZhYWZmLCAweGJiMjJiYiwgMHg1NTExNTVdO1xub3V0JC5ibHVlID0gYmx1ZSA9IFsweDY2YmJmZiwgMHhhYWRkZmYsIDB4NTU4OGVlLCAweDExMTE1NV07XG5vdXQkLmJyb3duID0gYnJvd24gPSBbMHhmZmJiMzMsIDB4ZmZjYzg4LCAweGJiOTkwMCwgMHg1NTU1MTFdO1xub3V0JC55ZWxsb3cgPSB5ZWxsb3cgPSBbMHhlZWVlMTEsIDB4ZmZmZmFhLCAweGNjYmIwMCwgMHg1NTU1MTFdO1xub3V0JC5jeWFuID0gY3lhbiA9IFsweDQ0ZGRmZiwgMHhhYWUzZmYsIDB4MDBhYWNjLCAweDAwNjY5OV07XG5vdXQkLnRpbGVDb2xvcnMgPSB0aWxlQ29sb3JzID0gW25ldXRyYWxbMl0sIHJlZFswXSwgb3JhbmdlWzBdLCB5ZWxsb3dbMF0sIGdyZWVuWzBdLCBjeWFuWzBdLCBibHVlWzJdLCBtYWdlbnRhWzBdLCAnd2hpdGUnXTtcbm91dCQubWVzaE1hdGVyaWFscyA9IG1lc2hNYXRlcmlhbHMgPSAoZnVuY3Rpb24oKXtcbiAgdmFyIGkkLCByZWYkLCBsZW4kLCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gdGlsZUNvbG9ycykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBjb2xvciA9IHJlZiRbaSRdO1xuICAgIHJlc3VsdHMkLnB1c2gobmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgIG1ldGFsOiB0cnVlLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgc3BlY3VsYXI6IGNvbG9yLFxuICAgICAgc2hpbmluZXNzOiAxMDBcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSgpKTtcbm91dCQubGluZU1hdGVyaWFscyA9IGxpbmVNYXRlcmlhbHMgPSAoZnVuY3Rpb24oKXtcbiAgdmFyIGkkLCByZWYkLCBsZW4kLCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gdGlsZUNvbG9ycykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBjb2xvciA9IHJlZiRbaSRdO1xuICAgIHJlc3VsdHMkLnB1c2gobmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcbiAgICAgIGNvbG9yOiBjb2xvclxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KCkpO1xub3V0JC5QYWxldHRlID0gUGFsZXR0ZSA9IHtcbiAgbmV1dHJhbDogbmV1dHJhbCxcbiAgcmVkOiByZWQsXG4gIG9yYW5nZTogb3JhbmdlLFxuICB5ZWxsb3c6IHllbGxvdyxcbiAgZ3JlZW46IGdyZWVuLFxuICBjeWFuOiBjeWFuLFxuICBibHVlOiBibHVlLFxuICBtYWdlbnRhOiBtYWdlbnRhLFxuICB0aWxlQ29sb3JzOiB0aWxlQ29sb3JzLFxuICBtZXNoTWF0ZXJpYWxzOiBtZXNoTWF0ZXJpYWxzLFxuICBsaW5lTWF0ZXJpYWxzOiBsaW5lTWF0ZXJpYWxzXG59OyIsInZhciByZWYkLCBpZCwgbG9nLCBUSFJFRSwgU2NlbmVNYW5hZ2VyLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucmVmJCA9IHJlcXVpcmUoJ3N0ZCcpLCBpZCA9IHJlZiQuaWQsIGxvZyA9IHJlZiQubG9nO1xuVEhSRUUgPSByZXF1aXJlKCd0aHJlZS1qcy12ci1leHRlbnNpb25zJyk7XG5vdXQkLlNjZW5lTWFuYWdlciA9IFNjZW5lTWFuYWdlciA9IChmdW5jdGlvbigpe1xuICBTY2VuZU1hbmFnZXIuZGlzcGxheU5hbWUgPSAnU2NlbmVNYW5hZ2VyJztcbiAgdmFyIHByb3RvdHlwZSA9IFNjZW5lTWFuYWdlci5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gU2NlbmVNYW5hZ2VyO1xuICBmdW5jdGlvbiBTY2VuZU1hbmFnZXIob3B0cyl7XG4gICAgdmFyIGFzcGVjdDtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMucmVzaXplID0gYmluZCQodGhpcywgJ3Jlc2l6ZScsIHByb3RvdHlwZSk7XG4gICAgdGhpcy56ZXJvU2Vuc29yID0gYmluZCQodGhpcywgJ3plcm9TZW5zb3InLCBwcm90b3R5cGUpO1xuICAgIHRoaXMuZ29GdWxsc2NyZWVuID0gYmluZCQodGhpcywgJ2dvRnVsbHNjcmVlbicsIHByb3RvdHlwZSk7XG4gICAgYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgIGFudGlhbGlhczogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg3NSwgYXNwZWN0LCAxLCAxMDAwMCk7XG4gICAgdGhpcy5jb250cm9scyA9IG5ldyBUSFJFRS5WUkNvbnRyb2xzKHRoaXMuY2FtZXJhKTtcbiAgICB0aGlzLnJvb3QgPSBuZXcgVEhSRUUuT2JqZWN0M0Q7XG4gICAgdGhpcy5lZmZlY3QgPSBuZXcgVEhSRUUuVlJFZmZlY3QodGhpcy5yZW5kZXJlcik7XG4gICAgdGhpcy5lZmZlY3Quc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuemVyb1NlbnNvciwgdHJ1ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVzaXplLCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIHRoaXMuZ29GdWxsc2NyZWVuKTtcbiAgfVxuICBwcm90b3R5cGUuZW5hYmxlU2hhZG93Q2FzdGluZyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXBFbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcFNvZnQgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXIuc2hhZG93Q2FtZXJhTmVhciA9IDM7XG4gICAgdGhpcy5yZW5kZXJlci5zaGFkb3dDYW1lcmFGYXIgPSAxMDAwO1xuICAgIHRoaXMucmVuZGVyZXIuc2hhZG93Q2FtZXJhRm92ID0gNTA7XG4gICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXBCaWFzID0gMC4wMDM5O1xuICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwRGFya25lc3MgPSAwLjU7XG4gICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXBXaWR0aCA9IDEwMjQ7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwSGVpZ2h0ID0gMTAyNDtcbiAgfTtcbiAgcHJvdG90eXBlLmdvRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCl7XG4gICAgbG9nKCdTdGFydGluZyBmdWxsc2NyZWVuLi4uJyk7XG4gICAgcmV0dXJuIHRoaXMuZWZmZWN0LnNldEZ1bGxTY3JlZW4odHJ1ZSk7XG4gIH07XG4gIHByb3RvdHlwZS56ZXJvU2Vuc29yID0gZnVuY3Rpb24oZXZlbnQpe1xuICAgIHZhciBrZXlDb2RlO1xuICAgIGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKGtleUNvZGUgPT09IDg2KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9scy56ZXJvU2Vuc29yKCk7XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgcmV0dXJuIHRoaXMuZWZmZWN0LnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gIH07XG4gIHByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzLnVwZGF0ZSgpO1xuICB9O1xuICBwcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5lZmZlY3QucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2RvbUVsZW1lbnQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAncm9vdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5zY2VuZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICBwcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgaSQsIGxlbiQsIG9iaiwgdGhhdCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgb2JqID0gYXJndW1lbnRzW2kkXTtcbiAgICAgIHJlc3VsdHMkLnB1c2godGhpcy5yb290LmFkZCgodGhhdCA9IG9iai5yb290KSAhPSBudWxsID8gdGhhdCA6IG9iaikpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHJldHVybiBTY2VuZU1hbmFnZXI7XG59KCkpO1xuZnVuY3Rpb24gYmluZCQob2JqLCBrZXksIHRhcmdldCl7XG4gIHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gKHRhcmdldCB8fCBvYmopW2tleV0uYXBwbHkob2JqLCBhcmd1bWVudHMpIH07XG59IiwidmFyIHBvdywgcXVhZEluLCBxdWFkT3V0LCBjdWJpY0luLCBjdWJpY091dCwgcXVhcnRJbiwgcXVhcnRPdXQsIHF1aW50SW4sIHF1aW50T3V0LCBleHBJbiwgZXhwT3V0LCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xucG93ID0gcmVxdWlyZSgnc3RkJykucG93O1xub3V0JC5xdWFkSW4gPSBxdWFkSW4gPSBmdW5jdGlvbih0LCBiLCBlLCBjKXtcbiAgYyA9PSBudWxsICYmIChjID0gZSAtIGIpO1xuICByZXR1cm4gYyAqIHQgKiB0ICsgYjtcbn07XG5vdXQkLnF1YWRPdXQgPSBxdWFkT3V0ID0gZnVuY3Rpb24odCwgYiwgZSwgYyl7XG4gIGMgPT0gbnVsbCAmJiAoYyA9IGUgLSBiKTtcbiAgcmV0dXJuIC1jICogdCAqICh0IC0gMikgKyBiO1xufTtcbm91dCQuY3ViaWNJbiA9IGN1YmljSW4gPSBmdW5jdGlvbih0LCBiLCBlLCBjKXtcbiAgYyA9PSBudWxsICYmIChjID0gZSAtIGIpO1xuICByZXR1cm4gYyAqIE1hdGgucG93KHQsIDMpICsgYjtcbn07XG5vdXQkLmN1YmljT3V0ID0gY3ViaWNPdXQgPSBmdW5jdGlvbih0LCBiLCBlLCBjKXtcbiAgYyA9PSBudWxsICYmIChjID0gZSAtIGIpO1xuICByZXR1cm4gYyAqIChNYXRoLnBvdyh0IC0gMSwgMykgKyAxKSArIGI7XG59O1xub3V0JC5xdWFydEluID0gcXVhcnRJbiA9IGZ1bmN0aW9uKHQsIGIsIGUsIGMpe1xuICBjID09IG51bGwgJiYgKGMgPSBlIC0gYik7XG4gIHJldHVybiBjICogTWF0aC5wb3codCwgNCkgKyBiO1xufTtcbm91dCQucXVhcnRPdXQgPSBxdWFydE91dCA9IGZ1bmN0aW9uKHQsIGIsIGUsIGMpe1xuICBjID09IG51bGwgJiYgKGMgPSBlIC0gYik7XG4gIHJldHVybiAtYyAqIChNYXRoLnBvdyh0IC0gMSwgNCkgLSAxKSArIGI7XG59O1xub3V0JC5xdWludEluID0gcXVpbnRJbiA9IGZ1bmN0aW9uKHQsIGIsIGUsIGMpe1xuICBjID09IG51bGwgJiYgKGMgPSBlIC0gYik7XG4gIHJldHVybiBjICogTWF0aC5wb3codCwgNSkgKyBiO1xufTtcbm91dCQucXVpbnRPdXQgPSBxdWludE91dCA9IGZ1bmN0aW9uKHQsIGIsIGUsIGMpe1xuICBjID09IG51bGwgJiYgKGMgPSBlIC0gYik7XG4gIHJldHVybiBjICogKE1hdGgucG93KHQgLSAxLCA1KSArIDEpICsgYjtcbn07XG5vdXQkLmV4cEluID0gZXhwSW4gPSBmdW5jdGlvbih0LCBiLCBlLCBjKXtcbiAgYyA9PSBudWxsICYmIChjID0gZSAtIGIpO1xuICByZXR1cm4gYyAqIHBvdygyLCAxMCAqICh0IC0gMSkpICsgYjtcbn07XG5vdXQkLmV4cE91dCA9IGV4cE91dCA9IGZ1bmN0aW9uKHQsIGIsIGUsIGMpe1xuICBjID09IG51bGwgJiYgKGMgPSBlIC0gYik7XG4gIHJldHVybiBjICogKCgtcG93KDIsIC0xMCAqIHQpKSArIDEpICsgYjtcbn07IiwidmFyIGlkLCBsb2csIGZsaXAsIGRlbGF5LCBmbG9vciwgcmFuZG9tLCByYW5kLCByYW5kSW50LCByYW5kb21Gcm9tLCBhZGRWMiwgZmlsdGVyLCBwaSwgdGF1LCBwb3csIHNpbiwgY29zLCBtaW4sIG1heCwgbGVycCwgbWFwLCBqb2luLCB1bmxpbmVzLCB3cmFwLCBsaW1pdCwgcmFmLCB0aGF0LCBFYXNlLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xub3V0JC5pZCA9IGlkID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQ7XG59O1xub3V0JC5sb2cgPSBsb2cgPSBmdW5jdGlvbigpe1xuICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICByZXR1cm4gYXJndW1lbnRzWzBdO1xufTtcbm91dCQuZmxpcCA9IGZsaXAgPSBmdW5jdGlvbijOuyl7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICByZXR1cm4gzrsoYiwgYSk7XG4gIH07XG59O1xub3V0JC5kZWxheSA9IGRlbGF5ID0gZmxpcChzZXRUaW1lb3V0KTtcbm91dCQuZmxvb3IgPSBmbG9vciA9IE1hdGguZmxvb3I7XG5vdXQkLnJhbmRvbSA9IHJhbmRvbSA9IE1hdGgucmFuZG9tO1xub3V0JC5yYW5kID0gcmFuZCA9IGZ1bmN0aW9uKG1pbiwgbWF4KXtcbiAgcmV0dXJuIG1pbiArIHJhbmRvbSgpICogKG1heCAtIG1pbik7XG59O1xub3V0JC5yYW5kSW50ID0gcmFuZEludCA9IGZ1bmN0aW9uKG1pbiwgbWF4KXtcbiAgcmV0dXJuIG1pbiArIGZsb29yKHJhbmRvbSgpICogKG1heCAtIG1pbikpO1xufTtcbm91dCQucmFuZG9tRnJvbSA9IHJhbmRvbUZyb20gPSBmdW5jdGlvbihsaXN0KXtcbiAgcmV0dXJuIGxpc3RbcmFuZCgwLCBsaXN0Lmxlbmd0aCAtIDEpXTtcbn07XG5vdXQkLmFkZFYyID0gYWRkVjIgPSBmdW5jdGlvbihhLCBiKXtcbiAgcmV0dXJuIFthWzBdICsgYlswXSwgYVsxXSArIGJbMV1dO1xufTtcbm91dCQuZmlsdGVyID0gZmlsdGVyID0gY3VycnkkKGZ1bmN0aW9uKM67LCBsaXN0KXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IGxpc3QubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0gbGlzdFtpJF07XG4gICAgaWYgKM67KHgpKSB7XG4gICAgICByZXN1bHRzJC5wdXNoKHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KTtcbm91dCQucGkgPSBwaSA9IE1hdGguUEk7XG5vdXQkLnRhdSA9IHRhdSA9IHBpICogMjtcbm91dCQucG93ID0gcG93ID0gTWF0aC5wb3c7XG5vdXQkLnNpbiA9IHNpbiA9IE1hdGguc2luO1xub3V0JC5jb3MgPSBjb3MgPSBNYXRoLmNvcztcbm91dCQubWluID0gbWluID0gTWF0aC5taW47XG5vdXQkLm1heCA9IG1heCA9IE1hdGgubWF4O1xub3V0JC5sZXJwID0gbGVycCA9IGN1cnJ5JChmdW5jdGlvbihtaW4sIG1heCwgcCl7XG4gIHJldHVybiBtaW4gKyBwICogKG1heCAtIG1pbik7XG59KTtcbm91dCQubWFwID0gbWFwID0gY3VycnkkKGZ1bmN0aW9uKM67LCBsKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IGwubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0gbFtpJF07XG4gICAgcmVzdWx0cyQucHVzaCjOuyh4KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5vdXQkLmpvaW4gPSBqb2luID0gY3VycnkkKGZ1bmN0aW9uKGNoYXIsIHN0cil7XG4gIHJldHVybiBzdHIuam9pbihjaGFyKTtcbn0pO1xub3V0JC51bmxpbmVzID0gdW5saW5lcyA9IGpvaW4oXCJcXG5cIik7XG5vdXQkLndyYXAgPSB3cmFwID0gY3VycnkkKGZ1bmN0aW9uKG1pbiwgbWF4LCBuKXtcbiAgaWYgKG4gPiBtYXgpIHtcbiAgICByZXR1cm4gbWluO1xuICB9IGVsc2UgaWYgKG4gPCBtaW4pIHtcbiAgICByZXR1cm4gbWF4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59KTtcbm91dCQubGltaXQgPSBsaW1pdCA9IGN1cnJ5JChmdW5jdGlvbihtaW4sIG1heCwgbil7XG4gIGlmIChuID4gbWF4KSB7XG4gICAgcmV0dXJuIG1heDtcbiAgfSBlbHNlIGlmIChuIDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjtcbiAgfVxufSk7XG5vdXQkLnJhZiA9IHJhZiA9ICh0aGF0ID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkgIT0gbnVsbFxuICA/IHRoYXRcbiAgOiAodGhhdCA9IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpICE9IG51bGxcbiAgICA/IHRoYXRcbiAgICA6ICh0aGF0ID0gd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSkgIT0gbnVsbFxuICAgICAgPyB0aGF0XG4gICAgICA6IGZ1bmN0aW9uKM67KXtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQozrssIDEwMDAgLyA2MCk7XG4gICAgICB9O1xub3V0JC5FYXNlID0gRWFzZSA9IHJlcXVpcmUoJy4vZWFzaW5nJyk7XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCJ2YXIgc3F1YXJlLCB6aWcsIHphZywgbGVmdCwgcmlnaHQsIHRlZSwgdGV0cmlzLCBhbGwsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5vdXQkLnNxdWFyZSA9IHNxdWFyZSA9IFtbWzAsIDAsIDBdLCBbMCwgMSwgMV0sIFswLCAxLCAxXV1dO1xub3V0JC56aWcgPSB6aWcgPSBbW1swLCAwLCAwXSwgWzIsIDIsIDBdLCBbMCwgMiwgMl1dLCBbWzAsIDIsIDBdLCBbMiwgMiwgMF0sIFsyLCAwLCAwXV1dO1xub3V0JC56YWcgPSB6YWcgPSBbW1swLCAwLCAwXSwgWzAsIDMsIDNdLCBbMywgMywgMF1dLCBbWzMsIDAsIDBdLCBbMywgMywgMF0sIFswLCAzLCAwXV1dO1xub3V0JC5sZWZ0ID0gbGVmdCA9IFtbWzAsIDAsIDBdLCBbNCwgNCwgNF0sIFs0LCAwLCAwXV0sIFtbNCwgNCwgMF0sIFswLCA0LCAwXSwgWzAsIDQsIDBdXSwgW1swLCAwLCA0XSwgWzQsIDQsIDRdLCBbMCwgMCwgMF1dLCBbWzAsIDQsIDBdLCBbMCwgNCwgMF0sIFswLCA0LCA0XV1dO1xub3V0JC5yaWdodCA9IHJpZ2h0ID0gW1tbMCwgMCwgMF0sIFs1LCA1LCA1XSwgWzAsIDAsIDVdXSwgW1swLCA1LCAwXSwgWzAsIDUsIDBdLCBbNSwgNSwgMF1dLCBbWzUsIDAsIDBdLCBbNSwgNSwgNV0sIFswLCAwLCAwXV0sIFtbMCwgNSwgNV0sIFswLCA1LCAwXSwgWzAsIDUsIDBdXV07XG5vdXQkLnRlZSA9IHRlZSA9IFtbWzAsIDAsIDBdLCBbNiwgNiwgNl0sIFswLCA2LCAwXV0sIFtbMCwgNiwgMF0sIFs2LCA2LCAwXSwgWzAsIDYsIDBdXSwgW1swLCA2LCAwXSwgWzYsIDYsIDZdLCBbMCwgMCwgMF1dLCBbWzAsIDYsIDBdLCBbMCwgNiwgNl0sIFswLCA2LCAwXV1dO1xub3V0JC50ZXRyaXMgPSB0ZXRyaXMgPSBbW1swLCAwLCAwLCAwXSwgWzAsIDAsIDAsIDBdLCBbNywgNywgNywgN11dLCBbWzAsIDcsIDAsIDBdLCBbMCwgNywgMCwgMF0sIFswLCA3LCAwLCAwXSwgWzAsIDcsIDAsIDBdXV07XG5vdXQkLmFsbCA9IGFsbCA9IFtcbiAge1xuICAgIHR5cGU6ICdzcXVhcmUnLFxuICAgIHNoYXBlczogc3F1YXJlXG4gIH0sIHtcbiAgICB0eXBlOiAnemlnJyxcbiAgICBzaGFwZXM6IHppZ1xuICB9LCB7XG4gICAgdHlwZTogJ3phZycsXG4gICAgc2hhcGVzOiB6YWdcbiAgfSwge1xuICAgIHR5cGU6ICdsZWZ0JyxcbiAgICBzaGFwZXM6IGxlZnRcbiAgfSwge1xuICAgIHR5cGU6ICdyaWdodCcsXG4gICAgc2hhcGVzOiByaWdodFxuICB9LCB7XG4gICAgdHlwZTogJ3RlZScsXG4gICAgc2hhcGVzOiB0ZWVcbiAgfSwge1xuICAgIHR5cGU6ICd0ZXRyaXMnLFxuICAgIHNoYXBlczogdGV0cmlzXG4gIH1cbl07IiwidmFyIHJlZiQsIGlkLCBsb2csIHdyYXAsIG1lbnVEYXRhLCBsaW1pdGVyLCBwcmltZUdhbWVTdGF0ZSwgY2hvb3NlT3B0aW9uLCBzZWxlY3RQcmV2SXRlbSwgc2VsZWN0TmV4dEl0ZW0sIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIHdyYXAgPSByZWYkLndyYXA7XG5tZW51RGF0YSA9IFtcbiAge1xuICAgIHN0YXRlOiAncmVzdGFydCcsXG4gICAgdGV4dDogXCJSZXN0YXJ0XCJcbiAgfSwge1xuICAgIHN0YXRlOiAnZ28tYmFjaycsXG4gICAgdGV4dDogXCJCYWNrIHRvIE1haW5cIlxuICB9XG5dO1xubGltaXRlciA9IHdyYXAoMCwgbWVudURhdGEubGVuZ3RoIC0gMSk7XG5vdXQkLnByaW1lR2FtZVN0YXRlID0gcHJpbWVHYW1lU3RhdGUgPSBmdW5jdGlvbihnYW1lc3RhdGUpe1xuICByZXR1cm4gZ2FtZXN0YXRlLmZhaWxNZW51U3RhdGUgPSB7XG4gICAgY3VycmVudEluZGV4OiAwLFxuICAgIGN1cnJlbnRTdGF0ZTogbWVudURhdGFbMF0sXG4gICAgbWVudURhdGE6IG1lbnVEYXRhXG4gIH07XG59O1xub3V0JC5jaG9vc2VPcHRpb24gPSBjaG9vc2VPcHRpb24gPSBmdW5jdGlvbihmbXMsIGluZGV4KXtcbiAgZm1zLmN1cnJlbnRJbmRleCA9IGxpbWl0ZXIoaW5kZXgpO1xuICByZXR1cm4gZm1zLmN1cnJlbnRTdGF0ZSA9IG1lbnVEYXRhW2Ztcy5jdXJyZW50SW5kZXhdO1xufTtcbm91dCQuc2VsZWN0UHJldkl0ZW0gPSBzZWxlY3RQcmV2SXRlbSA9IGZ1bmN0aW9uKGZtcyl7XG4gIHZhciBjdXJyZW50SW5kZXg7XG4gIGN1cnJlbnRJbmRleCA9IGZtcy5jdXJyZW50SW5kZXg7XG4gIHJldHVybiBjaG9vc2VPcHRpb24oZm1zLCBjdXJyZW50SW5kZXggLSAxKTtcbn07XG5vdXQkLnNlbGVjdE5leHRJdGVtID0gc2VsZWN0TmV4dEl0ZW0gPSBmdW5jdGlvbihmbXMpe1xuICB2YXIgY3VycmVudEluZGV4O1xuICBjdXJyZW50SW5kZXggPSBmbXMuY3VycmVudEluZGV4O1xuICByZXR1cm4gY2hvb3NlT3B0aW9uKGZtcywgY3VycmVudEluZGV4ICsgMSk7XG59OyIsInZhciByZWYkLCBpZCwgbG9nLCBhZGRWMiwgcmFuZEludCwgd3JhcCwgcmFuZG9tRnJvbSwgQnJpY2tTaGFwZXMsIGNhbkRyb3AsIGNhbk1vdmUsIGNhblJvdGF0ZSwgY29sbGlkZXMsIGNvcHlCcmlja1RvQXJlbmEsIHRvcElzUmVhY2hlZCwgaXNDb21wbGV0ZSwgbmV3QnJpY2ssIHNwYXduTmV3QnJpY2ssIGRyb3BBcmVuYVJvdywgcmVtb3ZlUm93cywgY2xlYXJBcmVuYSwgZ2V0U2hhcGVPZlJvdGF0aW9uLCBub3JtYWxpc2VSb3RhdGlvbiwgcm90YXRlQnJpY2ssIGNvbXB1dGVTY29yZSwgcmVzZXRTY29yZSwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZywgYWRkVjIgPSByZWYkLmFkZFYyLCByYW5kSW50ID0gcmVmJC5yYW5kSW50LCB3cmFwID0gcmVmJC53cmFwLCByYW5kb21Gcm9tID0gcmVmJC5yYW5kb21Gcm9tO1xuQnJpY2tTaGFwZXMgPSByZXF1aXJlKCcuL2RhdGEvYnJpY2stc2hhcGVzJyk7XG5vdXQkLmNhbkRyb3AgPSBjYW5Ecm9wID0gZnVuY3Rpb24oYnJpY2ssIGFyZW5hKXtcbiAgcmV0dXJuIGNhbk1vdmUoYnJpY2ssIFswLCAxXSwgYXJlbmEpO1xufTtcbm91dCQuY2FuTW92ZSA9IGNhbk1vdmUgPSBmdW5jdGlvbihicmljaywgbW92ZSwgYXJlbmEpe1xuICB2YXIgbmV3UG9zO1xuICBuZXdQb3MgPSBhZGRWMihicmljay5wb3MsIG1vdmUpO1xuICByZXR1cm4gY29sbGlkZXMobmV3UG9zLCBicmljay5zaGFwZSwgYXJlbmEpO1xufTtcbm91dCQuY2FuUm90YXRlID0gY2FuUm90YXRlID0gZnVuY3Rpb24oYnJpY2ssIGRpciwgYXJlbmEpe1xuICB2YXIgbmV3U2hhcGU7XG4gIG5ld1NoYXBlID0gZ2V0U2hhcGVPZlJvdGF0aW9uKGJyaWNrLCBicmljay5yb3RhdGlvbiArIGRpcik7XG4gIHJldHVybiBjb2xsaWRlcyhicmljay5wb3MsIG5ld1NoYXBlLCBhcmVuYSk7XG59O1xub3V0JC5jb2xsaWRlcyA9IGNvbGxpZGVzID0gZnVuY3Rpb24ocG9zLCBzaGFwZSwgYXJnJCl7XG4gIHZhciBjZWxscywgd2lkdGgsIGhlaWdodCwgaSQsIHJlZiQsIGxlbiQsIHksIHYsIGokLCByZWYxJCwgbGVuMSQsIHgsIHU7XG4gIGNlbGxzID0gYXJnJC5jZWxscywgd2lkdGggPSBhcmckLndpZHRoLCBoZWlnaHQgPSBhcmckLmhlaWdodDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IChmbiQoKSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeSA9IGkkO1xuICAgIHYgPSByZWYkW2kkXTtcbiAgICBmb3IgKGokID0gMCwgbGVuMSQgPSAocmVmMSQgPSAoZm4xJCgpKSkubGVuZ3RoOyBqJCA8IGxlbjEkOyArK2okKSB7XG4gICAgICB4ID0gaiQ7XG4gICAgICB1ID0gcmVmMSRbaiRdO1xuICAgICAgaWYgKHNoYXBlW3ldW3hdID4gMCkge1xuICAgICAgICBpZiAodiA+PSAwKSB7XG4gICAgICAgICAgaWYgKHYgPj0gaGVpZ2h0IHx8IHUgPj0gd2lkdGggfHwgdSA8IDAgfHwgY2VsbHNbdl1bdV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG4gIGZ1bmN0aW9uIGZuJCgpe1xuICAgIHZhciBpJCwgdG8kLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSBwb3NbMV0sIHRvJCA9IHBvc1sxXSArIHNoYXBlLmxlbmd0aDsgaSQgPCB0byQ7ICsraSQpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goaSQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH1cbiAgZnVuY3Rpb24gZm4xJCgpe1xuICAgIHZhciBpJCwgdG8kLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSBwb3NbMF0sIHRvJCA9IHBvc1swXSArIHNoYXBlWzBdLmxlbmd0aDsgaSQgPCB0byQ7ICsraSQpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goaSQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH1cbn07XG5vdXQkLmNvcHlCcmlja1RvQXJlbmEgPSBjb3B5QnJpY2tUb0FyZW5hID0gZnVuY3Rpb24oYXJnJCwgYXJnMSQpe1xuICB2YXIgcG9zLCBzaGFwZSwgY2VsbHMsIGkkLCByZWYkLCBsZW4kLCB5LCB2LCBscmVzdWx0JCwgaiQsIHJlZjEkLCBsZW4xJCwgeCwgdSwgcmVzdWx0cyQgPSBbXTtcbiAgcG9zID0gYXJnJC5wb3MsIHNoYXBlID0gYXJnJC5zaGFwZTtcbiAgY2VsbHMgPSBhcmcxJC5jZWxscztcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IChmbiQoKSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeSA9IGkkO1xuICAgIHYgPSByZWYkW2kkXTtcbiAgICBscmVzdWx0JCA9IFtdO1xuICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IChyZWYxJCA9IChmbjEkKCkpKS5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgIHggPSBqJDtcbiAgICAgIHUgPSByZWYxJFtqJF07XG4gICAgICBpZiAoc2hhcGVbeV1beF0gJiYgdiA+PSAwKSB7XG4gICAgICAgIGxyZXN1bHQkLnB1c2goY2VsbHNbdl1bdV0gPSBzaGFwZVt5XVt4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbiAgZnVuY3Rpb24gZm4kKCl7XG4gICAgdmFyIGkkLCB0byQsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IHBvc1sxXSwgdG8kID0gcG9zWzFdICsgc2hhcGUubGVuZ3RoOyBpJCA8IHRvJDsgKytpJCkge1xuICAgICAgcmVzdWx0cyQucHVzaChpJCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfVxuICBmdW5jdGlvbiBmbjEkKCl7XG4gICAgdmFyIGkkLCB0byQsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IHBvc1swXSwgdG8kID0gcG9zWzBdICsgc2hhcGVbMF0ubGVuZ3RoOyBpJCA8IHRvJDsgKytpJCkge1xuICAgICAgcmVzdWx0cyQucHVzaChpJCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfVxufTtcbm91dCQudG9wSXNSZWFjaGVkID0gdG9wSXNSZWFjaGVkID0gZnVuY3Rpb24oYXJnJCl7XG4gIHZhciBjZWxscywgaSQsIHJlZiQsIGxlbiQsIGNlbGw7XG4gIGNlbGxzID0gYXJnJC5jZWxscztcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IGNlbGxzWzBdKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGNlbGwgPSByZWYkW2kkXTtcbiAgICBpZiAoY2VsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5vdXQkLmlzQ29tcGxldGUgPSBpc0NvbXBsZXRlID0gZnVuY3Rpb24ocm93KXtcbiAgdmFyIGkkLCBsZW4kLCBjZWxsO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHJvdy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGNlbGwgPSByb3dbaSRdO1xuICAgIGlmICghY2VsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5vdXQkLm5ld0JyaWNrID0gbmV3QnJpY2sgPSBmdW5jdGlvbihpeCl7XG4gIGl4ID09IG51bGwgJiYgKGl4ID0gcmFuZEludCgwLCBCcmlja1NoYXBlcy5hbGwubGVuZ3RoKSk7XG4gIHJldHVybiB7XG4gICAgcm90YXRpb246IDAsXG4gICAgc2hhcGU6IEJyaWNrU2hhcGVzLmFsbFtpeF0uc2hhcGVzWzBdLFxuICAgIHR5cGU6IEJyaWNrU2hhcGVzLmFsbFtpeF0udHlwZSxcbiAgICBwb3M6IFswLCAwXVxuICB9O1xufTtcbm91dCQuc3Bhd25OZXdCcmljayA9IHNwYXduTmV3QnJpY2sgPSBmdW5jdGlvbihncyl7XG4gIGdzLmJyaWNrLmN1cnJlbnQgPSBncy5icmljay5uZXh0O1xuICBncy5icmljay5jdXJyZW50LnBvcyA9IFs0LCAtMV07XG4gIHJldHVybiBncy5icmljay5uZXh0ID0gbmV3QnJpY2soKTtcbn07XG5vdXQkLmRyb3BBcmVuYVJvdyA9IGRyb3BBcmVuYVJvdyA9IGZ1bmN0aW9uKGFyZyQsIHJvd0l4KXtcbiAgdmFyIGNlbGxzO1xuICBjZWxscyA9IGFyZyQuY2VsbHM7XG4gIGNlbGxzLnNwbGljZShyb3dJeCwgMSk7XG4gIHJldHVybiBjZWxscy51bnNoaWZ0KHJlcGVhdEFycmF5JChbMF0sIGNlbGxzWzBdLmxlbmd0aCkpO1xufTtcbm91dCQucmVtb3ZlUm93cyA9IHJlbW92ZVJvd3MgPSBmdW5jdGlvbihyb3dzLCBhcmVuYSl7XG4gIHZhciBpJCwgbGVuJCwgcm93SXgsIHJlc3VsdHMkID0gW107XG4gIGZvciAoaSQgPSAwLCBsZW4kID0gcm93cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHJvd0l4ID0gcm93c1tpJF07XG4gICAgcmVzdWx0cyQucHVzaChkcm9wQXJlbmFSb3coYXJlbmEsIHJvd0l4KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbm91dCQuY2xlYXJBcmVuYSA9IGNsZWFyQXJlbmEgPSBmdW5jdGlvbihhcmVuYSl7XG4gIHZhciBpJCwgcmVmJCwgbGVuJCwgcm93LCBscmVzdWx0JCwgaiQsIGxlbjEkLCBpLCBjZWxsLCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gYXJlbmEuY2VsbHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgcm93ID0gcmVmJFtpJF07XG4gICAgbHJlc3VsdCQgPSBbXTtcbiAgICBmb3IgKGokID0gMCwgbGVuMSQgPSByb3cubGVuZ3RoOyBqJCA8IGxlbjEkOyArK2okKSB7XG4gICAgICBpID0gaiQ7XG4gICAgICBjZWxsID0gcm93W2okXTtcbiAgICAgIGxyZXN1bHQkLnB1c2gocm93W2ldID0gMCk7XG4gICAgfVxuICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn07XG5vdXQkLmdldFNoYXBlT2ZSb3RhdGlvbiA9IGdldFNoYXBlT2ZSb3RhdGlvbiA9IGZ1bmN0aW9uKGJyaWNrLCByb3RhdGlvbil7XG4gIHJvdGF0aW9uID0gbm9ybWFsaXNlUm90YXRpb24oYnJpY2ssIHJvdGF0aW9uKTtcbiAgcmV0dXJuIEJyaWNrU2hhcGVzW2JyaWNrLnR5cGVdW3JvdGF0aW9uXTtcbn07XG5vdXQkLm5vcm1hbGlzZVJvdGF0aW9uID0gbm9ybWFsaXNlUm90YXRpb24gPSBmdW5jdGlvbihhcmckLCByb3RhdGlvbil7XG4gIHZhciB0eXBlO1xuICB0eXBlID0gYXJnJC50eXBlO1xuICByZXR1cm4gd3JhcCgwLCBCcmlja1NoYXBlc1t0eXBlXS5sZW5ndGggLSAxLCByb3RhdGlvbik7XG59O1xub3V0JC5yb3RhdGVCcmljayA9IHJvdGF0ZUJyaWNrID0gZnVuY3Rpb24oYnJpY2ssIGRpcil7XG4gIHZhciByb3RhdGlvbiwgdHlwZTtcbiAgcm90YXRpb24gPSBicmljay5yb3RhdGlvbiwgdHlwZSA9IGJyaWNrLnR5cGU7XG4gIGJyaWNrLnJvdGF0aW9uID0gbm9ybWFsaXNlUm90YXRpb24oYnJpY2ssIGJyaWNrLnJvdGF0aW9uICsgZGlyKTtcbiAgcmV0dXJuIGJyaWNrLnNoYXBlID0gZ2V0U2hhcGVPZlJvdGF0aW9uKGJyaWNrLCBicmljay5yb3RhdGlvbik7XG59O1xub3V0JC5jb21wdXRlU2NvcmUgPSBjb21wdXRlU2NvcmUgPSBmdW5jdGlvbihzY29yZSwgcm93cywgbHZsKXtcbiAgbHZsID09IG51bGwgJiYgKGx2bCA9IDApO1xuICBzd2l0Y2ggKHJvd3MubGVuZ3RoKSB7XG4gIGNhc2UgMTpcbiAgICBzY29yZS5zaW5nbGVzICs9IDE7XG4gICAgc2NvcmUucG9pbnRzICs9IDQwICogKGx2bCArIDEpO1xuICAgIGJyZWFrO1xuICBjYXNlIDI6XG4gICAgc2NvcmUuZG91YmxlcyArPSAxO1xuICAgIHNjb3JlLnBvaW50cyArPSAxMDAgKiAobHZsICsgMSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgMzpcbiAgICBzY29yZS50cmlwbGVzICs9IDE7XG4gICAgc2NvcmUucG9pbnRzICs9IDMwMCAqIChsdmwgKyAxKTtcbiAgICBicmVhaztcbiAgY2FzZSA0OlxuICAgIHNjb3JlLnRldHJpcyArPSAxO1xuICAgIHNjb3JlLnBvaW50cyArPSAxMjAwICogKGx2bCArIDEpO1xuICB9XG4gIHJldHVybiBzY29yZS5saW5lcyArPSByb3dzLmxlbmd0aDtcbn07XG5vdXQkLnJlc2V0U2NvcmUgPSByZXNldFNjb3JlID0gZnVuY3Rpb24oc2NvcmUpe1xuICByZXR1cm4gaW1wb3J0JChzY29yZSwge1xuICAgIHBvaW50czogMCxcbiAgICBsaW5lczogMCxcbiAgICBzaW5nbGVzOiAwLFxuICAgIGRvdWJsZXM6IDAsXG4gICAgdHJpcGxlczogMCxcbiAgICB0ZXRyaXM6IDBcbiAgfSk7XG59O1xuZnVuY3Rpb24gcmVwZWF0QXJyYXkkKGFyciwgbil7XG4gIGZvciAodmFyIHIgPSBbXTsgbiA+IDA7IChuID4+PSAxKSAmJiAoYXJyID0gYXJyLmNvbmNhdChhcnIpKSlcbiAgICBpZiAobiAmIDEpIHIucHVzaC5hcHBseShyLCBhcnIpO1xuICByZXR1cm4gcjtcbn1cbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHJhbmQsIHJhbmRvbUZyb20sIENvcmUsIFN0YXJ0TWVudSwgRmFpbE1lbnUsIFRldHJpc0dhbWUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIHJhbmQgPSByZWYkLnJhbmQ7XG5yYW5kb21Gcm9tID0gcmVxdWlyZSgnc3RkJykucmFuZG9tRnJvbTtcbkNvcmUgPSByZXF1aXJlKCcuL2dhbWUtY29yZScpO1xuU3RhcnRNZW51ID0gcmVxdWlyZSgnLi9zdGFydC1tZW51Jyk7XG5GYWlsTWVudSA9IHJlcXVpcmUoJy4vZmFpbC1tZW51Jyk7XG5vdXQkLlRldHJpc0dhbWUgPSBUZXRyaXNHYW1lID0gKGZ1bmN0aW9uKCl7XG4gIFRldHJpc0dhbWUuZGlzcGxheU5hbWUgPSAnVGV0cmlzR2FtZSc7XG4gIHZhciBwcm90b3R5cGUgPSBUZXRyaXNHYW1lLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBUZXRyaXNHYW1lO1xuICBmdW5jdGlvbiBUZXRyaXNHYW1lKGdhbWVTdGF0ZSl7XG4gICAgbG9nKFwiVGV0cmlzR2FtZTo6bmV3XCIpO1xuICAgIFN0YXJ0TWVudS5wcmltZUdhbWVTdGF0ZShnYW1lU3RhdGUpO1xuICAgIEZhaWxNZW51LnByaW1lR2FtZVN0YXRlKGdhbWVTdGF0ZSk7XG4gIH1cbiAgcHJvdG90eXBlLmJlZ2luTmV3R2FtZSA9IGZ1bmN0aW9uKGdhbWVTdGF0ZSl7XG4gICAgKGZ1bmN0aW9uKCl7XG4gICAgICBDb3JlLmNsZWFyQXJlbmEodGhpcy5hcmVuYSk7XG4gICAgICB0aGlzLmJyaWNrLm5leHQgPSBDb3JlLm5ld0JyaWNrKCk7XG4gICAgICB0aGlzLmJyaWNrLm5leHQucG9zID0gWzMsIC0xXTtcbiAgICAgIHRoaXMuYnJpY2suY3VycmVudCA9IENvcmUubmV3QnJpY2soKTtcbiAgICAgIHRoaXMuYnJpY2suY3VycmVudC5wb3MgPSBbMywgLTFdO1xuICAgICAgQ29yZS5yZXNldFNjb3JlKHRoaXMuc2NvcmUpO1xuICAgICAgdGhpcy5tZXRhZ2FtZVN0YXRlID0gJ2dhbWUnO1xuICAgICAgdGhpcy50aW1lcnMuZHJvcFRpbWVyLnJlc2V0KCk7XG4gICAgICB0aGlzLnRpbWVycy5rZXlSZXBlYXRUaW1lci5yZXNldCgpO1xuICAgIH0uY2FsbChnYW1lU3RhdGUpKTtcbiAgICByZXR1cm4gZ2FtZVN0YXRlO1xuICB9O1xuICBwcm90b3R5cGUuYWR2YW5jZVJlbW92YWxBbmltYXRpb24gPSBmdW5jdGlvbihncyl7XG4gICAgdmFyIHRpbWVycywgYW5pbWF0aW9uU3RhdGU7XG4gICAgdGltZXJzID0gZ3MudGltZXJzLCBhbmltYXRpb25TdGF0ZSA9IGdzLmFuaW1hdGlvblN0YXRlO1xuICAgIGlmICh0aW1lcnMucmVtb3ZhbEFuaW1hdGlvbi5leHBpcmVkKSB7XG4gICAgICBDb3JlLnJlbW92ZVJvd3MoZ3Mucm93c1RvUmVtb3ZlLCBncy5hcmVuYSk7XG4gICAgICBncy5yb3dzVG9SZW1vdmUgPSBbXTtcbiAgICAgIHJldHVybiBncy5tZXRhZ2FtZVN0YXRlID0gJ2dhbWUnO1xuICAgIH1cbiAgfTtcbiAgcHJvdG90eXBlLmhhbmRsZUtleUlucHV0ID0gZnVuY3Rpb24oZ3Mpe1xuICAgIHZhciBicmljaywgYXJlbmEsIGlucHV0U3RhdGUsIGxyZXN1bHQkLCByZWYkLCBrZXksIGFjdGlvbiwgYW10LCBpLCBwb3MsIGkkLCB0byQsIHksIGxyZXN1bHQxJCwgaiQsIHRvMSQsIHgsIHJlc3VsdHMkID0gW107XG4gICAgYnJpY2sgPSBncy5icmljaywgYXJlbmEgPSBncy5hcmVuYSwgaW5wdXRTdGF0ZSA9IGdzLmlucHV0U3RhdGU7XG4gICAgd2hpbGUgKGlucHV0U3RhdGUubGVuZ3RoKSB7XG4gICAgICBscmVzdWx0JCA9IFtdO1xuICAgICAgcmVmJCA9IGlucHV0U3RhdGUuc2hpZnQoKSwga2V5ID0gcmVmJC5rZXksIGFjdGlvbiA9IHJlZiQuYWN0aW9uO1xuICAgICAgaWYgKGFjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIGlmIChDb3JlLmNhbk1vdmUoYnJpY2suY3VycmVudCwgWy0xLCAwXSwgYXJlbmEpKSB7XG4gICAgICAgICAgICBscmVzdWx0JC5wdXNoKGJyaWNrLmN1cnJlbnQucG9zWzBdIC09IDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGlmIChDb3JlLmNhbk1vdmUoYnJpY2suY3VycmVudCwgWzEsIDBdLCBhcmVuYSkpIHtcbiAgICAgICAgICAgIGxyZXN1bHQkLnB1c2goYnJpY2suY3VycmVudC5wb3NbMF0gKz0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICBscmVzdWx0JC5wdXNoKGdzLmZvcmNlRG93bk1vZGUgPSB0cnVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICBjYXNlICdjdyc6XG4gICAgICAgICAgaWYgKENvcmUuY2FuUm90YXRlKGJyaWNrLmN1cnJlbnQsIDEsIGFyZW5hKSkge1xuICAgICAgICAgICAgbHJlc3VsdCQucHVzaChDb3JlLnJvdGF0ZUJyaWNrKGJyaWNrLmN1cnJlbnQsIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Njdyc6XG4gICAgICAgICAgaWYgKENvcmUuY2FuUm90YXRlKGJyaWNrLmN1cnJlbnQsIC0xLCBhcmVuYSkpIHtcbiAgICAgICAgICAgIGxyZXN1bHQkLnB1c2goQ29yZS5yb3RhdGVCcmljayhicmljay5jdXJyZW50LCAtMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaGFyZC1kcm9wJzpcbiAgICAgICAgICBncy5oYXJkRHJvcERpc3RhbmNlID0gMDtcbiAgICAgICAgICB3aGlsZSAoQ29yZS5jYW5Ecm9wKGJyaWNrLmN1cnJlbnQsIGFyZW5hKSkge1xuICAgICAgICAgICAgZ3MuaGFyZERyb3BEaXN0YW5jZSArPSAxO1xuICAgICAgICAgICAgYnJpY2suY3VycmVudC5wb3NbMV0gKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ3MuaW5wdXRTdGF0ZSA9IFtdO1xuICAgICAgICAgIGdzLnRpbWVycy5oYXJkRHJvcEVmZmVjdC5ydW5Gb3IoZ3MuaGFyZERyb3BEaXN0YW5jZSAqIDEwKTtcbiAgICAgICAgICBscmVzdWx0JC5wdXNoKGdzLnRpbWVycy5kcm9wVGltZXIudGltZVRvRXhwaXJ5ID0gLTEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWJ1Zy0xJzpcbiAgICAgICAgY2FzZSAnZGVidWctMic6XG4gICAgICAgIGNhc2UgJ2RlYnVnLTMnOlxuICAgICAgICBjYXNlICdkZWJ1Zy00JzpcbiAgICAgICAgICBhbXQgPSBwYXJzZUludChrZXkucmVwbGFjZSgvXFxEL2csICcnKSk7XG4gICAgICAgICAgbG9nKFwiREVCVUc6IERlc3Ryb3lpbmcgcm93czpcIiwgYW10KTtcbiAgICAgICAgICBsb2coZ3Mucm93c1RvUmVtb3ZlID0gKGZuJCgpKSk7XG4gICAgICAgICAgZ3MubWV0YWdhbWVTdGF0ZSA9ICdyZW1vdmUtbGluZXMnO1xuICAgICAgICAgIGdzLmZsYWdzLnJvd3NSZW1vdmVkVGhpc0ZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICBscmVzdWx0JC5wdXNoKGdzLnRpbWVycy5yZW1vdmFsQW5pbWF0aW9uLnJ1bkZvciAqIDEwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGVidWctNSc6XG4gICAgICAgICAgcG9zID0gZ3MuYnJpY2suY3VycmVudC5wb3M7XG4gICAgICAgICAgZ3MuYnJpY2suY3VycmVudCA9IENvcmUubmV3QnJpY2soNik7XG4gICAgICAgICAgaW1wb3J0JChncy5icmljay5jdXJyZW50LnBvcywgcG9zKTtcbiAgICAgICAgICBmb3IgKGkkID0gYXJlbmEuaGVpZ2h0IC0gMSwgdG8kID0gYXJlbmEuaGVpZ2h0IC0gNDsgaSQgPj0gdG8kOyAtLWkkKSB7XG4gICAgICAgICAgICB5ID0gaSQ7XG4gICAgICAgICAgICBscmVzdWx0MSQgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaiQgPSAwLCB0bzEkID0gYXJlbmEud2lkdGggLSAyOyBqJCA8PSB0bzEkOyArK2okKSB7XG4gICAgICAgICAgICAgIHggPSBqJDtcbiAgICAgICAgICAgICAgbHJlc3VsdDEkLnB1c2goYXJlbmEuY2VsbHNbeV1beF0gPSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxyZXN1bHQkLnB1c2gobHJlc3VsdDEkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAndXAnKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICAgIGxyZXN1bHQkLnB1c2goZ3MuZm9yY2VEb3duTW9kZSA9IGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0cyQucHVzaChscmVzdWx0JCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgICBmdW5jdGlvbiBmbiQoKXtcbiAgICAgIHZhciBpJCwgdG8kLCByZXN1bHRzJCA9IFtdO1xuICAgICAgZm9yIChpJCA9IGdzLmFyZW5hLmhlaWdodCAtIGFtdCwgdG8kID0gZ3MuYXJlbmEuaGVpZ2h0IC0gMTsgaSQgPD0gdG8kOyArK2kkKSB7XG4gICAgICAgIGkgPSBpJDtcbiAgICAgICAgcmVzdWx0cyQucHVzaChpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzJDtcbiAgICB9XG4gIH07XG4gIHByb3RvdHlwZS5jbGVhck9uZUZyYW1lRmxhZ3MgPSBmdW5jdGlvbihncyl7XG4gICAgcmV0dXJuIGdzLmZsYWdzLnJvd3NSZW1vdmVkVGhpc0ZyYW1lID0gZmFsc2U7XG4gIH07XG4gIHByb3RvdHlwZS5hZHZhbmNlR2FtZSA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgYnJpY2ssIGFyZW5hLCBpbnB1dFN0YXRlLCBjb21wbGV0ZVJvd3MsIHJlcyQsIGkkLCByZWYkLCBsZW4kLCBpeCwgcm93O1xuICAgIGJyaWNrID0gZ3MuYnJpY2ssIGFyZW5hID0gZ3MuYXJlbmEsIGlucHV0U3RhdGUgPSBncy5pbnB1dFN0YXRlO1xuICAgIHJlcyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gYXJlbmEuY2VsbHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBpeCA9IGkkO1xuICAgICAgcm93ID0gcmVmJFtpJF07XG4gICAgICBpZiAoQ29yZS5pc0NvbXBsZXRlKHJvdykpIHtcbiAgICAgICAgcmVzJC5wdXNoKGl4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29tcGxldGVSb3dzID0gcmVzJDtcbiAgICBpZiAoY29tcGxldGVSb3dzLmxlbmd0aCkge1xuICAgICAgZ3MubWV0YWdhbWVTdGF0ZSA9ICdyZW1vdmUtbGluZXMnO1xuICAgICAgZ3MuZmxhZ3Mucm93c1JlbW92ZWRUaGlzRnJhbWUgPSB0cnVlO1xuICAgICAgZ3MudGltZXJzLnJlbW92YWxBbmltYXRpb24ucnVuRm9yKGNvbXBsZXRlUm93cy5sZW5ndGggKiAxMCk7XG4gICAgICBncy5yb3dzVG9SZW1vdmUgPSBjb21wbGV0ZVJvd3M7XG4gICAgICBDb3JlLmNvbXB1dGVTY29yZShncy5zY29yZSwgZ3Mucm93c1RvUmVtb3ZlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKENvcmUudG9wSXNSZWFjaGVkKGFyZW5hKSkge1xuICAgICAgdGhpcy5yZXZlYWxGYWlsU2NyZWVuKGdzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGdzLmZvcmNlRG93bk1vZGUpIHtcbiAgICAgIGdzLnRpbWVycy5kcm9wVGltZXIudGltZVRvRXhwaXJ5ID0gMDtcbiAgICB9XG4gICAgaWYgKGdzLnRpbWVycy5kcm9wVGltZXIuZXhwaXJlZCkge1xuICAgICAgZ3MudGltZXJzLmRyb3BUaW1lci5yZXNldFdpdGhSZW1haW5kZXIoKTtcbiAgICAgIGlmIChDb3JlLmNhbkRyb3AoYnJpY2suY3VycmVudCwgYXJlbmEpKSB7XG4gICAgICAgIGJyaWNrLmN1cnJlbnQucG9zWzFdICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDb3JlLmNvcHlCcmlja1RvQXJlbmEoYnJpY2suY3VycmVudCwgYXJlbmEpO1xuICAgICAgICBDb3JlLnNwYXduTmV3QnJpY2soZ3MpO1xuICAgICAgICBncy5mb3JjZURvd25Nb2RlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhhbmRsZUtleUlucHV0KGdzKTtcbiAgfTtcbiAgcHJvdG90eXBlLnNob3dTdGFydFNjcmVlbiA9IGZ1bmN0aW9uKGdzKXtcbiAgICB2YXIgaW5wdXRTdGF0ZSwgc3RhcnRNZW51U3RhdGUsIHJlZiQsIGtleSwgYWN0aW9uLCByZXN1bHRzJCA9IFtdO1xuICAgIGlucHV0U3RhdGUgPSBncy5pbnB1dFN0YXRlLCBzdGFydE1lbnVTdGF0ZSA9IGdzLnN0YXJ0TWVudVN0YXRlO1xuICAgIHdoaWxlIChpbnB1dFN0YXRlLmxlbmd0aCkge1xuICAgICAgcmVmJCA9IGlucHV0U3RhdGUuc2hpZnQoKSwga2V5ID0gcmVmJC5rZXksIGFjdGlvbiA9IHJlZiQuYWN0aW9uO1xuICAgICAgaWYgKGFjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICByZXN1bHRzJC5wdXNoKFN0YXJ0TWVudS5zZWxlY3RQcmV2SXRlbShzdGFydE1lbnVTdGF0ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICByZXN1bHRzJC5wdXNoKFN0YXJ0TWVudS5zZWxlY3ROZXh0SXRlbShzdGFydE1lbnVTdGF0ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhY3Rpb24tYSc6XG4gICAgICAgIGNhc2UgJ2NvbmZpcm0nOlxuICAgICAgICAgIGlmIChzdGFydE1lbnVTdGF0ZS5jdXJyZW50U3RhdGUuc3RhdGUgPT09ICdzdGFydC1nYW1lJykge1xuICAgICAgICAgICAgcmVzdWx0cyQucHVzaCh0aGlzLmJlZ2luTmV3R2FtZShncykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgcmVzdWx0cyQucHVzaChncy5mb3JjZURvd25Nb2RlID0gZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfTtcbiAgcHJvdG90eXBlLnJldmVhbFN0YXJ0U2NyZWVuID0gZnVuY3Rpb24oZ3Mpe1xuICAgIHZhciB0aW1lcnM7XG4gICAgdGltZXJzID0gZ3MudGltZXJzO1xuICAgIHRpbWVycy50aXRsZVJldmVhbFRpbWVyLnJlc2V0KCk7XG4gICAgcmV0dXJuIGdzLm1ldGFnYW1lU3RhdGUgPSAnc3RhcnQtbWVudSc7XG4gIH07XG4gIHByb3RvdHlwZS5zaG93RmFpbFNjcmVlbiA9IGZ1bmN0aW9uKGdzLCDOlHQpe1xuICAgIHZhciBpbnB1dFN0YXRlLCBmYWlsTWVudVN0YXRlLCByZWYkLCBrZXksIGFjdGlvbiwgcmVzdWx0cyQgPSBbXTtcbiAgICBpbnB1dFN0YXRlID0gZ3MuaW5wdXRTdGF0ZSwgZmFpbE1lbnVTdGF0ZSA9IGdzLmZhaWxNZW51U3RhdGU7XG4gICAgd2hpbGUgKGlucHV0U3RhdGUubGVuZ3RoKSB7XG4gICAgICByZWYkID0gaW5wdXRTdGF0ZS5zaGlmdCgpLCBrZXkgPSByZWYkLmtleSwgYWN0aW9uID0gcmVmJC5hY3Rpb247XG4gICAgICBpZiAoYWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgIHJlc3VsdHMkLnB1c2goRmFpbE1lbnUuc2VsZWN0UHJldkl0ZW0oZmFpbE1lbnVTdGF0ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICByZXN1bHRzJC5wdXNoKEZhaWxNZW51LnNlbGVjdE5leHRJdGVtKGZhaWxNZW51U3RhdGUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWN0aW9uLWEnOlxuICAgICAgICBjYXNlICdjb25maXJtJzpcbiAgICAgICAgICBsb2coZmFpbE1lbnVTdGF0ZS5jdXJyZW50U3RhdGUuc3RhdGUpO1xuICAgICAgICAgIGlmIChmYWlsTWVudVN0YXRlLmN1cnJlbnRTdGF0ZS5zdGF0ZSA9PT0gJ3Jlc3RhcnQnKSB7XG4gICAgICAgICAgICByZXN1bHRzJC5wdXNoKHRoaXMuYmVnaW5OZXdHYW1lKGdzKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmYWlsTWVudVN0YXRlLmN1cnJlbnRTdGF0ZS5zdGF0ZSA9PT0gJ2dvLWJhY2snKSB7XG4gICAgICAgICAgICByZXN1bHRzJC5wdXNoKHRoaXMucmV2ZWFsU3RhcnRTY3JlZW4oZ3MpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2FjdGlvbi1hJzpcbiAgICAgICAgY2FzZSAnY29uZmlybSc6XG4gICAgICAgICAgcmVzdWx0cyQucHVzaCh0aGlzLmJlZ2luTmV3R2FtZShncykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfTtcbiAgcHJvdG90eXBlLnJldmVhbEZhaWxTY3JlZW4gPSBmdW5jdGlvbihncyl7XG4gICAgZ3MudGltZXJzLmZhaWx1cmVSZXZlYWxUaW1lci5yZXNldCgpO1xuICAgIHJldHVybiBncy5tZXRhZ2FtZVN0YXRlID0gJ2ZhaWx1cmUnO1xuICB9O1xuICBwcm90b3R5cGUucnVuRnJhbWUgPSBmdW5jdGlvbihnYW1lU3RhdGUsIM6UdCl7XG4gICAgdmFyIG1ldGFnYW1lU3RhdGU7XG4gICAgbWV0YWdhbWVTdGF0ZSA9IGdhbWVTdGF0ZS5tZXRhZ2FtZVN0YXRlO1xuICAgIHRoaXMuY2xlYXJPbmVGcmFtZUZsYWdzKGdhbWVTdGF0ZSk7XG4gICAgc3dpdGNoIChtZXRhZ2FtZVN0YXRlKSB7XG4gICAgY2FzZSAnZmFpbHVyZSc6XG4gICAgICB0aGlzLnNob3dGYWlsU2NyZWVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdnYW1lJzpcbiAgICAgIHRoaXMuYWR2YW5jZUdhbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ25vLWdhbWUnOlxuICAgICAgdGhpcy5yZXZlYWxTdGFydFNjcmVlbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3RhcnQtbWVudSc6XG4gICAgICB0aGlzLnNob3dTdGFydFNjcmVlbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmVtb3ZlLWxpbmVzJzpcbiAgICAgIHRoaXMuYWR2YW5jZVJlbW92YWxBbmltYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmRlYnVnKCdVbmtub3duIG1ldGFnYW1lLXN0YXRlOicsIG1ldGFnYW1lU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ2FtZVN0YXRlO1xuICB9O1xuICByZXR1cm4gVGV0cmlzR2FtZTtcbn0oKSk7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGV0cmlzR2FtZTogVGV0cmlzR2FtZVxufTtcbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIHJlZiQsIGlkLCBsb2csIHdyYXAsIG1lbnVEYXRhLCBsaW1pdGVyLCBwcmltZUdhbWVTdGF0ZSwgY2hvb3NlT3B0aW9uLCBzZWxlY3RQcmV2SXRlbSwgc2VsZWN0TmV4dEl0ZW0sIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yZWYkID0gcmVxdWlyZSgnc3RkJyksIGlkID0gcmVmJC5pZCwgbG9nID0gcmVmJC5sb2csIHdyYXAgPSByZWYkLndyYXA7XG5tZW51RGF0YSA9IFtcbiAge1xuICAgIHN0YXRlOiAnc3RhcnQtZ2FtZScsXG4gICAgdGV4dDogXCJTdGFydCBHYW1lXCJcbiAgfSwge1xuICAgIHN0YXRlOiAnbm90aGluZycsXG4gICAgdGV4dDogXCJEb24ndCBTdGFydCBHYW1lXCJcbiAgfVxuXTtcbmxpbWl0ZXIgPSB3cmFwKDAsIG1lbnVEYXRhLmxlbmd0aCAtIDEpO1xub3V0JC5wcmltZUdhbWVTdGF0ZSA9IHByaW1lR2FtZVN0YXRlID0gZnVuY3Rpb24oZ2FtZXN0YXRlKXtcbiAgcmV0dXJuIGdhbWVzdGF0ZS5zdGFydE1lbnVTdGF0ZSA9IHtcbiAgICBjdXJyZW50SW5kZXg6IDAsXG4gICAgY3VycmVudFN0YXRlOiBtZW51RGF0YVswXSxcbiAgICBtZW51RGF0YTogbWVudURhdGFcbiAgfTtcbn07XG5vdXQkLmNob29zZU9wdGlvbiA9IGNob29zZU9wdGlvbiA9IGZ1bmN0aW9uKHNtcywgaW5kZXgpe1xuICBzbXMuY3VycmVudEluZGV4ID0gbGltaXRlcihpbmRleCk7XG4gIHJldHVybiBzbXMuY3VycmVudFN0YXRlID0gbWVudURhdGFbc21zLmN1cnJlbnRJbmRleF07XG59O1xub3V0JC5zZWxlY3RQcmV2SXRlbSA9IHNlbGVjdFByZXZJdGVtID0gZnVuY3Rpb24oc21zKXtcbiAgdmFyIGN1cnJlbnRJbmRleDtcbiAgY3VycmVudEluZGV4ID0gc21zLmN1cnJlbnRJbmRleDtcbiAgcmV0dXJuIGNob29zZU9wdGlvbihzbXMsIGN1cnJlbnRJbmRleCAtIDEpO1xufTtcbm91dCQuc2VsZWN0TmV4dEl0ZW0gPSBzZWxlY3ROZXh0SXRlbSA9IGZ1bmN0aW9uKHNtcyl7XG4gIHZhciBjdXJyZW50SW5kZXg7XG4gIGN1cnJlbnRJbmRleCA9IHNtcy5jdXJyZW50SW5kZXg7XG4gIHJldHVybiBjaG9vc2VPcHRpb24oc21zLCBjdXJyZW50SW5kZXggKyAxKTtcbn07IiwidmFyIHJlZiQsIGlkLCBsb2csIGZsb29yLCBhc2NpaVByb2dyZXNzQmFyLCBUaW1lciwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdzdGQnKSwgaWQgPSByZWYkLmlkLCBsb2cgPSByZWYkLmxvZywgZmxvb3IgPSByZWYkLmZsb29yO1xuYXNjaWlQcm9ncmVzc0JhciA9IGN1cnJ5JChmdW5jdGlvbihsZW4sIHZhbCwgbWF4KXtcbiAgdmFyIHZhbHVlQ2hhcnMsIGVtcHR5Q2hhcnM7XG4gIHZhbCA9IHZhbCA+IG1heCA/IG1heCA6IHZhbDtcbiAgdmFsdWVDaGFycyA9IGZsb29yKGxlbiAqIHZhbCAvIG1heCk7XG4gIGVtcHR5Q2hhcnMgPSBsZW4gLSB2YWx1ZUNoYXJzO1xuICByZXR1cm4gcmVwZWF0U3RyaW5nJChcIuKWklwiLCB2YWx1ZUNoYXJzKSArIHJlcGVhdFN0cmluZyQoXCItXCIsIGVtcHR5Q2hhcnMpO1xufSk7XG5vdXQkLlRpbWVyID0gVGltZXIgPSAoZnVuY3Rpb24oKXtcbiAgVGltZXIuZGlzcGxheU5hbWUgPSAnVGltZXInO1xuICB2YXIgYWxsVGltZXJzLCBwcm9nYmFyLCByZWYkLCBUSU1FUl9BQ1RJVkUsIFRJTUVSX0VYUElSRUQsIHByb3RvdHlwZSA9IFRpbWVyLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBUaW1lcjtcbiAgYWxsVGltZXJzID0gW107XG4gIHByb2diYXIgPSBhc2NpaVByb2dyZXNzQmFyKDIxKTtcbiAgcmVmJCA9IFswLCAxXSwgVElNRVJfQUNUSVZFID0gcmVmJFswXSwgVElNRVJfRVhQSVJFRCA9IHJlZiRbMV07XG4gIGZ1bmN0aW9uIFRpbWVyKHRhcmdldFRpbWUsIGJlZ2luKXtcbiAgICB0aGlzLnRhcmdldFRpbWUgPSB0YXJnZXRUaW1lICE9IG51bGwgPyB0YXJnZXRUaW1lIDogMTAwMDtcbiAgICBiZWdpbiA9PSBudWxsICYmIChiZWdpbiA9IGZhbHNlKTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcbiAgICB0aGlzLnN0YXRlID0gYmVnaW4gPyBUSU1FUl9BQ1RJVkUgOiBUSU1FUl9FWFBJUkVEO1xuICAgIHRoaXMuYWN0aXZlID0gYmVnaW47XG4gICAgdGhpcy5leHBpcmVkID0gIWJlZ2luO1xuICAgIGFsbFRpbWVycy5wdXNoKHRoaXMpO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdhY3RpdmUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IFRJTUVSX0FDVElWRTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnZXhwaXJlZCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gVElNRVJfRVhQSVJFRDtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAncHJvZ3Jlc3MnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWUgLyB0aGlzLnRhcmdldFRpbWU7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ3RpbWVUb0V4cGlyeScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXRUaW1lIC0gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oZXhwVGltZSl7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lID0gdGhpcy50YXJnZXRUaW1lIC0gZXhwVGltZTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH0pO1xuICBwcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ozpR0KXtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gzpR0O1xuICAgICAgaWYgKHRoaXMuY3VycmVudFRpbWUgPj0gdGhpcy50YXJnZXRUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID0gVElNRVJfRVhQSVJFRDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHRpbWUpe1xuICAgIHRpbWUgPT0gbnVsbCAmJiAodGltZSA9IHRoaXMudGFyZ2V0VGltZSk7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IDA7XG4gICAgdGhpcy50YXJnZXRUaW1lID0gdGltZTtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9IFRJTUVSX0FDVElWRTtcbiAgfTtcbiAgcHJvdG90eXBlLnJlc2V0V2l0aFJlbWFpbmRlciA9IGZ1bmN0aW9uKHRpbWUpe1xuICAgIHRpbWUgPT0gbnVsbCAmJiAodGltZSA9IHRoaXMudGFyZ2V0VGltZSk7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMuY3VycmVudFRpbWUgLSB0aW1lO1xuICAgIHRoaXMudGFyZ2V0VGltZSA9IHRpbWU7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPSBUSU1FUl9BQ1RJVkU7XG4gIH07XG4gIHByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9IFRJTUVSX0VYUElSRUQ7XG4gIH07XG4gIHByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gYWxsVGltZXJzLnNwbGljZShhbGxUaW1lcnMuaW5kZXhPZih0aGlzKSwgMSk7XG4gIH07XG4gIHByb3RvdHlwZS5ydW5Gb3IgPSBmdW5jdGlvbih0aW1lKXtcbiAgICB0aGlzLnRpbWVUb0V4cGlyeSA9IHRpbWU7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPSBUSU1FUl9BQ1RJVkU7XG4gIH07XG4gIHByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIFwiVElNRVI6IFwiICsgdGhpcy50YXJnZXRUaW1lICsgXCJcXG5TVEFURTogXCIgKyB0aGlzLnN0YXRlICsgXCIgKFwiICsgdGhpcy5hY3RpdmUgKyBcInxcIiArIHRoaXMuZXhwaXJlZCArIFwiKVxcblwiICsgcHJvZ2Jhcih0aGlzLmN1cnJlbnRUaW1lLCB0aGlzLnRhcmdldFRpbWUpO1xuICB9O1xuICBUaW1lci51cGRhdGVBbGwgPSBmdW5jdGlvbijOlHQpe1xuICAgIHJldHVybiBhbGxUaW1lcnMubWFwKGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiBpdC51cGRhdGUozpR0KTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFRpbWVyO1xufSgpKTtcbmZ1bmN0aW9uIHJlcGVhdFN0cmluZyQoc3RyLCBuKXtcbiAgZm9yICh2YXIgciA9ICcnOyBuID4gMDsgKG4gPj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByICs9IHN0cjtcbiAgcmV0dXJuIHI7XG59XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iXX0=
